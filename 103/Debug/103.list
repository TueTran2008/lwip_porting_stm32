
103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014dbc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d08  08014fa8  08014fa8  00024fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019cb0  08019cb0  00030080  2**0
                  CONTENTS
  4 .ARM          00000000  08019cb0  08019cb0  00030080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08019cb0  08019cb0  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019cb0  08019cb0  00029cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019cb4  08019cb4  00029cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08019cb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055cc  20000080  08019d38  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000564c  08019d38  0003564c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00078b66  00000000  00000000  000300a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000d2cf  00000000  00000000  000a8c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000379ba  00000000  00000000  000b5ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002578  00000000  00000000  000ed898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000032f8  00000000  00000000  000efe10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c1c8  00000000  00000000  000f3108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004bc78  00000000  00000000  0011f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bdea9  00000000  00000000  0016af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00228df1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007474  00000000  00000000  00228e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000080 	.word	0x20000080
 8000204:	00000000 	.word	0x00000000
 8000208:	08014f8c 	.word	0x08014f8c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000084 	.word	0x20000084
 8000224:	08014f8c 	.word	0x08014f8c

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <HAL_TIM_PeriodElapsedCallback>:
		HAL_Delay(1);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  if(htim->Instance == TIM2)
 8000b3c:	6803      	ldr	r3, [r0, #0]
 8000b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b42:	d004      	beq.n	8000b4e <HAL_TIM_PeriodElapsedCallback+0x16>
  	  Radio.IrqProcess();
  if(htim->Instance == TIM6)
 8000b44:	6822      	ldr	r2, [r4, #0]
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d004      	beq.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
	  Timer_Callback();
  }
}
 8000b4c:	bd10      	pop	{r4, pc}
  	  Radio.IrqProcess();
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	4798      	blx	r3
 8000b54:	e7f6      	b.n	8000b44 <HAL_TIM_PeriodElapsedCallback+0xc>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8000b56:	2108      	movs	r1, #8
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b5a:	f002 fcc9 	bl	80034f0 <HAL_GPIO_TogglePin>
	  Timer_Callback();
 8000b5e:	f000 fba9 	bl	80012b4 <Timer_Callback>
}
 8000b62:	e7f3      	b.n	8000b4c <HAL_TIM_PeriodElapsedCallback+0x14>
 8000b64:	40001000 	.word	0x40001000
 8000b68:	080150b8 	.word	0x080150b8
 8000b6c:	40011000 	.word	0x40011000

08000b70 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b70:	b508      	push	{r3, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  if(hadc->Instance == ADC1)
 8000b72:	6802      	ldr	r2, [r0, #0]
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_ADC_ConvCpltCallback+0x28>)
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d000      	beq.n	8000b7c <HAL_ADC_ConvCpltCallback+0xc>
  {
		  uint16_t temp = HAL_ADC_GetValue(&hadc1);
		  slot.rnd_num = ((( temp & 0x0003) ^ (SysTick->VAL))&(0x0F));
  }
}
 8000b7a:	bd08      	pop	{r3, pc}
		  uint16_t temp = HAL_ADC_GetValue(&hadc1);
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b7e:	f002 f937 	bl	8002df0 <HAL_ADC_GetValue>
		  slot.rnd_num = ((( temp & 0x0003) ^ (SysTick->VAL))&(0x0F));
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	f000 0303 	and.w	r3, r0, #3
 8000b8a:	4053      	eors	r3, r2
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_ADC_ConvCpltCallback+0x34>)
 8000b92:	7053      	strb	r3, [r2, #1]
}
 8000b94:	e7f1      	b.n	8000b7a <HAL_ADC_ConvCpltCallback+0xa>
 8000b96:	bf00      	nop
 8000b98:	40012400 	.word	0x40012400
 8000b9c:	20001204 	.word	0x20001204
 8000ba0:	e000e010 	.word	0xe000e010
 8000ba4:	20001200 	.word	0x20001200

08000ba8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba8:	b500      	push	{lr}
 8000baa:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bac:	2300      	movs	r3, #0
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bb4:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <MX_ADC1_Init+0x50>)
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <MX_ADC1_Init+0x54>)
 8000bb8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bba:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bbc:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bbe:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bc4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc6:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bcc:	f002 fa6c 	bl	80030a8 <HAL_ADC_Init>
 8000bd0:	b960      	cbnz	r0, 8000bec <MX_ADC1_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd6:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	a901      	add	r1, sp, #4
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_ADC1_Init+0x50>)
 8000be0:	f002 f990 	bl	8002f04 <HAL_ADC_ConfigChannel>
 8000be4:	b928      	cbnz	r0, 8000bf2 <MX_ADC1_Init+0x4a>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be6:	b005      	add	sp, #20
 8000be8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000bec:	f000 f982 	bl	8000ef4 <Error_Handler>
 8000bf0:	e7ef      	b.n	8000bd2 <MX_ADC1_Init+0x2a>
    Error_Handler();
 8000bf2:	f000 f97f 	bl	8000ef4 <Error_Handler>
}
 8000bf6:	e7f6      	b.n	8000be6 <MX_ADC1_Init+0x3e>
 8000bf8:	20001204 	.word	0x20001204
 8000bfc:	40012400 	.word	0x40012400

08000c00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c00:	b510      	push	{r4, lr}
 8000c02:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	2300      	movs	r3, #0
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	9303      	str	r3, [sp, #12]
 8000c0a:	9304      	str	r3, [sp, #16]
 8000c0c:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 8000c0e:	6802      	ldr	r2, [r0, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_ADC_MspInit+0x64>)
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d001      	beq.n	8000c1a <HAL_ADC_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c16:	b006      	add	sp, #24
 8000c18:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000c1e:	699a      	ldr	r2, [r3, #24]
 8000c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c24:	619a      	str	r2, [r3, #24]
 8000c26:	699a      	ldr	r2, [r3, #24]
 8000c28:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000c2c:	9200      	str	r2, [sp, #0]
 8000c2e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	699a      	ldr	r2, [r3, #24]
 8000c32:	f042 0204 	orr.w	r2, r2, #4
 8000c36:	619a      	str	r2, [r3, #24]
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	9301      	str	r3, [sp, #4]
 8000c40:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c42:	2302      	movs	r3, #2
 8000c44:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2403      	movs	r4, #3
 8000c48:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	a902      	add	r1, sp, #8
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <HAL_ADC_MspInit+0x68>)
 8000c4e:	f002 fb25 	bl	800329c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	4621      	mov	r1, r4
 8000c56:	2012      	movs	r0, #18
 8000c58:	f002 faca 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c5c:	2012      	movs	r0, #18
 8000c5e:	f002 faf9 	bl	8003254 <HAL_NVIC_EnableIRQ>
}
 8000c62:	e7d8      	b.n	8000c16 <HAL_ADC_MspInit+0x16>
 8000c64:	40012400 	.word	0x40012400
 8000c68:	40010800 	.word	0x40010800

08000c6c <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c70:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	2400      	movs	r4, #0
 8000c74:	9404      	str	r4, [sp, #16]
 8000c76:	9405      	str	r4, [sp, #20]
 8000c78:	9406      	str	r4, [sp, #24]
 8000c7a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7c:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <MX_GPIO_Init+0x128>)
 8000c7e:	699a      	ldr	r2, [r3, #24]
 8000c80:	f042 0220 	orr.w	r2, r2, #32
 8000c84:	619a      	str	r2, [r3, #24]
 8000c86:	699a      	ldr	r2, [r3, #24]
 8000c88:	f002 0220 	and.w	r2, r2, #32
 8000c8c:	9200      	str	r2, [sp, #0]
 8000c8e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c90:	699a      	ldr	r2, [r3, #24]
 8000c92:	f042 0210 	orr.w	r2, r2, #16
 8000c96:	619a      	str	r2, [r3, #24]
 8000c98:	699a      	ldr	r2, [r3, #24]
 8000c9a:	f002 0210 	and.w	r2, r2, #16
 8000c9e:	9201      	str	r2, [sp, #4]
 8000ca0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	699a      	ldr	r2, [r3, #24]
 8000ca4:	f042 0204 	orr.w	r2, r2, #4
 8000ca8:	619a      	str	r2, [r3, #24]
 8000caa:	699a      	ldr	r2, [r3, #24]
 8000cac:	f002 0204 	and.w	r2, r2, #4
 8000cb0:	9202      	str	r2, [sp, #8]
 8000cb2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb4:	699a      	ldr	r2, [r3, #24]
 8000cb6:	f042 0208 	orr.w	r2, r2, #8
 8000cba:	619a      	str	r2, [r3, #24]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	9303      	str	r3, [sp, #12]
 8000cc4:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7
 8000cc6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8000d9c <MX_GPIO_Init+0x130>
 8000cca:	4622      	mov	r2, r4
 8000ccc:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 8000cd0:	4648      	mov	r0, r9
 8000cd2:	f002 fc07 	bl	80034e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cd6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8000da0 <MX_GPIO_Init+0x134>
 8000cda:	4622      	mov	r2, r4
 8000cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce0:	4640      	mov	r0, r8
 8000ce2:	f002 fbff 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000ce6:	4e2c      	ldr	r6, [pc, #176]	; (8000d98 <MX_GPIO_Init+0x12c>)
 8000ce8:	4622      	mov	r2, r4
 8000cea:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000cee:	4630      	mov	r0, r6
 8000cf0:	f002 fbf8 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC5 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7
 8000cf4:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 8000cf8:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2501      	movs	r5, #1
 8000cfc:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2702      	movs	r7, #2
 8000d02:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	a904      	add	r1, sp, #16
 8000d06:	4648      	mov	r0, r9
 8000d08:	f002 fac8 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	a904      	add	r1, sp, #16
 8000d1a:	4640      	mov	r0, r8
 8000d1c:	f002 fabe 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d24:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	a904      	add	r1, sp, #16
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f002 fab4 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d38:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	a904      	add	r1, sp, #16
 8000d40:	4630      	mov	r0, r6
 8000d42:	f002 faab 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d4a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	a904      	add	r1, sp, #16
 8000d54:	4630      	mov	r0, r6
 8000d56:	f002 faa1 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d5e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d62:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	a904      	add	r1, sp, #16
 8000d66:	4630      	mov	r0, r6
 8000d68:	f002 fa98 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d70:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d74:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	a904      	add	r1, sp, #16
 8000d78:	4648      	mov	r0, r9
 8000d7a:	f002 fa8f 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d7e:	2330      	movs	r3, #48	; 0x30
 8000d80:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	a904      	add	r1, sp, #16
 8000d88:	4640      	mov	r0, r8
 8000d8a:	f002 fa87 	bl	800329c <HAL_GPIO_Init>

}
 8000d8e:	b009      	add	sp, #36	; 0x24
 8000d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40011000 	.word	0x40011000
 8000da0:	40010c00 	.word	0x40010c00

08000da4 <Toggle>:




void Toggle()
{
 8000da4:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000daa:	4802      	ldr	r0, [pc, #8]	; (8000db4 <Toggle+0x10>)
 8000dac:	f002 fba0 	bl	80034f0 <HAL_GPIO_TogglePin>
	 //User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1, "ATV1\r\n", strlen("ATV1\r\n"));
	//printf("HelloTue");

}
 8000db0:	bd08      	pop	{r3, pc}
 8000db2:	bf00      	nop
 8000db4:	40011000 	.word	0x40011000

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b500      	push	{lr}
 8000dba:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8000dc0:	9311      	str	r3, [sp, #68]	; 0x44
 8000dc2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	9307      	str	r3, [sp, #28]
 8000dc6:	9308      	str	r3, [sp, #32]
 8000dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8000dca:	930a      	str	r3, [sp, #40]	; 0x28
 8000dcc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	9303      	str	r3, [sp, #12]
 8000dd4:	9304      	str	r3, [sp, #16]
 8000dd6:	9305      	str	r3, [sp, #20]
 8000dd8:	9306      	str	r3, [sp, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dda:	2101      	movs	r1, #1
 8000ddc:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000de2:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000de4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de6:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de8:	2302      	movs	r3, #2
 8000dea:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dec:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000df2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	a80c      	add	r0, sp, #48	; 0x30
 8000df6:	f002 fb85 	bl	8003504 <HAL_RCC_OscConfig>
 8000dfa:	b9c8      	cbnz	r0, 8000e30 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e00:	2102      	movs	r1, #2
 8000e02:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0e:	930b      	str	r3, [sp, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e10:	a807      	add	r0, sp, #28
 8000e12:	f002 fdc3 	bl	800399c <HAL_RCC_ClockConfig>
 8000e16:	b968      	cbnz	r0, 8000e34 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e20:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e22:	a801      	add	r0, sp, #4
 8000e24:	f002 fe92 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	b930      	cbnz	r0, 8000e38 <SystemClock_Config+0x80>
  {
    Error_Handler();
  }
}
 8000e2a:	b017      	add	sp, #92	; 0x5c
 8000e2c:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <SystemClock_Config+0x7a>
 8000e34:	b672      	cpsid	i
 8000e36:	e7fe      	b.n	8000e36 <SystemClock_Config+0x7e>
 8000e38:	b672      	cpsid	i
 8000e3a:	e7fe      	b.n	8000e3a <SystemClock_Config+0x82>

08000e3c <main>:
{
 8000e3c:	b500      	push	{lr}
 8000e3e:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8000e40:	f001 ff9e 	bl	8002d80 <HAL_Init>
  SystemClock_Config();
 8000e44:	f7ff ffb8 	bl	8000db8 <SystemClock_Config>
  MX_GPIO_Init();
 8000e48:	f7ff ff10 	bl	8000c6c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e4c:	f000 f854 	bl	8000ef8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e50:	f000 f91c 	bl	800108c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e54:	f7ff fea8 	bl	8000ba8 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000e58:	f000 f950 	bl	80010fc <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000e5c:	f000 f9b0 	bl	80011c0 <MX_USART2_UART_Init>
  button_init(&btn1, GPIOC, GPIO_PIN_10, BUTTON_ACTIVE_LOW, 1);
 8000e60:	2401      	movs	r4, #1
 8000e62:	9400      	str	r4, [sp, #0]
 8000e64:	4623      	mov	r3, r4
 8000e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6a:	491e      	ldr	r1, [pc, #120]	; (8000ee4 <main+0xa8>)
 8000e6c:	a80b      	add	r0, sp, #44	; 0x2c
 8000e6e:	f001 fc7b 	bl	8002768 <button_init>
  Button_ResetEvent(1);
 8000e72:	4620      	mov	r0, r4
 8000e74:	f001 fc68 	bl	8002748 <Button_ResetEvent>
  Button_AddEvent(1, BUTTON_PRESSED_EVENT, Toggle);
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <main+0xac>)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f001 fc59 	bl	8002734 <Button_AddEvent>
    ip_addr_t dns_server_0 = IPADDR4_INIT_BYTES(8, 8, 8, 8);
 8000e82:	f04f 3308 	mov.w	r3, #134744072	; 0x8080808
 8000e86:	9303      	str	r3, [sp, #12]
    ip_addr_t dns_server_1 = IPADDR4_INIT_BYTES(1, 1, 1, 1);
 8000e88:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8000e8c:	9304      	str	r3, [sp, #16]
    dns_setserver(0, &dns_server_0);
 8000e8e:	a903      	add	r1, sp, #12
 8000e90:	2000      	movs	r0, #0
 8000e92:	f007 f87f 	bl	8007f94 <dns_setserver>
    dns_setserver(1, &dns_server_1);
 8000e96:	a904      	add	r1, sp, #16
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f007 f87b 	bl	8007f94 <dns_setserver>
    dns_init();
 8000e9e:	f007 f877 	bl	8007f90 <dns_init>
  lwip_init();
 8000ea2:	f007 fb64 	bl	800856e <lwip_init>
  gsm_init_hw();
 8000ea6:	f004 fbe7 	bl	8005678 <gsm_init_hw>
  mqtt_client_cfg_t test_client =
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9307      	str	r3, [sp, #28]
 8000eae:	9309      	str	r3, [sp, #36]	; 0x24
 8000eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8000eb2:	2378      	movs	r3, #120	; 0x78
 8000eb4:	9305      	str	r3, [sp, #20]
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <main+0xb0>)
 8000eb8:	9306      	str	r3, [sp, #24]
 8000eba:	f240 735b 	movw	r3, #1883	; 0x75b
 8000ebe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <main+0xb4>)
 8000ec4:	9308      	str	r3, [sp, #32]
  mqtt_client_initialize(&test_client);
 8000ec6:	a805      	add	r0, sp, #20
 8000ec8:	f005 f9e0 	bl	800628c <mqtt_client_initialize>
	  gsm_mnr_task(NULL);
 8000ecc:	2400      	movs	r4, #0
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f004 fbc2 	bl	8005658 <gsm_mnr_task>
	  mqtt_client_polling_task(NULL);
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f005 f829 	bl	8005f2c <mqtt_client_polling_task>
	  button_check(&btn1);
 8000eda:	a80b      	add	r0, sp, #44	; 0x2c
 8000edc:	f001 fc52 	bl	8002784 <button_check>
  while (1)
 8000ee0:	e7f5      	b.n	8000ece <main+0x92>
 8000ee2:	bf00      	nop
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	08000da5 	.word	0x08000da5
 8000eec:	08014fc4 	.word	0x08014fc4
 8000ef0:	08014fd8 	.word	0x08014fd8

08000ef4 <Error_Handler>:
 8000ef4:	b672      	cpsid	i
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <Error_Handler+0x2>

08000ef8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ef8:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <MX_SPI2_Init+0x3c>)
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_SPI2_Init+0x40>)
 8000efe:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f00:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f04:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f06:	2300      	movs	r3, #0
 8000f08:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f0a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f14:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f16:	2220      	movs	r2, #32
 8000f18:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f20:	230a      	movs	r3, #10
 8000f22:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f24:	f002 ff1c 	bl	8003d60 <HAL_SPI_Init>
 8000f28:	b900      	cbnz	r0, 8000f2c <MX_SPI2_Init+0x34>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f2a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f2c:	f7ff ffe2 	bl	8000ef4 <Error_Handler>
}
 8000f30:	e7fb      	b.n	8000f2a <MX_SPI2_Init+0x32>
 8000f32:	bf00      	nop
 8000f34:	20001234 	.word	0x20001234
 8000f38:	40003800 	.word	0x40003800

08000f3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	2300      	movs	r3, #0
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	9303      	str	r3, [sp, #12]
 8000f46:	9304      	str	r3, [sp, #16]
 8000f48:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI2)
 8000f4a:	6802      	ldr	r2, [r0, #0]
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_SPI_MspInit+0x70>)
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d001      	beq.n	8000f56 <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f52:	b006      	add	sp, #24
 8000f54:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f56:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8000f5a:	69da      	ldr	r2, [r3, #28]
 8000f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f60:	61da      	str	r2, [r3, #28]
 8000f62:	69da      	ldr	r2, [r3, #28]
 8000f64:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f68:	9200      	str	r2, [sp, #0]
 8000f6a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	699a      	ldr	r2, [r3, #24]
 8000f6e:	f042 0208 	orr.w	r2, r2, #8
 8000f72:	619a      	str	r2, [r3, #24]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f7e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f82:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	4c08      	ldr	r4, [pc, #32]	; (8000fb0 <HAL_SPI_MspInit+0x74>)
 8000f8e:	a902      	add	r1, sp, #8
 8000f90:	4620      	mov	r0, r4
 8000f92:	f002 f983 	bl	800329c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	a902      	add	r1, sp, #8
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f002 f979 	bl	800329c <HAL_GPIO_Init>
}
 8000faa:	e7d2      	b.n	8000f52 <HAL_SPI_MspInit+0x16>
 8000fac:	40003800 	.word	0x40003800
 8000fb0:	40010c00 	.word	0x40010c00

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_MspInit+0x3c>)
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	f042 0201 	orr.w	r2, r2, #1
 8000fbe:	619a      	str	r2, [r3, #24]
 8000fc0:	699a      	ldr	r2, [r3, #24]
 8000fc2:	f002 0201 	and.w	r2, r2, #1
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	69da      	ldr	r2, [r3, #28]
 8000fcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fd0:	61da      	str	r2, [r3, #28]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <HAL_MspInit+0x40>)
 8000fde:	6853      	ldr	r3, [r2, #4]
 8000fe0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	b002      	add	sp, #8
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000

08000ff8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler>

08000ffa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler>

08000ffc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler>

08000ffe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <BusFault_Handler>

08001000 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler>

08001002 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100a:	f001 fecb 	bl	8002da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100e:	bd08      	pop	{r3, pc}

08001010 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001010:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001012:	4802      	ldr	r0, [pc, #8]	; (800101c <ADC1_2_IRQHandler+0xc>)
 8001014:	f001 fef0 	bl	8002df8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001018:	bd08      	pop	{r3, pc}
 800101a:	bf00      	nop
 800101c:	20001204 	.word	0x20001204

08001020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001020:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001022:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM2_IRQHandler+0xc>)
 8001024:	f003 f810 	bl	8004048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001028:	bd08      	pop	{r3, pc}
 800102a:	bf00      	nop
 800102c:	200012d4 	.word	0x200012d4

08001030 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001030:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001032:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM6_IRQHandler+0xc>)
 8001034:	f003 f808 	bl	8004048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001038:	bd08      	pop	{r3, pc}
 800103a:	bf00      	nop
 800103c:	2000128c 	.word	0x2000128c

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001042:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <_sbrk+0x34>)
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	b152      	cbz	r2, 800105e <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <_sbrk+0x34>)
 800104a:	6810      	ldr	r0, [r2, #0]
 800104c:	4403      	add	r3, r0
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <_sbrk+0x38>)
 8001050:	490a      	ldr	r1, [pc, #40]	; (800107c <_sbrk+0x3c>)
 8001052:	1a52      	subs	r2, r2, r1
 8001054:	4293      	cmp	r3, r2
 8001056:	d806      	bhi.n	8001066 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <_sbrk+0x34>)
 800105a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800105c:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <_sbrk+0x34>)
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <_sbrk+0x40>)
 8001062:	6011      	str	r1, [r2, #0]
 8001064:	e7f0      	b.n	8001048 <_sbrk+0x8>
    errno = ENOMEM;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <_sbrk+0x44>)
 8001068:	220c      	movs	r2, #12
 800106a:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2000009c 	.word	0x2000009c
 8001078:	20010000 	.word	0x20010000
 800107c:	00000400 	.word	0x00000400
 8001080:	20005650 	.word	0x20005650
 8001084:	2000563c 	.word	0x2000563c

08001088 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	4770      	bx	lr
	...

0800108c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800108c:	b500      	push	{lr}
 800108e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001090:	2300      	movs	r3, #0
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	9303      	str	r3, [sp, #12]
 8001096:	9304      	str	r3, [sp, #16]
 8001098:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109e:	4816      	ldr	r0, [pc, #88]	; (80010f8 <MX_TIM2_Init+0x6c>)
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 71;
 80010a6:	2247      	movs	r2, #71	; 0x47
 80010a8:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 999;
 80010ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b8:	f003 f8f0 	bl	800429c <HAL_TIM_Base_Init>
 80010bc:	b990      	cbnz	r0, 80010e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c4:	a902      	add	r1, sp, #8
 80010c6:	480c      	ldr	r0, [pc, #48]	; (80010f8 <MX_TIM2_Init+0x6c>)
 80010c8:	f003 f91f 	bl	800430a <HAL_TIM_ConfigClockSource>
 80010cc:	b968      	cbnz	r0, 80010ea <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d4:	4669      	mov	r1, sp
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <MX_TIM2_Init+0x6c>)
 80010d8:	f003 f9ba 	bl	8004450 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	b940      	cbnz	r0, 80010f0 <MX_TIM2_Init+0x64>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010de:	b007      	add	sp, #28
 80010e0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010e4:	f7ff ff06 	bl	8000ef4 <Error_Handler>
 80010e8:	e7e9      	b.n	80010be <MX_TIM2_Init+0x32>
    Error_Handler();
 80010ea:	f7ff ff03 	bl	8000ef4 <Error_Handler>
 80010ee:	e7ee      	b.n	80010ce <MX_TIM2_Init+0x42>
    Error_Handler();
 80010f0:	f7ff ff00 	bl	8000ef4 <Error_Handler>
}
 80010f4:	e7f3      	b.n	80010de <MX_TIM2_Init+0x52>
 80010f6:	bf00      	nop
 80010f8:	200012d4 	.word	0x200012d4

080010fc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010fc:	b500      	push	{lr}
 80010fe:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	2300      	movs	r3, #0
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001106:	4810      	ldr	r0, [pc, #64]	; (8001148 <MX_TIM6_Init+0x4c>)
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <MX_TIM6_Init+0x50>)
 800110a:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 719;
 800110c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001110:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 31000;
 8001114:	f647 1318 	movw	r3, #31000	; 0x7918
 8001118:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800111e:	f003 f8bd 	bl	800429c <HAL_TIM_Base_Init>
 8001122:	b950      	cbnz	r0, 800113a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800112a:	4669      	mov	r1, sp
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_TIM6_Init+0x4c>)
 800112e:	f003 f98f 	bl	8004450 <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	b928      	cbnz	r0, 8001140 <MX_TIM6_Init+0x44>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001134:	b003      	add	sp, #12
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800113a:	f7ff fedb 	bl	8000ef4 <Error_Handler>
 800113e:	e7f1      	b.n	8001124 <MX_TIM6_Init+0x28>
    Error_Handler();
 8001140:	f7ff fed8 	bl	8000ef4 <Error_Handler>
}
 8001144:	e7f6      	b.n	8001134 <MX_TIM6_Init+0x38>
 8001146:	bf00      	nop
 8001148:	2000128c 	.word	0x2000128c
 800114c:	40001000 	.word	0x40001000

08001150 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001150:	b500      	push	{lr}
 8001152:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM2)
 8001154:	6803      	ldr	r3, [r0, #0]
 8001156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800115a:	d005      	beq.n	8001168 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 800115c:	4a16      	ldr	r2, [pc, #88]	; (80011b8 <HAL_TIM_Base_MspInit+0x68>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d016      	beq.n	8001190 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001162:	b003      	add	sp, #12
 8001164:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001168:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800116c:	69da      	ldr	r2, [r3, #28]
 800116e:	f042 0201 	orr.w	r2, r2, #1
 8001172:	61da      	str	r2, [r3, #28]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2102      	movs	r1, #2
 8001182:	201c      	movs	r0, #28
 8001184:	f002 f834 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001188:	201c      	movs	r0, #28
 800118a:	f002 f863 	bl	8003254 <HAL_NVIC_EnableIRQ>
 800118e:	e7e8      	b.n	8001162 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_TIM_Base_MspInit+0x6c>)
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	f042 0210 	orr.w	r2, r2, #16
 8001198:	61da      	str	r2, [r3, #28]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2101      	movs	r1, #1
 80011a8:	2036      	movs	r0, #54	; 0x36
 80011aa:	f002 f821 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80011ae:	2036      	movs	r0, #54	; 0x36
 80011b0:	f002 f850 	bl	8003254 <HAL_NVIC_EnableIRQ>
}
 80011b4:	e7d5      	b.n	8001162 <HAL_TIM_Base_MspInit+0x12>
 80011b6:	bf00      	nop
 80011b8:	40001000 	.word	0x40001000
 80011bc:	40021000 	.word	0x40021000

080011c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011c0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <MX_USART2_UART_Init+0x2c>)
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_USART2_UART_Init+0x30>)
 80011c6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80011c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011cc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	2300      	movs	r3, #0
 80011d0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d6:	220c      	movs	r2, #12
 80011d8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011de:	f003 f9b9 	bl	8004554 <HAL_UART_Init>
 80011e2:	b900      	cbnz	r0, 80011e6 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011e6:	f7ff fe85 	bl	8000ef4 <Error_Handler>
}
 80011ea:	e7fb      	b.n	80011e4 <MX_USART2_UART_Init+0x24>
 80011ec:	2000131c 	.word	0x2000131c
 80011f0:	40004400 	.word	0x40004400

080011f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f4:	b510      	push	{r4, lr}
 80011f6:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	2300      	movs	r3, #0
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	9303      	str	r3, [sp, #12]
 80011fe:	9304      	str	r3, [sp, #16]
 8001200:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART2)
 8001202:	6802      	ldr	r2, [r0, #0]
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_UART_MspInit+0x6c>)
 8001206:	429a      	cmp	r2, r3
 8001208:	d001      	beq.n	800120e <HAL_UART_MspInit+0x1a>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800120a:	b006      	add	sp, #24
 800120c:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800120e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001212:	69da      	ldr	r2, [r3, #28]
 8001214:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001218:	61da      	str	r2, [r3, #28]
 800121a:	69da      	ldr	r2, [r3, #28]
 800121c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001220:	9200      	str	r2, [sp, #0]
 8001222:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	f042 0204 	orr.w	r2, r2, #4
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001236:	2304      	movs	r3, #4
 8001238:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	4c08      	ldr	r4, [pc, #32]	; (8001264 <HAL_UART_MspInit+0x70>)
 8001244:	a902      	add	r1, sp, #8
 8001246:	4620      	mov	r0, r4
 8001248:	f002 f828 	bl	800329c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800124c:	2308      	movs	r3, #8
 800124e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	a902      	add	r1, sp, #8
 8001258:	4620      	mov	r0, r4
 800125a:	f002 f81f 	bl	800329c <HAL_GPIO_Init>
}
 800125e:	e7d4      	b.n	800120a <HAL_UART_MspInit+0x16>
 8001260:	40004400 	.word	0x40004400
 8001264:	40010800 	.word	0x40010800

08001268 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	; (80012a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	; (80012ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800128e:	f7ff fefb 	bl	8001088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001292:	f013 f84b 	bl	801432c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001296:	f7ff fdd1 	bl	8000e3c <main>
  bx lr
 800129a:	4770      	bx	lr
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012a4:	08019cb8 	.word	0x08019cb8
  ldr r2, =_sbss
 80012a8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012ac:	2000564c 	.word	0x2000564c

080012b0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC3_IRQHandler>
	...

080012b4 <Timer_Callback>:



void Timer_Callback()
{
	if(slot.synchro_enable == false)
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <Timer_Callback+0x14>)
 80012b6:	789b      	ldrb	r3, [r3, #2]
 80012b8:	f013 0f01 	tst.w	r3, #1
 80012bc:	d103      	bne.n	80012c6 <Timer_Callback+0x12>
	{
		slot.timer++;
 80012be:	4a02      	ldr	r2, [pc, #8]	; (80012c8 <Timer_Callback+0x14>)
 80012c0:	7813      	ldrb	r3, [r2, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	7013      	strb	r3, [r2, #0]
	}
}
 80012c6:	4770      	bx	lr
 80012c8:	20001200 	.word	0x20001200

080012cc <DelayMs>:

#include "my_delay.h"

void DelayMs(uint32_t delayMS){
 80012cc:	b508      	push	{r3, lr}
	HAL_Delay(1000*delayMS);
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fb03 f000 	mul.w	r0, r3, r0
 80012d6:	f001 fd77 	bl	8002dc8 <HAL_Delay>
}
 80012da:	bd08      	pop	{r3, pc}

080012dc <RadioGetFskBandwidthRegValue>:
 */
static uint8_t RadioGetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80012dc:	b150      	cbz	r0, 80012f4 <RadioGetFskBandwidthRegValue+0x18>
 80012de:	4601      	mov	r1, r0
 80012e0:	2301      	movs	r3, #1
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <RadioGetFskBandwidthRegValue+0x50>)
 80012e4:	e00b      	b.n	80012fe <RadioGetFskBandwidthRegValue+0x22>
        {
            return FskBandwidths[i+1].RegValue;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <RadioGetFskBandwidthRegValue+0x50>)
 80012e8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80012ec:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 80012ee:	bc10      	pop	{r4}
 80012f0:	4770      	bx	lr
    while( 1 );
 80012f2:	e7fe      	b.n	80012f2 <RadioGetFskBandwidthRegValue+0x16>
        return( 0x1F );
 80012f4:	201f      	movs	r0, #31
}
 80012f6:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80012f8:	3301      	adds	r3, #1
 80012fa:	2b16      	cmp	r3, #22
 80012fc:	d015      	beq.n	800132a <RadioGetFskBandwidthRegValue+0x4e>
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80012fe:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8001302:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8001306:	4288      	cmp	r0, r1
 8001308:	d8f6      	bhi.n	80012f8 <RadioGetFskBandwidthRegValue+0x1c>
{
 800130a:	b410      	push	{r4}
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800130c:	4618      	mov	r0, r3
 800130e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8001312:	428c      	cmp	r4, r1
 8001314:	d8e7      	bhi.n	80012e6 <RadioGetFskBandwidthRegValue+0xa>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8001316:	3301      	adds	r3, #1
 8001318:	2b16      	cmp	r3, #22
 800131a:	d0ea      	beq.n	80012f2 <RadioGetFskBandwidthRegValue+0x16>
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800131c:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8001320:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8001324:	4288      	cmp	r0, r1
 8001326:	d8f6      	bhi.n	8001316 <RadioGetFskBandwidthRegValue+0x3a>
 8001328:	e7f0      	b.n	800130c <RadioGetFskBandwidthRegValue+0x30>
    while( 1 );
 800132a:	e7fe      	b.n	800132a <RadioGetFskBandwidthRegValue+0x4e>
 800132c:	08015008 	.word	0x08015008

08001330 <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8001330:	2001      	movs	r0, #1
 8001332:	4770      	bx	lr

08001334 <RadioGetWakeupTime>:
}

uint32_t RadioGetWakeupTime( void )
{
    return( RADIO_TCXO_SETUP_TIME + RADIO_WAKEUP_TIME );
}
 8001334:	2003      	movs	r0, #3
 8001336:	4770      	bx	lr

08001338 <RadioOnDioIrq>:
    }
}

void RadioOnDioIrq( void )
{
    IrqFired = true;
 8001338:	4b01      	ldr	r3, [pc, #4]	; (8001340 <RadioOnDioIrq+0x8>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
}
 800133e:	4770      	bx	lr
 8001340:	200000a0 	.word	0x200000a0

08001344 <RadioStandby>:
{
 8001344:	b508      	push	{r3, lr}
    SX126xSetStandby( STDBY_RC );
 8001346:	2000      	movs	r0, #0
 8001348:	f000 fe76 	bl	8002038 <SX126xSetStandby>
}
 800134c:	bd08      	pop	{r3, pc}
	...

08001350 <RadioInit>:
{
 8001350:	b508      	push	{r3, lr}
    RadioEvents = events;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <RadioInit+0x40>)
 8001354:	6018      	str	r0, [r3, #0]
    SX126xInit( RadioOnDioIrq );
 8001356:	480f      	ldr	r0, [pc, #60]	; (8001394 <RadioInit+0x44>)
 8001358:	f000 ffc8 	bl	80022ec <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 800135c:	2000      	movs	r0, #0
 800135e:	f000 fe6b 	bl	8002038 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 8001362:	2001      	movs	r0, #1
 8001364:	f000 ff21 	bl	80021aa <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 8001368:	2100      	movs	r1, #0
 800136a:	4608      	mov	r0, r1
 800136c:	f001 f930 	bl	80025d0 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 8001370:	2104      	movs	r1, #4
 8001372:	2000      	movs	r0, #0
 8001374:	f001 f816 	bl	80023a4 <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8001378:	2300      	movs	r3, #0
 800137a:	461a      	mov	r2, r3
 800137c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001380:	4608      	mov	r0, r1
 8001382:	f000 ff78 	bl	8002276 <SX126xSetDioIrqParams>
    IrqFired = false;
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <RadioInit+0x48>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
}
 800138c:	bd08      	pop	{r3, pc}
 800138e:	bf00      	nop
 8001390:	200000a4 	.word	0x200000a4
 8001394:	08001339 	.word	0x08001339
 8001398:	200000a0 	.word	0x200000a0

0800139c <RadioGetStatus>:
{
 800139c:	b508      	push	{r3, lr}
    switch( SX126xGetOperatingMode( ) )
 800139e:	f000 fdc9 	bl	8001f34 <SX126xGetOperatingMode>
 80013a2:	2804      	cmp	r0, #4
 80013a4:	d005      	beq.n	80013b2 <RadioGetStatus+0x16>
 80013a6:	2805      	cmp	r0, #5
 80013a8:	d005      	beq.n	80013b6 <RadioGetStatus+0x1a>
            return RF_IDLE;
 80013aa:	2803      	cmp	r0, #3
 80013ac:	bf18      	it	ne
 80013ae:	2000      	movne	r0, #0
}
 80013b0:	bd08      	pop	{r3, pc}
            return RF_TX_RUNNING;
 80013b2:	2002      	movs	r0, #2
 80013b4:	e7fc      	b.n	80013b0 <RadioGetStatus+0x14>
    switch( SX126xGetOperatingMode( ) )
 80013b6:	2001      	movs	r0, #1
 80013b8:	e7fa      	b.n	80013b0 <RadioGetStatus+0x14>

080013ba <RadioSetChannel>:
{
 80013ba:	b508      	push	{r3, lr}
    SX126xSetRfFrequency( freq );
 80013bc:	f000 ffa8 	bl	8002310 <SX126xSetRfFrequency>
}
 80013c0:	bd08      	pop	{r3, pc}
	...

080013c4 <RadioRx>:
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80013c8:	2300      	movs	r3, #0
 80013ca:	461a      	mov	r2, r3
 80013cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013d0:	4608      	mov	r0, r1
 80013d2:	f000 ff50 	bl	8002276 <SX126xSetDioIrqParams>
    if( RxContinuous == true )
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <RadioRx+0x2c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b123      	cbz	r3, 80013e6 <RadioRx+0x22>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 80013dc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80013e0:	f000 fe62 	bl	80020a8 <SX126xSetRx>
}
 80013e4:	bd10      	pop	{r4, pc}
        SX126xSetRx( timeout << 6 );
 80013e6:	01a0      	lsls	r0, r4, #6
 80013e8:	f000 fe5e 	bl	80020a8 <SX126xSetRx>
}
 80013ec:	e7fa      	b.n	80013e4 <RadioRx+0x20>
 80013ee:	bf00      	nop
 80013f0:	20000005 	.word	0x20000005

080013f4 <RadioRssi>:
{
 80013f4:	b508      	push	{r3, lr}
    return SX126xGetRssiInst( );
 80013f6:	f001 f8f9 	bl	80025ec <SX126xGetRssiInst>
}
 80013fa:	b200      	sxth	r0, r0
 80013fc:	bd08      	pop	{r3, pc}
	...

08001400 <RadioSetMaxPayloadLength>:
{
 8001400:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8001402:	2801      	cmp	r0, #1
 8001404:	d004      	beq.n	8001410 <RadioSetMaxPayloadLength+0x10>
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <RadioSetMaxPayloadLength+0x2c>)
 8001408:	79db      	ldrb	r3, [r3, #7]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d007      	beq.n	800141e <RadioSetMaxPayloadLength+0x1e>
}
 800140e:	bd08      	pop	{r3, pc}
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <RadioSetMaxPayloadLength+0x30>)
 8001412:	7019      	strb	r1, [r3, #0]
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <RadioSetMaxPayloadLength+0x2c>)
 8001416:	73c1      	strb	r1, [r0, #15]
        SX126xSetPacketParams( &SX126x.PacketParams );
 8001418:	f001 f874 	bl	8002504 <SX126xSetPacketParams>
 800141c:	e7f7      	b.n	800140e <RadioSetMaxPayloadLength+0xe>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <RadioSetMaxPayloadLength+0x30>)
 8001420:	7019      	strb	r1, [r3, #0]
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <RadioSetMaxPayloadLength+0x2c>)
 8001424:	7201      	strb	r1, [r0, #8]
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001426:	f001 f86d 	bl	8002504 <SX126xSetPacketParams>
}
 800142a:	e7f0      	b.n	800140e <RadioSetMaxPayloadLength+0xe>
 800142c:	20001360 	.word	0x20001360
 8001430:	20000004 	.word	0x20000004
 8001434:	00000000 	.word	0x00000000

08001438 <RadioTimeOnAir>:
{
 8001438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800143c:	460c      	mov	r4, r1
    switch( modem )
 800143e:	b120      	cbz	r0, 800144a <RadioTimeOnAir+0x12>
 8001440:	2801      	cmp	r0, #1
 8001442:	d041      	beq.n	80014c8 <RadioTimeOnAir+0x90>
 8001444:	2000      	movs	r0, #0
}
 8001446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 800144a:	4d5b      	ldr	r5, [pc, #364]	; (80015b8 <RadioTimeOnAir+0x180>)
 800144c:	7968      	ldrb	r0, [r5, #5]
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 800144e:	886b      	ldrh	r3, [r5, #2]
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001450:	eb03 00d0 	add.w	r0, r3, r0, lsr #3
 8001454:	f7ff f84c 	bl	80004f0 <__aeabi_i2d>
                                     ( ( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH ) ? 0.0 : 1.0 ) +
 8001458:	79eb      	ldrb	r3, [r5, #7]
 800145a:	b393      	cbz	r3, 80014c2 <RadioTimeOnAir+0x8a>
 800145c:	2200      	movs	r2, #0
 800145e:	4b57      	ldr	r3, [pc, #348]	; (80015bc <RadioTimeOnAir+0x184>)
                                     ( SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3 ) +
 8001460:	f7fe fefa 	bl	8000258 <__adddf3>
 8001464:	4606      	mov	r6, r0
 8001466:	460f      	mov	r7, r1
                                     ( ( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH ) ? 0.0 : 1.0 ) +
 8001468:	4620      	mov	r0, r4
 800146a:	f7ff f841 	bl	80004f0 <__aeabi_i2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4630      	mov	r0, r6
 8001474:	4639      	mov	r1, r7
 8001476:	f7fe feef 	bl	8000258 <__adddf3>
                                     ( ( SX126x.PacketParams.Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES ) ? 2.0 : 0 ) ) /
 800147a:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <RadioTimeOnAir+0x180>)
 800147c:	7a5b      	ldrb	r3, [r3, #9]
 800147e:	2b02      	cmp	r3, #2
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	bf14      	ite	ne
 8001486:	2300      	movne	r3, #0
 8001488:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
                                     pktLen +
 800148c:	f7fe fee4 	bl	8000258 <__adddf3>
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 8001490:	2200      	movs	r2, #0
 8001492:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <RadioTimeOnAir+0x188>)
 8001494:	f7ff f896 	bl	80005c4 <__aeabi_dmul>
 8001498:	4604      	mov	r4, r0
 800149a:	460d      	mov	r5, r1
                                     SX126x.ModulationParams.Params.Gfsk.BitRate ) * 1e3 );
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <RadioTimeOnAir+0x180>)
                                     ( ( SX126x.PacketParams.Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES ) ? 2.0 : 0 ) ) /
 800149e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80014a0:	f7ff f816 	bl	80004d0 <__aeabi_ui2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4620      	mov	r0, r4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f7ff f9b4 	bl	8000818 <__aeabi_ddiv>
           airTime = rint( ( 8 * ( SX126x.PacketParams.Params.Gfsk.PreambleLength +
 80014b0:	2200      	movs	r2, #0
 80014b2:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <RadioTimeOnAir+0x18c>)
 80014b4:	f7ff f886 	bl	80005c4 <__aeabi_dmul>
 80014b8:	f013 fcde 	bl	8014e78 <rint>
 80014bc:	f7ff fb1c 	bl	8000af8 <__aeabi_d2uiz>
        break;
 80014c0:	e7c1      	b.n	8001446 <RadioTimeOnAir+0xe>
                                     ( ( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH ) ? 0.0 : 1.0 ) +
 80014c2:	2200      	movs	r2, #0
 80014c4:	2300      	movs	r3, #0
 80014c6:	e7cb      	b.n	8001460 <RadioTimeOnAir+0x28>
            double ts = RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth - 4][12 - SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 80014c8:	4d3b      	ldr	r5, [pc, #236]	; (80015b8 <RadioTimeOnAir+0x180>)
 80014ca:	f895 a038 	ldrb.w	sl, [r5, #56]	; 0x38
 80014ce:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 80014d2:	3b04      	subs	r3, #4
 80014d4:	f1ca 020c 	rsb	r2, sl, #12
 80014d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014dc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80014e0:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <RadioTimeOnAir+0x190>)
 80014e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80014e6:	e9d3 8900 	ldrd	r8, r9, [r3]
            double tPreamble = ( SX126x.PacketParams.Params.LoRa.PreambleLength + 4.25 ) * ts;
 80014ea:	89a8      	ldrh	r0, [r5, #12]
 80014ec:	f7ff f800 	bl	80004f0 <__aeabi_i2d>
 80014f0:	2200      	movs	r2, #0
 80014f2:	4b36      	ldr	r3, [pc, #216]	; (80015cc <RadioTimeOnAir+0x194>)
 80014f4:	f7fe feb0 	bl	8000258 <__adddf3>
 80014f8:	4642      	mov	r2, r8
 80014fa:	464b      	mov	r3, r9
 80014fc:	f7ff f862 	bl	80005c4 <__aeabi_dmul>
 8001500:	4606      	mov	r6, r0
 8001502:	460f      	mov	r7, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001504:	ebca 0444 	rsb	r4, sl, r4, lsl #1
 8001508:	3407      	adds	r4, #7
                                 28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 800150a:	7c28      	ldrb	r0, [r5, #16]
 800150c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                                 ( ( SX126x.PacketParams.Params.LoRa.HeaderType == LORA_PACKET_FIXED_LENGTH ) ? 20 : 0 ) ) /
 8001510:	7bab      	ldrb	r3, [r5, #14]
 8001512:	2b01      	cmp	r3, #1
 8001514:	bf0c      	ite	eq
 8001516:	2014      	moveq	r0, #20
 8001518:	2000      	movne	r0, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 800151a:	ebc0 0084 	rsb	r0, r0, r4, lsl #2
 800151e:	f7fe ffe7 	bl	80004f0 <__aeabi_i2d>
 8001522:	4604      	mov	r4, r0
 8001524:	460d      	mov	r5, r1
                                 ( ( SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <RadioTimeOnAir+0x180>)
 8001528:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2002      	movne	r0, #2
 8001532:	2000      	moveq	r0, #0
                                 ( double )( 4 * ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8001534:	ebaa 0000 	sub.w	r0, sl, r0
 8001538:	0080      	lsls	r0, r0, #2
 800153a:	f7fe ffd9 	bl	80004f0 <__aeabi_i2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7ff f967 	bl	8000818 <__aeabi_ddiv>
 800154a:	f013 fb95 	bl	8014c78 <ceil>
 800154e:	4604      	mov	r4, r0
 8001550:	460d      	mov	r5, r1
                                 ( ( SX126x.ModulationParams.Params.LoRa.CodingRate % 4 ) + 4 );
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <RadioTimeOnAir+0x180>)
 8001554:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8001558:	f000 0003 	and.w	r0, r0, #3
                                 ( ( SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800155c:	3004      	adds	r0, #4
 800155e:	f7fe ffc7 	bl	80004f0 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8001562:	4622      	mov	r2, r4
 8001564:	462b      	mov	r3, r5
 8001566:	f7ff f82d 	bl	80005c4 <__aeabi_dmul>
 800156a:	4604      	mov	r4, r0
 800156c:	460d      	mov	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800156e:	2200      	movs	r2, #0
 8001570:	2300      	movs	r3, #0
 8001572:	f7ff fab7 	bl	8000ae4 <__aeabi_dcmpgt>
 8001576:	b1b8      	cbz	r0, 80015a8 <RadioTimeOnAir+0x170>
 8001578:	2200      	movs	r2, #0
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <RadioTimeOnAir+0x188>)
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7fe fe6a 	bl	8000258 <__adddf3>
            double tPayload = nPayload * ts;
 8001584:	4642      	mov	r2, r8
 8001586:	464b      	mov	r3, r9
 8001588:	f7ff f81c 	bl	80005c4 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 800158c:	4632      	mov	r2, r6
 800158e:	463b      	mov	r3, r7
 8001590:	f7fe fe62 	bl	8000258 <__adddf3>
            airTime = floor( tOnAir + 0.999 );
 8001594:	a306      	add	r3, pc, #24	; (adr r3, 80015b0 <RadioTimeOnAir+0x178>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7fe fe5d 	bl	8000258 <__adddf3>
 800159e:	f013 fbeb 	bl	8014d78 <floor>
 80015a2:	f7ff faa9 	bl	8000af8 <__aeabi_d2uiz>
    return airTime;
 80015a6:	e74e      	b.n	8001446 <RadioTimeOnAir+0xe>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80015a8:	2400      	movs	r4, #0
 80015aa:	2500      	movs	r5, #0
 80015ac:	e7e4      	b.n	8001578 <RadioTimeOnAir+0x140>
 80015ae:	bf00      	nop
 80015b0:	d916872b 	.word	0xd916872b
 80015b4:	3feff7ce 	.word	0x3feff7ce
 80015b8:	20001360 	.word	0x20001360
 80015bc:	3ff00000 	.word	0x3ff00000
 80015c0:	40200000 	.word	0x40200000
 80015c4:	408f4000 	.word	0x408f4000
 80015c8:	08015128 	.word	0x08015128
 80015cc:	40110000 	.word	0x40110000

080015d0 <RadioSend>:
{
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	4605      	mov	r5, r0
 80015d4:	460c      	mov	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 80015d6:	2300      	movs	r3, #0
 80015d8:	461a      	mov	r2, r3
 80015da:	f240 2101 	movw	r1, #513	; 0x201
 80015de:	4608      	mov	r0, r1
 80015e0:	f000 fe49 	bl	8002276 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 80015e4:	f000 fed8 	bl	8002398 <SX126xGetPacketType>
 80015e8:	2801      	cmp	r0, #1
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <RadioSend+0x34>)
 80015ec:	bf0c      	ite	eq
 80015ee:	73dc      	strbeq	r4, [r3, #15]
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 80015f0:	721c      	strbne	r4, [r3, #8]
    SX126xSetPacketParams( &SX126x.PacketParams );
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <RadioSend+0x34>)
 80015f4:	f000 ff86 	bl	8002504 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 80015f8:	2200      	movs	r2, #0
 80015fa:	4621      	mov	r1, r4
 80015fc:	4628      	mov	r0, r5
 80015fe:	f000 fd4b 	bl	8002098 <SX126xSendPayload>
}
 8001602:	bd38      	pop	{r3, r4, r5, pc}
 8001604:	20001360 	.word	0x20001360

08001608 <RadioSleep>:
{
 8001608:	b508      	push	{r3, lr}
    SX126xSetSleep( params );
 800160a:	f04f 0004 	mov.w	r0, #4
 800160e:	f000 fcff 	bl	8002010 <SX126xSetSleep>
    DelayMs( 2 );
 8001612:	2002      	movs	r0, #2
 8001614:	f7ff fe5a 	bl	80012cc <DelayMs>
}
 8001618:	bd08      	pop	{r3, pc}
	...

0800161c <RadioRxBoosted>:
{
 800161c:	b510      	push	{r4, lr}
 800161e:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8001620:	2300      	movs	r3, #0
 8001622:	461a      	mov	r2, r3
 8001624:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001628:	4608      	mov	r0, r1
 800162a:	f000 fe24 	bl	8002276 <SX126xSetDioIrqParams>
    if( RxContinuous == true )
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <RadioRxBoosted+0x2c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b123      	cbz	r3, 800163e <RadioRxBoosted+0x22>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8001634:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001638:	f000 fd4e 	bl	80020d8 <SX126xSetRxBoosted>
}
 800163c:	bd10      	pop	{r4, pc}
        SX126xSetRxBoosted( timeout << 6 );
 800163e:	01a0      	lsls	r0, r4, #6
 8001640:	f000 fd4a 	bl	80020d8 <SX126xSetRxBoosted>
}
 8001644:	e7fa      	b.n	800163c <RadioRxBoosted+0x20>
 8001646:	bf00      	nop
 8001648:	20000005 	.word	0x20000005

0800164c <RadioSetRxDutyCycle>:
{
 800164c:	b508      	push	{r3, lr}
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 800164e:	f000 fd5f 	bl	8002110 <SX126xSetRxDutyCycle>
}
 8001652:	bd08      	pop	{r3, pc}

08001654 <RadioStartCad>:
{
 8001654:	b508      	push	{r3, lr}
    SX126xSetCad( );
 8001656:	f000 fd7b 	bl	8002150 <SX126xSetCad>
}
 800165a:	bd08      	pop	{r3, pc}

0800165c <RadioSetTxContinuousWave>:
{
 800165c:	b510      	push	{r4, lr}
 800165e:	460c      	mov	r4, r1
    SX126xSetRfFrequency( freq );
 8001660:	f000 fe56 	bl	8002310 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 8001664:	4620      	mov	r0, r4
 8001666:	f000 fc5b 	bl	8001f20 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 800166a:	f000 fd7d 	bl	8002168 <SX126xSetTxContinuousWave>
}
 800166e:	bd10      	pop	{r4, pc}

08001670 <RadioWrite>:
{
 8001670:	b508      	push	{r3, lr}
    SX126xWriteRegister( addr, data );
 8001672:	f000 fb9d 	bl	8001db0 <SX126xWriteRegister>
}
 8001676:	bd08      	pop	{r3, pc}

08001678 <RadioSetPublicNetwork>:
{
 8001678:	b510      	push	{r4, lr}
 800167a:	4604      	mov	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <RadioSetPublicNetwork+0x40>)
 800167e:	7018      	strb	r0, [r3, #0]
 8001680:	7058      	strb	r0, [r3, #1]
    RadioSetModem( MODEM_LORA );
 8001682:	2001      	movs	r0, #1
 8001684:	f000 f81a 	bl	80016bc <RadioSetModem>
    if( enable == true )
 8001688:	b154      	cbz	r4, 80016a0 <RadioSetPublicNetwork+0x28>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800168a:	2134      	movs	r1, #52	; 0x34
 800168c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8001690:	f000 fb8e 	bl	8001db0 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8001694:	2144      	movs	r1, #68	; 0x44
 8001696:	f240 7041 	movw	r0, #1857	; 0x741
 800169a:	f000 fb89 	bl	8001db0 <SX126xWriteRegister>
}
 800169e:	bd10      	pop	{r4, pc}
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80016a0:	2114      	movs	r1, #20
 80016a2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80016a6:	f000 fb83 	bl	8001db0 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80016aa:	2124      	movs	r1, #36	; 0x24
 80016ac:	f240 7041 	movw	r0, #1857	; 0x741
 80016b0:	f000 fb7e 	bl	8001db0 <SX126xWriteRegister>
}
 80016b4:	e7f3      	b.n	800169e <RadioSetPublicNetwork+0x26>
 80016b6:	bf00      	nop
 80016b8:	200000a8 	.word	0x200000a8

080016bc <RadioSetModem>:
{
 80016bc:	b508      	push	{r3, lr}
    switch( modem )
 80016be:	2801      	cmp	r0, #1
 80016c0:	d006      	beq.n	80016d0 <RadioSetModem+0x14>
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 fe56 	bl	8002374 <SX126xSetPacketType>
        RadioPublicNetwork.Current = false;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <RadioSetModem+0x30>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	705a      	strb	r2, [r3, #1]
}
 80016ce:	bd08      	pop	{r3, pc}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 80016d0:	2001      	movs	r0, #1
 80016d2:	f000 fe4f 	bl	8002374 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <RadioSetModem+0x30>)
 80016d8:	7818      	ldrb	r0, [r3, #0]
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	4283      	cmp	r3, r0
 80016de:	d0f6      	beq.n	80016ce <RadioSetModem+0x12>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <RadioSetModem+0x30>)
 80016e2:	7058      	strb	r0, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 80016e4:	f7ff ffc8 	bl	8001678 <RadioSetPublicNetwork>
}
 80016e8:	e7f1      	b.n	80016ce <RadioSetModem+0x12>
 80016ea:	bf00      	nop
 80016ec:	200000a8 	.word	0x200000a8

080016f0 <RadioRandom>:
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
    RadioSetModem( MODEM_LORA );
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff ffe2 	bl	80016bc <RadioSetModem>
    SX126xSetRx( 0 );
 80016f8:	2000      	movs	r0, #0
 80016fa:	f000 fcd5 	bl	80020a8 <SX126xSetRx>
 80016fe:	2400      	movs	r4, #0
    uint32_t rnd = 0;
 8001700:	4625      	mov	r5, r4
        DelayMs( 1 );
 8001702:	2601      	movs	r6, #1
 8001704:	4630      	mov	r0, r6
 8001706:	f7ff fde1 	bl	80012cc <DelayMs>
        rnd |= ( ( uint32_t )SX126xGetRssiInst( ) & 0x01 ) << i;
 800170a:	f000 ff6f 	bl	80025ec <SX126xGetRssiInst>
 800170e:	f000 0001 	and.w	r0, r0, #1
 8001712:	40a0      	lsls	r0, r4
 8001714:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8001716:	3401      	adds	r4, #1
 8001718:	2c20      	cmp	r4, #32
 800171a:	d1f3      	bne.n	8001704 <RadioRandom+0x14>
    RadioSleep( );
 800171c:	f7ff ff74 	bl	8001608 <RadioSleep>
}
 8001720:	4628      	mov	r0, r5
 8001722:	bd70      	pop	{r4, r5, r6, pc}

08001724 <RadioSetRxConfig>:
{
 8001724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001728:	b083      	sub	sp, #12
 800172a:	4684      	mov	ip, r0
 800172c:	460d      	mov	r5, r1
 800172e:	4614      	mov	r4, r2
 8001730:	461e      	mov	r6, r3
 8001732:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8001736:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 800173a:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
 800173e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001742:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	uint8_t syncWordByte[] ={ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001746:	4b69      	ldr	r3, [pc, #420]	; (80018ec <RadioSetRxConfig+0x1c8>)
 8001748:	e893 0003 	ldmia.w	r3, {r0, r1}
 800174c:	ab02      	add	r3, sp, #8
 800174e:	e903 0003 	stmdb	r3, {r0, r1}
    RxContinuous = rxContinuous;
 8001752:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <RadioSetRxConfig+0x1cc>)
 8001758:	7019      	strb	r1, [r3, #0]
        MaxPayloadLength = 0xFF;
 800175a:	2f00      	cmp	r7, #0
 800175c:	bf08      	it	eq
 800175e:	22ff      	moveq	r2, #255	; 0xff
 8001760:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <RadioSetRxConfig+0x1d0>)
 8001762:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8001764:	f1bc 0f00 	cmp.w	ip, #0
 8001768:	d005      	beq.n	8001776 <RadioSetRxConfig+0x52>
 800176a:	4663      	mov	r3, ip
 800176c:	2b01      	cmp	r3, #1
 800176e:	d065      	beq.n	800183c <RadioSetRxConfig+0x118>
}
 8001770:	b003      	add	sp, #12
 8001772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8001776:	2000      	movs	r0, #0
 8001778:	f000 fcfd 	bl	8002176 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800177c:	4e5e      	ldr	r6, [pc, #376]	; (80018f8 <RadioSetRxConfig+0x1d4>)
 800177e:	f04f 0b00 	mov.w	fp, #0
 8001782:	f886 b028 	strb.w	fp, [r6, #40]	; 0x28
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8001786:	62f4      	str	r4, [r6, #44]	; 0x2c
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8001788:	230b      	movs	r3, #11
 800178a:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 800178e:	4628      	mov	r0, r5
 8001790:	f7ff fda4 	bl	80012dc <RadioGetFskBandwidthRegValue>
 8001794:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8001798:	f886 b000 	strb.w	fp, [r6]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800179c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80017a0:	f8a6 8002 	strh.w	r8, [r6, #2]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80017a4:	2304      	movs	r3, #4
 80017a6:	7133      	strb	r3, [r6, #4]
            SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80017a8:	2318      	movs	r3, #24
 80017aa:	7173      	strb	r3, [r6, #5]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80017ac:	f886 b006 	strb.w	fp, [r6, #6]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80017b0:	f087 0701 	eor.w	r7, r7, #1
 80017b4:	71f7      	strb	r7, [r6, #7]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80017b6:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <RadioSetRxConfig+0x1d0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	7233      	strb	r3, [r6, #8]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80017bc:	45d9      	cmp	r9, fp
 80017be:	bf14      	ite	ne
 80017c0:	23f2      	movne	r3, #242	; 0xf2
 80017c2:	2301      	moveq	r3, #1
 80017c4:	4635      	mov	r5, r6
 80017c6:	7273      	strb	r3, [r6, #9]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80017c8:	f886 b00a 	strb.w	fp, [r6, #10]
            RadioStandby( );
 80017cc:	f7ff fdba 	bl	8001344 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80017d0:	f816 0f28 	ldrb.w	r0, [r6, #40]!
 80017d4:	ebb0 000b 	subs.w	r0, r0, fp
 80017d8:	bf18      	it	ne
 80017da:	2001      	movne	r0, #1
 80017dc:	f7ff ff6e 	bl	80016bc <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80017e0:	4630      	mov	r0, r6
 80017e2:	f000 fe21 	bl	8002428 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80017e6:	4628      	mov	r0, r5
 80017e8:	f000 fe8c 	bl	8002504 <SX126xSetPacketParams>
            SX126xSetSyncWord( syncWordByte );
 80017ec:	4668      	mov	r0, sp
 80017ee:	f000 fbbe 	bl	8001f6e <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 80017f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017f6:	f000 fbef 	bl	8001fd8 <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7fe fe68 	bl	80004d0 <__aeabi_ui2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	2000      	movs	r0, #0
 8001806:	493d      	ldr	r1, [pc, #244]	; (80018fc <RadioSetRxConfig+0x1d8>)
 8001808:	f7ff f806 	bl	8000818 <__aeabi_ddiv>
 800180c:	2200      	movs	r2, #0
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <RadioSetRxConfig+0x1dc>)
 8001810:	f7fe fed8 	bl	80005c4 <__aeabi_dmul>
 8001814:	4604      	mov	r4, r0
 8001816:	460d      	mov	r5, r1
 8001818:	4650      	mov	r0, sl
 800181a:	f7fe fe69 	bl	80004f0 <__aeabi_i2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4620      	mov	r0, r4
 8001824:	4629      	mov	r1, r5
 8001826:	f7fe fecd 	bl	80005c4 <__aeabi_dmul>
 800182a:	2200      	movs	r2, #0
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <RadioSetRxConfig+0x1e0>)
 800182e:	f7fe fec9 	bl	80005c4 <__aeabi_dmul>
 8001832:	f7ff f961 	bl	8000af8 <__aeabi_d2uiz>
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <RadioSetRxConfig+0x1e4>)
 8001838:	6018      	str	r0, [r3, #0]
            break;
 800183a:	e799      	b.n	8001770 <RadioSetRxConfig+0x4c>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800183c:	2000      	movs	r0, #0
 800183e:	f000 fc9a 	bl	8002176 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 8001842:	fa5f f08a 	uxtb.w	r0, sl
 8001846:	f000 fca3 	bl	8002190 <SX126xSetLoRaSymbNumTimeout>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800184a:	4a2b      	ldr	r2, [pc, #172]	; (80018f8 <RadioSetRxConfig+0x1d4>)
 800184c:	2301      	movs	r3, #1
 800184e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8001852:	b2e3      	uxtb	r3, r4
 8001854:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8001858:	492c      	ldr	r1, [pc, #176]	; (800190c <RadioSetRxConfig+0x1e8>)
 800185a:	5d49      	ldrb	r1, [r1, r5]
 800185c:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8001860:	f882 603a 	strb.w	r6, [r2, #58]	; 0x3a
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001864:	bb4d      	cbnz	r5, 80018ba <RadioSetRxConfig+0x196>
 8001866:	3c0b      	subs	r4, #11
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8001868:	2c01      	cmp	r4, #1
 800186a:	bf8c      	ite	hi
 800186c:	2400      	movhi	r4, #0
 800186e:	2401      	movls	r4, #1
 8001870:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <RadioSetRxConfig+0x1d4>)
 8001872:	f882 403b 	strb.w	r4, [r2, #59]	; 0x3b
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8001876:	2101      	movs	r1, #1
 8001878:	7011      	strb	r1, [r2, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800187a:	3b05      	subs	r3, #5
 800187c:	b2db      	uxtb	r3, r3
 800187e:	428b      	cmp	r3, r1
 8001880:	d923      	bls.n	80018ca <RadioSetRxConfig+0x1a6>
                SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <RadioSetRxConfig+0x1d4>)
 8001884:	f8a3 800c 	strh.w	r8, [r3, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8001888:	4c1b      	ldr	r4, [pc, #108]	; (80018f8 <RadioSetRxConfig+0x1d4>)
 800188a:	73a7      	strb	r7, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <RadioSetRxConfig+0x1d0>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8001892:	f884 9010 	strb.w	r9, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8001896:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800189a:	7463      	strb	r3, [r4, #17]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff ff0d 	bl	80016bc <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80018a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80018a6:	f000 fdbf 	bl	8002428 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80018aa:	4620      	mov	r0, r4
 80018ac:	f000 fe2a 	bl	8002504 <SX126xSetPacketParams>
             RxTimeout = 0xFFFF;
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <RadioSetRxConfig+0x1e4>)
 80018b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	e75a      	b.n	8001770 <RadioSetRxConfig+0x4c>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80018ba:	2d01      	cmp	r5, #1
 80018bc:	d103      	bne.n	80018c6 <RadioSetRxConfig+0x1a2>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80018be:	2c0c      	cmp	r4, #12
 80018c0:	d00e      	beq.n	80018e0 <RadioSetRxConfig+0x1bc>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80018c2:	2400      	movs	r4, #0
 80018c4:	e7d4      	b.n	8001870 <RadioSetRxConfig+0x14c>
 80018c6:	2400      	movs	r4, #0
 80018c8:	e7d2      	b.n	8001870 <RadioSetRxConfig+0x14c>
                if( preambleLen < 12 )
 80018ca:	f1b8 0f0b 	cmp.w	r8, #11
 80018ce:	d803      	bhi.n	80018d8 <RadioSetRxConfig+0x1b4>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 80018d0:	4613      	mov	r3, r2
 80018d2:	220c      	movs	r2, #12
 80018d4:	819a      	strh	r2, [r3, #12]
 80018d6:	e7d7      	b.n	8001888 <RadioSetRxConfig+0x164>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <RadioSetRxConfig+0x1d4>)
 80018da:	f8a3 800c 	strh.w	r8, [r3, #12]
 80018de:	e7d3      	b.n	8001888 <RadioSetRxConfig+0x164>
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <RadioSetRxConfig+0x1d4>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80018e8:	701a      	strb	r2, [r3, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80018ea:	e7ca      	b.n	8001882 <RadioSetRxConfig+0x15e>
 80018ec:	08014fa8 	.word	0x08014fa8
 80018f0:	20000005 	.word	0x20000005
 80018f4:	20000004 	.word	0x20000004
 80018f8:	20001360 	.word	0x20001360
 80018fc:	3ff00000 	.word	0x3ff00000
 8001900:	40200000 	.word	0x40200000
 8001904:	408f4000 	.word	0x408f4000
 8001908:	200000ac 	.word	0x200000ac
 800190c:	08015004 	.word	0x08015004

08001910 <RadioSetTxConfig>:
{
 8001910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	4605      	mov	r5, r0
 8001918:	460c      	mov	r4, r1
 800191a:	4616      	mov	r6, r2
 800191c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8001920:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 8001924:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
	uint8_t syncWordByte[] ={ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001928:	4a52      	ldr	r2, [pc, #328]	; (8001a74 <RadioSetTxConfig+0x164>)
 800192a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800192e:	aa02      	add	r2, sp, #8
 8001930:	e902 0003 	stmdb	r2, {r0, r1}
    switch( modem )
 8001934:	b155      	cbz	r5, 800194c <RadioSetTxConfig+0x3c>
 8001936:	2d01      	cmp	r5, #1
 8001938:	d046      	beq.n	80019c8 <RadioSetTxConfig+0xb8>
    SX126xSetRfTxPower( power );
 800193a:	4620      	mov	r0, r4
 800193c:	f000 faf0 	bl	8001f20 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 8001940:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001942:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <RadioSetTxConfig+0x168>)
 8001944:	601a      	str	r2, [r3, #0]
}
 8001946:	b002      	add	sp, #8
 8001948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800194c:	4d4b      	ldr	r5, [pc, #300]	; (8001a7c <RadioSetTxConfig+0x16c>)
 800194e:	f04f 0a00 	mov.w	sl, #0
 8001952:	f885 a028 	strb.w	sl, [r5, #40]	; 0x28
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8001956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001958:	62ea      	str	r2, [r5, #44]	; 0x2c
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800195a:	220b      	movs	r2, #11
 800195c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fcbb 	bl	80012dc <RadioGetFskBandwidthRegValue>
 8001966:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 800196a:	632e      	str	r6, [r5, #48]	; 0x30
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800196c:	f885 a000 	strb.w	sl, [r5]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8001970:	00ff      	lsls	r7, r7, #3
 8001972:	806f      	strh	r7, [r5, #2]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8001974:	2304      	movs	r3, #4
 8001976:	712b      	strb	r3, [r5, #4]
            SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8001978:	2318      	movs	r3, #24
 800197a:	716b      	strb	r3, [r5, #5]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800197c:	f885 a006 	strb.w	sl, [r5, #6]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8001980:	f088 0801 	eor.w	r8, r8, #1
 8001984:	f885 8007 	strb.w	r8, [r5, #7]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8001988:	45d1      	cmp	r9, sl
 800198a:	bf14      	ite	ne
 800198c:	23f2      	movne	r3, #242	; 0xf2
 800198e:	2301      	moveq	r3, #1
 8001990:	726b      	strb	r3, [r5, #9]
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8001992:	2301      	movs	r3, #1
 8001994:	72ab      	strb	r3, [r5, #10]
            RadioStandby( );
 8001996:	f7ff fcd5 	bl	8001344 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800199a:	462e      	mov	r6, r5
 800199c:	f816 0f28 	ldrb.w	r0, [r6, #40]!
 80019a0:	ebb0 000a 	subs.w	r0, r0, sl
 80019a4:	bf18      	it	ne
 80019a6:	2001      	movne	r0, #1
 80019a8:	f7ff fe88 	bl	80016bc <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80019ac:	4630      	mov	r0, r6
 80019ae:	f000 fd3b 	bl	8002428 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80019b2:	4628      	mov	r0, r5
 80019b4:	f000 fda6 	bl	8002504 <SX126xSetPacketParams>
            SX126xSetSyncWord( syncWordByte );
 80019b8:	4668      	mov	r0, sp
 80019ba:	f000 fad8 	bl	8001f6e <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 80019be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019c2:	f000 fb09 	bl	8001fd8 <SX126xSetWhiteningSeed>
            break;
 80019c6:	e7b8      	b.n	800193a <RadioSetTxConfig+0x2a>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80019c8:	492c      	ldr	r1, [pc, #176]	; (8001a7c <RadioSetTxConfig+0x16c>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80019d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80019d8:	4829      	ldr	r0, [pc, #164]	; (8001a80 <RadioSetTxConfig+0x170>)
 80019da:	5cc0      	ldrb	r0, [r0, r3]
 80019dc:	f881 0039 	strb.w	r0, [r1, #57]	; 0x39
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80019e0:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 80019e4:	f881 003a 	strb.w	r0, [r1, #58]	; 0x3a
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80019e8:	bb63      	cbnz	r3, 8001a44 <RadioSetTxConfig+0x134>
 80019ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019ec:	3b0b      	subs	r3, #11
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	bf8c      	ite	hi
 80019f2:	2300      	movhi	r3, #0
 80019f4:	2301      	movls	r3, #1
 80019f6:	4921      	ldr	r1, [pc, #132]	; (8001a7c <RadioSetTxConfig+0x16c>)
 80019f8:	f881 303b 	strb.w	r3, [r1, #59]	; 0x3b
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80019fc:	2301      	movs	r3, #1
 80019fe:	700b      	strb	r3, [r1, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001a00:	3a05      	subs	r2, #5
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d926      	bls.n	8001a56 <RadioSetTxConfig+0x146>
                SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <RadioSetTxConfig+0x16c>)
 8001a0a:	819f      	strh	r7, [r3, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8001a0c:	4d1b      	ldr	r5, [pc, #108]	; (8001a7c <RadioSetTxConfig+0x16c>)
 8001a0e:	f885 800e 	strb.w	r8, [r5, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <RadioSetTxConfig+0x174>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	73eb      	strb	r3, [r5, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8001a18:	f885 9010 	strb.w	r9, [r5, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8001a1c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8001a20:	746b      	strb	r3, [r5, #17]
            RadioStandby( );
 8001a22:	f7ff fc8f 	bl	8001344 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8001a26:	462e      	mov	r6, r5
 8001a28:	f816 0f28 	ldrb.w	r0, [r6, #40]!
 8001a2c:	3800      	subs	r0, #0
 8001a2e:	bf18      	it	ne
 8001a30:	2001      	movne	r0, #1
 8001a32:	f7ff fe43 	bl	80016bc <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8001a36:	4630      	mov	r0, r6
 8001a38:	f000 fcf6 	bl	8002428 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	f000 fd61 	bl	8002504 <SX126xSetPacketParams>
            break;
 8001a42:	e77a      	b.n	800193a <RadioSetTxConfig+0x2a>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d104      	bne.n	8001a52 <RadioSetTxConfig+0x142>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8001a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d00b      	beq.n	8001a66 <RadioSetTxConfig+0x156>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e7d1      	b.n	80019f6 <RadioSetTxConfig+0xe6>
 8001a52:	2300      	movs	r3, #0
 8001a54:	e7cf      	b.n	80019f6 <RadioSetTxConfig+0xe6>
                if( preambleLen < 12 )
 8001a56:	2f0b      	cmp	r7, #11
 8001a58:	d802      	bhi.n	8001a60 <RadioSetTxConfig+0x150>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	818a      	strh	r2, [r1, #12]
 8001a5e:	e7d5      	b.n	8001a0c <RadioSetTxConfig+0xfc>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <RadioSetTxConfig+0x16c>)
 8001a62:	819f      	strh	r7, [r3, #12]
 8001a64:	e7d2      	b.n	8001a0c <RadioSetTxConfig+0xfc>
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <RadioSetTxConfig+0x16c>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8001a6e:	701a      	strb	r2, [r3, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8001a70:	e7ca      	b.n	8001a08 <RadioSetTxConfig+0xf8>
 8001a72:	bf00      	nop
 8001a74:	08014fa8 	.word	0x08014fa8
 8001a78:	200000b0 	.word	0x200000b0
 8001a7c:	20001360 	.word	0x20001360
 8001a80:	08015004 	.word	0x08015004
 8001a84:	20000004 	.word	0x20000004

08001a88 <RadioRead>:
{
 8001a88:	b508      	push	{r3, lr}
    return SX126xReadRegister( addr );
 8001a8a:	f000 f9d7 	bl	8001e3c <SX126xReadRegister>
}
 8001a8e:	bd08      	pop	{r3, pc}

08001a90 <RadioWriteBuffer>:
{
 8001a90:	b508      	push	{r3, lr}
    SX126xWriteRegisters( addr, buffer, size );
 8001a92:	f000 f959 	bl	8001d48 <SX126xWriteRegisters>
}
 8001a96:	bd08      	pop	{r3, pc}

08001a98 <RadioReadBuffer>:
{
 8001a98:	b508      	push	{r3, lr}
    SX126xReadRegisters( addr, buffer, size );
 8001a9a:	f000 f995 	bl	8001dc8 <SX126xReadRegisters>
}
 8001a9e:	bd08      	pop	{r3, pc}

08001aa0 <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 8001aa0:	b530      	push	{r4, r5, lr}
 8001aa2:	b083      	sub	sp, #12
	uint16_t irqRegs=0;
   // if( IrqFired == true )
    if(HAL_GPIO_ReadPin(RADIO_DIO1_PORT, RADIO_DIO1_PIN) == GPIO_PIN_SET)
 8001aa4:	2110      	movs	r1, #16
 8001aa6:	483f      	ldr	r0, [pc, #252]	; (8001ba4 <RadioIrqProcess+0x104>)
 8001aa8:	f001 fd16 	bl	80034d8 <HAL_GPIO_ReadPin>
 8001aac:	2801      	cmp	r0, #1
 8001aae:	d001      	beq.n	8001ab4 <RadioIrqProcess+0x14>
                RadioEvents->RxTimeout( );
            }
          //  User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1,(uint8_t*)"HDE\n",5);
        }
    }
}
 8001ab0:	b003      	add	sp, #12
 8001ab2:	bd30      	pop	{r4, r5, pc}
        IrqFired = false;
 8001ab4:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <RadioIrqProcess+0x108>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
        irqRegs = SX126xGetIrqStatus( );
 8001aba:	f000 fbf9 	bl	80022b0 <SX126xGetIrqStatus>
 8001abe:	4604      	mov	r4, r0
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 8001ac0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ac4:	f000 fe26 	bl	8002714 <SX126xClearIrqStatus>
        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8001ac8:	f014 0f01 	tst.w	r4, #1
 8001acc:	d005      	beq.n	8001ada <RadioIrqProcess+0x3a>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8001ace:	4b37      	ldr	r3, [pc, #220]	; (8001bac <RadioIrqProcess+0x10c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b113      	cbz	r3, 8001ada <RadioIrqProcess+0x3a>
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b103      	cbz	r3, 8001ada <RadioIrqProcess+0x3a>
                RadioEvents->TxDone( );
 8001ad8:	4798      	blx	r3
        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8001ada:	f014 0f02 	tst.w	r4, #2
 8001ade:	d123      	bne.n	8001b28 <RadioIrqProcess+0x88>
        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8001ae0:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001ae4:	d006      	beq.n	8001af4 <RadioIrqProcess+0x54>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8001ae6:	4b31      	ldr	r3, [pc, #196]	; (8001bac <RadioIrqProcess+0x10c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b173      	cbz	r3, 8001b0a <RadioIrqProcess+0x6a>
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	2a00      	cmp	r2, #0
 8001af0:	d053      	beq.n	8001b9a <RadioIrqProcess+0xfa>
                RadioEvents->RxError( );
 8001af2:	4790      	blx	r2
        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8001af4:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001af8:	d007      	beq.n	8001b0a <RadioIrqProcess+0x6a>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8001afa:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <RadioIrqProcess+0x10c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b123      	cbz	r3, 8001b0a <RadioIrqProcess+0x6a>
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	b113      	cbz	r3, 8001b0a <RadioIrqProcess+0x6a>
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 8001b04:	f3c4 2000 	ubfx	r0, r4, #8, #1
 8001b08:	4798      	blx	r3
        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8001b0a:	f414 7f00 	tst.w	r4, #512	; 0x200
 8001b0e:	d126      	bne.n	8001b5e <RadioIrqProcess+0xbe>
        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8001b10:	f014 0f20 	tst.w	r4, #32
 8001b14:	d0cc      	beq.n	8001ab0 <RadioIrqProcess+0x10>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <RadioIrqProcess+0x10c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0c8      	beq.n	8001ab0 <RadioIrqProcess+0x10>
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0c5      	beq.n	8001ab0 <RadioIrqProcess+0x10>
                RadioEvents->RxTimeout( );
 8001b24:	4798      	blx	r3
}
 8001b26:	e7c3      	b.n	8001ab0 <RadioIrqProcess+0x10>
            SX126xGetPayload( RadioRxPayload, &size , 255 );
 8001b28:	22ff      	movs	r2, #255	; 0xff
 8001b2a:	f10d 0107 	add.w	r1, sp, #7
 8001b2e:	4820      	ldr	r0, [pc, #128]	; (8001bb0 <RadioIrqProcess+0x110>)
 8001b30:	f000 fd90 	bl	8002654 <SX126xGetPayload>
            SX126xGetPacketStatus( &RadioPktStatus );
 8001b34:	481f      	ldr	r0, [pc, #124]	; (8001bb4 <RadioIrqProcess+0x114>)
 8001b36:	f000 fda7 	bl	8002688 <SX126xGetPacketStatus>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <RadioIrqProcess+0x10c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b153      	cbz	r3, 8001b56 <RadioIrqProcess+0xb6>
 8001b40:	689d      	ldr	r5, [r3, #8]
 8001b42:	b145      	cbz	r5, 8001b56 <RadioIrqProcess+0xb6>
                RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 8001b44:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <RadioIrqProcess+0x114>)
 8001b46:	f992 300d 	ldrsb.w	r3, [r2, #13]
 8001b4a:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8001b4e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001b52:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <RadioIrqProcess+0x110>)
 8001b54:	47a8      	blx	r5
            SX126xClearIrqStatus( IRQ_RX_DONE );
 8001b56:	2002      	movs	r0, #2
 8001b58:	f000 fddc 	bl	8002714 <SX126xClearIrqStatus>
 8001b5c:	e7c0      	b.n	8001ae0 <RadioIrqProcess+0x40>
            if( SX126xGetOperatingMode( ) == MODE_TX )
 8001b5e:	f000 f9e9 	bl	8001f34 <SX126xGetOperatingMode>
 8001b62:	2804      	cmp	r0, #4
 8001b64:	d107      	bne.n	8001b76 <RadioIrqProcess+0xd6>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <RadioIrqProcess+0x10c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0a0      	beq.n	8001ab0 <RadioIrqProcess+0x10>
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	b16b      	cbz	r3, 8001b8e <RadioIrqProcess+0xee>
                    RadioEvents->TxTimeout( );
 8001b72:	4798      	blx	r3
 8001b74:	e7cc      	b.n	8001b10 <RadioIrqProcess+0x70>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 8001b76:	f000 f9dd 	bl	8001f34 <SX126xGetOperatingMode>
 8001b7a:	2805      	cmp	r0, #5
 8001b7c:	d1c8      	bne.n	8001b10 <RadioIrqProcess+0x70>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <RadioIrqProcess+0x10c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d094      	beq.n	8001ab0 <RadioIrqProcess+0x10>
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	b10b      	cbz	r3, 8001b8e <RadioIrqProcess+0xee>
                    RadioEvents->RxTimeout( );
 8001b8a:	4798      	blx	r3
 8001b8c:	e7c0      	b.n	8001b10 <RadioIrqProcess+0x70>
        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8001b8e:	f014 0f20 	tst.w	r4, #32
 8001b92:	d08d      	beq.n	8001ab0 <RadioIrqProcess+0x10>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <RadioIrqProcess+0x10c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	e7c1      	b.n	8001b1e <RadioIrqProcess+0x7e>
        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8001b9a:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001b9e:	d1af      	bne.n	8001b00 <RadioIrqProcess+0x60>
 8001ba0:	e7b3      	b.n	8001b0a <RadioIrqProcess+0x6a>
 8001ba2:	bf00      	nop
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	200000a0 	.word	0x200000a0
 8001bac:	200000a4 	.word	0x200000a4
 8001bb0:	2000139c 	.word	0x2000139c
 8001bb4:	2000149c 	.word	0x2000149c

08001bb8 <RadioIsChannelFree>:
{
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	460c      	mov	r4, r1
    RadioSetModem( modem );
 8001bbc:	f7ff fd7e 	bl	80016bc <RadioSetModem>
    SX126xSetRfFrequency( freq );
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f000 fba5 	bl	8002310 <SX126xSetRfFrequency>
    RadioRx( 0 );
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff fbfc 	bl	80013c4 <RadioRx>
    DelayMs( 1 );
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff fb7d 	bl	80012cc <DelayMs>
    RadioSleep( );
 8001bd2:	f7ff fd19 	bl	8001608 <RadioSleep>
}
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	bd10      	pop	{r4, pc}

08001bda <HALSpiInOut>:




uint8_t HALSpiInOut(SPI_HandleTypeDef *hspi, uint8_t transmitdata)
{
 8001bda:	b500      	push	{lr}
 8001bdc:	b087      	sub	sp, #28
 8001bde:	f88d 100f 	strb.w	r1, [sp, #15]
	uint8_t *data = &transmitdata;
	uint8_t receive_data = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_SPI_TransmitReceive(hspi, data, &receive_data, 1, 200);
 8001be8:	23c8      	movs	r3, #200	; 0xc8
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2301      	movs	r3, #1
 8001bee:	f10d 0217 	add.w	r2, sp, #23
 8001bf2:	f10d 010f 	add.w	r1, sp, #15
 8001bf6:	f002 f90e 	bl	8003e16 <HAL_SPI_TransmitReceive>
	return receive_data;
}
 8001bfa:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001bfe:	b007      	add	sp, #28
 8001c00:	f85d fb04 	ldr.w	pc, [sp], #4

08001c04 <SX126xReset>:




void SX126xReset( void )
{
 8001c04:	b510      	push	{r4, lr}
    DelayMs( 1 );
 8001c06:	2001      	movs	r0, #1
 8001c08:	f7ff fb60 	bl	80012cc <DelayMs>
    HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_GPIO_Pin, GPIO_PIN_RESET);
 8001c0c:	4c09      	ldr	r4, [pc, #36]	; (8001c34 <SX126xReset+0x30>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c14:	4620      	mov	r0, r4
 8001c16:	f001 fc65 	bl	80034e4 <HAL_GPIO_WritePin>
    DelayMs( 2 );
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f7ff fb56 	bl	80012cc <DelayMs>
    HAL_GPIO_WritePin(SX1278_RST_PIN_INDEX_GPIO_Port, SX1278_RST_PIN_INDEX_GPIO_Pin, GPIO_PIN_SET);
 8001c20:	2201      	movs	r2, #1
 8001c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c26:	4620      	mov	r0, r4
 8001c28:	f001 fc5c 	bl	80034e4 <HAL_GPIO_WritePin>
    DelayMs( 1);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7ff fb4d 	bl	80012cc <DelayMs>
}
 8001c32:	bd10      	pop	{r4, pc}
 8001c34:	40010800 	.word	0x40010800

08001c38 <SX126xWaitOnBusy>:

void SX126xWaitOnBusy( void )
{
 8001c38:	b538      	push	{r3, r4, r5, lr}
   while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5));
 8001c3a:	4d04      	ldr	r5, [pc, #16]	; (8001c4c <SX126xWaitOnBusy+0x14>)
 8001c3c:	2420      	movs	r4, #32
 8001c3e:	4621      	mov	r1, r4
 8001c40:	4628      	mov	r0, r5
 8001c42:	f001 fc49 	bl	80034d8 <HAL_GPIO_ReadPin>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d1f9      	bne.n	8001c3e <SX126xWaitOnBusy+0x6>
}
 8001c4a:	bd38      	pop	{r3, r4, r5, pc}
 8001c4c:	40010c00 	.word	0x40010c00

08001c50 <SX126xWakeup>:


void SX126xWakeup( void )
{
 8001c50:	b538      	push	{r3, r4, r5, lr}
    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8001c52:	4c0c      	ldr	r4, [pc, #48]	; (8001c84 <SX126xWakeup+0x34>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f001 fc42 	bl	80034e4 <HAL_GPIO_WritePin>
   
    HALSpiInOut(&hspi2,RADIO_GET_STATUS);
 8001c60:	4d09      	ldr	r5, [pc, #36]	; (8001c88 <SX126xWakeup+0x38>)
 8001c62:	21c0      	movs	r1, #192	; 0xc0
 8001c64:	4628      	mov	r0, r5
 8001c66:	f7ff ffb8 	bl	8001bda <HALSpiInOut>
    HALSpiInOut(&hspi2,0);
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4628      	mov	r0, r5
 8001c6e:	f7ff ffb4 	bl	8001bda <HALSpiInOut>
    
    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8001c72:	2201      	movs	r2, #1
 8001c74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f001 fc33 	bl	80034e4 <HAL_GPIO_WritePin>

    // Wait for chip to be ready.
    SX126xWaitOnBusy( );
 8001c7e:	f7ff ffdb 	bl	8001c38 <SX126xWaitOnBusy>
}
 8001c82:	bd38      	pop	{r3, r4, r5, pc}
 8001c84:	40010c00 	.word	0x40010c00
 8001c88:	20001234 	.word	0x20001234

08001c8c <SX126xWriteCommand>:

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8e:	4607      	mov	r7, r0
 8001c90:	460d      	mov	r5, r1
 8001c92:	4616      	mov	r6, r2
	uint16_t i = 0;
    SX126xCheckDeviceReady( );
 8001c94:	f000 f954 	bl	8001f40 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c9e:	4810      	ldr	r0, [pc, #64]	; (8001ce0 <SX126xWriteCommand+0x54>)
 8001ca0:	f001 fc20 	bl	80034e4 <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi2,( uint8_t )command );
 8001ca4:	4639      	mov	r1, r7
 8001ca6:	480f      	ldr	r0, [pc, #60]	; (8001ce4 <SX126xWriteCommand+0x58>)
 8001ca8:	f7ff ff97 	bl	8001bda <HALSpiInOut>

    for( i = 0; i < size; i++ )
 8001cac:	b15e      	cbz	r6, 8001cc6 <SX126xWriteCommand+0x3a>
 8001cae:	1e6c      	subs	r4, r5, #1
 8001cb0:	3e01      	subs	r6, #1
 8001cb2:	b2b6      	uxth	r6, r6
 8001cb4:	4435      	add	r5, r6
    {
        HALSpiInOut(&hspi2,buffer[i] );
 8001cb6:	4e0b      	ldr	r6, [pc, #44]	; (8001ce4 <SX126xWriteCommand+0x58>)
 8001cb8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001cbc:	4630      	mov	r0, r6
 8001cbe:	f7ff ff8c 	bl	8001bda <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8001cc2:	42ac      	cmp	r4, r5
 8001cc4:	d1f8      	bne.n	8001cb8 <SX126xWriteCommand+0x2c>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <SX126xWriteCommand+0x54>)
 8001cce:	f001 fc09 	bl	80034e4 <HAL_GPIO_WritePin>
    
    if( command != RADIO_SET_SLEEP )
 8001cd2:	2f84      	cmp	r7, #132	; 0x84
 8001cd4:	d100      	bne.n	8001cd8 <SX126xWriteCommand+0x4c>
    {
        SX126xWaitOnBusy( );
    }
}
 8001cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SX126xWaitOnBusy( );
 8001cd8:	f7ff ffae 	bl	8001c38 <SX126xWaitOnBusy>
}
 8001cdc:	e7fb      	b.n	8001cd6 <SX126xWriteCommand+0x4a>
 8001cde:	bf00      	nop
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	20001234 	.word	0x20001234

08001ce8 <SX126xReadCommand>:

void SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	4604      	mov	r4, r0
 8001cec:	460d      	mov	r5, r1
 8001cee:	4616      	mov	r6, r2
	uint16_t i = 0;
    SX126xCheckDeviceReady( );
 8001cf0:	f000 f926 	bl	8001f40 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	4811      	ldr	r0, [pc, #68]	; (8001d40 <SX126xReadCommand+0x58>)
 8001cfc:	f001 fbf2 	bl	80034e4 <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi2,( uint8_t )command );
 8001d00:	4f10      	ldr	r7, [pc, #64]	; (8001d44 <SX126xReadCommand+0x5c>)
 8001d02:	4621      	mov	r1, r4
 8001d04:	4638      	mov	r0, r7
 8001d06:	f7ff ff68 	bl	8001bda <HALSpiInOut>
    HALSpiInOut(&hspi2,0x00 );
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4638      	mov	r0, r7
 8001d0e:	f7ff ff64 	bl	8001bda <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8001d12:	b166      	cbz	r6, 8001d2e <SX126xReadCommand+0x46>
 8001d14:	1e6c      	subs	r4, r5, #1
 8001d16:	3e01      	subs	r6, #1
 8001d18:	b2b6      	uxth	r6, r6
 8001d1a:	4435      	add	r5, r6
    {
        buffer[i] = HALSpiInOut(&hspi2,0 );
 8001d1c:	2600      	movs	r6, #0
 8001d1e:	4631      	mov	r1, r6
 8001d20:	4638      	mov	r0, r7
 8001d22:	f7ff ff5a 	bl	8001bda <HALSpiInOut>
 8001d26:	f804 0f01 	strb.w	r0, [r4, #1]!
    for( i = 0; i < size; i++ )
 8001d2a:	42ac      	cmp	r4, r5
 8001d2c:	d1f7      	bne.n	8001d1e <SX126xReadCommand+0x36>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <SX126xReadCommand+0x58>)
 8001d36:	f001 fbd5 	bl	80034e4 <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 8001d3a:	f7ff ff7d 	bl	8001c38 <SX126xWaitOnBusy>
}
 8001d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	20001234 	.word	0x20001234

08001d48 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	460d      	mov	r5, r1
 8001d4e:	4616      	mov	r6, r2
	uint16_t i = 0;
	
    SX126xCheckDeviceReady( );
 8001d50:	f000 f8f6 	bl	8001f40 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d5a:	4813      	ldr	r0, [pc, #76]	; (8001da8 <SX126xWriteRegisters+0x60>)
 8001d5c:	f001 fbc2 	bl	80034e4 <HAL_GPIO_WritePin>
    
    HALSpiInOut(&hspi2,RADIO_WRITE_REGISTER );
 8001d60:	4f12      	ldr	r7, [pc, #72]	; (8001dac <SX126xWriteRegisters+0x64>)
 8001d62:	210d      	movs	r1, #13
 8001d64:	4638      	mov	r0, r7
 8001d66:	f7ff ff38 	bl	8001bda <HALSpiInOut>
    HALSpiInOut(&hspi2,( address & 0xFF00 ) >> 8 );
 8001d6a:	0a21      	lsrs	r1, r4, #8
 8001d6c:	4638      	mov	r0, r7
 8001d6e:	f7ff ff34 	bl	8001bda <HALSpiInOut>
    HALSpiInOut(&hspi2, address & 0x00FF );
 8001d72:	b2e1      	uxtb	r1, r4
 8001d74:	4638      	mov	r0, r7
 8001d76:	f7ff ff30 	bl	8001bda <HALSpiInOut>
    
    for( i = 0; i < size; i++ )
 8001d7a:	b15e      	cbz	r6, 8001d94 <SX126xWriteRegisters+0x4c>
 8001d7c:	1e6c      	subs	r4, r5, #1
 8001d7e:	3e01      	subs	r6, #1
 8001d80:	b2b6      	uxth	r6, r6
 8001d82:	4435      	add	r5, r6
    {
        HALSpiInOut(&hspi2,buffer[i] );
 8001d84:	463e      	mov	r6, r7
 8001d86:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff ff25 	bl	8001bda <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8001d90:	42ac      	cmp	r4, r5
 8001d92:	d1f8      	bne.n	8001d86 <SX126xWriteRegisters+0x3e>
    }


    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d9a:	4803      	ldr	r0, [pc, #12]	; (8001da8 <SX126xWriteRegisters+0x60>)
 8001d9c:	f001 fba2 	bl	80034e4 <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 8001da0:	f7ff ff4a 	bl	8001c38 <SX126xWaitOnBusy>
}
 8001da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	20001234 	.word	0x20001234

08001db0 <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 8001db0:	b500      	push	{lr}
 8001db2:	b083      	sub	sp, #12
 8001db4:	f88d 1007 	strb.w	r1, [sp, #7]
    SX126xWriteRegisters( address, &value, 1 );
 8001db8:	2201      	movs	r2, #1
 8001dba:	f10d 0107 	add.w	r1, sp, #7
 8001dbe:	f7ff ffc3 	bl	8001d48 <SX126xWriteRegisters>
}
 8001dc2:	b003      	add	sp, #12
 8001dc4:	f85d fb04 	ldr.w	pc, [sp], #4

08001dc8 <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dca:	4607      	mov	r7, r0
 8001dcc:	460d      	mov	r5, r1
 8001dce:	4616      	mov	r6, r2
	uint16_t i = 0;
    SX126xCheckDeviceReady( );
 8001dd0:	f000 f8b6 	bl	8001f40 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dda:	4816      	ldr	r0, [pc, #88]	; (8001e34 <SX126xReadRegisters+0x6c>)
 8001ddc:	f001 fb82 	bl	80034e4 <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi2,RADIO_READ_REGISTER );
 8001de0:	4c15      	ldr	r4, [pc, #84]	; (8001e38 <SX126xReadRegisters+0x70>)
 8001de2:	211d      	movs	r1, #29
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff fef8 	bl	8001bda <HALSpiInOut>
    HALSpiInOut(&hspi2,( address & 0xFF00 ) >> 8 );
 8001dea:	0a39      	lsrs	r1, r7, #8
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7ff fef4 	bl	8001bda <HALSpiInOut>
    HALSpiInOut(&hspi2, address & 0x00FF );
 8001df2:	b2f9      	uxtb	r1, r7
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7ff fef0 	bl	8001bda <HALSpiInOut>
    HALSpiInOut(&hspi2, 0 );
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff feec 	bl	8001bda <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8001e02:	b16e      	cbz	r6, 8001e20 <SX126xReadRegisters+0x58>
 8001e04:	1e6c      	subs	r4, r5, #1
 8001e06:	3e01      	subs	r6, #1
 8001e08:	b2b6      	uxth	r6, r6
 8001e0a:	4435      	add	r5, r6
    {
        buffer[i] = HALSpiInOut(&hspi2,0 );
 8001e0c:	4f0a      	ldr	r7, [pc, #40]	; (8001e38 <SX126xReadRegisters+0x70>)
 8001e0e:	2600      	movs	r6, #0
 8001e10:	4631      	mov	r1, r6
 8001e12:	4638      	mov	r0, r7
 8001e14:	f7ff fee1 	bl	8001bda <HALSpiInOut>
 8001e18:	f804 0f01 	strb.w	r0, [r4, #1]!
    for( i = 0; i < size; i++ )
 8001e1c:	42ac      	cmp	r4, r5
 8001e1e:	d1f7      	bne.n	8001e10 <SX126xReadRegisters+0x48>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e26:	4803      	ldr	r0, [pc, #12]	; (8001e34 <SX126xReadRegisters+0x6c>)
 8001e28:	f001 fb5c 	bl	80034e4 <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 8001e2c:	f7ff ff04 	bl	8001c38 <SX126xWaitOnBusy>
}
 8001e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40010c00 	.word	0x40010c00
 8001e38:	20001234 	.word	0x20001234

08001e3c <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 8001e3c:	b500      	push	{lr}
 8001e3e:	b083      	sub	sp, #12
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 8001e40:	2201      	movs	r2, #1
 8001e42:	f10d 0107 	add.w	r1, sp, #7
 8001e46:	f7ff ffbf 	bl	8001dc8 <SX126xReadRegisters>
    return data;
}
 8001e4a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001e4e:	b003      	add	sp, #12
 8001e50:	f85d fb04 	ldr.w	pc, [sp], #4

08001e54 <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	4606      	mov	r6, r0
 8001e58:	460d      	mov	r5, r1
 8001e5a:	4614      	mov	r4, r2
	uint16_t i = 0;
    SX126xCheckDeviceReady( );
 8001e5c:	f000 f870 	bl	8001f40 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e66:	4811      	ldr	r0, [pc, #68]	; (8001eac <SX126xWriteBuffer+0x58>)
 8001e68:	f001 fb3c 	bl	80034e4 <HAL_GPIO_WritePin>
    
    HALSpiInOut(&hspi2, RADIO_WRITE_BUFFER );
 8001e6c:	4f10      	ldr	r7, [pc, #64]	; (8001eb0 <SX126xWriteBuffer+0x5c>)
 8001e6e:	210e      	movs	r1, #14
 8001e70:	4638      	mov	r0, r7
 8001e72:	f7ff feb2 	bl	8001bda <HALSpiInOut>
    HALSpiInOut(&hspi2, offset );
 8001e76:	4631      	mov	r1, r6
 8001e78:	4638      	mov	r0, r7
 8001e7a:	f7ff feae 	bl	8001bda <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8001e7e:	b2a2      	uxth	r2, r4
 8001e80:	b15a      	cbz	r2, 8001e9a <SX126xWriteBuffer+0x46>
 8001e82:	1e6c      	subs	r4, r5, #1
 8001e84:	3a01      	subs	r2, #1
 8001e86:	b292      	uxth	r2, r2
 8001e88:	4415      	add	r5, r2
    {
        HALSpiInOut(&hspi2, buffer[i] );
 8001e8a:	463e      	mov	r6, r7
 8001e8c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001e90:	4630      	mov	r0, r6
 8001e92:	f7ff fea2 	bl	8001bda <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8001e96:	42ac      	cmp	r4, r5
 8001e98:	d1f8      	bne.n	8001e8c <SX126xWriteBuffer+0x38>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <SX126xWriteBuffer+0x58>)
 8001ea2:	f001 fb1f 	bl	80034e4 <HAL_GPIO_WritePin>

    SX126xWaitOnBusy( );
 8001ea6:	f7ff fec7 	bl	8001c38 <SX126xWaitOnBusy>
}
 8001eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eac:	40010c00 	.word	0x40010c00
 8001eb0:	20001234 	.word	0x20001234

08001eb4 <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb6:	4607      	mov	r7, r0
 8001eb8:	460d      	mov	r5, r1
 8001eba:	4614      	mov	r4, r2
	uint16_t i = 0;
	
    SX126xCheckDeviceReady( );
 8001ebc:	f000 f840 	bl	8001f40 <SX126xCheckDeviceReady>

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec6:	4814      	ldr	r0, [pc, #80]	; (8001f18 <SX126xReadBuffer+0x64>)
 8001ec8:	f001 fb0c 	bl	80034e4 <HAL_GPIO_WritePin>

    HALSpiInOut(&hspi2,  RADIO_READ_BUFFER );
 8001ecc:	4e13      	ldr	r6, [pc, #76]	; (8001f1c <SX126xReadBuffer+0x68>)
 8001ece:	211e      	movs	r1, #30
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f7ff fe82 	bl	8001bda <HALSpiInOut>
    HALSpiInOut(&hspi2,  offset );
 8001ed6:	4639      	mov	r1, r7
 8001ed8:	4630      	mov	r0, r6
 8001eda:	f7ff fe7e 	bl	8001bda <HALSpiInOut>
    HALSpiInOut(&hspi2,  0 );
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f7ff fe7a 	bl	8001bda <HALSpiInOut>
    for( i = 0; i < size; i++ )
 8001ee6:	b2a2      	uxth	r2, r4
 8001ee8:	b16a      	cbz	r2, 8001f06 <SX126xReadBuffer+0x52>
 8001eea:	1e6c      	subs	r4, r5, #1
 8001eec:	3a01      	subs	r2, #1
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	4415      	add	r5, r2
    {
        buffer[i] = HALSpiInOut(&hspi2, 0 );
 8001ef2:	4637      	mov	r7, r6
 8001ef4:	2600      	movs	r6, #0
 8001ef6:	4631      	mov	r1, r6
 8001ef8:	4638      	mov	r0, r7
 8001efa:	f7ff fe6e 	bl	8001bda <HALSpiInOut>
 8001efe:	f804 0f01 	strb.w	r0, [r4, #1]!
    for( i = 0; i < size; i++ )
 8001f02:	42ac      	cmp	r4, r5
 8001f04:	d1f7      	bne.n	8001ef6 <SX126xReadBuffer+0x42>
    }

    HAL_GPIO_WritePin( SPI_CSS_Pin_GPIO_Port, SPI_CSS_Pin_Pin,GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <SX126xReadBuffer+0x64>)
 8001f0e:	f001 fae9 	bl	80034e4 <HAL_GPIO_WritePin>
    
    SX126xWaitOnBusy( );
 8001f12:	f7ff fe91 	bl	8001c38 <SX126xWaitOnBusy>
}
 8001f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	20001234 	.word	0x20001234

08001f20 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower( int8_t power )
{
 8001f20:	b508      	push	{r3, lr}
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 8001f22:	2102      	movs	r1, #2
 8001f24:	f000 fa3e 	bl	80023a4 <SX126xSetTxParams>
}
 8001f28:	bd08      	pop	{r3, pc}

08001f2a <SX126xGetPaSelect>:
//    {
//        return SX1262;
//    }
  
  return SX1262;
}
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	4770      	bx	lr

08001f2e <SX126xAntSwOn>:

void SX126xAntSwOn( void )
{
    //GpioInit( &AntPow, ANT_SWITCH_POWER, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}
 8001f2e:	4770      	bx	lr

08001f30 <SX126xAntSwOff>:

void SX126xAntSwOff( void )
{
   // GpioInit( &AntPow, ANT_SWITCH_POWER, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 8001f30:	4770      	bx	lr
	...

08001f34 <SX126xGetOperatingMode>:
}

RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
}
 8001f34:	4b01      	ldr	r3, [pc, #4]	; (8001f3c <SX126xGetOperatingMode+0x8>)
 8001f36:	7818      	ldrb	r0, [r3, #0]
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	200000b9 	.word	0x200000b9

08001f40 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 8001f40:	b508      	push	{r3, lr}
    return OperatingMode;
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <SX126xCheckDeviceReady+0x1c>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 8001f46:	b10b      	cbz	r3, 8001f4c <SX126xCheckDeviceReady+0xc>
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d103      	bne.n	8001f54 <SX126xCheckDeviceReady+0x14>
    {
        SX126xWakeup( );
 8001f4c:	f7ff fe80 	bl	8001c50 <SX126xWakeup>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        SX126xAntSwOn( );
 8001f50:	f7ff ffed 	bl	8001f2e <SX126xAntSwOn>
    }
    SX126xWaitOnBusy( );
 8001f54:	f7ff fe70 	bl	8001c38 <SX126xWaitOnBusy>
}
 8001f58:	bd08      	pop	{r3, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200000b9 	.word	0x200000b9

08001f60 <SX126xSetPayload>:

void SX126xSetPayload( uint8_t *payload, uint8_t size )
{
 8001f60:	b508      	push	{r3, lr}
 8001f62:	460a      	mov	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 8001f64:	4601      	mov	r1, r0
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff ff74 	bl	8001e54 <SX126xWriteBuffer>
}
 8001f6c:	bd08      	pop	{r3, pc}

08001f6e <SX126xSetSyncWord>:
    SX126xSetPayload( payload, size );
    SX126xSetTx( timeout );
}

uint8_t SX126xSetSyncWord( uint8_t *syncWord )
{
 8001f6e:	b508      	push	{r3, lr}
 8001f70:	4601      	mov	r1, r0
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8001f72:	2208      	movs	r2, #8
 8001f74:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8001f78:	f7ff fee6 	bl	8001d48 <SX126xWriteRegisters>
    return 0;
}
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	bd08      	pop	{r3, pc}

08001f80 <SX126xSetCrcSeed>:

void SX126xSetCrcSeed( uint16_t seed )
{
 8001f80:	b500      	push	{lr}
 8001f82:	b083      	sub	sp, #12
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001f84:	0a03      	lsrs	r3, r0, #8
 8001f86:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8001f8a:	f88d 0005 	strb.w	r0, [sp, #5]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <SX126xSetCrcSeed+0x28>)
    switch( SX126xGetPacketType( ) )
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b113      	cbz	r3, 8001f9a <SX126xSetCrcSeed+0x1a>
}
 8001f94:	b003      	add	sp, #12
 8001f96:	f85d fb04 	ldr.w	pc, [sp], #4
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	a901      	add	r1, sp, #4
 8001f9e:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8001fa2:	f7ff fed1 	bl	8001d48 <SX126xWriteRegisters>
}
 8001fa6:	e7f5      	b.n	8001f94 <SX126xSetCrcSeed+0x14>
 8001fa8:	200000ba 	.word	0x200000ba

08001fac <SX126xSetCrcPolynomial>:
{
 8001fac:	b500      	push	{lr}
 8001fae:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8001fb0:	0a03      	lsrs	r3, r0, #8
 8001fb2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8001fb6:	f88d 0005 	strb.w	r0, [sp, #5]
    return PacketType;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <SX126xSetCrcPolynomial+0x28>)
    switch( SX126xGetPacketType( ) )
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b113      	cbz	r3, 8001fc6 <SX126xSetCrcPolynomial+0x1a>
}
 8001fc0:	b003      	add	sp, #12
 8001fc2:	f85d fb04 	ldr.w	pc, [sp], #4
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	a901      	add	r1, sp, #4
 8001fca:	f240 60be 	movw	r0, #1726	; 0x6be
 8001fce:	f7ff febb 	bl	8001d48 <SX126xWriteRegisters>
}
 8001fd2:	e7f5      	b.n	8001fc0 <SX126xSetCrcPolynomial+0x14>
 8001fd4:	200000ba 	.word	0x200000ba

08001fd8 <SX126xSetWhiteningSeed>:
    return PacketType;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <SX126xSetWhiteningSeed+0x34>)
    switch( SX126xGetPacketType( ) )
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b103      	cbz	r3, 8001fe0 <SX126xSetWhiteningSeed+0x8>
 8001fde:	4770      	bx	lr
{
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	4604      	mov	r4, r0
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8001fe4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8001fe8:	f7ff ff28 	bl	8001e3c <SX126xReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8001fec:	f3c4 2100 	ubfx	r1, r4, #8, #1
 8001ff0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8001ff4:	4301      	orrs	r1, r0
 8001ff6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8001ffa:	f7ff fed9 	bl	8001db0 <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 8001ffe:	b2e1      	uxtb	r1, r4
 8002000:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8002004:	f7ff fed4 	bl	8001db0 <SX126xWriteRegister>
}
 8002008:	bd10      	pop	{r4, pc}
 800200a:	bf00      	nop
 800200c:	200000ba 	.word	0x200000ba

08002010 <SX126xSetSleep>:
{
 8002010:	b500      	push	{lr}
 8002012:	b083      	sub	sp, #12
 8002014:	f88d 0004 	strb.w	r0, [sp, #4]
    SX126xAntSwOff( );
 8002018:	f7ff ff8a 	bl	8001f30 <SX126xAntSwOff>
    SX126xWriteCommand( RADIO_SET_SLEEP, &sleepConfig.Value, 1 );
 800201c:	2201      	movs	r2, #1
 800201e:	a901      	add	r1, sp, #4
 8002020:	2084      	movs	r0, #132	; 0x84
 8002022:	f7ff fe33 	bl	8001c8c <SX126xWriteCommand>
    OperatingMode = MODE_SLEEP;
 8002026:	4b03      	ldr	r3, [pc, #12]	; (8002034 <SX126xSetSleep+0x24>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
}
 800202c:	b003      	add	sp, #12
 800202e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002032:	bf00      	nop
 8002034:	200000b9 	.word	0x200000b9

08002038 <SX126xSetStandby>:
{
 8002038:	b500      	push	{lr}
 800203a:	b083      	sub	sp, #12
 800203c:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8002040:	2201      	movs	r2, #1
 8002042:	f10d 0107 	add.w	r1, sp, #7
 8002046:	2080      	movs	r0, #128	; 0x80
 8002048:	f7ff fe20 	bl	8001c8c <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 800204c:	f89d 3007 	ldrb.w	r3, [sp, #7]
        OperatingMode = MODE_STDBY_XOSC;
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2201      	moveq	r2, #1
 8002056:	2202      	movne	r2, #2
 8002058:	4b02      	ldr	r3, [pc, #8]	; (8002064 <SX126xSetStandby+0x2c>)
 800205a:	701a      	strb	r2, [r3, #0]
}
 800205c:	b003      	add	sp, #12
 800205e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002062:	bf00      	nop
 8002064:	200000b9 	.word	0x200000b9

08002068 <SX126xSetTx>:
{
 8002068:	b500      	push	{lr}
 800206a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <SX126xSetTx+0x2c>)
 800206e:	2204      	movs	r2, #4
 8002070:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002072:	0c03      	lsrs	r3, r0, #16
 8002074:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002078:	0a03      	lsrs	r3, r0, #8
 800207a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800207e:	f88d 0006 	strb.w	r0, [sp, #6]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8002082:	2203      	movs	r2, #3
 8002084:	a901      	add	r1, sp, #4
 8002086:	2083      	movs	r0, #131	; 0x83
 8002088:	f7ff fe00 	bl	8001c8c <SX126xWriteCommand>
}
 800208c:	b003      	add	sp, #12
 800208e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002092:	bf00      	nop
 8002094:	200000b9 	.word	0x200000b9

08002098 <SX126xSendPayload>:
{
 8002098:	b510      	push	{r4, lr}
 800209a:	4614      	mov	r4, r2
    SX126xSetPayload( payload, size );
 800209c:	f7ff ff60 	bl	8001f60 <SX126xSetPayload>
    SX126xSetTx( timeout );
 80020a0:	4620      	mov	r0, r4
 80020a2:	f7ff ffe1 	bl	8002068 <SX126xSetTx>
}
 80020a6:	bd10      	pop	{r4, pc}

080020a8 <SX126xSetRx>:
{
 80020a8:	b500      	push	{lr}
 80020aa:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <SX126xSetRx+0x2c>)
 80020ae:	2205      	movs	r2, #5
 80020b0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80020b2:	0c03      	lsrs	r3, r0, #16
 80020b4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80020b8:	0a03      	lsrs	r3, r0, #8
 80020ba:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80020be:	f88d 0006 	strb.w	r0, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 80020c2:	2203      	movs	r2, #3
 80020c4:	a901      	add	r1, sp, #4
 80020c6:	2082      	movs	r0, #130	; 0x82
 80020c8:	f7ff fde0 	bl	8001c8c <SX126xWriteCommand>
}
 80020cc:	b003      	add	sp, #12
 80020ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80020d2:	bf00      	nop
 80020d4:	200000b9 	.word	0x200000b9

080020d8 <SX126xSetRxBoosted>:
{
 80020d8:	b510      	push	{r4, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <SX126xSetRxBoosted+0x34>)
 80020e0:	2205      	movs	r2, #5
 80020e2:	701a      	strb	r2, [r3, #0]
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 80020e4:	2196      	movs	r1, #150	; 0x96
 80020e6:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80020ea:	f7ff fe61 	bl	8001db0 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80020ee:	0c23      	lsrs	r3, r4, #16
 80020f0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80020f4:	0a23      	lsrs	r3, r4, #8
 80020f6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80020fa:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 80020fe:	2203      	movs	r2, #3
 8002100:	a901      	add	r1, sp, #4
 8002102:	2082      	movs	r0, #130	; 0x82
 8002104:	f7ff fdc2 	bl	8001c8c <SX126xWriteCommand>
}
 8002108:	b002      	add	sp, #8
 800210a:	bd10      	pop	{r4, pc}
 800210c:	200000b9 	.word	0x200000b9

08002110 <SX126xSetRxDutyCycle>:
{
 8002110:	b500      	push	{lr}
 8002112:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8002114:	0c03      	lsrs	r3, r0, #16
 8002116:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800211a:	0a03      	lsrs	r3, r0, #8
 800211c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8002120:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8002124:	0c0b      	lsrs	r3, r1, #16
 8002126:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800212a:	0a0b      	lsrs	r3, r1, #8
 800212c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8002130:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8002134:	2206      	movs	r2, #6
 8002136:	4669      	mov	r1, sp
 8002138:	2094      	movs	r0, #148	; 0x94
 800213a:	f7ff fda7 	bl	8001c8c <SX126xWriteCommand>
    OperatingMode = MODE_RX_DC;
 800213e:	4b03      	ldr	r3, [pc, #12]	; (800214c <SX126xSetRxDutyCycle+0x3c>)
 8002140:	2206      	movs	r2, #6
 8002142:	701a      	strb	r2, [r3, #0]
}
 8002144:	b003      	add	sp, #12
 8002146:	f85d fb04 	ldr.w	pc, [sp], #4
 800214a:	bf00      	nop
 800214c:	200000b9 	.word	0x200000b9

08002150 <SX126xSetCad>:
{
 8002150:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 8002152:	2200      	movs	r2, #0
 8002154:	4611      	mov	r1, r2
 8002156:	20c5      	movs	r0, #197	; 0xc5
 8002158:	f7ff fd98 	bl	8001c8c <SX126xWriteCommand>
    OperatingMode = MODE_CAD;
 800215c:	4b01      	ldr	r3, [pc, #4]	; (8002164 <SX126xSetCad+0x14>)
 800215e:	2207      	movs	r2, #7
 8002160:	701a      	strb	r2, [r3, #0]
}
 8002162:	bd08      	pop	{r3, pc}
 8002164:	200000b9 	.word	0x200000b9

08002168 <SX126xSetTxContinuousWave>:
{
 8002168:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800216a:	2200      	movs	r2, #0
 800216c:	4611      	mov	r1, r2
 800216e:	20d1      	movs	r0, #209	; 0xd1
 8002170:	f7ff fd8c 	bl	8001c8c <SX126xWriteCommand>
}
 8002174:	bd08      	pop	{r3, pc}

08002176 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 8002176:	b500      	push	{lr}
 8002178:	b083      	sub	sp, #12
 800217a:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800217e:	2201      	movs	r2, #1
 8002180:	f10d 0107 	add.w	r1, sp, #7
 8002184:	209f      	movs	r0, #159	; 0x9f
 8002186:	f7ff fd81 	bl	8001c8c <SX126xWriteCommand>
}
 800218a:	b003      	add	sp, #12
 800218c:	f85d fb04 	ldr.w	pc, [sp], #4

08002190 <SX126xSetLoRaSymbNumTimeout>:
{
 8002190:	b500      	push	{lr}
 8002192:	b083      	sub	sp, #12
 8002194:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1 );
 8002198:	2201      	movs	r2, #1
 800219a:	f10d 0107 	add.w	r1, sp, #7
 800219e:	20a0      	movs	r0, #160	; 0xa0
 80021a0:	f7ff fd74 	bl	8001c8c <SX126xWriteCommand>
}
 80021a4:	b003      	add	sp, #12
 80021a6:	f85d fb04 	ldr.w	pc, [sp], #4

080021aa <SX126xSetRegulatorMode>:
{
 80021aa:	b500      	push	{lr}
 80021ac:	b083      	sub	sp, #12
 80021ae:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80021b2:	2201      	movs	r2, #1
 80021b4:	f10d 0107 	add.w	r1, sp, #7
 80021b8:	2096      	movs	r0, #150	; 0x96
 80021ba:	f7ff fd67 	bl	8001c8c <SX126xWriteCommand>
}
 80021be:	b003      	add	sp, #12
 80021c0:	f85d fb04 	ldr.w	pc, [sp], #4

080021c4 <SX126xCalibrateImage>:
{
 80021c4:	b500      	push	{lr}
 80021c6:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <SX126xCalibrateImage+0x78>)
 80021ca:	4298      	cmp	r0, r3
 80021cc:	d90d      	bls.n	80021ea <SX126xCalibrateImage+0x26>
        calFreq[0] = 0xE1;
 80021ce:	23e1      	movs	r3, #225	; 0xe1
 80021d0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80021d4:	23e9      	movs	r3, #233	; 0xe9
 80021d6:	f88d 3005 	strb.w	r3, [sp, #5]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80021da:	2202      	movs	r2, #2
 80021dc:	a901      	add	r1, sp, #4
 80021de:	2098      	movs	r0, #152	; 0x98
 80021e0:	f7ff fd54 	bl	8001c8c <SX126xWriteCommand>
}
 80021e4:	b003      	add	sp, #12
 80021e6:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <SX126xCalibrateImage+0x7c>)
 80021ec:	4298      	cmp	r0, r3
 80021ee:	d906      	bls.n	80021fe <SX126xCalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80021f0:	23d7      	movs	r3, #215	; 0xd7
 80021f2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xD8;
 80021f6:	23d8      	movs	r3, #216	; 0xd8
 80021f8:	f88d 3005 	strb.w	r3, [sp, #5]
 80021fc:	e7ed      	b.n	80021da <SX126xCalibrateImage+0x16>
    else if( freq > 770000000 )
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <SX126xCalibrateImage+0x80>)
 8002200:	4298      	cmp	r0, r3
 8002202:	d906      	bls.n	8002212 <SX126xCalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8002204:	23c1      	movs	r3, #193	; 0xc1
 8002206:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800220a:	23c5      	movs	r3, #197	; 0xc5
 800220c:	f88d 3005 	strb.w	r3, [sp, #5]
 8002210:	e7e3      	b.n	80021da <SX126xCalibrateImage+0x16>
    else if( freq > 460000000 )
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <SX126xCalibrateImage+0x84>)
 8002214:	4298      	cmp	r0, r3
 8002216:	d906      	bls.n	8002226 <SX126xCalibrateImage+0x62>
        calFreq[0] = 0x75;
 8002218:	2375      	movs	r3, #117	; 0x75
 800221a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800221e:	2381      	movs	r3, #129	; 0x81
 8002220:	f88d 3005 	strb.w	r3, [sp, #5]
 8002224:	e7d9      	b.n	80021da <SX126xCalibrateImage+0x16>
    else if( freq > 425000000 )
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <SX126xCalibrateImage+0x88>)
 8002228:	4298      	cmp	r0, r3
 800222a:	d9d6      	bls.n	80021da <SX126xCalibrateImage+0x16>
        calFreq[0] = 0x6B;
 800222c:	236b      	movs	r3, #107	; 0x6b
 800222e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8002232:	236f      	movs	r3, #111	; 0x6f
 8002234:	f88d 3005 	strb.w	r3, [sp, #5]
 8002238:	e7cf      	b.n	80021da <SX126xCalibrateImage+0x16>
 800223a:	bf00      	nop
 800223c:	35a4e900 	.word	0x35a4e900
 8002240:	32a9f880 	.word	0x32a9f880
 8002244:	2de54480 	.word	0x2de54480
 8002248:	1b6b0b00 	.word	0x1b6b0b00
 800224c:	1954fc40 	.word	0x1954fc40

08002250 <SX126xSetPaConfig>:
{
 8002250:	b500      	push	{lr}
 8002252:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8002254:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8002258:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800225c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8002260:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8002264:	2204      	movs	r2, #4
 8002266:	eb0d 0102 	add.w	r1, sp, r2
 800226a:	2095      	movs	r0, #149	; 0x95
 800226c:	f7ff fd0e 	bl	8001c8c <SX126xWriteCommand>
}
 8002270:	b003      	add	sp, #12
 8002272:	f85d fb04 	ldr.w	pc, [sp], #4

08002276 <SX126xSetDioIrqParams>:
{
 8002276:	b510      	push	{r4, lr}
 8002278:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800227a:	0a04      	lsrs	r4, r0, #8
 800227c:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8002280:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8002284:	0a08      	lsrs	r0, r1, #8
 8002286:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800228a:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800228e:	0a11      	lsrs	r1, r2, #8
 8002290:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8002294:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8002298:	0a1a      	lsrs	r2, r3, #8
 800229a:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800229e:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80022a2:	2208      	movs	r2, #8
 80022a4:	4669      	mov	r1, sp
 80022a6:	4610      	mov	r0, r2
 80022a8:	f7ff fcf0 	bl	8001c8c <SX126xWriteCommand>
}
 80022ac:	b002      	add	sp, #8
 80022ae:	bd10      	pop	{r4, pc}

080022b0 <SX126xGetIrqStatus>:
{
 80022b0:	b500      	push	{lr}
 80022b2:	b083      	sub	sp, #12
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 80022b4:	2202      	movs	r2, #2
 80022b6:	a901      	add	r1, sp, #4
 80022b8:	2012      	movs	r0, #18
 80022ba:	f7ff fd15 	bl	8001ce8 <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 80022be:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80022c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
 80022c6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80022ca:	b003      	add	sp, #12
 80022cc:	f85d fb04 	ldr.w	pc, [sp], #4

080022d0 <SX126xSetDio2AsRfSwitchCtrl>:
{
 80022d0:	b500      	push	{lr}
 80022d2:	b083      	sub	sp, #12
 80022d4:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 80022d8:	2201      	movs	r2, #1
 80022da:	f10d 0107 	add.w	r1, sp, #7
 80022de:	209d      	movs	r0, #157	; 0x9d
 80022e0:	f7ff fcd4 	bl	8001c8c <SX126xWriteCommand>
}
 80022e4:	b003      	add	sp, #12
 80022e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080022ec <SX126xInit>:
{
 80022ec:	b508      	push	{r3, lr}
    SX126xReset( );
 80022ee:	f7ff fc89 	bl	8001c04 <SX126xReset>
    SX126xWakeup( );
 80022f2:	f7ff fcad 	bl	8001c50 <SX126xWakeup>
    SX126xSetStandby( STDBY_RC );
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7ff fe9e 	bl	8002038 <SX126xSetStandby>
    SX126xSetDio2AsRfSwitchCtrl( true );
 80022fc:	2001      	movs	r0, #1
 80022fe:	f7ff ffe7 	bl	80022d0 <SX126xSetDio2AsRfSwitchCtrl>
    OperatingMode = MODE_STDBY_RC;
 8002302:	4b02      	ldr	r3, [pc, #8]	; (800230c <SX126xInit+0x20>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
}
 8002308:	bd08      	pop	{r3, pc}
 800230a:	bf00      	nop
 800230c:	200000b9 	.word	0x200000b9

08002310 <SX126xSetRfFrequency>:
{
 8002310:	b510      	push	{r4, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <SX126xSetRfFrequency+0x60>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b1e3      	cbz	r3, 8002356 <SX126xSetRfFrequency+0x46>
    freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 800231c:	4620      	mov	r0, r4
 800231e:	f7fe f8d7 	bl	80004d0 <__aeabi_ui2d>
 8002322:	a311      	add	r3, pc, #68	; (adr r3, 8002368 <SX126xSetRfFrequency+0x58>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fe fa76 	bl	8000818 <__aeabi_ddiv>
 800232c:	f7fe fbe4 	bl	8000af8 <__aeabi_d2uiz>
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 8002330:	0e03      	lsrs	r3, r0, #24
 8002332:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8002336:	0c03      	lsrs	r3, r0, #16
 8002338:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 800233c:	0a03      	lsrs	r3, r0, #8
 800233e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( freq & 0xFF );
 8002342:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8002346:	2204      	movs	r2, #4
 8002348:	eb0d 0102 	add.w	r1, sp, r2
 800234c:	2086      	movs	r0, #134	; 0x86
 800234e:	f7ff fc9d 	bl	8001c8c <SX126xWriteCommand>
}
 8002352:	b002      	add	sp, #8
 8002354:	bd10      	pop	{r4, pc}
        SX126xCalibrateImage( frequency );
 8002356:	f7ff ff35 	bl	80021c4 <SX126xCalibrateImage>
        ImageCalibrated = true;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <SX126xSetRfFrequency+0x60>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e7dc      	b.n	800231c <SX126xSetRfFrequency+0xc>
 8002362:	bf00      	nop
 8002364:	f3af 8000 	nop.w
 8002368:	00000000 	.word	0x00000000
 800236c:	3fee8480 	.word	0x3fee8480
 8002370:	200000b8 	.word	0x200000b8

08002374 <SX126xSetPacketType>:
{
 8002374:	b500      	push	{lr}
 8002376:	b083      	sub	sp, #12
 8002378:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SX126xSetPacketType+0x20>)
 800237e:	7018      	strb	r0, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8002380:	2201      	movs	r2, #1
 8002382:	f10d 0107 	add.w	r1, sp, #7
 8002386:	208a      	movs	r0, #138	; 0x8a
 8002388:	f7ff fc80 	bl	8001c8c <SX126xWriteCommand>
}
 800238c:	b003      	add	sp, #12
 800238e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002392:	bf00      	nop
 8002394:	200000ba 	.word	0x200000ba

08002398 <SX126xGetPacketType>:
}
 8002398:	4b01      	ldr	r3, [pc, #4]	; (80023a0 <SX126xGetPacketType+0x8>)
 800239a:	7818      	ldrb	r0, [r3, #0]
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	200000ba 	.word	0x200000ba

080023a4 <SX126xSetTxParams>:

void SX126xSetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 80023a4:	b530      	push	{r4, r5, lr}
 80023a6:	b083      	sub	sp, #12
 80023a8:	4604      	mov	r4, r0
 80023aa:	460d      	mov	r5, r1
    uint8_t buf[2];

    if( SX126xGetPaSelect( 0 ) == SX1261 )
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fdbc 	bl	8001f2a <SX126xGetPaSelect>
 80023b2:	2801      	cmp	r0, #1
 80023b4:	d122      	bne.n	80023fc <SX126xSetTxParams+0x58>
    {
        if( power == 15 )
 80023b6:	2c0f      	cmp	r4, #15
        {
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80023b8:	f04f 0301 	mov.w	r3, #1
 80023bc:	461a      	mov	r2, r3
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	bf0c      	ite	eq
 80023c4:	2006      	moveq	r0, #6
        }
        else
        {
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80023c6:	2004      	movne	r0, #4
 80023c8:	f7ff ff42 	bl	8002250 <SX126xSetPaConfig>
        }
        if( power >= 14 )
 80023cc:	f06f 0002 	mvn.w	r0, #2
 80023d0:	4284      	cmp	r4, r0
 80023d2:	bfb8      	it	lt
 80023d4:	4604      	movlt	r4, r0
 80023d6:	2c0e      	cmp	r4, #14
 80023d8:	bfa8      	it	ge
 80023da:	240e      	movge	r4, #14
        }
        else if( power < -3 )
        {
            power = -3;
        }
        SX126xWriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80023dc:	2118      	movs	r1, #24
 80023de:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80023e2:	f7ff fce5 	bl	8001db0 <SX126xWriteRegister>
        {
            power = -3;
        }
        SX126xWriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
    }
    buf[0] = power;
 80023e6:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 80023ea:	f88d 5005 	strb.w	r5, [sp, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80023ee:	2202      	movs	r2, #2
 80023f0:	a901      	add	r1, sp, #4
 80023f2:	208e      	movs	r0, #142	; 0x8e
 80023f4:	f7ff fc4a 	bl	8001c8c <SX126xWriteCommand>
}
 80023f8:	b003      	add	sp, #12
 80023fa:	bd30      	pop	{r4, r5, pc}
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 80023fc:	2301      	movs	r3, #1
 80023fe:	2200      	movs	r2, #0
 8002400:	2107      	movs	r1, #7
 8002402:	2004      	movs	r0, #4
 8002404:	f7ff ff24 	bl	8002250 <SX126xSetPaConfig>
        if( power > 22 )
 8002408:	f06f 0002 	mvn.w	r0, #2
 800240c:	4284      	cmp	r4, r0
 800240e:	bfb8      	it	lt
 8002410:	4604      	movlt	r4, r0
 8002412:	2c16      	cmp	r4, #22
 8002414:	bfa8      	it	ge
 8002416:	2416      	movge	r4, #22
        SX126xWriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8002418:	2138      	movs	r1, #56	; 0x38
 800241a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800241e:	f7ff fcc7 	bl	8001db0 <SX126xWriteRegister>
 8002422:	e7e0      	b.n	80023e6 <SX126xSetTxParams+0x42>
 8002424:	0000      	movs	r0, r0
	...

08002428 <SX126xSetModulationParams>:

void SX126xSetModulationParams( ModulationParams_t *modulationParams )
{
 8002428:	b510      	push	{r4, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	4604      	mov	r4, r0
    uint8_t n;
    uint32_t tempVal = 0;
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800242e:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <SX126xSetModulationParams+0xd0>)
 8002430:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002434:	ab02      	add	r3, sp, #8
 8002436:	e903 0003 	stmdb	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800243a:	7820      	ldrb	r0, [r4, #0]
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <SX126xSetModulationParams+0xd4>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4283      	cmp	r3, r0
 8002442:	d105      	bne.n	8002450 <SX126xSetModulationParams+0x28>
    {
        SX126xSetPacketType( modulationParams->PacketType );
    }

    switch( modulationParams->PacketType )
 8002444:	7823      	ldrb	r3, [r4, #0]
 8002446:	b133      	cbz	r3, 8002456 <SX126xSetModulationParams+0x2e>
 8002448:	2b01      	cmp	r3, #1
 800244a:	d03a      	beq.n	80024c2 <SX126xSetModulationParams+0x9a>
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
    }
}
 800244c:	b002      	add	sp, #8
 800244e:	bd10      	pop	{r4, pc}
        SX126xSetPacketType( modulationParams->PacketType );
 8002450:	f7ff ff90 	bl	8002374 <SX126xSetPacketType>
 8002454:	e7f6      	b.n	8002444 <SX126xSetModulationParams+0x1c>
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
 8002456:	6860      	ldr	r0, [r4, #4]
 8002458:	f7fe f83a 	bl	80004d0 <__aeabi_ui2d>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	a121      	add	r1, pc, #132	; (adr r1, 80024e8 <SX126xSetModulationParams+0xc0>)
 8002462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002466:	f7fe f9d7 	bl	8000818 <__aeabi_ddiv>
 800246a:	2200      	movs	r2, #0
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <SX126xSetModulationParams+0xd8>)
 800246e:	f7fe f8a9 	bl	80005c4 <__aeabi_dmul>
 8002472:	f7fe fb41 	bl	8000af8 <__aeabi_d2uiz>
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002476:	0c03      	lsrs	r3, r0, #16
 8002478:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800247c:	0a03      	lsrs	r3, r0, #8
 800247e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8002482:	f88d 0002 	strb.w	r0, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8002486:	7b23      	ldrb	r3, [r4, #12]
 8002488:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800248c:	7b63      	ldrb	r3, [r4, #13]
 800248e:	f88d 3004 	strb.w	r3, [sp, #4]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 8002492:	68a0      	ldr	r0, [r4, #8]
 8002494:	f7fe f81c 	bl	80004d0 <__aeabi_ui2d>
 8002498:	a315      	add	r3, pc, #84	; (adr r3, 80024f0 <SX126xSetModulationParams+0xc8>)
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	f7fe f9bb 	bl	8000818 <__aeabi_ddiv>
 80024a2:	f7fe fb29 	bl	8000af8 <__aeabi_d2uiz>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80024a6:	0c03      	lsrs	r3, r0, #16
 80024a8:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80024ac:	0a03      	lsrs	r3, r0, #8
 80024ae:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80024b2:	f88d 0007 	strb.w	r0, [sp, #7]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80024b6:	2208      	movs	r2, #8
 80024b8:	4669      	mov	r1, sp
 80024ba:	208b      	movs	r0, #139	; 0x8b
 80024bc:	f7ff fbe6 	bl	8001c8c <SX126xWriteCommand>
        break;
 80024c0:	e7c4      	b.n	800244c <SX126xSetModulationParams+0x24>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80024c2:	7c23      	ldrb	r3, [r4, #16]
 80024c4:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80024c8:	7c63      	ldrb	r3, [r4, #17]
 80024ca:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80024ce:	7ca3      	ldrb	r3, [r4, #18]
 80024d0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80024d4:	7ce3      	ldrb	r3, [r4, #19]
 80024d6:	f88d 3003 	strb.w	r3, [sp, #3]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80024da:	2204      	movs	r2, #4
 80024dc:	4669      	mov	r1, sp
 80024de:	208b      	movs	r0, #139	; 0x8b
 80024e0:	f7ff fbd4 	bl	8001c8c <SX126xWriteCommand>
        break;
 80024e4:	e7b2      	b.n	800244c <SX126xSetModulationParams+0x24>
 80024e6:	bf00      	nop
 80024e8:	00000000 	.word	0x00000000
 80024ec:	417e8480 	.word	0x417e8480
 80024f0:	00000000 	.word	0x00000000
 80024f4:	3fee8480 	.word	0x3fee8480
 80024f8:	08014fb0 	.word	0x08014fb0
 80024fc:	200000ba 	.word	0x200000ba
 8002500:	40400000 	.word	0x40400000

08002504 <SX126xSetPacketParams>:

void SX126xSetPacketParams( PacketParams_t *packetParams )
{
 8002504:	b510      	push	{r4, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	4604      	mov	r4, r0
    uint8_t n;
    uint8_t crcVal = 0;
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800250a:	ab01      	add	r3, sp, #4
 800250c:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <SX126xSetPacketParams+0xc4>)
 800250e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002510:	c303      	stmia	r3!, {r0, r1}
 8002512:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8002514:	7820      	ldrb	r0, [r4, #0]
 8002516:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <SX126xSetPacketParams+0xc8>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4283      	cmp	r3, r0
 800251c:	d117      	bne.n	800254e <SX126xSetPacketParams+0x4a>
    {
        SX126xSetPacketType( packetParams->PacketType );
    }

    switch( packetParams->PacketType )
 800251e:	7823      	ldrb	r3, [r4, #0]
 8002520:	b1c3      	cbz	r3, 8002554 <SX126xSetPacketParams+0x50>
 8002522:	2b01      	cmp	r3, #1
 8002524:	d13a      	bne.n	800259c <SX126xSetPacketParams+0x98>
        buf[7] = crcVal;
        buf[8] = packetParams->Params.Gfsk.DcFree;
        break;
    case PACKET_TYPE_LORA:
        n = 6;
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8002526:	89a3      	ldrh	r3, [r4, #12]
 8002528:	0a1a      	lsrs	r2, r3, #8
 800252a:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800252e:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = packetParams->Params.LoRa.HeaderType;
 8002532:	7ba3      	ldrb	r3, [r4, #14]
 8002534:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8002538:	7be3      	ldrb	r3, [r4, #15]
 800253a:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800253e:	7c23      	ldrb	r3, [r4, #16]
 8002540:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8002544:	7c63      	ldrb	r3, [r4, #17]
 8002546:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 800254a:	2206      	movs	r2, #6
        break;
 800254c:	e022      	b.n	8002594 <SX126xSetPacketParams+0x90>
        SX126xSetPacketType( packetParams->PacketType );
 800254e:	f7ff ff11 	bl	8002374 <SX126xSetPacketType>
 8002552:	e7e4      	b.n	800251e <SX126xSetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8002554:	7a63      	ldrb	r3, [r4, #9]
 8002556:	2bf1      	cmp	r3, #241	; 0xf1
 8002558:	d022      	beq.n	80025a0 <SX126xSetPacketParams+0x9c>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800255a:	2bf2      	cmp	r3, #242	; 0xf2
 800255c:	d02a      	beq.n	80025b4 <SX126xSetPacketParams+0xb0>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800255e:	8862      	ldrh	r2, [r4, #2]
 8002560:	0a11      	lsrs	r1, r2, #8
 8002562:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8002566:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800256a:	7922      	ldrb	r2, [r4, #4]
 800256c:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8002570:	7962      	ldrb	r2, [r4, #5]
 8002572:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8002576:	79a2      	ldrb	r2, [r4, #6]
 8002578:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800257c:	79e2      	ldrb	r2, [r4, #7]
 800257e:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8002582:	7a22      	ldrb	r2, [r4, #8]
 8002584:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8002588:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800258c:	7aa3      	ldrb	r3, [r4, #10]
 800258e:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8002592:	2209      	movs	r2, #9
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8002594:	a901      	add	r1, sp, #4
 8002596:	208c      	movs	r0, #140	; 0x8c
 8002598:	f7ff fb78 	bl	8001c8c <SX126xWriteCommand>
}
 800259c:	b004      	add	sp, #16
 800259e:	bd10      	pop	{r4, pc}
            SX126xSetCrcSeed( CRC_IBM_SEED );
 80025a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025a4:	f7ff fcec 	bl	8001f80 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80025a8:	f248 0005 	movw	r0, #32773	; 0x8005
 80025ac:	f7ff fcfe 	bl	8001fac <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80025b0:	2302      	movs	r3, #2
 80025b2:	e7d4      	b.n	800255e <SX126xSetPacketParams+0x5a>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 80025b4:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80025b8:	f7ff fce2 	bl	8001f80 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80025bc:	f241 0021 	movw	r0, #4129	; 0x1021
 80025c0:	f7ff fcf4 	bl	8001fac <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80025c4:	2306      	movs	r3, #6
 80025c6:	e7ca      	b.n	800255e <SX126xSetPacketParams+0x5a>
 80025c8:	08014fb8 	.word	0x08014fb8
 80025cc:	200000ba 	.word	0x200000ba

080025d0 <SX126xSetBufferBaseAddress>:
    SX126xWriteCommand( RADIO_SET_CADPARAMS, buf, 5 );
    OperatingMode = MODE_CAD;
}

void SX126xSetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80025d0:	b500      	push	{lr}
 80025d2:	b083      	sub	sp, #12
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80025d4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 80025d8:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80025dc:	2202      	movs	r2, #2
 80025de:	a901      	add	r1, sp, #4
 80025e0:	208f      	movs	r0, #143	; 0x8f
 80025e2:	f7ff fb53 	bl	8001c8c <SX126xWriteCommand>
}
 80025e6:	b003      	add	sp, #12
 80025e8:	f85d fb04 	ldr.w	pc, [sp], #4

080025ec <SX126xGetRssiInst>:
    status.Value = stat;
    return status;
}

int8_t SX126xGetRssiInst( void )
{
 80025ec:	b500      	push	{lr}
 80025ee:	b083      	sub	sp, #12
    uint8_t buf[1];
    int8_t rssi = 0;

    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80025f0:	2201      	movs	r2, #1
 80025f2:	a901      	add	r1, sp, #4
 80025f4:	2015      	movs	r0, #21
 80025f6:	f7ff fb77 	bl	8001ce8 <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 80025fa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80025fe:	4240      	negs	r0, r0
    return rssi;
}
 8002600:	1040      	asrs	r0, r0, #1
 8002602:	b003      	add	sp, #12
 8002604:	f85d fb04 	ldr.w	pc, [sp], #4

08002608 <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8002608:	b530      	push	{r4, r5, lr}
 800260a:	b083      	sub	sp, #12
 800260c:	4605      	mov	r5, r0
 800260e:	460c      	mov	r4, r1
    uint8_t status[2];

    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8002610:	2202      	movs	r2, #2
 8002612:	a901      	add	r1, sp, #4
 8002614:	2013      	movs	r0, #19
 8002616:	f7ff fb67 	bl	8001ce8 <SX126xReadCommand>
    return PacketType;
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <SX126xGetRxBufferStatus+0x48>)

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( SX126xReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d007      	beq.n	8002632 <SX126xGetRxBufferStatus+0x2a>
    {
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
    }
    else
    {
        *payloadLength = status[0];
 8002622:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002626:	702b      	strb	r3, [r5, #0]
    }
    *rxStartBufferPointer = status[1];
 8002628:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800262c:	7023      	strb	r3, [r4, #0]
}
 800262e:	b003      	add	sp, #12
 8002630:	bd30      	pop	{r4, r5, pc}
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( SX126xReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 8002632:	f240 7004 	movw	r0, #1796	; 0x704
 8002636:	f7ff fc01 	bl	8001e3c <SX126xReadRegister>
 800263a:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 800263e:	2801      	cmp	r0, #1
 8002640:	d1ef      	bne.n	8002622 <SX126xGetRxBufferStatus+0x1a>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 8002642:	f240 7002 	movw	r0, #1794	; 0x702
 8002646:	f7ff fbf9 	bl	8001e3c <SX126xReadRegister>
 800264a:	7028      	strb	r0, [r5, #0]
 800264c:	e7ec      	b.n	8002628 <SX126xGetRxBufferStatus+0x20>
 800264e:	bf00      	nop
 8002650:	200000ba 	.word	0x200000ba

08002654 <SX126xGetPayload>:
{
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	4606      	mov	r6, r0
 800265a:	460c      	mov	r4, r1
 800265c:	4615      	mov	r5, r2
    uint8_t offset = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xGetRxBufferStatus( size, &offset );
 8002664:	f10d 0107 	add.w	r1, sp, #7
 8002668:	4620      	mov	r0, r4
 800266a:	f7ff ffcd 	bl	8002608 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 800266e:	7822      	ldrb	r2, [r4, #0]
 8002670:	42aa      	cmp	r2, r5
 8002672:	d902      	bls.n	800267a <SX126xGetPayload+0x26>
        return 1;
 8002674:	2001      	movs	r0, #1
}
 8002676:	b002      	add	sp, #8
 8002678:	bd70      	pop	{r4, r5, r6, pc}
    SX126xReadBuffer( offset, buffer, *size );
 800267a:	4631      	mov	r1, r6
 800267c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002680:	f7ff fc18 	bl	8001eb4 <SX126xReadBuffer>
    return 0;
 8002684:	2000      	movs	r0, #0
 8002686:	e7f6      	b.n	8002676 <SX126xGetPayload+0x22>

08002688 <SX126xGetPacketStatus>:

void SX126xGetPacketStatus( PacketStatus_t *pktStatus )
{
 8002688:	b510      	push	{r4, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	4604      	mov	r4, r0
    uint8_t status[3];

    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800268e:	2203      	movs	r2, #3
 8002690:	a901      	add	r1, sp, #4
 8002692:	2014      	movs	r0, #20
 8002694:	f7ff fb28 	bl	8001ce8 <SX126xReadCommand>
    return PacketType;
 8002698:	4b1c      	ldr	r3, [pc, #112]	; (800270c <SX126xGetPacketStatus+0x84>)
 800269a:	781b      	ldrb	r3, [r3, #0]

    pktStatus->packetType = SX126xGetPacketType( );
 800269c:	7023      	strb	r3, [r4, #0]
    switch( pktStatus->packetType )
 800269e:	b153      	cbz	r3, 80026b6 <SX126xGetPacketStatus+0x2e>
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d019      	beq.n	80026d8 <SX126xGetPacketStatus+0x50>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 80026a4:	2300      	movs	r3, #0
 80026a6:	6023      	str	r3, [r4, #0]
 80026a8:	6063      	str	r3, [r4, #4]
 80026aa:	60a3      	str	r3, [r4, #8]
 80026ac:	60e3      	str	r3, [r4, #12]
 80026ae:	6123      	str	r3, [r4, #16]
            pktStatus->packetType = PACKET_TYPE_NONE;
 80026b0:	230f      	movs	r3, #15
 80026b2:	7023      	strb	r3, [r4, #0]
            break;
    }
}
 80026b4:	e00e      	b.n	80026d4 <SX126xGetPacketStatus+0x4c>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80026b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026ba:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80026bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80026c0:	425b      	negs	r3, r3
 80026c2:	105b      	asrs	r3, r3, #1
 80026c4:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80026c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80026ca:	425b      	negs	r3, r3
 80026cc:	105b      	asrs	r3, r3, #1
 80026ce:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60a3      	str	r3, [r4, #8]
}
 80026d4:	b002      	add	sp, #8
 80026d6:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80026d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026dc:	425b      	negs	r3, r3
 80026de:	105b      	asrs	r3, r3, #1
 80026e0:	7323      	strb	r3, [r4, #12]
            ( status[1] < 128 ) ? ( pktStatus->Params.LoRa.SnrPkt = status[1] >> 2 ) : ( pktStatus->Params.LoRa.SnrPkt = ( ( status[1] - 256 ) >> 2 ) );
 80026e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80026e6:	f99d 2005 	ldrsb.w	r2, [sp, #5]
 80026ea:	2a00      	cmp	r2, #0
 80026ec:	bfae      	itee	ge
 80026ee:	089b      	lsrge	r3, r3, #2
 80026f0:	f5a3 7380 	sublt.w	r3, r3, #256	; 0x100
 80026f4:	109b      	asrlt	r3, r3, #2
 80026f6:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80026f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80026fc:	425b      	negs	r3, r3
 80026fe:	105b      	asrs	r3, r3, #1
 8002700:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8002702:	4b03      	ldr	r3, [pc, #12]	; (8002710 <SX126xGetPacketStatus+0x88>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6123      	str	r3, [r4, #16]
            break;
 8002708:	e7e4      	b.n	80026d4 <SX126xGetPacketStatus+0x4c>
 800270a:	bf00      	nop
 800270c:	200000ba 	.word	0x200000ba
 8002710:	200000b4 	.word	0x200000b4

08002714 <SX126xClearIrqStatus>:
    uint8_t buf[2] = { 0x00, 0x00 };
    SX126xWriteCommand( RADIO_CLR_ERROR, buf, 2 );
}

void SX126xClearIrqStatus( uint16_t irq )
{
 8002714:	b500      	push	{lr}
 8002716:	b083      	sub	sp, #12
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8002718:	0a03      	lsrs	r3, r0, #8
 800271a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 800271e:	f88d 0005 	strb.w	r0, [sp, #5]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8002722:	2202      	movs	r2, #2
 8002724:	a901      	add	r1, sp, #4
 8002726:	4610      	mov	r0, r2
 8002728:	f7ff fab0 	bl	8001c8c <SX126xWriteCommand>
}
 800272c:	b003      	add	sp, #12
 800272e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002734 <Button_AddEvent>:


static Button_Event	ButtonCallBack[NUMBER_BUTTON][NUMBER_EVENT];
void Button_AddEvent(uint8_t button_id,button_event event,void (*func)())
{
	ButtonCallBack[button_id][event] = func;
 8002734:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002738:	4408      	add	r0, r1
 800273a:	4b02      	ldr	r3, [pc, #8]	; (8002744 <Button_AddEvent+0x10>)
 800273c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	200000bc 	.word	0x200000bc

08002748 <Button_ResetEvent>:
void Button_ResetEvent(uint8_t button_id)
{
 8002748:	b410      	push	{r4}
	for(uint8_t eventcount = 0; eventcount < NUMBER_EVENT; eventcount++)
	{
		ButtonCallBack[button_id][eventcount] = NULL;
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <Button_ResetEvent+0x1c>)
 800274c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002750:	0094      	lsls	r4, r2, #2
 8002752:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002756:	2100      	movs	r1, #0
 8002758:	5119      	str	r1, [r3, r4]
 800275a:	6051      	str	r1, [r2, #4]
 800275c:	6091      	str	r1, [r2, #8]
	}
}
 800275e:	bc10      	pop	{r4}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200000bc 	.word	0x200000bc

08002768 <button_init>:
/*
 * Config CubeMX for Button GPIO
 */
void button_init(Button *btn,GPIO_TypeDef *port,uint16_t pin,Button_active_t button_active,uint8_t button_id)
{
 8002768:	b430      	push	{r4, r5}
	btn->last_status = 1;
 800276a:	2401      	movs	r4, #1
 800276c:	71c4      	strb	r4, [r0, #7]
	btn->button_id = button_id;
 800276e:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8002772:	7485      	strb	r5, [r0, #18]
	btn->gpio_pin = pin;
 8002774:	8082      	strh	r2, [r0, #4]
	btn->gpio_port = port;
 8002776:	6001      	str	r1, [r0, #0]
	btn->current_status = 1;
 8002778:	7184      	strb	r4, [r0, #6]
	btn->button_state = BUTTON_READ;
 800277a:	2200      	movs	r2, #0
 800277c:	7402      	strb	r2, [r0, #16]
	btn->button_active = button_active;
 800277e:	7443      	strb	r3, [r0, #17]
}
 8002780:	bc30      	pop	{r4, r5}
 8002782:	4770      	bx	lr

08002784 <button_check>:
void button_check(Button *button)
{
 8002784:	b510      	push	{r4, lr}
 8002786:	4604      	mov	r4, r0
	button->current_status = HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin);
 8002788:	8881      	ldrh	r1, [r0, #4]
 800278a:	6800      	ldr	r0, [r0, #0]
 800278c:	f000 fea4 	bl	80034d8 <HAL_GPIO_ReadPin>
 8002790:	71a0      	strb	r0, [r4, #6]
	if(button->button_active == BUTTON_ACTIVE_HIGH)
 8002792:	7c63      	ldrb	r3, [r4, #17]
 8002794:	b91b      	cbnz	r3, 800279e <button_check+0x1a>
	{
		button->current_status = !button->current_status;
 8002796:	fab0 f080 	clz	r0, r0
 800279a:	0940      	lsrs	r0, r0, #5
 800279c:	71a0      	strb	r0, [r4, #6]
	}
	switch(button->button_state)
 800279e:	7c23      	ldrb	r3, [r4, #16]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d807      	bhi.n	80027b4 <button_check+0x30>
 80027a4:	e8df f003 	tbb	[pc, r3]
 80027a8:	5f440d02 	.word	0x5f440d02
	{
		case BUTTON_READ:
		{
			if(button->current_status == 0 && button->last_status == 1)
 80027ac:	88e3      	ldrh	r3, [r4, #6]
 80027ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b2:	d000      	beq.n	80027b6 <button_check+0x32>
		}
		break;
		default :
		break;
	}
}
 80027b4:	bd10      	pop	{r4, pc}
				button->time_debounce = HAL_GetTick();
 80027b6:	f000 fb01 	bl	8002dbc <HAL_GetTick>
 80027ba:	60a0      	str	r0, [r4, #8]
				button->button_state = BUTTON_WAIT_DEBOUND;
 80027bc:	2301      	movs	r3, #1
 80027be:	7423      	strb	r3, [r4, #16]
 80027c0:	e7f8      	b.n	80027b4 <button_check+0x30>
			if( (HAL_GetTick() - button->time_debounce) > BUTTON_DEBOUND_WAIT)
 80027c2:	f000 fafb 	bl	8002dbc <HAL_GetTick>
 80027c6:	68a3      	ldr	r3, [r4, #8]
 80027c8:	1ac0      	subs	r0, r0, r3
 80027ca:	2814      	cmp	r0, #20
 80027cc:	d9f2      	bls.n	80027b4 <button_check+0x30>
				if(button->current_status == 0 && button->last_status == 1) // Button is pressed
 80027ce:	88e3      	ldrh	r3, [r4, #6]
 80027d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d4:	d006      	beq.n	80027e4 <button_check+0x60>
				else if(button->current_status == 1 && button->last_status == 0)
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d014      	beq.n	8002804 <button_check+0x80>
					button->last_status = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	71e3      	strb	r3, [r4, #7]
					button->button_state = BUTTON_READ;
 80027de:	2300      	movs	r3, #0
 80027e0:	7423      	strb	r3, [r4, #16]
 80027e2:	e7e7      	b.n	80027b4 <button_check+0x30>
					if( ButtonCallBack[button->button_id][BUTTON_PRESSED_EVENT] != NULL)
 80027e4:	7ca3      	ldrb	r3, [r4, #18]
 80027e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027ea:	4a24      	ldr	r2, [pc, #144]	; (800287c <button_check+0xf8>)
 80027ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f0:	b103      	cbz	r3, 80027f4 <button_check+0x70>
						ButtonCallBack[button->button_id][BUTTON_PRESSED_EVENT]();
 80027f2:	4798      	blx	r3
					button->t_long_press = HAL_GetTick();
 80027f4:	f000 fae2 	bl	8002dbc <HAL_GetTick>
 80027f8:	60e0      	str	r0, [r4, #12]
					button->button_state = BUTTON_WAIT_RELEASE_AND_CHECK_LONG_PRESS;
 80027fa:	2302      	movs	r3, #2
 80027fc:	7423      	strb	r3, [r4, #16]
					button->last_status = 0; //
 80027fe:	2300      	movs	r3, #0
 8002800:	71e3      	strb	r3, [r4, #7]
 8002802:	e7d7      	b.n	80027b4 <button_check+0x30>
					button->t_long_press = HAL_GetTick() - button->t_long_press;
 8002804:	f000 fada 	bl	8002dbc <HAL_GetTick>
 8002808:	68e3      	ldr	r3, [r4, #12]
 800280a:	1ac3      	subs	r3, r0, r3
 800280c:	60e3      	str	r3, [r4, #12]
					if(button->t_long_press >= BUTTON_SHORTHPRESS)
 800280e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002812:	d308      	bcc.n	8002826 <button_check+0xa2>
						if( ButtonCallBack[button->button_id][BUTTON_SHORTPRESSED_EVENT] != NULL)
 8002814:	7ca3      	ldrb	r3, [r4, #18]
 8002816:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800281a:	4a18      	ldr	r2, [pc, #96]	; (800287c <button_check+0xf8>)
 800281c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	b103      	cbz	r3, 8002826 <button_check+0xa2>
							ButtonCallBack[button->button_id][BUTTON_SHORTPRESSED_EVENT]();
 8002824:	4798      	blx	r3
					button->last_status = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	71e3      	strb	r3, [r4, #7]
					button->button_state = BUTTON_READ;
 800282a:	2300      	movs	r3, #0
 800282c:	7423      	strb	r3, [r4, #16]
 800282e:	e7c1      	b.n	80027b4 <button_check+0x30>
			if(button->current_status == 1 && button->last_status == 0)// No pressing
 8002830:	88e3      	ldrh	r3, [r4, #6]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <button_check+0xb6>
				button->button_state = BUTTON_WAIT_DEBOUND;
 8002836:	7423      	strb	r3, [r4, #16]
 8002838:	e7bc      	b.n	80027b4 <button_check+0x30>
			else if((HAL_GetTick() - button->t_long_press) > BUTTON_LONGPRESS)
 800283a:	f000 fabf 	bl	8002dbc <HAL_GetTick>
 800283e:	68e3      	ldr	r3, [r4, #12]
 8002840:	1ac0      	subs	r0, r0, r3
 8002842:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002846:	4298      	cmp	r0, r3
 8002848:	d9b4      	bls.n	80027b4 <button_check+0x30>
				if( ButtonCallBack[button->button_id][BUTTON_LONGPRESSED_EVENT] != NULL)
 800284a:	7ca3      	ldrb	r3, [r4, #18]
 800284c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <button_check+0xf8>)
 8002852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	b103      	cbz	r3, 800285c <button_check+0xd8>
					ButtonCallBack[button->button_id][BUTTON_LONGPRESSED_EVENT]();
 800285a:	4798      	blx	r3
				button->last_status = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	71e3      	strb	r3, [r4, #7]
				button->button_state = BUTTON_WAIT_RELEASE;
 8002860:	2303      	movs	r3, #3
 8002862:	7423      	strb	r3, [r4, #16]
 8002864:	e7a6      	b.n	80027b4 <button_check+0x30>
			if(button->current_status == 1 && button->last_status == 0)
 8002866:	88e3      	ldrh	r3, [r4, #6]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d1a3      	bne.n	80027b4 <button_check+0x30>
				button->button_state = BUTTON_READ;
 800286c:	2300      	movs	r3, #0
 800286e:	7423      	strb	r3, [r4, #16]
				button->last_status = 1;
 8002870:	2301      	movs	r3, #1
 8002872:	71e3      	strb	r3, [r4, #7]
				button->time_debounce = HAL_GetTick();
 8002874:	f000 faa2 	bl	8002dbc <HAL_GetTick>
 8002878:	60a0      	str	r0, [r4, #8]
}
 800287a:	e79b      	b.n	80027b4 <button_check+0x30>
 800287c:	200000bc 	.word	0x200000bc

08002880 <User_Uart_Init>:

void User_Uart_Init(const User_Uart_ConfigType *UartConfing)
{
	User_Uart_HwConfigType HwConfig;
	uint8_t u8CountChannel;
	ConfigPtr = (User_Uart_ConfigType*) UartConfing;
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <User_Uart_Init+0x50>)
 8002882:	6018      	str	r0, [r3, #0]

	for ( u8CountChannel = 0 ; u8CountChannel <UartConfing->NumberofChannel; u8CountChannel++)
 8002884:	7803      	ldrb	r3, [r0, #0]
 8002886:	b313      	cbz	r3, 80028ce <User_Uart_Init+0x4e>
{
 8002888:	b530      	push	{r4, r5, lr}
 800288a:	b085      	sub	sp, #20
 800288c:	4605      	mov	r5, r0
	for ( u8CountChannel = 0 ; u8CountChannel <UartConfing->NumberofChannel; u8CountChannel++)
 800288e:	2400      	movs	r4, #0
	{
		HwConfig.ParityMode = UartConfing->ChannelConfigType[u8CountChannel].ParityMode;
 8002890:	b2e3      	uxtb	r3, r4
 8002892:	0119      	lsls	r1, r3, #4
 8002894:	686a      	ldr	r2, [r5, #4]
 8002896:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800289a:	7b18      	ldrb	r0, [r3, #12]
 800289c:	f88d 000c 	strb.w	r0, [sp, #12]
		HwConfig.SlipStatus = UartConfing->ChannelConfigType[u8CountChannel].SlipStatus;
 80028a0:	7b98      	ldrb	r0, [r3, #14]
 80028a2:	f88d 000e 	strb.w	r0, [sp, #14]
		HwConfig.StopBitCount = UartConfing->ChannelConfigType[u8CountChannel].StopBitCount;
 80028a6:	7b58      	ldrb	r0, [r3, #13]
 80028a8:	f88d 000d 	strb.w	r0, [sp, #13]
		HwConfig.u32BaudRate = UartConfing->ChannelConfigType[u8CountChannel].u32BaudRate;
 80028ac:	6898      	ldr	r0, [r3, #8]
 80028ae:	9002      	str	r0, [sp, #8]
		HwConfig.u32SourceClock = UartConfing->ChannelConfigType[u8CountChannel].u32SourceClock;
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	9301      	str	r3, [sp, #4]
		HwConfig.u8ChannelID = UartConfing->ChannelConfigType[u8CountChannel].u8ChannelID;
 80028b4:	5c53      	ldrb	r3, [r2, r1]
 80028b6:	f88d 3000 	strb.w	r3, [sp]
		User_Uart_Ipw_Init(&HwConfig);
 80028ba:	4668      	mov	r0, sp
 80028bc:	f000 f86a 	bl	8002994 <User_Uart_Ipw_Init>
	for ( u8CountChannel = 0 ; u8CountChannel <UartConfing->NumberofChannel; u8CountChannel++)
 80028c0:	3401      	adds	r4, #1
 80028c2:	782a      	ldrb	r2, [r5, #0]
 80028c4:	b2e3      	uxtb	r3, r4
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d8e2      	bhi.n	8002890 <User_Uart_Init+0x10>
	}
}
 80028ca:	b005      	add	sp, #20
 80028cc:	bd30      	pop	{r4, r5, pc}
 80028ce:	4770      	bx	lr
 80028d0:	200000e0 	.word	0x200000e0

080028d4 <User_Uart_AsyncTransmit>:

Std_ReturnType User_Uart_AsyncTransmit(uint8_t u8ChannelID, uint8_t *u8DatPtr,uint16_t u16Datalen)
{
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Std_ReturnType ret = E_NOT_OK;
	uint8_t u8Count;
	uint8_t ChannelID = 0xFFU;
	if (ConfigPtr == NULL)
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <User_Uart_AsyncTransmit+0x50>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	b1db      	cbz	r3, 8002914 <User_Uart_AsyncTransmit+0x40>
	{
		return E_NOT_OK;
	}
	if (u8DatPtr == NULL)
 80028dc:	b1e1      	cbz	r1, 8002918 <User_Uart_AsyncTransmit+0x44>
	{
		return E_NOT_OK;
	}
	for( u8Count = 0;  u8Count < ConfigPtr->NumberofChannel ; u8Count++)
 80028de:	781e      	ldrb	r6, [r3, #0]
 80028e0:	b1e6      	cbz	r6, 800291c <User_Uart_AsyncTransmit+0x48>
	{
		if(ConfigPtr->ChannelConfigType[u8Count].u8ChannelID == u8ChannelID )
 80028e2:	685d      	ldr	r5, [r3, #4]
 80028e4:	2300      	movs	r3, #0
 80028e6:	b2df      	uxtb	r7, r3
 80028e8:	011c      	lsls	r4, r3, #4
 80028ea:	5d2c      	ldrb	r4, [r5, r4]
 80028ec:	4284      	cmp	r4, r0
 80028ee:	d005      	beq.n	80028fc <User_Uart_AsyncTransmit+0x28>
	for( u8Count = 0;  u8Count < ConfigPtr->NumberofChannel ; u8Count++)
 80028f0:	3301      	adds	r3, #1
 80028f2:	b2dc      	uxtb	r4, r3
 80028f4:	42a6      	cmp	r6, r4
 80028f6:	d8f6      	bhi.n	80028e6 <User_Uart_AsyncTransmit+0x12>
			break;
		}
	}
	if (ChannelID == 0xFFU)
	{
		return E_NOT_OK;
 80028f8:	2001      	movs	r0, #1
 80028fa:	e007      	b.n	800290c <User_Uart_AsyncTransmit+0x38>
	if (ChannelID == 0xFFU)
 80028fc:	2fff      	cmp	r7, #255	; 0xff
 80028fe:	d00f      	beq.n	8002920 <User_Uart_AsyncTransmit+0x4c>
	}
	if (ConfigPtr->ChannelConfigType[ChannelID].SlipStatus == USER_UART_SLIPSTATUS_ENABLE)
 8002900:	b2db      	uxtb	r3, r3
 8002902:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002906:	7b9b      	ldrb	r3, [r3, #14]
 8002908:	b90b      	cbnz	r3, 800290e <User_Uart_AsyncTransmit+0x3a>
	Std_ReturnType ret = E_NOT_OK;
 800290a:	2001      	movs	r0, #1
	else
	{
		ret = User_Uart_Ipw_AsyncTransmit(u8ChannelID,u8DatPtr,u16Datalen);
	}
	return ret;
}
 800290c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = User_Uart_Ipw_AsyncTransmit(u8ChannelID,u8DatPtr,u16Datalen);
 800290e:	f000 f84b 	bl	80029a8 <User_Uart_Ipw_AsyncTransmit>
 8002912:	e7fb      	b.n	800290c <User_Uart_AsyncTransmit+0x38>
		return E_NOT_OK;
 8002914:	2001      	movs	r0, #1
 8002916:	e7f9      	b.n	800290c <User_Uart_AsyncTransmit+0x38>
		return E_NOT_OK;
 8002918:	2001      	movs	r0, #1
 800291a:	e7f7      	b.n	800290c <User_Uart_AsyncTransmit+0x38>
		return E_NOT_OK;
 800291c:	2001      	movs	r0, #1
 800291e:	e7f5      	b.n	800290c <User_Uart_AsyncTransmit+0x38>
 8002920:	2001      	movs	r0, #1
 8002922:	e7f3      	b.n	800290c <User_Uart_AsyncTransmit+0x38>
 8002924:	200000e0 	.word	0x200000e0

08002928 <User_Uart_Received>:
Std_ReturnType User_Uart_Received(uint8_t u8ChannelID, uint8_t **u8DataPtr, uint16_t u16DataLen, int16_t *int16remain)
{
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	460f      	mov	r7, r1
	uint8_t u8Count;
	uint8_t ChannelID = 0xFFU;
	Std_ReturnType ret = E_NOT_OK;
	if (ConfigPtr == NULL)
 800292c:	4917      	ldr	r1, [pc, #92]	; (800298c <User_Uart_Received+0x64>)
 800292e:	680c      	ldr	r4, [r1, #0]
 8002930:	b32c      	cbz	r4, 800297e <User_Uart_Received+0x56>
	{
		return E_NOT_OK;
	}
	for( u8Count = 0;  u8Count < ConfigPtr->NumberofChannel ; u8Count++)
 8002932:	7821      	ldrb	r1, [r4, #0]
 8002934:	b329      	cbz	r1, 8002982 <User_Uart_Received+0x5a>
	{
		if(ConfigPtr->ChannelConfigType[u8Count].u8ChannelID == u8ChannelID )
 8002936:	6866      	ldr	r6, [r4, #4]
 8002938:	2400      	movs	r4, #0
 800293a:	fa5f fc84 	uxtb.w	ip, r4
 800293e:	0125      	lsls	r5, r4, #4
 8002940:	5d75      	ldrb	r5, [r6, r5]
 8002942:	4285      	cmp	r5, r0
 8002944:	d005      	beq.n	8002952 <User_Uart_Received+0x2a>
	for( u8Count = 0;  u8Count < ConfigPtr->NumberofChannel ; u8Count++)
 8002946:	3401      	adds	r4, #1
 8002948:	b2e5      	uxtb	r5, r4
 800294a:	42a9      	cmp	r1, r5
 800294c:	d8f5      	bhi.n	800293a <User_Uart_Received+0x12>
			break;
		}
	}
	if (ChannelID == 0xFFU)
	{
		return E_NOT_OK;
 800294e:	2001      	movs	r0, #1
 8002950:	e00d      	b.n	800296e <User_Uart_Received+0x46>
	if (ChannelID == 0xFFU)
 8002952:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8002956:	d016      	beq.n	8002986 <User_Uart_Received+0x5e>
	}
	if (ConfigPtr->ChannelConfigType[ChannelID].SlipStatus == USER_UART_SLIPSTATUS_ENABLE)
 8002958:	b2e1      	uxtb	r1, r4
 800295a:	eb06 1601 	add.w	r6, r6, r1, lsl #4
 800295e:	7bb1      	ldrb	r1, [r6, #14]
 8002960:	b931      	cbnz	r1, 8002970 <User_Uart_Received+0x48>
	Std_ReturnType ret = E_NOT_OK;
 8002962:	2001      	movs	r0, #1
	}
	else
	{
		ret = User_Uart_Ipw_Received(u8ChannelID,&User_Uart_RxBuffer[ChannelID][0],u16DataLen,int16remain);
	}
	*u8DataPtr = &User_Uart_RxBuffer[ChannelID][0];
 8002964:	b2e4      	uxtb	r4, r4
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <User_Uart_Received+0x68>)
 8002968:	eb03 14c4 	add.w	r4, r3, r4, lsl #7
 800296c:	603c      	str	r4, [r7, #0]
	return ret;

}
 800296e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = User_Uart_Ipw_Received(u8ChannelID,&User_Uart_RxBuffer[ChannelID][0],u16DataLen,int16remain);
 8002970:	b2e1      	uxtb	r1, r4
 8002972:	4d07      	ldr	r5, [pc, #28]	; (8002990 <User_Uart_Received+0x68>)
 8002974:	eb05 11c1 	add.w	r1, r5, r1, lsl #7
 8002978:	f000 f820 	bl	80029bc <User_Uart_Ipw_Received>
 800297c:	e7f2      	b.n	8002964 <User_Uart_Received+0x3c>
		return E_NOT_OK;
 800297e:	2001      	movs	r0, #1
 8002980:	e7f5      	b.n	800296e <User_Uart_Received+0x46>
		return E_NOT_OK;
 8002982:	2001      	movs	r0, #1
 8002984:	e7f3      	b.n	800296e <User_Uart_Received+0x46>
 8002986:	2001      	movs	r0, #1
 8002988:	e7f1      	b.n	800296e <User_Uart_Received+0x46>
 800298a:	bf00      	nop
 800298c:	200000e0 	.word	0x200000e0
 8002990:	200000e4 	.word	0x200000e4

08002994 <User_Uart_Ipw_Init>:
 *      Author: Admin
 */
#include "User_Uart_Ipw.h"

void User_Uart_Ipw_Init(User_Uart_HwConfigType *HwConfig)
{
 8002994:	b508      	push	{r3, lr}

	if ((HwConfig->u8ChannelID >= USER_UART_CHANNEL_USART1) && (HwConfig->u8ChannelID <= USER_UART_CHANNEL_USART6))
 8002996:	7803      	ldrb	r3, [r0, #0]
 8002998:	3b03      	subs	r3, #3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b05      	cmp	r3, #5
	{
		HwConfig->u8ChannelID = HwConfig->u8ChannelID - USER_UART_CHANNEL_USART1;
 800299e:	bf98      	it	ls
 80029a0:	7003      	strbls	r3, [r0, #0]
	}
	User_Ip_Usart_Init(HwConfig);
 80029a2:	f000 f827 	bl	80029f4 <User_Ip_Usart_Init>
}
 80029a6:	bd08      	pop	{r3, pc}

080029a8 <User_Uart_Ipw_AsyncTransmit>:
Std_ReturnType User_Uart_Ipw_AsyncTransmit(uint8_t u8Channel, uint8_t *u8Data, uint16_t u16DataLen)
{
	Std_ReturnType ret = E_NOT_OK;

	if ((u8Channel >= USER_UART_CHANNEL_USART1) && (u8Channel <= USER_UART_CHANNEL_USART6))
 80029a8:	3803      	subs	r0, #3
 80029aa:	b2c0      	uxtb	r0, r0
 80029ac:	2805      	cmp	r0, #5
 80029ae:	d901      	bls.n	80029b4 <User_Uart_Ipw_AsyncTransmit+0xc>
	Std_ReturnType ret = E_NOT_OK;
 80029b0:	2001      	movs	r0, #1
	{
		u8Channel = u8Channel - USER_UART_CHANNEL_USART1;
		ret = User_Ip_Usart_WriteBuffer(u8Channel, u8Data, u16DataLen);
	}
	return ret;
}
 80029b2:	4770      	bx	lr
{
 80029b4:	b508      	push	{r3, lr}
		ret = User_Ip_Usart_WriteBuffer(u8Channel, u8Data, u16DataLen);
 80029b6:	f000 f8a3 	bl	8002b00 <User_Ip_Usart_WriteBuffer>
}
 80029ba:	bd08      	pop	{r3, pc}

080029bc <User_Uart_Ipw_Received>:

Std_ReturnType User_Uart_Ipw_Received(uint8_t u8Channel, uint8_t *u8Data,uint16_t u16DataLen, int16_t *i16remain)
{
	Std_ReturnType ret = E_NOT_OK;

	if ((u8Channel >= USER_UART_CHANNEL_USART1) && (u8Channel<= USER_UART_CHANNEL_USART6))
 80029bc:	3803      	subs	r0, #3
 80029be:	b2c0      	uxtb	r0, r0
 80029c0:	2805      	cmp	r0, #5
 80029c2:	d901      	bls.n	80029c8 <User_Uart_Ipw_Received+0xc>
	Std_ReturnType ret = E_NOT_OK;
 80029c4:	2001      	movs	r0, #1
	{
		u8Channel = u8Channel - USER_UART_CHANNEL_USART1;
		ret = User_Ip_Usart_ReadBuffer(u8Channel, u8Data, u16DataLen, i16remain);
	}
	return ret;
}
 80029c6:	4770      	bx	lr
{
 80029c8:	b508      	push	{r3, lr}
		ret = User_Ip_Usart_ReadBuffer(u8Channel, u8Data, u16DataLen, i16remain);
 80029ca:	f000 f8ef 	bl	8002bac <User_Ip_Usart_ReadBuffer>
}
 80029ce:	bd08      	pop	{r3, pc}

080029d0 <User_Ip_Usart_GetBuffer>:


static User_Ip_RingBuffer_t *User_Ip_Usart_GetBuffer(uint8_t u8ChannelID)
{
	User_Ip_RingBuffer_t *RingBuffer;
	if (u8ChannelID == USER_IP_USART_CHANNELID_1)
 80029d0:	b130      	cbz	r0, 80029e0 <User_Ip_Usart_GetBuffer+0x10>
	{
		RingBuffer = &RingBufferUsart1Channel;
	}
	else if (u8ChannelID == USER_IP_USART_CHANNELID_2)
 80029d2:	2801      	cmp	r0, #1
 80029d4:	d006      	beq.n	80029e4 <User_Ip_Usart_GetBuffer+0x14>
	{
		RingBuffer = &RingBufferUsart3Channel;
	}
	else
	{
		RingBuffer = NULL;
 80029d6:	2803      	cmp	r0, #3
 80029d8:	4803      	ldr	r0, [pc, #12]	; (80029e8 <User_Ip_Usart_GetBuffer+0x18>)
 80029da:	bf18      	it	ne
 80029dc:	2000      	movne	r0, #0
 80029de:	4770      	bx	lr
		RingBuffer = &RingBufferUsart1Channel;
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <User_Ip_Usart_GetBuffer+0x1c>)
 80029e2:	4770      	bx	lr
		RingBuffer = &RingBufferUsart2Channel;
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <User_Ip_Usart_GetBuffer+0x20>)
	}
	return RingBuffer;
}
 80029e6:	4770      	bx	lr
 80029e8:	200014b0 	.word	0x200014b0
 80029ec:	20001cc4 	.word	0x20001cc4
 80029f0:	200024d8 	.word	0x200024d8

080029f4 <User_Ip_Usart_Init>:
{
 80029f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f6:	b083      	sub	sp, #12
	User_Ip_Usart_Type *Usart = User_Ip_Usart_BaseAddress[u8ChannelID];
 80029f8:	7804      	ldrb	r4, [r0, #0]
 80029fa:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <User_Ip_Usart_Init+0xfc>)
 80029fc:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
	__HAL_RCC_USART1_CLK_ENABLE();
 8002a00:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <User_Ip_Usart_Init+0x100>)
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a08:	619a      	str	r2, [r3, #24]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_USART2_CLK_ENABLE();
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a1a:	61da      	str	r2, [r3, #28]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	9b01      	ldr	r3, [sp, #4]
	HwConfig->CR1 = USER_IP_USART_RESET_VALUE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60cb      	str	r3, [r1, #12]
	HwConfig->CR2 = USER_IP_USART_RESET_VALUE;
 8002a2a:	610b      	str	r3, [r1, #16]
	HwConfig->CR3 = USER_IP_USART_RESET_VALUE;
 8002a2c:	614b      	str	r3, [r1, #20]
	HwConfig->GTPR = USER_IP_USART_RESET_VALUE;
 8002a2e:	618b      	str	r3, [r1, #24]
	for ( u8Count = 0; u8Count < USER_IP_USART_INSTANCE_COUNT; u8Count++)
 8002a30:	4e31      	ldr	r6, [pc, #196]	; (8002af8 <User_Ip_Usart_Init+0x104>)
 8002a32:	f106 070c 	add.w	r7, r6, #12
		BufferChannel = RingBuffer_Ptr_Arr[u8Count];
 8002a36:	f856 2b04 	ldr.w	r2, [r6], #4
		BufferChannel->RxHead = 0U;
 8002a3a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		BufferChannel->RxTail = 0U;
 8002a3e:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
		BufferChannel->TxHead = 0U;
 8002a42:	f8c2 3808 	str.w	r3, [r2, #2056]	; 0x808
		BufferChannel->TxTail = 0U;
 8002a46:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c
		BufferChannel->BufferStatus = USER_BUFFER_UNLOCK;
 8002a4a:	f882 3810 	strb.w	r3, [r2, #2064]	; 0x810
 8002a4e:	461d      	mov	r5, r3
			BufferChannel->User_Usart_RxRingBufferChannel[u16Count] = 0x00U;
 8002a50:	5553      	strb	r3, [r2, r5]
			BufferChannel->User_Usart_TxRingBufferChannel[u16Count] = 0x00U;
 8002a52:	eb02 0c05 	add.w	ip, r2, r5
 8002a56:	f88c 3400 	strb.w	r3, [ip, #1024]	; 0x400
		for( u16Count = 0 ; u16Count < USER_IP_USART_SIZE_RINGBUFFER; u16Count++ )
 8002a5a:	3501      	adds	r5, #1
 8002a5c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002a60:	d1f6      	bne.n	8002a50 <User_Ip_Usart_Init+0x5c>
	for ( u8Count = 0; u8Count < USER_IP_USART_INSTANCE_COUNT; u8Count++)
 8002a62:	42be      	cmp	r6, r7
 8002a64:	d1e7      	bne.n	8002a36 <User_Ip_Usart_Init+0x42>
	Usart->CR1 &= ~USER_IP_USART_CR1_TE_MASK;
 8002a66:	68ce      	ldr	r6, [r1, #12]
	Usart->CR1 &= ~USER_IP_USART_CR1_RE_MASK;
 8002a68:	f026 030c 	bic.w	r3, r6, #12
 8002a6c:	60cb      	str	r3, [r1, #12]
	User_Ip_Usart_SetBaurate(Usart,HwConfig->u32SourceClock,HwConfig->u32BaudRate);
 8002a6e:	6882      	ldr	r2, [r0, #8]
	if (u32Baudrate < 4800)
 8002a70:	f5b2 5f96 	cmp.w	r2, #4800	; 0x12c0
 8002a74:	d30d      	bcc.n	8002a92 <User_Ip_Usart_Init+0x9e>
	User_Ip_Usart_SetBaurate(Usart,HwConfig->u32SourceClock,HwConfig->u32BaudRate);
 8002a76:	6843      	ldr	r3, [r0, #4]
		DIV_Mantissa = (u32SoureClock/(u32Baudrate*16));
 8002a78:	0115      	lsls	r5, r2, #4
 8002a7a:	fbb3 f5f5 	udiv	r5, r3, r5
		HwChannel->BRR |= (DIV_Mantissa << USER_IP_USART_BRR_DIV_MANTISSA_SHIFT) & (USER_IP_USART_BRR_DIV_MANTISSA_MASK);
 8002a7e:	012d      	lsls	r5, r5, #4
 8002a80:	b2ad      	uxth	r5, r5
		DIV_Fraction = (u32SoureClock/u32Baudrate)%16;
 8002a82:	fbb3 f3f2 	udiv	r3, r3, r2
		HwChannel->BRR |= DIV_Fraction & USER_IP_USART_BRR_DIV_FRACTION_MASK;
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	431d      	orrs	r5, r3
 8002a8c:	688b      	ldr	r3, [r1, #8]
 8002a8e:	431d      	orrs	r5, r3
 8002a90:	608d      	str	r5, [r1, #8]
	User_Ip_Usart_Set_ParityMode(Usart,HwConfig->ParityMode);
 8002a92:	7b02      	ldrb	r2, [r0, #12]
	if(ParityMode == USER_UART_PARITYMODE_NONE)
 8002a94:	2a02      	cmp	r2, #2
 8002a96:	d026      	beq.n	8002ae6 <User_Ip_Usart_Init+0xf2>
		HwChannel->CR1 |= (ParityMode << USER_IP_USART_CR1_PS_SHIFT) & (USER_IP_USART_CR1_PS_MASK);
 8002a98:	0253      	lsls	r3, r2, #9
 8002a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9e:	f426 7603 	bic.w	r6, r6, #524	; 0x20c
 8002aa2:	4333      	orrs	r3, r6
 8002aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa8:	60cb      	str	r3, [r1, #12]
	HwChannel->CR2 |= (StopBitCouunt << USER_IP_USART_CR2_STOP_SHIFT) &USER_IP_USART_CR2_STOP_MASK;
 8002aaa:	7b42      	ldrb	r2, [r0, #13]
 8002aac:	0312      	lsls	r2, r2, #12
 8002aae:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	HwChannel->CR2 &= ~USER_IP_USART_CR2_STOP_MASK;
 8002ab2:	6908      	ldr	r0, [r1, #16]
 8002ab4:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
	HwChannel->CR2 |= (StopBitCouunt << USER_IP_USART_CR2_STOP_SHIFT) &USER_IP_USART_CR2_STOP_MASK;
 8002ab8:	4302      	orrs	r2, r0
 8002aba:	610a      	str	r2, [r1, #16]
	Usart->CR3 |= USER_IP_USART_CR1_IDLEIE_MASK;
 8002abc:	694a      	ldr	r2, [r1, #20]
 8002abe:	f042 0210 	orr.w	r2, r2, #16
 8002ac2:	614a      	str	r2, [r1, #20]
	Usart->CR1 |= (USER_IP_USART_CR1_TE_MASK|
 8002ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ac8:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8002acc:	60cb      	str	r3, [r1, #12]
	HAL_NVIC_SetPriority(User_Ip_IRQn[u8ChannelID],USER_IP_USART_PRIORITY,0u);
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <User_Ip_Usart_Init+0x108>)
 8002ad0:	571c      	ldrsb	r4, [r3, r4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f000 fb8a 	bl	80031f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(User_Ip_IRQn[u8ChannelID]);
 8002adc:	4620      	mov	r0, r4
 8002ade:	f000 fbb9 	bl	8003254 <HAL_NVIC_EnableIRQ>
}
 8002ae2:	b003      	add	sp, #12
 8002ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HwChannel->CR1 &= ~USER_IP_USART_CR1_PCE_MASK;
 8002ae6:	f426 6381 	bic.w	r3, r6, #1032	; 0x408
 8002aea:	f023 0304 	bic.w	r3, r3, #4
 8002aee:	e7db      	b.n	8002aa8 <User_Ip_Usart_Init+0xb4>
 8002af0:	080151f0 	.word	0x080151f0
 8002af4:	40021000 	.word	0x40021000
 8002af8:	080151e0 	.word	0x080151e0
 8002afc:	080151ec 	.word	0x080151ec

08002b00 <User_Ip_Usart_WriteBuffer>:

Std_ReturnType User_Ip_Usart_WriteBuffer(uint8_t u8ChannelID, const uint8_t *u8Data, uint16_t u16DataLen)
{
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	4606      	mov	r6, r0
 8002b04:	460c      	mov	r4, r1
 8002b06:	4615      	mov	r5, r2
	Std_ReturnType ret = E_NOT_OK;
	uint16_t u16DataAvailable = 0;
	uint16_t u16Count;

	User_Ip_RingBuffer_t *BufferChannel;
	BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelID);
 8002b08:	f7ff ff62 	bl	80029d0 <User_Ip_Usart_GetBuffer>
	if(BufferChannel == NULL)
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d041      	beq.n	8002b94 <User_Ip_Usart_WriteBuffer+0x94>
 8002b10:	4603      	mov	r3, r0
	{
		return E_NOT_OK;
	}
	if (u8Data == NULL || u16DataLen == 0)
 8002b12:	2c00      	cmp	r4, #0
 8002b14:	d040      	beq.n	8002b98 <User_Ip_Usart_WriteBuffer+0x98>
 8002b16:	2d00      	cmp	r5, #0
 8002b18:	d040      	beq.n	8002b9c <User_Ip_Usart_WriteBuffer+0x9c>
	{
		return E_NOT_OK;
	}
	if (BufferChannel->BufferStatus ==  USER_BUFFER_UNLOCK)
 8002b1a:	f890 0810 	ldrb.w	r0, [r0, #2064]	; 0x810
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d13e      	bne.n	8002ba0 <User_Ip_Usart_WriteBuffer+0xa0>
	{
		if(BufferChannel->TxHead > BufferChannel->TxTail)
 8002b22:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 8002b26:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002b2a:	4291      	cmp	r1, r2
 8002b2c:	d929      	bls.n	8002b82 <User_Ip_Usart_WriteBuffer+0x82>
		{
			u16DataAvailable = BufferChannel->TxHead - BufferChannel->TxTail;
 8002b2e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8002b32:	f8d3 180c 	ldr.w	r1, [r3, #2060]	; 0x80c
 8002b36:	1a52      	subs	r2, r2, r1
 8002b38:	b292      	uxth	r2, r2
		}
		else
		{
			u16DataAvailable = ( USER_IP_USART_SIZE_RINGBUFFER - BufferChannel->TxHead) + BufferChannel->TxTail;
		}
		if ( u16DataAvailable > u16DataLen)
 8002b3a:	42aa      	cmp	r2, r5
 8002b3c:	d932      	bls.n	8002ba4 <User_Ip_Usart_WriteBuffer+0xa4>
		{
			BufferChannel->BufferStatus = USER_BUFFER_LOCK;
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
			for (u16Count = 0;u16Count < u16DataLen; u16Count++)
 8002b44:	1e69      	subs	r1, r5, #1
 8002b46:	b289      	uxth	r1, r1
 8002b48:	4411      	add	r1, r2
 8002b4a:	4421      	add	r1, r4
			{
				BufferChannel->User_Usart_TxRingBufferChannel[BufferChannel->TxTail] = *u8Data;
 8002b4c:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002b50:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002b54:	441a      	add	r2, r3
 8002b56:	f882 5400 	strb.w	r5, [r2, #1024]	; 0x400
				BufferChannel->TxTail = (BufferChannel->TxTail + 1) & (USER_IP_USART_SIZE_RINGBUFFER - 1);
 8002b5a:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002b5e:	3201      	adds	r2, #1
 8002b60:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002b64:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
			for (u16Count = 0;u16Count < u16DataLen; u16Count++)
 8002b68:	42a1      	cmp	r1, r4
 8002b6a:	d1ef      	bne.n	8002b4c <User_Ip_Usart_WriteBuffer+0x4c>
				u8Data++;
			}
			BufferChannel->BufferStatus = USER_BUFFER_UNLOCK;
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
			User_Ip_Usart_StartAsyncTransmit(User_Ip_Usart_BaseAddress[u8ChannelID]);
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <User_Ip_Usart_WriteBuffer+0xa8>)
 8002b74:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
	HwChannel->CR1 |= USER_IP_USART_CR1_TXEIE_MASK;
 8002b78:	68d3      	ldr	r3, [r2, #12]
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7e:	60d3      	str	r3, [r2, #12]
			ret = E_OK;
 8002b80:	e00d      	b.n	8002b9e <User_Ip_Usart_WriteBuffer+0x9e>
			u16DataAvailable = ( USER_IP_USART_SIZE_RINGBUFFER - BufferChannel->TxHead) + BufferChannel->TxTail;
 8002b82:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002b86:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 8002b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b8e:	1a52      	subs	r2, r2, r1
 8002b90:	b292      	uxth	r2, r2
 8002b92:	e7d2      	b.n	8002b3a <User_Ip_Usart_WriteBuffer+0x3a>
		return E_NOT_OK;
 8002b94:	2001      	movs	r0, #1
 8002b96:	e002      	b.n	8002b9e <User_Ip_Usart_WriteBuffer+0x9e>
		return E_NOT_OK;
 8002b98:	2001      	movs	r0, #1
 8002b9a:	e000      	b.n	8002b9e <User_Ip_Usart_WriteBuffer+0x9e>
 8002b9c:	2001      	movs	r0, #1
		}
	}
		return ret;
}
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
	Std_ReturnType ret = E_NOT_OK;
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	e7fc      	b.n	8002b9e <User_Ip_Usart_WriteBuffer+0x9e>
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	e7fa      	b.n	8002b9e <User_Ip_Usart_WriteBuffer+0x9e>
 8002ba8:	080151f0 	.word	0x080151f0

08002bac <User_Ip_Usart_ReadBuffer>:
{
	return (HwChannel->DR);
}

Std_ReturnType User_Ip_Usart_ReadBuffer(uint8_t u8ChannelID, uint8_t *u8Data, uint16_t u16DataLen,int16_t *i16reamain)
{
 8002bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb0:	460e      	mov	r6, r1
 8002bb2:	4617      	mov	r7, r2
 8002bb4:	4698      	mov	r8, r3
	User_Ip_RingBuffer_t *BufferChannel;
	BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelID);
 8002bb6:	f7ff ff0b 	bl	80029d0 <User_Ip_Usart_GetBuffer>
	uint16_t u16Count = 0u;
	if(BufferChannel == NULL)
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d046      	beq.n	8002c4c <User_Ip_Usart_ReadBuffer+0xa0>
 8002bbe:	4604      	mov	r4, r0
	{
		return E_NOT_OK;
	}
	if(u8Data == NULL || u16DataLen == 0)
 8002bc0:	2e00      	cmp	r6, #0
 8002bc2:	d045      	beq.n	8002c50 <User_Ip_Usart_ReadBuffer+0xa4>
 8002bc4:	2f00      	cmp	r7, #0
 8002bc6:	d045      	beq.n	8002c54 <User_Ip_Usart_ReadBuffer+0xa8>
	{
		return E_NOT_OK;
	}
	if(BufferChannel->RxHead == BufferChannel->RxTail)
 8002bc8:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
 8002bcc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d042      	beq.n	8002c5a <User_Ip_Usart_ReadBuffer+0xae>
 8002bd4:	2500      	movs	r5, #0
 8002bd6:	b2a9      	uxth	r1, r5
	{
		return E_NOT_OK;
	}
	for(u16Count = 0 ; u16Count < u16DataLen ; u16Count++ )
	{
		if(BufferChannel->RxTail != BufferChannel->RxHead)
 8002bd8:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
 8002bdc:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d010      	beq.n	8002c06 <User_Ip_Usart_ReadBuffer+0x5a>
		{
			*u8Data = BufferChannel->User_Usart_RxRingBufferChannel[BufferChannel->RxHead];
 8002be4:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002be8:	5ce3      	ldrb	r3, [r4, r3]
 8002bea:	f806 3b01 	strb.w	r3, [r6], #1
			BufferChannel->RxHead = (BufferChannel->RxHead + 1)&(USER_IP_USART_SIZE_RINGBUFFER - 1);
 8002bee:	f8d4 0800 	ldr.w	r0, [r4, #2048]	; 0x800
 8002bf2:	3001      	adds	r0, #1
 8002bf4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002bf8:	f8c4 0800 	str.w	r0, [r4, #2048]	; 0x800
	for(u16Count = 0 ; u16Count < u16DataLen ; u16Count++ )
 8002bfc:	3501      	adds	r5, #1
 8002bfe:	b2ab      	uxth	r3, r5
 8002c00:	429f      	cmp	r7, r3
 8002c02:	d8e8      	bhi.n	8002bd6 <User_Ip_Usart_ReadBuffer+0x2a>
 8002c04:	e002      	b.n	8002c0c <User_Ip_Usart_ReadBuffer+0x60>
			u8Data++;
		}
		else
		{
			*i16reamain = u16Count - u16DataLen;
 8002c06:	1bcf      	subs	r7, r1, r7
 8002c08:	f8a8 7000 	strh.w	r7, [r8]
			//return E_OK;
			break;
		}
	}
	if( BufferChannel->RxTail > BufferChannel->RxHead )
 8002c0c:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
 8002c10:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d908      	bls.n	8002c2a <User_Ip_Usart_ReadBuffer+0x7e>
	{
		*i16reamain = BufferChannel->RxTail - BufferChannel->RxHead;
 8002c18:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002c1c:	f8d4 2800 	ldr.w	r2, [r4, #2048]	; 0x800
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	f8a8 3000 	strh.w	r3, [r8]
	}
	else if ( BufferChannel->RxTail < BufferChannel->RxHead )
	{
		*i16reamain = ( USER_IP_USART_SIZE_RINGBUFFER - BufferChannel->RxHead) +  BufferChannel->RxTail;
	}
	return E_OK;
 8002c26:	2000      	movs	r0, #0
 8002c28:	e015      	b.n	8002c56 <User_Ip_Usart_ReadBuffer+0xaa>
	else if ( BufferChannel->RxTail < BufferChannel->RxHead )
 8002c2a:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
 8002c2e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d213      	bcs.n	8002c5e <User_Ip_Usart_ReadBuffer+0xb2>
		*i16reamain = ( USER_IP_USART_SIZE_RINGBUFFER - BufferChannel->RxHead) +  BufferChannel->RxTail;
 8002c36:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002c3a:	f8d4 2800 	ldr.w	r2, [r4, #2048]	; 0x800
 8002c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	f8a8 3000 	strh.w	r3, [r8]
	return E_OK;
 8002c48:	2000      	movs	r0, #0
 8002c4a:	e004      	b.n	8002c56 <User_Ip_Usart_ReadBuffer+0xaa>
		return E_NOT_OK;
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	e002      	b.n	8002c56 <User_Ip_Usart_ReadBuffer+0xaa>
		return E_NOT_OK;
 8002c50:	2001      	movs	r0, #1
 8002c52:	e000      	b.n	8002c56 <User_Ip_Usart_ReadBuffer+0xaa>
 8002c54:	2001      	movs	r0, #1
}
 8002c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return E_NOT_OK;
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	e7fb      	b.n	8002c56 <User_Ip_Usart_ReadBuffer+0xaa>
	return E_OK;
 8002c5e:	2000      	movs	r0, #0
 8002c60:	e7f9      	b.n	8002c56 <User_Ip_Usart_ReadBuffer+0xaa>
	...

08002c64 <User_Ip_Usart_IrqHandler>:




void User_Ip_Usart_IrqHandler(uint8_t u8ChannelID)
{
 8002c64:	b510      	push	{r4, lr}
	uint8_t receive_data = 0;
	User_Ip_Usart_Type *HwChannel = User_Ip_Usart_BaseAddress[u8ChannelID];
 8002c66:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <User_Ip_Usart_IrqHandler+0xac>)
 8002c68:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	if( (HwChannel->SR & USER_IP_USART_SR_TXE_MASK)  == USER_IP_USART_SR_TXE_MASK)
 8002c6c:	8823      	ldrh	r3, [r4, #0]
 8002c6e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c72:	d103      	bne.n	8002c7c <User_Ip_Usart_IrqHandler+0x18>
	{
		User_Ip_Usart_TransmitBuffer(u8ChannelID);
	}
	if( (HwChannel->SR & USER_IP_USART_SR_RXNE_MASK)  == USER_IP_USART_SR_RXNE_MASK)
 8002c74:	f013 0f20 	tst.w	r3, #32
 8002c78:	d123      	bne.n	8002cc2 <User_Ip_Usart_IrqHandler+0x5e>
	}
	if( (HwChannel->SR & USER_IP_USART_SR_FE_MASK)  == USER_IP_USART_SR_FE_MASK)
	{

	}
}
 8002c7a:	bd10      	pop	{r4, pc}
	BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelID);
 8002c7c:	f7ff fea8 	bl	80029d0 <User_Ip_Usart_GetBuffer>
	if (BufferChannel == NULL)
 8002c80:	4603      	mov	r3, r0
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d0f9      	beq.n	8002c7a <User_Ip_Usart_IrqHandler+0x16>
	if (BufferChannel->TxHead != BufferChannel->TxTail )
 8002c86:	f8d0 1808 	ldr.w	r1, [r0, #2056]	; 0x808
 8002c8a:	f8d0 280c 	ldr.w	r2, [r0, #2060]	; 0x80c
 8002c8e:	4291      	cmp	r1, r2
 8002c90:	d012      	beq.n	8002cb8 <User_Ip_Usart_IrqHandler+0x54>
		User_Ip_Usart_PutChar(HwChannel,BufferChannel->User_Usart_TxRingBufferChannel[BufferChannel->TxHead]);
 8002c92:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8002c96:	4402      	add	r2, r0
 8002c98:	f892 2400 	ldrb.w	r2, [r2, #1024]	; 0x400
	HwChannel->DR = u8Data;
 8002c9c:	6062      	str	r2, [r4, #4]
		BufferChannel->TxHead = (BufferChannel->TxHead + 1)& (USER_IP_USART_SIZE_RINGBUFFER - 1);
 8002c9e:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8002ca2:	3201      	adds	r2, #1
 8002ca4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002ca8:	f8c0 2808 	str.w	r2, [r0, #2056]	; 0x808
	if( (HwChannel->SR & USER_IP_USART_SR_RXNE_MASK)  == USER_IP_USART_SR_RXNE_MASK)
 8002cac:	8822      	ldrh	r2, [r4, #0]
 8002cae:	f012 0f20 	tst.w	r2, #32
 8002cb2:	d0e2      	beq.n	8002c7a <User_Ip_Usart_IrqHandler+0x16>
	return (HwChannel->DR);
 8002cb4:	7924      	ldrb	r4, [r4, #4]
	if (BufferChannel == NULL)
 8002cb6:	e00a      	b.n	8002cce <User_Ip_Usart_IrqHandler+0x6a>
	HwChannel->CR1 &= ~USER_IP_USART_CR1_TXEIE_MASK;
 8002cb8:	68e2      	ldr	r2, [r4, #12]
 8002cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cbe:	60e2      	str	r2, [r4, #12]
}
 8002cc0:	e7f4      	b.n	8002cac <User_Ip_Usart_IrqHandler+0x48>
	return (HwChannel->DR);
 8002cc2:	7924      	ldrb	r4, [r4, #4]
	BufferChannel = User_Ip_Usart_GetBuffer(u8ChannelUD);
 8002cc4:	f7ff fe84 	bl	80029d0 <User_Ip_Usart_GetBuffer>
	if (BufferChannel == NULL)
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	d0d5      	beq.n	8002c7a <User_Ip_Usart_IrqHandler+0x16>
	BufferChannel->User_Usart_RxRingBufferChannel[BufferChannel->RxTail] = u8data;
 8002cce:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8002cd2:	549c      	strb	r4, [r3, r2]
	BufferChannel->RxTail = ( BufferChannel->RxTail + 1 ) & (USER_IP_USART_SIZE_RINGBUFFER -1 );
 8002cd4:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8002cd8:	3201      	adds	r2, #1
 8002cda:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002cde:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
	if(BufferChannel->RxTail == BufferChannel->RxHead )
 8002ce2:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
 8002ce6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8002cea:	4291      	cmp	r1, r2
 8002cec:	d1c5      	bne.n	8002c7a <User_Ip_Usart_IrqHandler+0x16>
		if(BufferChannel->RxHead == 0)
 8002cee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8002cf2:	b922      	cbnz	r2, 8002cfe <User_Ip_Usart_IrqHandler+0x9a>
			BufferChannel->RxTail = USER_IP_USART_SIZE_RINGBUFFER - 1;
 8002cf4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002cf8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002cfc:	e7bd      	b.n	8002c7a <User_Ip_Usart_IrqHandler+0x16>
			BufferChannel->RxTail = (BufferChannel->RxTail  - 1) & (USER_IP_USART_SIZE_RINGBUFFER - 1);
 8002cfe:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8002d02:	3a01      	subs	r2, #1
 8002d04:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002d08:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8002d0c:	e7b5      	b.n	8002c7a <User_Ip_Usart_IrqHandler+0x16>
 8002d0e:	bf00      	nop
 8002d10:	080151f0 	.word	0x080151f0

08002d14 <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 8002d14:	b508      	push	{r3, lr}
	User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_1);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7ff ffa4 	bl	8002c64 <User_Ip_Usart_IrqHandler>
}
 8002d1c:	bd08      	pop	{r3, pc}

08002d1e <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8002d1e:	b508      	push	{r3, lr}
	User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_2);
 8002d20:	2001      	movs	r0, #1
 8002d22:	f7ff ff9f 	bl	8002c64 <User_Ip_Usart_IrqHandler>
}
 8002d26:	bd08      	pop	{r3, pc}

08002d28 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8002d28:	b508      	push	{r3, lr}
	User_Ip_Usart_IrqHandler(USER_IP_USART_CHANNELID_3);
 8002d2a:	2003      	movs	r0, #3
 8002d2c:	f7ff ff9a 	bl	8002c64 <User_Ip_Usart_IrqHandler>
}
 8002d30:	bd08      	pop	{r3, pc}
	...

08002d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d34:	b510      	push	{r4, lr}
 8002d36:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_InitTick+0x40>)
 8002d3a:	7818      	ldrb	r0, [r3, #0]
 8002d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d40:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d44:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <HAL_InitTick+0x44>)
 8002d46:	6810      	ldr	r0, [r2, #0]
 8002d48:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d4c:	f000 fa90 	bl	8003270 <HAL_SYSTICK_Config>
 8002d50:	b968      	cbnz	r0, 8002d6e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d52:	2c0f      	cmp	r4, #15
 8002d54:	d901      	bls.n	8002d5a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002d56:	2001      	movs	r0, #1
 8002d58:	e00a      	b.n	8002d70 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d62:	f000 fa45 	bl	80031f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_InitTick+0x48>)
 8002d68:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002d6e:	2001      	movs	r0, #1
}
 8002d70:	bd10      	pop	{r4, pc}
 8002d72:	bf00      	nop
 8002d74:	20000006 	.word	0x20000006
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000008 	.word	0x20000008

08002d80 <HAL_Init>:
{
 8002d80:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d82:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <HAL_Init+0x20>)
 8002d84:	6813      	ldr	r3, [r2, #0]
 8002d86:	f043 0310 	orr.w	r3, r3, #16
 8002d8a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	f000 fa1d 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d92:	200f      	movs	r0, #15
 8002d94:	f7ff ffce 	bl	8002d34 <HAL_InitTick>
  HAL_MspInit();
 8002d98:	f7fe f90c 	bl	8000fb4 <HAL_MspInit>
}
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	bd08      	pop	{r3, pc}
 8002da0:	40022000 	.word	0x40022000

08002da4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002da4:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <HAL_IncTick+0x10>)
 8002da6:	6811      	ldr	r1, [r2, #0]
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_IncTick+0x14>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	440b      	add	r3, r1
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20002cec 	.word	0x20002cec
 8002db8:	20000006 	.word	0x20000006

08002dbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002dbc:	4b01      	ldr	r3, [pc, #4]	; (8002dc4 <HAL_GetTick+0x8>)
 8002dbe:	6818      	ldr	r0, [r3, #0]
}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20002cec 	.word	0x20002cec

08002dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff fff6 	bl	8002dbc <HAL_GetTick>
 8002dd0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002dd6:	d002      	beq.n	8002dde <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_Delay+0x24>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dde:	f7ff ffed 	bl	8002dbc <HAL_GetTick>
 8002de2:	1b40      	subs	r0, r0, r5
 8002de4:	42a0      	cmp	r0, r4
 8002de6:	d3fa      	bcc.n	8002dde <HAL_Delay+0x16>
  {
  }
}
 8002de8:	bd38      	pop	{r3, r4, r5, pc}
 8002dea:	bf00      	nop
 8002dec:	20000006 	.word	0x20000006

08002df0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002df0:	6803      	ldr	r3, [r0, #0]
 8002df2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002df4:	4770      	bx	lr

08002df6 <HAL_ADC_LevelOutOfWindowCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002df6:	4770      	bx	lr

08002df8 <HAL_ADC_IRQHandler>:
{
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002dfc:	6803      	ldr	r3, [r0, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	f012 0f20 	tst.w	r2, #32
 8002e04:	d018      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	f012 0f02 	tst.w	r2, #2
 8002e0c:	d014      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e0e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e10:	f012 0f10 	tst.w	r2, #16
 8002e14:	d103      	bne.n	8002e1e <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e16:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1c:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002e24:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002e28:	d038      	beq.n	8002e9c <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f7fd fea0 	bl	8000b70 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	f06f 0212 	mvn.w	r2, #18
 8002e36:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e40:	d022      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	f012 0f04 	tst.w	r2, #4
 8002e48:	d01e      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e4c:	f012 0f10 	tst.w	r2, #16
 8002e50:	d103      	bne.n	8002e5a <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e58:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8002e60:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8002e64:	d031      	beq.n	8002eca <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002e66:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002e68:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002e6c:	d105      	bne.n	8002e7a <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002e74:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002e78:	d024      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f000 f9a4 	bl	80031c8 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	f06f 020c 	mvn.w	r2, #12
 8002e86:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e90:	d003      	beq.n	8002e9a <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f013 0f01 	tst.w	r3, #1
 8002e98:	d128      	bne.n	8002eec <HAL_ADC_IRQHandler+0xf4>
}
 8002e9a:	bd10      	pop	{r4, pc}
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e9c:	7b22      	ldrb	r2, [r4, #12]
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	d1c3      	bne.n	8002e2a <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	f022 0220 	bic.w	r2, r2, #32
 8002ea8:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002eaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb0:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002eb4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002eb8:	d1b7      	bne.n	8002e2a <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ec2:	e7b2      	b.n	8002e2a <HAL_ADC_IRQHandler+0x32>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002ec4:	7b22      	ldrb	r2, [r4, #12]
 8002ec6:	2a00      	cmp	r2, #0
 8002ec8:	d1d7      	bne.n	8002e7a <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed0:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ed2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ed4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed8:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002edc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ee0:	d1cb      	bne.n	8002e7a <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002eea:	e7c6      	b.n	8002e7a <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef2:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7ff ff7e 	bl	8002df6 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	f06f 0201 	mvn.w	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
}
 8002f02:	e7ca      	b.n	8002e9a <HAL_ADC_IRQHandler+0xa2>

08002f04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f04:	b430      	push	{r4, r5}
 8002f06:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002f08:	2200      	movs	r2, #0
 8002f0a:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f0c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002f10:	2a01      	cmp	r2, #1
 8002f12:	f000 808f 	beq.w	8003034 <HAL_ADC_ConfigChannel+0x130>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f1e:	684a      	ldr	r2, [r1, #4]
 8002f20:	2a06      	cmp	r2, #6
 8002f22:	d829      	bhi.n	8002f78 <HAL_ADC_ConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f24:	6805      	ldr	r5, [r0, #0]
 8002f26:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8002f28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f2c:	3a05      	subs	r2, #5
 8002f2e:	241f      	movs	r4, #31
 8002f30:	4094      	lsls	r4, r2
 8002f32:	ea20 0004 	bic.w	r0, r0, r4
 8002f36:	680c      	ldr	r4, [r1, #0]
 8002f38:	fa04 f202 	lsl.w	r2, r4, r2
 8002f3c:	4302      	orrs	r2, r0
 8002f3e:	636a      	str	r2, [r5, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f40:	680a      	ldr	r2, [r1, #0]
 8002f42:	2a09      	cmp	r2, #9
 8002f44:	d938      	bls.n	8002fb8 <HAL_ADC_ConfigChannel+0xb4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f46:	681d      	ldr	r5, [r3, #0]
 8002f48:	68e8      	ldr	r0, [r5, #12]
 8002f4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002f4e:	3a1e      	subs	r2, #30
 8002f50:	2407      	movs	r4, #7
 8002f52:	4094      	lsls	r4, r2
 8002f54:	ea20 0004 	bic.w	r0, r0, r4
 8002f58:	688c      	ldr	r4, [r1, #8]
 8002f5a:	fa04 f202 	lsl.w	r2, r4, r2
 8002f5e:	4302      	orrs	r2, r0
 8002f60:	60ea      	str	r2, [r5, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f62:	680a      	ldr	r2, [r1, #0]
 8002f64:	3a10      	subs	r2, #16
 8002f66:	2a01      	cmp	r2, #1
 8002f68:	d934      	bls.n	8002fd4 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002f72:	b002      	add	sp, #8
 8002f74:	bc30      	pop	{r4, r5}
 8002f76:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002f78:	2a0c      	cmp	r2, #12
 8002f7a:	d80e      	bhi.n	8002f9a <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f7c:	6805      	ldr	r5, [r0, #0]
 8002f7e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002f80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f84:	3a23      	subs	r2, #35	; 0x23
 8002f86:	241f      	movs	r4, #31
 8002f88:	4094      	lsls	r4, r2
 8002f8a:	ea20 0004 	bic.w	r0, r0, r4
 8002f8e:	680c      	ldr	r4, [r1, #0]
 8002f90:	fa04 f202 	lsl.w	r2, r4, r2
 8002f94:	4302      	orrs	r2, r0
 8002f96:	632a      	str	r2, [r5, #48]	; 0x30
 8002f98:	e7d2      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f9a:	6805      	ldr	r5, [r0, #0]
 8002f9c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002f9e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002fa2:	3a41      	subs	r2, #65	; 0x41
 8002fa4:	241f      	movs	r4, #31
 8002fa6:	4094      	lsls	r4, r2
 8002fa8:	ea20 0004 	bic.w	r0, r0, r4
 8002fac:	680c      	ldr	r4, [r1, #0]
 8002fae:	fa04 f202 	lsl.w	r2, r4, r2
 8002fb2:	4302      	orrs	r2, r0
 8002fb4:	62ea      	str	r2, [r5, #44]	; 0x2c
 8002fb6:	e7c3      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002fb8:	681d      	ldr	r5, [r3, #0]
 8002fba:	6928      	ldr	r0, [r5, #16]
 8002fbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002fc0:	2407      	movs	r4, #7
 8002fc2:	4094      	lsls	r4, r2
 8002fc4:	ea20 0004 	bic.w	r0, r0, r4
 8002fc8:	688c      	ldr	r4, [r1, #8]
 8002fca:	fa04 f202 	lsl.w	r2, r4, r2
 8002fce:	4302      	orrs	r2, r0
 8002fd0:	612a      	str	r2, [r5, #16]
 8002fd2:	e7c6      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_ADC_ConfigChannel+0x134>)
 8002fd8:	4290      	cmp	r0, r2
 8002fda:	d005      	beq.n	8002fe8 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fde:	f042 0220 	orr.w	r2, r2, #32
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	e7c1      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002fe8:	6892      	ldr	r2, [r2, #8]
 8002fea:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8002fee:	d11d      	bne.n	800302c <HAL_ADC_ConfigChannel+0x128>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ff0:	4811      	ldr	r0, [pc, #68]	; (8003038 <HAL_ADC_ConfigChannel+0x134>)
 8002ff2:	6882      	ldr	r2, [r0, #8]
 8002ff4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ff8:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ffa:	680a      	ldr	r2, [r1, #0]
 8002ffc:	2a10      	cmp	r2, #16
 8002ffe:	d001      	beq.n	8003004 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003000:	2000      	movs	r0, #0
 8003002:	e7b3      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_ADC_ConfigChannel+0x138>)
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	490d      	ldr	r1, [pc, #52]	; (8003040 <HAL_ADC_ConfigChannel+0x13c>)
 800300a:	fba1 1202 	umull	r1, r2, r1, r2
 800300e:	0c92      	lsrs	r2, r2, #18
 8003010:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003014:	0052      	lsls	r2, r2, #1
 8003016:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003018:	9a01      	ldr	r2, [sp, #4]
 800301a:	b14a      	cbz	r2, 8003030 <HAL_ADC_ConfigChannel+0x12c>
            wait_loop_index--;
 800301c:	9a01      	ldr	r2, [sp, #4]
 800301e:	3a01      	subs	r2, #1
 8003020:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003022:	9a01      	ldr	r2, [sp, #4]
 8003024:	2a00      	cmp	r2, #0
 8003026:	d1f9      	bne.n	800301c <HAL_ADC_ConfigChannel+0x118>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003028:	2000      	movs	r0, #0
 800302a:	e79f      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x68>
 800302c:	2000      	movs	r0, #0
 800302e:	e79d      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x68>
 8003030:	2000      	movs	r0, #0
 8003032:	e79b      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 8003034:	2002      	movs	r0, #2
 8003036:	e79c      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x6e>
 8003038:	40012400 	.word	0x40012400
 800303c:	20000000 	.word	0x20000000
 8003040:	431bde83 	.word	0x431bde83

08003044 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003044:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003046:	6803      	ldr	r3, [r0, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	f012 0f01 	tst.w	r2, #1
 800304e:	d101      	bne.n	8003054 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003050:	2000      	movs	r0, #0
}
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800305e:	f7ff fead 	bl	8002dbc <HAL_GetTick>
 8003062:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f013 0f01 	tst.w	r3, #1
 800306c:	d106      	bne.n	800307c <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 800306e:	2000      	movs	r0, #0
 8003070:	e7ef      	b.n	8003052 <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f013 0f01 	tst.w	r3, #1
 800307a:	d013      	beq.n	80030a4 <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800307c:	f7ff fe9e 	bl	8002dbc <HAL_GetTick>
 8003080:	1b43      	subs	r3, r0, r5
 8003082:	2b02      	cmp	r3, #2
 8003084:	d9f5      	bls.n	8003072 <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f013 0f01 	tst.w	r3, #1
 800308e:	d0f0      	beq.n	8003072 <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003090:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003092:	f043 0310 	orr.w	r3, r3, #16
 8003096:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80030a0:	2001      	movs	r0, #1
 80030a2:	e7d6      	b.n	8003052 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80030a4:	2000      	movs	r0, #0
 80030a6:	e7d4      	b.n	8003052 <ADC_ConversionStop_Disable+0xe>

080030a8 <HAL_ADC_Init>:
  if(hadc == NULL)
 80030a8:	2800      	cmp	r0, #0
 80030aa:	f000 8085 	beq.w	80031b8 <HAL_ADC_Init+0x110>
{
 80030ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b0:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d052      	beq.n	800315e <HAL_ADC_Init+0xb6>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7ff ffc3 	bl	8003044 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030c0:	f013 0310 	ands.w	r3, r3, #16
 80030c4:	d172      	bne.n	80031ac <HAL_ADC_Init+0x104>
 80030c6:	2800      	cmp	r0, #0
 80030c8:	d170      	bne.n	80031ac <HAL_ADC_Init+0x104>
    ADC_STATE_CLR_SET(hadc->State,
 80030ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80030cc:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80030d0:	f022 0202 	bic.w	r2, r2, #2
 80030d4:	f042 0202 	orr.w	r2, r2, #2
 80030d8:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030da:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030dc:	6826      	ldr	r6, [r4, #0]
 80030de:	4937      	ldr	r1, [pc, #220]	; (80031bc <HAL_ADC_Init+0x114>)
 80030e0:	428e      	cmp	r6, r1
 80030e2:	d042      	beq.n	800316a <HAL_ADC_Init+0xc2>
 80030e4:	69e1      	ldr	r1, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80030e6:	7b27      	ldrb	r7, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030e8:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 80030ec:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030ee:	68a5      	ldr	r5, [r4, #8]
 80030f0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80030f4:	d004      	beq.n	8003100 <HAL_ADC_Init+0x58>
 80030f6:	2d01      	cmp	r5, #1
 80030f8:	bf14      	ite	ne
 80030fa:	461d      	movne	r5, r3
 80030fc:	f44f 7580 	moveq.w	r5, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003100:	7d21      	ldrb	r1, [r4, #20]
 8003102:	2901      	cmp	r1, #1
 8003104:	d038      	beq.n	8003178 <HAL_ADC_Init+0xd0>
      MODIFY_REG(hadc->Instance->CR1,
 8003106:	6871      	ldr	r1, [r6, #4]
 8003108:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 800310c:	4329      	orrs	r1, r5
 800310e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003110:	6825      	ldr	r5, [r4, #0]
 8003112:	68ae      	ldr	r6, [r5, #8]
 8003114:	492a      	ldr	r1, [pc, #168]	; (80031c0 <HAL_ADC_Init+0x118>)
 8003116:	4031      	ands	r1, r6
 8003118:	4311      	orrs	r1, r2
 800311a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800311c:	68a1      	ldr	r1, [r4, #8]
 800311e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003122:	d001      	beq.n	8003128 <HAL_ADC_Init+0x80>
 8003124:	2901      	cmp	r1, #1
 8003126:	d102      	bne.n	800312e <HAL_ADC_Init+0x86>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003128:	6923      	ldr	r3, [r4, #16]
 800312a:	3b01      	subs	r3, #1
 800312c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800312e:	6825      	ldr	r5, [r4, #0]
 8003130:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003132:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8003136:	430b      	orrs	r3, r1
 8003138:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	6899      	ldr	r1, [r3, #8]
 800313e:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <HAL_ADC_Init+0x11c>)
 8003140:	400b      	ands	r3, r1
 8003142:	429a      	cmp	r2, r3
 8003144:	d029      	beq.n	800319a <HAL_ADC_Init+0xf2>
      ADC_STATE_CLR_SET(hadc->State,
 8003146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003148:	f023 0312 	bic.w	r3, r3, #18
 800314c:	f043 0310 	orr.w	r3, r3, #16
 8003150:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003152:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800315a:	2001      	movs	r0, #1
 800315c:	e02b      	b.n	80031b6 <HAL_ADC_Init+0x10e>
    ADC_CLEAR_ERRORCODE(hadc);
 800315e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003160:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8003164:	f7fd fd4c 	bl	8000c00 <HAL_ADC_MspInit>
 8003168:	e7a6      	b.n	80030b8 <HAL_ADC_Init+0x10>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800316a:	69e1      	ldr	r1, [r4, #28]
 800316c:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8003170:	bf08      	it	eq
 8003172:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 8003176:	e7b6      	b.n	80030e6 <HAL_ADC_Init+0x3e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003178:	b937      	cbnz	r7, 8003188 <HAL_ADC_Init+0xe0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800317a:	69a1      	ldr	r1, [r4, #24]
 800317c:	3901      	subs	r1, #1
 800317e:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8003182:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8003186:	e7be      	b.n	8003106 <HAL_ADC_Init+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003188:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800318a:	f041 0120 	orr.w	r1, r1, #32
 800318e:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003190:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003192:	f041 0101 	orr.w	r1, r1, #1
 8003196:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003198:	e7b5      	b.n	8003106 <HAL_ADC_Init+0x5e>
      ADC_CLEAR_ERRORCODE(hadc);
 800319a:	2300      	movs	r3, #0
 800319c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800319e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031a0:	f023 0303 	bic.w	r3, r3, #3
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80031aa:	e004      	b.n	80031b6 <HAL_ADC_Init+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031ae:	f043 0310 	orr.w	r3, r3, #16
 80031b2:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80031b4:	2001      	movs	r0, #1
}
 80031b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80031b8:	2001      	movs	r0, #1
}
 80031ba:	4770      	bx	lr
 80031bc:	40013c00 	.word	0x40013c00
 80031c0:	ffe1f7fd 	.word	0xffe1f7fd
 80031c4:	ff1f0efe 	.word	0xff1f0efe

080031c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031cc:	4907      	ldr	r1, [pc, #28]	; (80031ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80031ce:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d0:	0203      	lsls	r3, r0, #8
 80031d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031da:	0412      	lsls	r2, r2, #16
 80031dc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80031e8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <HAL_NVIC_SetPriority+0x5c>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031fa:	f1c3 0407 	rsb	r4, r3, #7
 80031fe:	2c04      	cmp	r4, #4
 8003200:	bf28      	it	cs
 8003202:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003204:	1d1d      	adds	r5, r3, #4
 8003206:	2d06      	cmp	r5, #6
 8003208:	bf8c      	ite	hi
 800320a:	3b03      	subhi	r3, #3
 800320c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320e:	f04f 35ff 	mov.w	r5, #4294967295
 8003212:	fa05 f404 	lsl.w	r4, r5, r4
 8003216:	ea21 0104 	bic.w	r1, r1, r4
 800321a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800321c:	fa05 f303 	lsl.w	r3, r5, r3
 8003220:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003226:	2800      	cmp	r0, #0
 8003228:	db09      	blt.n	800323e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322a:	0109      	lsls	r1, r1, #4
 800322c:	b2c9      	uxtb	r1, r1
 800322e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003232:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003236:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800323a:	bc30      	pop	{r4, r5}
 800323c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323e:	f000 000f 	and.w	r0, r0, #15
 8003242:	0109      	lsls	r1, r1, #4
 8003244:	b2c9      	uxtb	r1, r1
 8003246:	4b02      	ldr	r3, [pc, #8]	; (8003250 <HAL_NVIC_SetPriority+0x60>)
 8003248:	5419      	strb	r1, [r3, r0]
 800324a:	e7f6      	b.n	800323a <HAL_NVIC_SetPriority+0x4a>
 800324c:	e000ed00 	.word	0xe000ed00
 8003250:	e000ed14 	.word	0xe000ed14

08003254 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003254:	2800      	cmp	r0, #0
 8003256:	db08      	blt.n	800326a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003258:	0942      	lsrs	r2, r0, #5
 800325a:	f000 001f 	and.w	r0, r0, #31
 800325e:	2301      	movs	r3, #1
 8003260:	fa03 f000 	lsl.w	r0, r3, r0
 8003264:	4b01      	ldr	r3, [pc, #4]	; (800326c <HAL_NVIC_EnableIRQ+0x18>)
 8003266:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100

08003270 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	3801      	subs	r0, #1
 8003272:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003276:	d20a      	bcs.n	800328e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_SYSTICK_Config+0x24>)
 800327a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327c:	4a06      	ldr	r2, [pc, #24]	; (8003298 <HAL_SYSTICK_Config+0x28>)
 800327e:	21f0      	movs	r1, #240	; 0xf0
 8003280:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003284:	2000      	movs	r0, #0
 8003286:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800328e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000e010 	.word	0xe000e010
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a0:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a2:	680f      	ldr	r7, [r1, #0]
 80032a4:	2f00      	cmp	r7, #0
 80032a6:	f000 8103 	beq.w	80034b0 <HAL_GPIO_Init+0x214>
  uint32_t config = 0x00u;
 80032aa:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80032ac:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032ae:	f8df c21c 	ldr.w	ip, [pc, #540]	; 80034cc <HAL_GPIO_Init+0x230>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032b2:	f8df e21c 	ldr.w	lr, [pc, #540]	; 80034d0 <HAL_GPIO_Init+0x234>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032b6:	4d80      	ldr	r5, [pc, #512]	; (80034b8 <HAL_GPIO_Init+0x21c>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032b8:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80034d4 <HAL_GPIO_Init+0x238>
      switch (GPIO_Init->Mode)
 80032bc:	4e7f      	ldr	r6, [pc, #508]	; (80034bc <HAL_GPIO_Init+0x220>)
 80032be:	e0b5      	b.n	800342c <HAL_GPIO_Init+0x190>
 80032c0:	2200      	movs	r2, #0
 80032c2:	e020      	b.n	8003306 <HAL_GPIO_Init+0x6a>
 80032c4:	42b4      	cmp	r4, r6
 80032c6:	d00f      	beq.n	80032e8 <HAL_GPIO_Init+0x4c>
 80032c8:	d907      	bls.n	80032da <HAL_GPIO_Init+0x3e>
 80032ca:	4f7d      	ldr	r7, [pc, #500]	; (80034c0 <HAL_GPIO_Init+0x224>)
 80032cc:	42bc      	cmp	r4, r7
 80032ce:	d00b      	beq.n	80032e8 <HAL_GPIO_Init+0x4c>
 80032d0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80032d4:	42bc      	cmp	r4, r7
 80032d6:	d007      	beq.n	80032e8 <HAL_GPIO_Init+0x4c>
 80032d8:	e015      	b.n	8003306 <HAL_GPIO_Init+0x6a>
 80032da:	4f7a      	ldr	r7, [pc, #488]	; (80034c4 <HAL_GPIO_Init+0x228>)
 80032dc:	42bc      	cmp	r4, r7
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x4c>
 80032e0:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80032e4:	42bc      	cmp	r4, r7
 80032e6:	d10a      	bne.n	80032fe <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032e8:	688a      	ldr	r2, [r1, #8]
 80032ea:	2a00      	cmp	r2, #0
 80032ec:	d063      	beq.n	80033b6 <HAL_GPIO_Init+0x11a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032ee:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80032f0:	bf0c      	ite	eq
 80032f2:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 80032f6:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032fa:	2208      	movs	r2, #8
 80032fc:	e003      	b.n	8003306 <HAL_GPIO_Init+0x6a>
      switch (GPIO_Init->Mode)
 80032fe:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8003302:	42bc      	cmp	r4, r7
 8003304:	d0f0      	beq.n	80032e8 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003306:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800330a:	d856      	bhi.n	80033ba <HAL_GPIO_Init+0x11e>
 800330c:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800330e:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003312:	683c      	ldr	r4, [r7, #0]
 8003314:	f04f 0b0f 	mov.w	fp, #15
 8003318:	fa0b fb09 	lsl.w	fp, fp, r9
 800331c:	ea24 040b 	bic.w	r4, r4, fp
 8003320:	fa02 f909 	lsl.w	r9, r2, r9
 8003324:	ea44 0409 	orr.w	r4, r4, r9
 8003328:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800332a:	684c      	ldr	r4, [r1, #4]
 800332c:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003330:	d077      	beq.n	8003422 <HAL_GPIO_Init+0x186>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003332:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8003336:	f044 0401 	orr.w	r4, r4, #1
 800333a:	f8cc 4018 	str.w	r4, [ip, #24]
 800333e:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8003342:	f004 0401 	and.w	r4, r4, #1
 8003346:	9401      	str	r4, [sp, #4]
 8003348:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800334a:	f023 0403 	bic.w	r4, r3, #3
 800334e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003352:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8003356:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800335a:	f003 0703 	and.w	r7, r3, #3
 800335e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8003362:	270f      	movs	r7, #15
 8003364:	fa07 f70b 	lsl.w	r7, r7, fp
 8003368:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800336c:	4570      	cmp	r0, lr
 800336e:	d02a      	beq.n	80033c6 <HAL_GPIO_Init+0x12a>
 8003370:	4540      	cmp	r0, r8
 8003372:	f000 8095 	beq.w	80034a0 <HAL_GPIO_Init+0x204>
 8003376:	4f54      	ldr	r7, [pc, #336]	; (80034c8 <HAL_GPIO_Init+0x22c>)
 8003378:	42b8      	cmp	r0, r7
 800337a:	f000 8093 	beq.w	80034a4 <HAL_GPIO_Init+0x208>
 800337e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003382:	42b8      	cmp	r0, r7
 8003384:	f000 8090 	beq.w	80034a8 <HAL_GPIO_Init+0x20c>
 8003388:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800338c:	42b8      	cmp	r0, r7
 800338e:	f000 808d 	beq.w	80034ac <HAL_GPIO_Init+0x210>
 8003392:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003396:	42b8      	cmp	r0, r7
 8003398:	bf0c      	ite	eq
 800339a:	2705      	moveq	r7, #5
 800339c:	2706      	movne	r7, #6
 800339e:	e013      	b.n	80033c8 <HAL_GPIO_Init+0x12c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033a0:	68ca      	ldr	r2, [r1, #12]
          break;
 80033a2:	e7b0      	b.n	8003306 <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033a4:	68ca      	ldr	r2, [r1, #12]
 80033a6:	3204      	adds	r2, #4
          break;
 80033a8:	e7ad      	b.n	8003306 <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033aa:	68ca      	ldr	r2, [r1, #12]
 80033ac:	3208      	adds	r2, #8
          break;
 80033ae:	e7aa      	b.n	8003306 <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033b0:	68ca      	ldr	r2, [r1, #12]
 80033b2:	320c      	adds	r2, #12
          break;
 80033b4:	e7a7      	b.n	8003306 <HAL_GPIO_Init+0x6a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033b6:	2204      	movs	r2, #4
 80033b8:	e7a5      	b.n	8003306 <HAL_GPIO_Init+0x6a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033ba:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033bc:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80033c0:	f1a9 0920 	sub.w	r9, r9, #32
 80033c4:	e7a5      	b.n	8003312 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033c6:	2700      	movs	r7, #0
 80033c8:	fa07 f70b 	lsl.w	r7, r7, fp
 80033cc:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80033d0:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033d2:	684c      	ldr	r4, [r1, #4]
 80033d4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80033d8:	682c      	ldr	r4, [r5, #0]
 80033da:	bf14      	ite	ne
 80033dc:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033e0:	ea24 040a 	biceq.w	r4, r4, sl
 80033e4:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033e6:	684c      	ldr	r4, [r1, #4]
 80033e8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80033ec:	686c      	ldr	r4, [r5, #4]
 80033ee:	bf14      	ite	ne
 80033f0:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033f4:	ea24 040a 	biceq.w	r4, r4, sl
 80033f8:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033fa:	684c      	ldr	r4, [r1, #4]
 80033fc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003400:	68ac      	ldr	r4, [r5, #8]
 8003402:	bf14      	ite	ne
 8003404:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003408:	ea24 040a 	biceq.w	r4, r4, sl
 800340c:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800340e:	684c      	ldr	r4, [r1, #4]
 8003410:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003414:	68ec      	ldr	r4, [r5, #12]
 8003416:	bf14      	ite	ne
 8003418:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800341c:	ea24 040a 	biceq.w	r4, r4, sl
 8003420:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8003422:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003424:	680f      	ldr	r7, [r1, #0]
 8003426:	fa37 f403 	lsrs.w	r4, r7, r3
 800342a:	d041      	beq.n	80034b0 <HAL_GPIO_Init+0x214>
    ioposition = (0x01uL << position);
 800342c:	f04f 0901 	mov.w	r9, #1
 8003430:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003434:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8003438:	ea39 0407 	bics.w	r4, r9, r7
 800343c:	d1f1      	bne.n	8003422 <HAL_GPIO_Init+0x186>
      switch (GPIO_Init->Mode)
 800343e:	684c      	ldr	r4, [r1, #4]
 8003440:	2c12      	cmp	r4, #18
 8003442:	f63f af3f 	bhi.w	80032c4 <HAL_GPIO_Init+0x28>
 8003446:	2c12      	cmp	r4, #18
 8003448:	f63f af5d 	bhi.w	8003306 <HAL_GPIO_Init+0x6a>
 800344c:	a701      	add	r7, pc, #4	; (adr r7, 8003454 <HAL_GPIO_Init+0x1b8>)
 800344e:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8003452:	bf00      	nop
 8003454:	080032e9 	.word	0x080032e9
 8003458:	080033a1 	.word	0x080033a1
 800345c:	080033ab 	.word	0x080033ab
 8003460:	080032c1 	.word	0x080032c1
 8003464:	08003307 	.word	0x08003307
 8003468:	08003307 	.word	0x08003307
 800346c:	08003307 	.word	0x08003307
 8003470:	08003307 	.word	0x08003307
 8003474:	08003307 	.word	0x08003307
 8003478:	08003307 	.word	0x08003307
 800347c:	08003307 	.word	0x08003307
 8003480:	08003307 	.word	0x08003307
 8003484:	08003307 	.word	0x08003307
 8003488:	08003307 	.word	0x08003307
 800348c:	08003307 	.word	0x08003307
 8003490:	08003307 	.word	0x08003307
 8003494:	08003307 	.word	0x08003307
 8003498:	080033a5 	.word	0x080033a5
 800349c:	080033b1 	.word	0x080033b1
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034a0:	2701      	movs	r7, #1
 80034a2:	e791      	b.n	80033c8 <HAL_GPIO_Init+0x12c>
 80034a4:	2702      	movs	r7, #2
 80034a6:	e78f      	b.n	80033c8 <HAL_GPIO_Init+0x12c>
 80034a8:	2703      	movs	r7, #3
 80034aa:	e78d      	b.n	80033c8 <HAL_GPIO_Init+0x12c>
 80034ac:	2704      	movs	r7, #4
 80034ae:	e78b      	b.n	80033c8 <HAL_GPIO_Init+0x12c>
  }
}
 80034b0:	b003      	add	sp, #12
 80034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b6:	bf00      	nop
 80034b8:	40010400 	.word	0x40010400
 80034bc:	10220000 	.word	0x10220000
 80034c0:	10310000 	.word	0x10310000
 80034c4:	10120000 	.word	0x10120000
 80034c8:	40011000 	.word	0x40011000
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40010800 	.word	0x40010800
 80034d4:	40010c00 	.word	0x40010c00

080034d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034d8:	6883      	ldr	r3, [r0, #8]
 80034da:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80034dc:	bf14      	ite	ne
 80034de:	2001      	movne	r0, #1
 80034e0:	2000      	moveq	r0, #0
 80034e2:	4770      	bx	lr

080034e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034e4:	b10a      	cbz	r2, 80034ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034e6:	6101      	str	r1, [r0, #16]
 80034e8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034ea:	0409      	lsls	r1, r1, #16
 80034ec:	6101      	str	r1, [r0, #16]
  }
}
 80034ee:	4770      	bx	lr

080034f0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034f0:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034f2:	ea01 0203 	and.w	r2, r1, r3
 80034f6:	ea21 0103 	bic.w	r1, r1, r3
 80034fa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80034fe:	6101      	str	r1, [r0, #16]
}
 8003500:	4770      	bx	lr
	...

08003504 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003504:	2800      	cmp	r0, #0
 8003506:	f000 8201 	beq.w	800390c <HAL_RCC_OscConfig+0x408>
{
 800350a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003512:	6803      	ldr	r3, [r0, #0]
 8003514:	f013 0f01 	tst.w	r3, #1
 8003518:	d02c      	beq.n	8003574 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800351a:	4baa      	ldr	r3, [pc, #680]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b04      	cmp	r3, #4
 8003524:	d01d      	beq.n	8003562 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003526:	4ba7      	ldr	r3, [pc, #668]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b08      	cmp	r3, #8
 8003530:	d012      	beq.n	8003558 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003532:	6863      	ldr	r3, [r4, #4]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003538:	d041      	beq.n	80035be <HAL_RCC_OscConfig+0xba>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d155      	bne.n	80035ea <HAL_RCC_OscConfig+0xe6>
 800353e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003542:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e037      	b.n	80035c8 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003558:	4b9a      	ldr	r3, [pc, #616]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003560:	d0e7      	beq.n	8003532 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003562:	4b98      	ldr	r3, [pc, #608]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800356a:	d003      	beq.n	8003574 <HAL_RCC_OscConfig+0x70>
 800356c:	6863      	ldr	r3, [r4, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 81ce 	beq.w	8003910 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	f013 0f02 	tst.w	r3, #2
 800357a:	d075      	beq.n	8003668 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800357c:	4b91      	ldr	r3, [pc, #580]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f013 0f0c 	tst.w	r3, #12
 8003584:	d05f      	beq.n	8003646 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003586:	4b8f      	ldr	r3, [pc, #572]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b08      	cmp	r3, #8
 8003590:	d054      	beq.n	800363c <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003592:	6923      	ldr	r3, [r4, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8089 	beq.w	80036ac <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359a:	4b8b      	ldr	r3, [pc, #556]	; (80037c8 <HAL_RCC_OscConfig+0x2c4>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7ff fc0c 	bl	8002dbc <HAL_GetTick>
 80035a4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a6:	4e87      	ldr	r6, [pc, #540]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	f013 0f02 	tst.w	r3, #2
 80035ae:	d174      	bne.n	800369a <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b0:	f7ff fc04 	bl	8002dbc <HAL_GetTick>
 80035b4:	1b40      	subs	r0, r0, r5
 80035b6:	2802      	cmp	r0, #2
 80035b8:	d9f6      	bls.n	80035a8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80035ba:	2003      	movs	r0, #3
 80035bc:	e1ad      	b.n	800391a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035be:	4a81      	ldr	r2, [pc, #516]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 80035c0:	6813      	ldr	r3, [r2, #0]
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c8:	6863      	ldr	r3, [r4, #4]
 80035ca:	b343      	cbz	r3, 800361e <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80035cc:	f7ff fbf6 	bl	8002dbc <HAL_GetTick>
 80035d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	4e7c      	ldr	r6, [pc, #496]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 80035d4:	6833      	ldr	r3, [r6, #0]
 80035d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035da:	d1cb      	bne.n	8003574 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035dc:	f7ff fbee 	bl	8002dbc <HAL_GetTick>
 80035e0:	1b40      	subs	r0, r0, r5
 80035e2:	2864      	cmp	r0, #100	; 0x64
 80035e4:	d9f6      	bls.n	80035d4 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80035e6:	2003      	movs	r0, #3
 80035e8:	e197      	b.n	800391a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ee:	d009      	beq.n	8003604 <HAL_RCC_OscConfig+0x100>
 80035f0:	4b74      	ldr	r3, [pc, #464]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	e7e1      	b.n	80035c8 <HAL_RCC_OscConfig+0xc4>
 8003604:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003608:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e7d4      	b.n	80035c8 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800361e:	f7ff fbcd 	bl	8002dbc <HAL_GetTick>
 8003622:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003624:	4e67      	ldr	r6, [pc, #412]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 8003626:	6833      	ldr	r3, [r6, #0]
 8003628:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800362c:	d0a2      	beq.n	8003574 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362e:	f7ff fbc5 	bl	8002dbc <HAL_GetTick>
 8003632:	1b40      	subs	r0, r0, r5
 8003634:	2864      	cmp	r0, #100	; 0x64
 8003636:	d9f6      	bls.n	8003626 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8003638:	2003      	movs	r0, #3
 800363a:	e16e      	b.n	800391a <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800363c:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003644:	d1a5      	bne.n	8003592 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f013 0f02 	tst.w	r3, #2
 800364e:	d003      	beq.n	8003658 <HAL_RCC_OscConfig+0x154>
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	2b01      	cmp	r3, #1
 8003654:	f040 815e 	bne.w	8003914 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003658:	4a5a      	ldr	r2, [pc, #360]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 800365a:	6813      	ldr	r3, [r2, #0]
 800365c:	6961      	ldr	r1, [r4, #20]
 800365e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003662:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003666:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f013 0f08 	tst.w	r3, #8
 800366e:	d03c      	beq.n	80036ea <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003670:	69a3      	ldr	r3, [r4, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d04f      	beq.n	8003716 <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003676:	4b55      	ldr	r3, [pc, #340]	; (80037cc <HAL_RCC_OscConfig+0x2c8>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7ff fb9e 	bl	8002dbc <HAL_GetTick>
 8003680:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	4e50      	ldr	r6, [pc, #320]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 8003684:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003686:	f013 0f02 	tst.w	r3, #2
 800368a:	d121      	bne.n	80036d0 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368c:	f7ff fb96 	bl	8002dbc <HAL_GetTick>
 8003690:	1b40      	subs	r0, r0, r5
 8003692:	2802      	cmp	r0, #2
 8003694:	d9f6      	bls.n	8003684 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 8003696:	2003      	movs	r0, #3
 8003698:	e13f      	b.n	800391a <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369a:	4a4a      	ldr	r2, [pc, #296]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 800369c:	6813      	ldr	r3, [r2, #0]
 800369e:	6961      	ldr	r1, [r4, #20]
 80036a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e7dd      	b.n	8003668 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80036ac:	4b46      	ldr	r3, [pc, #280]	; (80037c8 <HAL_RCC_OscConfig+0x2c4>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036b2:	f7ff fb83 	bl	8002dbc <HAL_GetTick>
 80036b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b8:	4e42      	ldr	r6, [pc, #264]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 80036ba:	6833      	ldr	r3, [r6, #0]
 80036bc:	f013 0f02 	tst.w	r3, #2
 80036c0:	d0d2      	beq.n	8003668 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c2:	f7ff fb7b 	bl	8002dbc <HAL_GetTick>
 80036c6:	1b40      	subs	r0, r0, r5
 80036c8:	2802      	cmp	r0, #2
 80036ca:	d9f6      	bls.n	80036ba <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80036cc:	2003      	movs	r0, #3
 80036ce:	e124      	b.n	800391a <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036d0:	4b3f      	ldr	r3, [pc, #252]	; (80037d0 <HAL_RCC_OscConfig+0x2cc>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a3f      	ldr	r2, [pc, #252]	; (80037d4 <HAL_RCC_OscConfig+0x2d0>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	0a5b      	lsrs	r3, r3, #9
 80036dc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80036de:	bf00      	nop
  }
  while (Delay --);
 80036e0:	9b01      	ldr	r3, [sp, #4]
 80036e2:	1e5a      	subs	r2, r3, #1
 80036e4:	9201      	str	r2, [sp, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	f013 0f04 	tst.w	r3, #4
 80036f0:	f000 809c 	beq.w	800382c <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f4:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80036fc:	d11d      	bne.n	800373a <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003706:	61da      	str	r2, [r3, #28]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003712:	2501      	movs	r5, #1
 8003714:	e012      	b.n	800373c <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_OscConfig+0x2c8>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800371c:	f7ff fb4e 	bl	8002dbc <HAL_GetTick>
 8003720:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003722:	4e28      	ldr	r6, [pc, #160]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 8003724:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003726:	f013 0f02 	tst.w	r3, #2
 800372a:	d0de      	beq.n	80036ea <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7ff fb46 	bl	8002dbc <HAL_GetTick>
 8003730:	1b40      	subs	r0, r0, r5
 8003732:	2802      	cmp	r0, #2
 8003734:	d9f6      	bls.n	8003724 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 8003736:	2003      	movs	r0, #3
 8003738:	e0ef      	b.n	800391a <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800373a:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <HAL_RCC_OscConfig+0x2d4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003744:	d011      	beq.n	800376a <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003746:	68e3      	ldr	r3, [r4, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d022      	beq.n	8003792 <HAL_RCC_OscConfig+0x28e>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d145      	bne.n	80037dc <HAL_RCC_OscConfig+0x2d8>
 8003750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003754:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003758:	6a1a      	ldr	r2, [r3, #32]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	621a      	str	r2, [r3, #32]
 8003760:	6a1a      	ldr	r2, [r3, #32]
 8003762:	f022 0204 	bic.w	r2, r2, #4
 8003766:	621a      	str	r2, [r3, #32]
 8003768:	e018      	b.n	800379c <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376a:	4a1b      	ldr	r2, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x2d4>)
 800376c:	6813      	ldr	r3, [r2, #0]
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003774:	f7ff fb22 	bl	8002dbc <HAL_GetTick>
 8003778:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	4f17      	ldr	r7, [pc, #92]	; (80037d8 <HAL_RCC_OscConfig+0x2d4>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003782:	d1e0      	bne.n	8003746 <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003784:	f7ff fb1a 	bl	8002dbc <HAL_GetTick>
 8003788:	1b80      	subs	r0, r0, r6
 800378a:	2864      	cmp	r0, #100	; 0x64
 800378c:	d9f6      	bls.n	800377c <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 800378e:	2003      	movs	r0, #3
 8003790:	e0c3      	b.n	800391a <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003792:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
 8003794:	6a13      	ldr	r3, [r2, #32]
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800379c:	68e3      	ldr	r3, [r4, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d032      	beq.n	8003808 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 80037a2:	f7ff fb0b 	bl	8002dbc <HAL_GetTick>
 80037a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a8:	4f06      	ldr	r7, [pc, #24]	; (80037c4 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f013 0f02 	tst.w	r3, #2
 80037b4:	d139      	bne.n	800382a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7ff fb01 	bl	8002dbc <HAL_GetTick>
 80037ba:	1b80      	subs	r0, r0, r6
 80037bc:	4540      	cmp	r0, r8
 80037be:	d9f6      	bls.n	80037ae <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 80037c0:	2003      	movs	r0, #3
 80037c2:	e0aa      	b.n	800391a <HAL_RCC_OscConfig+0x416>
 80037c4:	40021000 	.word	0x40021000
 80037c8:	42420000 	.word	0x42420000
 80037cc:	42420480 	.word	0x42420480
 80037d0:	20000000 	.word	0x20000000
 80037d4:	10624dd3 	.word	0x10624dd3
 80037d8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d009      	beq.n	80037f4 <HAL_RCC_OscConfig+0x2f0>
 80037e0:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_RCC_OscConfig+0x424>)
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	621a      	str	r2, [r3, #32]
 80037ea:	6a1a      	ldr	r2, [r3, #32]
 80037ec:	f022 0204 	bic.w	r2, r2, #4
 80037f0:	621a      	str	r2, [r3, #32]
 80037f2:	e7d3      	b.n	800379c <HAL_RCC_OscConfig+0x298>
 80037f4:	4b4c      	ldr	r3, [pc, #304]	; (8003928 <HAL_RCC_OscConfig+0x424>)
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	f042 0204 	orr.w	r2, r2, #4
 80037fc:	621a      	str	r2, [r3, #32]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	621a      	str	r2, [r3, #32]
 8003806:	e7c9      	b.n	800379c <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8003808:	f7ff fad8 	bl	8002dbc <HAL_GetTick>
 800380c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380e:	4f46      	ldr	r7, [pc, #280]	; (8003928 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f013 0f02 	tst.w	r3, #2
 800381a:	d006      	beq.n	800382a <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f7ff face 	bl	8002dbc <HAL_GetTick>
 8003820:	1b80      	subs	r0, r0, r6
 8003822:	4540      	cmp	r0, r8
 8003824:	d9f6      	bls.n	8003814 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8003826:	2003      	movs	r0, #3
 8003828:	e077      	b.n	800391a <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 800382a:	b9e5      	cbnz	r5, 8003866 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382c:	69e3      	ldr	r3, [r4, #28]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d072      	beq.n	8003918 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003832:	4a3d      	ldr	r2, [pc, #244]	; (8003928 <HAL_RCC_OscConfig+0x424>)
 8003834:	6852      	ldr	r2, [r2, #4]
 8003836:	f002 020c 	and.w	r2, r2, #12
 800383a:	2a08      	cmp	r2, #8
 800383c:	d056      	beq.n	80038ec <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800383e:	2b02      	cmp	r3, #2
 8003840:	d017      	beq.n	8003872 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8003842:	4b3a      	ldr	r3, [pc, #232]	; (800392c <HAL_RCC_OscConfig+0x428>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003848:	f7ff fab8 	bl	8002dbc <HAL_GetTick>
 800384c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384e:	4d36      	ldr	r5, [pc, #216]	; (8003928 <HAL_RCC_OscConfig+0x424>)
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003856:	d047      	beq.n	80038e8 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7ff fab0 	bl	8002dbc <HAL_GetTick>
 800385c:	1b00      	subs	r0, r0, r4
 800385e:	2802      	cmp	r0, #2
 8003860:	d9f6      	bls.n	8003850 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8003862:	2003      	movs	r0, #3
 8003864:	e059      	b.n	800391a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003866:	4a30      	ldr	r2, [pc, #192]	; (8003928 <HAL_RCC_OscConfig+0x424>)
 8003868:	69d3      	ldr	r3, [r2, #28]
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386e:	61d3      	str	r3, [r2, #28]
 8003870:	e7dc      	b.n	800382c <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b2e      	ldr	r3, [pc, #184]	; (800392c <HAL_RCC_OscConfig+0x428>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003878:	f7ff faa0 	bl	8002dbc <HAL_GetTick>
 800387c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387e:	4e2a      	ldr	r6, [pc, #168]	; (8003928 <HAL_RCC_OscConfig+0x424>)
 8003880:	6833      	ldr	r3, [r6, #0]
 8003882:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003886:	d006      	beq.n	8003896 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7ff fa98 	bl	8002dbc <HAL_GetTick>
 800388c:	1b40      	subs	r0, r0, r5
 800388e:	2802      	cmp	r0, #2
 8003890:	d9f6      	bls.n	8003880 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8003892:	2003      	movs	r0, #3
 8003894:	e041      	b.n	800391a <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003896:	6a23      	ldr	r3, [r4, #32]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389c:	d01a      	beq.n	80038d4 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389e:	4922      	ldr	r1, [pc, #136]	; (8003928 <HAL_RCC_OscConfig+0x424>)
 80038a0:	684a      	ldr	r2, [r1, #4]
 80038a2:	6a23      	ldr	r3, [r4, #32]
 80038a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80038a6:	4303      	orrs	r3, r0
 80038a8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80038b0:	4b1e      	ldr	r3, [pc, #120]	; (800392c <HAL_RCC_OscConfig+0x428>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038b6:	f7ff fa81 	bl	8002dbc <HAL_GetTick>
 80038ba:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038bc:	4d1a      	ldr	r5, [pc, #104]	; (8003928 <HAL_RCC_OscConfig+0x424>)
 80038be:	682b      	ldr	r3, [r5, #0]
 80038c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038c4:	d10e      	bne.n	80038e4 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c6:	f7ff fa79 	bl	8002dbc <HAL_GetTick>
 80038ca:	1b00      	subs	r0, r0, r4
 80038cc:	2802      	cmp	r0, #2
 80038ce:	d9f6      	bls.n	80038be <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80038d0:	2003      	movs	r0, #3
 80038d2:	e022      	b.n	800391a <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038d4:	4a14      	ldr	r2, [pc, #80]	; (8003928 <HAL_RCC_OscConfig+0x424>)
 80038d6:	6853      	ldr	r3, [r2, #4]
 80038d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038dc:	68a1      	ldr	r1, [r4, #8]
 80038de:	430b      	orrs	r3, r1
 80038e0:	6053      	str	r3, [r2, #4]
 80038e2:	e7dc      	b.n	800389e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80038e4:	2000      	movs	r0, #0
 80038e6:	e018      	b.n	800391a <HAL_RCC_OscConfig+0x416>
 80038e8:	2000      	movs	r0, #0
 80038ea:	e016      	b.n	800391a <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d017      	beq.n	8003920 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80038f0:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <HAL_RCC_OscConfig+0x424>)
 80038f2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80038f8:	6a22      	ldr	r2, [r4, #32]
 80038fa:	4291      	cmp	r1, r2
 80038fc:	d112      	bne.n	8003924 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038fe:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8003904:	1a18      	subs	r0, r3, r0
 8003906:	bf18      	it	ne
 8003908:	2001      	movne	r0, #1
 800390a:	e006      	b.n	800391a <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 800390c:	2001      	movs	r0, #1
}
 800390e:	4770      	bx	lr
        return HAL_ERROR;
 8003910:	2001      	movs	r0, #1
 8003912:	e002      	b.n	800391a <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8003914:	2001      	movs	r0, #1
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003918:	2000      	movs	r0, #0
}
 800391a:	b002      	add	sp, #8
 800391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003920:	2001      	movs	r0, #1
 8003922:	e7fa      	b.n	800391a <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8003924:	2001      	movs	r0, #1
 8003926:	e7f8      	b.n	800391a <HAL_RCC_OscConfig+0x416>
 8003928:	40021000 	.word	0x40021000
 800392c:	42420060 	.word	0x42420060

08003930 <HAL_RCC_GetSysClockFreq>:
{
 8003930:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003936:	f10d 0c18 	add.w	ip, sp, #24
 800393a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800393e:	f240 2301 	movw	r3, #513	; 0x201
 8003942:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_RCC_GetSysClockFreq+0x60>)
 8003948:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	2a08      	cmp	r2, #8
 8003950:	d002      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8003952:	4810      	ldr	r0, [pc, #64]	; (8003994 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003954:	b006      	add	sp, #24
 8003956:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003958:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800395c:	4462      	add	r2, ip
 800395e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003962:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003966:	d00c      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_GetSysClockFreq+0x60>)
 800396a:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800396c:	4809      	ldr	r0, [pc, #36]	; (8003994 <HAL_RCC_GetSysClockFreq+0x64>)
 800396e:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003972:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003976:	4463      	add	r3, ip
 8003978:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800397c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003980:	e7e8      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003982:	4805      	ldr	r0, [pc, #20]	; (8003998 <HAL_RCC_GetSysClockFreq+0x68>)
 8003984:	fb00 f002 	mul.w	r0, r0, r2
 8003988:	e7e4      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x24>
 800398a:	bf00      	nop
 800398c:	080151fc 	.word	0x080151fc
 8003990:	40021000 	.word	0x40021000
 8003994:	007a1200 	.word	0x007a1200
 8003998:	003d0900 	.word	0x003d0900

0800399c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800399c:	2800      	cmp	r0, #0
 800399e:	f000 80a2 	beq.w	8003ae6 <HAL_RCC_ClockConfig+0x14a>
{
 80039a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a6:	460d      	mov	r5, r1
 80039a8:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039aa:	4b53      	ldr	r3, [pc, #332]	; (8003af8 <HAL_RCC_ClockConfig+0x15c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	428b      	cmp	r3, r1
 80039b4:	d20b      	bcs.n	80039ce <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4a50      	ldr	r2, [pc, #320]	; (8003af8 <HAL_RCC_ClockConfig+0x15c>)
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	f023 0307 	bic.w	r3, r3, #7
 80039be:	430b      	orrs	r3, r1
 80039c0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	428b      	cmp	r3, r1
 80039ca:	f040 808e 	bne.w	8003aea <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	f013 0f02 	tst.w	r3, #2
 80039d4:	d017      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d6:	f013 0f04 	tst.w	r3, #4
 80039da:	d004      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039dc:	4a47      	ldr	r2, [pc, #284]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
 80039de:	6853      	ldr	r3, [r2, #4]
 80039e0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039e4:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	f013 0f08 	tst.w	r3, #8
 80039ec:	d004      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039ee:	4a43      	ldr	r2, [pc, #268]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
 80039f0:	6853      	ldr	r3, [r2, #4]
 80039f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039f6:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4a40      	ldr	r2, [pc, #256]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
 80039fa:	6853      	ldr	r3, [r2, #4]
 80039fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a00:	68a1      	ldr	r1, [r4, #8]
 8003a02:	430b      	orrs	r3, r1
 8003a04:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	f013 0f01 	tst.w	r3, #1
 8003a0c:	d031      	beq.n	8003a72 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0e:	6862      	ldr	r2, [r4, #4]
 8003a10:	2a01      	cmp	r2, #1
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a14:	2a02      	cmp	r2, #2
 8003a16:	d025      	beq.n	8003a64 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a18:	4b38      	ldr	r3, [pc, #224]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f013 0f02 	tst.w	r3, #2
 8003a20:	d065      	beq.n	8003aee <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a22:	4936      	ldr	r1, [pc, #216]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
 8003a24:	684b      	ldr	r3, [r1, #4]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003a2e:	f7ff f9c5 	bl	8002dbc <HAL_GetTick>
 8003a32:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a34:	4f31      	ldr	r7, [pc, #196]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a36:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	6862      	ldr	r2, [r4, #4]
 8003a42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003a46:	d014      	beq.n	8003a72 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a48:	f7ff f9b8 	bl	8002dbc <HAL_GetTick>
 8003a4c:	1b80      	subs	r0, r0, r6
 8003a4e:	4540      	cmp	r0, r8
 8003a50:	d9f3      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8003a52:	2003      	movs	r0, #3
 8003a54:	e045      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a5e:	d1e0      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003a60:	2001      	movs	r0, #1
 8003a62:	e03e      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a64:	4b25      	ldr	r3, [pc, #148]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a6c:	d1d9      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
 8003a70:	e037      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a72:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <HAL_RCC_ClockConfig+0x15c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	42ab      	cmp	r3, r5
 8003a7c:	d90a      	bls.n	8003a94 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4a1e      	ldr	r2, [pc, #120]	; (8003af8 <HAL_RCC_ClockConfig+0x15c>)
 8003a80:	6813      	ldr	r3, [r2, #0]
 8003a82:	f023 0307 	bic.w	r3, r3, #7
 8003a86:	432b      	orrs	r3, r5
 8003a88:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	6813      	ldr	r3, [r2, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	42ab      	cmp	r3, r5
 8003a92:	d12e      	bne.n	8003af2 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	f013 0f04 	tst.w	r3, #4
 8003a9a:	d006      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
 8003a9e:	6853      	ldr	r3, [r2, #4]
 8003aa0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003aa4:	68e1      	ldr	r1, [r4, #12]
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f013 0f08 	tst.w	r3, #8
 8003ab0:	d007      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ab2:	4a12      	ldr	r2, [pc, #72]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
 8003ab4:	6853      	ldr	r3, [r2, #4]
 8003ab6:	6921      	ldr	r1, [r4, #16]
 8003ab8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003abc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ac0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ac2:	f7ff ff35 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <HAL_RCC_ClockConfig+0x160>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ace:	4a0c      	ldr	r2, [pc, #48]	; (8003b00 <HAL_RCC_ClockConfig+0x164>)
 8003ad0:	5cd3      	ldrb	r3, [r2, r3]
 8003ad2:	40d8      	lsrs	r0, r3
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <HAL_RCC_ClockConfig+0x168>)
 8003ad6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_ClockConfig+0x16c>)
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	f7ff f92a 	bl	8002d34 <HAL_InitTick>
  return HAL_OK;
 8003ae0:	2000      	movs	r0, #0
}
 8003ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003ae6:	2001      	movs	r0, #1
}
 8003ae8:	4770      	bx	lr
    return HAL_ERROR;
 8003aea:	2001      	movs	r0, #1
 8003aec:	e7f9      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003aee:	2001      	movs	r0, #1
 8003af0:	e7f7      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003af2:	2001      	movs	r0, #1
 8003af4:	e7f5      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x146>
 8003af6:	bf00      	nop
 8003af8:	40022000 	.word	0x40022000
 8003afc:	40021000 	.word	0x40021000
 8003b00:	08014fec 	.word	0x08014fec
 8003b04:	20000000 	.word	0x20000000
 8003b08:	20000008 	.word	0x20000008

08003b0c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003b14:	4a03      	ldr	r2, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003b16:	5cd3      	ldrb	r3, [r2, r3]
 8003b18:	4a03      	ldr	r2, [pc, #12]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b1a:	6810      	ldr	r0, [r2, #0]
}
 8003b1c:	40d8      	lsrs	r0, r3
 8003b1e:	4770      	bx	lr
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08014ffc 	.word	0x08014ffc
 8003b28:	20000000 	.word	0x20000000

08003b2c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003b34:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003b36:	5cd3      	ldrb	r3, [r2, r3]
 8003b38:	4a03      	ldr	r2, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003b3a:	6810      	ldr	r0, [r2, #0]
}
 8003b3c:	40d8      	lsrs	r0, r3
 8003b3e:	4770      	bx	lr
 8003b40:	40021000 	.word	0x40021000
 8003b44:	08014ffc 	.word	0x08014ffc
 8003b48:	20000000 	.word	0x20000000

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b54:	6803      	ldr	r3, [r0, #0]
 8003b56:	f013 0f01 	tst.w	r3, #1
 8003b5a:	d034      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5c:	4b3e      	ldr	r3, [pc, #248]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003b64:	d147      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b66:	4b3c      	ldr	r3, [pc, #240]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b6e:	61da      	str	r2, [r3, #28]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b7a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b84:	d039      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b86:	4b34      	ldr	r3, [pc, #208]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b8a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003b8e:	d011      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003b90:	6862      	ldr	r2, [r4, #4]
 8003b92:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d00c      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9a:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003b9c:	6a13      	ldr	r3, [r2, #32]
 8003b9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ba2:	492f      	ldr	r1, [pc, #188]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003ba4:	2601      	movs	r6, #1
 8003ba6:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba8:	2600      	movs	r6, #0
 8003baa:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bac:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bae:	f013 0f01 	tst.w	r3, #1
 8003bb2:	d136      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003bb6:	6a13      	ldr	r3, [r2, #32]
 8003bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbc:	6861      	ldr	r1, [r4, #4]
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bc2:	2d00      	cmp	r5, #0
 8003bc4:	d13e      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	f013 0f02 	tst.w	r3, #2
 8003bcc:	d006      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003bd0:	6853      	ldr	r3, [r2, #4]
 8003bd2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003bd6:	68a1      	ldr	r1, [r4, #8]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	f013 0f10 	tst.w	r3, #16
 8003be2:	d034      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003be4:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003be6:	6853      	ldr	r3, [r2, #4]
 8003be8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003bec:	6961      	ldr	r1, [r4, #20]
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	e02c      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus pwrclkchanged = RESET;
 8003bf6:	2500      	movs	r5, #0
 8003bf8:	e7c0      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfa:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c04:	f7ff f8da 	bl	8002dbc <HAL_GetTick>
 8003c08:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0a:	4f14      	ldr	r7, [pc, #80]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c12:	d1b8      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c14:	f7ff f8d2 	bl	8002dbc <HAL_GetTick>
 8003c18:	1b80      	subs	r0, r0, r6
 8003c1a:	2864      	cmp	r0, #100	; 0x64
 8003c1c:	d9f6      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003c1e:	2003      	movs	r0, #3
 8003c20:	e016      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 8003c22:	f7ff f8cb 	bl	8002dbc <HAL_GetTick>
 8003c26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c28:	4f0b      	ldr	r7, [pc, #44]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f013 0f02 	tst.w	r3, #2
 8003c34:	d1be      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7ff f8c1 	bl	8002dbc <HAL_GetTick>
 8003c3a:	1b80      	subs	r0, r0, r6
 8003c3c:	4540      	cmp	r0, r8
 8003c3e:	d9f6      	bls.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 8003c40:	2003      	movs	r0, #3
 8003c42:	e005      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c44:	69d3      	ldr	r3, [r2, #28]
 8003c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	61d3      	str	r3, [r2, #28]
 8003c4c:	e7bb      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 8003c4e:	2000      	movs	r0, #0
}
 8003c50:	b002      	add	sp, #8
 8003c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	42420440 	.word	0x42420440

08003c64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	4681      	mov	r9, r0
 8003c6c:	460f      	mov	r7, r1
 8003c6e:	4616      	mov	r6, r2
 8003c70:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c72:	f7ff f8a3 	bl	8002dbc <HAL_GetTick>
 8003c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c78:	442b      	add	r3, r5
 8003c7a:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003c7e:	f7ff f89d 	bl	8002dbc <HAL_GetTick>
 8003c82:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c84:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003c8c:	fb08 f303 	mul.w	r3, r8, r3
 8003c90:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c92:	f8d9 3000 	ldr.w	r3, [r9]
 8003c96:	689c      	ldr	r4, [r3, #8]
 8003c98:	ea37 0204 	bics.w	r2, r7, r4
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2401      	moveq	r4, #1
 8003ca0:	2400      	movne	r4, #0
 8003ca2:	42b4      	cmp	r4, r6
 8003ca4:	d044      	beq.n	8003d30 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003caa:	d0f4      	beq.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cac:	f7ff f886 	bl	8002dbc <HAL_GetTick>
 8003cb0:	eba0 000a 	sub.w	r0, r0, sl
 8003cb4:	4540      	cmp	r0, r8
 8003cb6:	d207      	bcs.n	8003cc8 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cb8:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf08      	it	eq
 8003cbe:	4698      	moveq	r8, r3
      }
      count--;
 8003cc0:	9b01      	ldr	r3, [sp, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	e7e4      	b.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cc8:	f8d9 2000 	ldr.w	r2, [r9]
 8003ccc:	6853      	ldr	r3, [r2, #4]
 8003cce:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003cd2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003cd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cdc:	d00c      	beq.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cde:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce6:	d016      	beq.n	8003d16 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8003cf4:	2003      	movs	r0, #3
 8003cf6:	e01c      	b.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d00:	d002      	beq.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d1ea      	bne.n	8003cde <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8003d08:	f8d9 2000 	ldr.w	r2, [r9]
 8003d0c:	6813      	ldr	r3, [r2, #0]
 8003d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e7e3      	b.n	8003cde <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8003d16:	f8d9 2000 	ldr.w	r2, [r9]
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	f8d9 2000 	ldr.w	r2, [r9]
 8003d26:	6813      	ldr	r3, [r2, #0]
 8003d28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e7db      	b.n	8003ce8 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8003d30:	2000      	movs	r0, #0
}
 8003d32:	b002      	add	sp, #8
 8003d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d38:	20000000 	.word	0x20000000

08003d3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	4604      	mov	r4, r0
 8003d42:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d44:	9200      	str	r2, [sp, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	2180      	movs	r1, #128	; 0x80
 8003d4a:	f7ff ff8b 	bl	8003c64 <SPI_WaitFlagStateUntilTimeout>
 8003d4e:	b908      	cbnz	r0, 8003d54 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8003d50:	b002      	add	sp, #8
 8003d52:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d56:	f043 0320 	orr.w	r3, r3, #32
 8003d5a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d5c:	2003      	movs	r0, #3
 8003d5e:	e7f7      	b.n	8003d50 <SPI_EndRxTxTransaction+0x14>

08003d60 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d056      	beq.n	8003e12 <HAL_SPI_Init+0xb2>
{
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d6a:	b933      	cbnz	r3, 8003d7a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d6c:	6843      	ldr	r3, [r0, #4]
 8003d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d72:	d005      	beq.n	8003d80 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61c3      	str	r3, [r0, #28]
 8003d78:	e002      	b.n	8003d80 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d7e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d84:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d03c      	beq.n	8003e06 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	6813      	ldr	r3, [r2, #0]
 8003d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d9a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d9c:	6822      	ldr	r2, [r4, #0]
 8003d9e:	6863      	ldr	r3, [r4, #4]
 8003da0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003da4:	68a1      	ldr	r1, [r4, #8]
 8003da6:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003daa:	430b      	orrs	r3, r1
 8003dac:	68e1      	ldr	r1, [r4, #12]
 8003dae:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8003db2:	430b      	orrs	r3, r1
 8003db4:	6921      	ldr	r1, [r4, #16]
 8003db6:	f001 0102 	and.w	r1, r1, #2
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	6961      	ldr	r1, [r4, #20]
 8003dbe:	f001 0101 	and.w	r1, r1, #1
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	69a1      	ldr	r1, [r4, #24]
 8003dc6:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	69e1      	ldr	r1, [r4, #28]
 8003dce:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	6a21      	ldr	r1, [r4, #32]
 8003dd6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003dde:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	8b63      	ldrh	r3, [r4, #26]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	69d3      	ldr	r3, [r2, #28]
 8003df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003df8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003e04:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003e06:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f7fd f896 	bl	8000f3c <HAL_SPI_MspInit>
 8003e10:	e7bc      	b.n	8003d8c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003e12:	2001      	movs	r0, #1
}
 8003e14:	4770      	bx	lr

08003e16 <HAL_SPI_TransmitReceive>:
{
 8003e16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	461f      	mov	r7, r3
 8003e1e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8003e20:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	f000 8109 	beq.w	800403c <HAL_SPI_TransmitReceive+0x226>
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4688      	mov	r8, r1
 8003e2e:	4691      	mov	r9, r2
 8003e30:	2301      	movs	r3, #1
 8003e32:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003e36:	f7fe ffc1 	bl	8002dbc <HAL_GetTick>
 8003e3a:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8003e3c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8003e40:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e42:	2801      	cmp	r0, #1
 8003e44:	d00b      	beq.n	8003e5e <HAL_SPI_TransmitReceive+0x48>
 8003e46:	6863      	ldr	r3, [r4, #4]
 8003e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4c:	f040 80de 	bne.w	800400c <HAL_SPI_TransmitReceive+0x1f6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e50:	68a3      	ldr	r3, [r4, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 80e4 	bne.w	8004020 <HAL_SPI_TransmitReceive+0x20a>
 8003e58:	2804      	cmp	r0, #4
 8003e5a:	f040 80e3 	bne.w	8004024 <HAL_SPI_TransmitReceive+0x20e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e5e:	f1b8 0f00 	cmp.w	r8, #0
 8003e62:	f000 80e1 	beq.w	8004028 <HAL_SPI_TransmitReceive+0x212>
 8003e66:	f1b9 0f00 	cmp.w	r9, #0
 8003e6a:	f000 80df 	beq.w	800402c <HAL_SPI_TransmitReceive+0x216>
 8003e6e:	2f00      	cmp	r7, #0
 8003e70:	f000 80de 	beq.w	8004030 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e74:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e7c:	bf1c      	itt	ne
 8003e7e:	2305      	movne	r3, #5
 8003e80:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e88:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e8c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e8e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e90:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e94:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e96:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8003e98:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e9a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ea4:	d103      	bne.n	8003eae <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eac:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eae:	68e3      	ldr	r3, [r4, #12]
 8003eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb4:	d012      	beq.n	8003edc <HAL_SPI_TransmitReceive+0xc6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	b10b      	cbz	r3, 8003ebe <HAL_SPI_TransmitReceive+0xa8>
 8003eba:	2f01      	cmp	r7, #1
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ec2:	7812      	ldrb	r2, [r2, #0]
 8003ec4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ec6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ec8:	3301      	adds	r3, #1
 8003eca:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003ecc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003ed4:	2701      	movs	r7, #1
        txallowed = 0U;
 8003ed6:	f04f 0800 	mov.w	r8, #0
 8003eda:	e066      	b.n	8003faa <HAL_SPI_TransmitReceive+0x194>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	b10b      	cbz	r3, 8003ee4 <HAL_SPI_TransmitReceive+0xce>
 8003ee0:	2f01      	cmp	r7, #1
 8003ee2:	d10a      	bne.n	8003efa <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ee8:	8812      	ldrh	r2, [r2, #0]
 8003eea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003eee:	3302      	adds	r3, #2
 8003ef0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003ef2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003efa:	2701      	movs	r7, #1
        txallowed = 0U;
 8003efc:	f04f 0800 	mov.w	r8, #0
 8003f00:	e01a      	b.n	8003f38 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f02:	6822      	ldr	r2, [r4, #0]
 8003f04:	6893      	ldr	r3, [r2, #8]
 8003f06:	f013 0301 	ands.w	r3, r3, #1
 8003f0a:	d00d      	beq.n	8003f28 <HAL_SPI_TransmitReceive+0x112>
 8003f0c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003f0e:	b289      	uxth	r1, r1
 8003f10:	b151      	cbz	r1, 8003f28 <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f12:	68d1      	ldr	r1, [r2, #12]
 8003f14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f16:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f1a:	3202      	adds	r2, #2
 8003f1c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003f1e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003f20:	3a01      	subs	r2, #1
 8003f22:	b292      	uxth	r2, r2
 8003f24:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003f26:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f28:	f7fe ff48 	bl	8002dbc <HAL_GetTick>
 8003f2c:	1b40      	subs	r0, r0, r5
 8003f2e:	42b0      	cmp	r0, r6
 8003f30:	d302      	bcc.n	8003f38 <HAL_SPI_TransmitReceive+0x122>
 8003f32:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003f36:	d17d      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	b91b      	cbnz	r3, 8003f46 <HAL_SPI_TransmitReceive+0x130>
 8003f3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d04e      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x1ce>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	f012 0f02 	tst.w	r2, #2
 8003f4e:	d0d8      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0xec>
 8003f50:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003f52:	b292      	uxth	r2, r2
 8003f54:	2a00      	cmp	r2, #0
 8003f56:	d0d4      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0xec>
 8003f58:	2f00      	cmp	r7, #0
 8003f5a:	d0d2      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003f5e:	8812      	ldrh	r2, [r2, #0]
 8003f60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f64:	3302      	adds	r3, #2
 8003f66:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003f68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003f70:	4647      	mov	r7, r8
 8003f72:	e7c6      	b.n	8003f02 <HAL_SPI_TransmitReceive+0xec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f74:	6822      	ldr	r2, [r4, #0]
 8003f76:	6893      	ldr	r3, [r2, #8]
 8003f78:	f013 0301 	ands.w	r3, r3, #1
 8003f7c:	d00d      	beq.n	8003f9a <HAL_SPI_TransmitReceive+0x184>
 8003f7e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003f80:	b289      	uxth	r1, r1
 8003f82:	b151      	cbz	r1, 8003f9a <HAL_SPI_TransmitReceive+0x184>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f84:	68d1      	ldr	r1, [r2, #12]
 8003f86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f88:	7011      	strb	r1, [r2, #0]
        hspi->pRxBuffPtr++;
 8003f8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f8c:	3201      	adds	r2, #1
 8003f8e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003f90:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003f92:	3a01      	subs	r2, #1
 8003f94:	b292      	uxth	r2, r2
 8003f96:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003f98:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f9a:	f7fe ff0f 	bl	8002dbc <HAL_GetTick>
 8003f9e:	1b43      	subs	r3, r0, r5
 8003fa0:	42b3      	cmp	r3, r6
 8003fa2:	d302      	bcc.n	8003faa <HAL_SPI_TransmitReceive+0x194>
 8003fa4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003fa8:	d146      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x222>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003faa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	b913      	cbnz	r3, 8003fb6 <HAL_SPI_TransmitReceive+0x1a0>
 8003fb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	b1b3      	cbz	r3, 8003fe4 <HAL_SPI_TransmitReceive+0x1ce>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	f012 0f02 	tst.w	r2, #2
 8003fbe:	d0d9      	beq.n	8003f74 <HAL_SPI_TransmitReceive+0x15e>
 8003fc0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003fc2:	b292      	uxth	r2, r2
 8003fc4:	2a00      	cmp	r2, #0
 8003fc6:	d0d5      	beq.n	8003f74 <HAL_SPI_TransmitReceive+0x15e>
 8003fc8:	2f01      	cmp	r7, #1
 8003fca:	d1d3      	bne.n	8003f74 <HAL_SPI_TransmitReceive+0x15e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003fd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003fd8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003fe0:	4647      	mov	r7, r8
 8003fe2:	e7c7      	b.n	8003f74 <HAL_SPI_TransmitReceive+0x15e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fe4:	462a      	mov	r2, r5
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7ff fea7 	bl	8003d3c <SPI_EndRxTxTransaction>
 8003fee:	b948      	cbnz	r0, 8004004 <HAL_SPI_TransmitReceive+0x1ee>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ff0:	68a3      	ldr	r3, [r4, #8]
 8003ff2:	b963      	cbnz	r3, 800400e <HAL_SPI_TransmitReceive+0x1f8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	9201      	str	r2, [sp, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	9b01      	ldr	r3, [sp, #4]
 8004002:	e004      	b.n	800400e <HAL_SPI_TransmitReceive+0x1f8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004004:	2320      	movs	r3, #32
 8004006:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004008:	2001      	movs	r0, #1
    goto error;
 800400a:	e000      	b.n	800400e <HAL_SPI_TransmitReceive+0x1f8>
    errorcode = HAL_BUSY;
 800400c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800400e:	2301      	movs	r3, #1
 8004010:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004014:	2300      	movs	r3, #0
 8004016:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800401a:	b003      	add	sp, #12
 800401c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8004020:	2002      	movs	r0, #2
 8004022:	e7f4      	b.n	800400e <HAL_SPI_TransmitReceive+0x1f8>
 8004024:	2002      	movs	r0, #2
 8004026:	e7f2      	b.n	800400e <HAL_SPI_TransmitReceive+0x1f8>
    errorcode = HAL_ERROR;
 8004028:	2001      	movs	r0, #1
 800402a:	e7f0      	b.n	800400e <HAL_SPI_TransmitReceive+0x1f8>
 800402c:	2001      	movs	r0, #1
 800402e:	e7ee      	b.n	800400e <HAL_SPI_TransmitReceive+0x1f8>
 8004030:	2001      	movs	r0, #1
 8004032:	e7ec      	b.n	800400e <HAL_SPI_TransmitReceive+0x1f8>
        errorcode = HAL_TIMEOUT;
 8004034:	2003      	movs	r0, #3
 8004036:	e7ea      	b.n	800400e <HAL_SPI_TransmitReceive+0x1f8>
        errorcode = HAL_TIMEOUT;
 8004038:	2003      	movs	r0, #3
 800403a:	e7e8      	b.n	800400e <HAL_SPI_TransmitReceive+0x1f8>
  __HAL_LOCK(hspi);
 800403c:	2002      	movs	r0, #2
 800403e:	e7ec      	b.n	800401a <HAL_SPI_TransmitReceive+0x204>

08004040 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004040:	4770      	bx	lr

08004042 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004042:	4770      	bx	lr

08004044 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004044:	4770      	bx	lr

08004046 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004046:	4770      	bx	lr

08004048 <HAL_TIM_IRQHandler>:
{
 8004048:	b510      	push	{r4, lr}
 800404a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800404c:	6803      	ldr	r3, [r0, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	f012 0f02 	tst.w	r2, #2
 8004054:	d011      	beq.n	800407a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	f012 0f02 	tst.w	r2, #2
 800405c:	d00d      	beq.n	800407a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800405e:	f06f 0202 	mvn.w	r2, #2
 8004062:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004064:	2301      	movs	r3, #1
 8004066:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004068:	6803      	ldr	r3, [r0, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f013 0f03 	tst.w	r3, #3
 8004070:	d070      	beq.n	8004154 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004072:	f7ff ffe6 	bl	8004042 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	2300      	movs	r3, #0
 8004078:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	f012 0f04 	tst.w	r2, #4
 8004082:	d012      	beq.n	80040aa <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	f012 0f04 	tst.w	r2, #4
 800408a:	d00e      	beq.n	80040aa <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800408c:	f06f 0204 	mvn.w	r2, #4
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004092:	2302      	movs	r3, #2
 8004094:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800409e:	d05f      	beq.n	8004160 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7ff ffce 	bl	8004042 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	2300      	movs	r3, #0
 80040a8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	f012 0f08 	tst.w	r2, #8
 80040b2:	d012      	beq.n	80040da <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	f012 0f08 	tst.w	r2, #8
 80040ba:	d00e      	beq.n	80040da <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040bc:	f06f 0208 	mvn.w	r2, #8
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c2:	2304      	movs	r3, #4
 80040c4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f013 0f03 	tst.w	r3, #3
 80040ce:	d04e      	beq.n	800416e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7ff ffb6 	bl	8004042 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	2300      	movs	r3, #0
 80040d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	f012 0f10 	tst.w	r2, #16
 80040e2:	d012      	beq.n	800410a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	f012 0f10 	tst.w	r2, #16
 80040ea:	d00e      	beq.n	800410a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ec:	f06f 0210 	mvn.w	r2, #16
 80040f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f2:	2308      	movs	r3, #8
 80040f4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80040fe:	d03d      	beq.n	800417c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004100:	4620      	mov	r0, r4
 8004102:	f7ff ff9e 	bl	8004042 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	2300      	movs	r3, #0
 8004108:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	f012 0f01 	tst.w	r2, #1
 8004112:	d003      	beq.n	800411c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	f012 0f01 	tst.w	r2, #1
 800411a:	d136      	bne.n	800418a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	f012 0f80 	tst.w	r2, #128	; 0x80
 800412c:	d134      	bne.n	8004198 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004136:	d003      	beq.n	8004140 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800413e:	d132      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	f012 0f20 	tst.w	r2, #32
 8004148:	d003      	beq.n	8004152 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	f012 0f20 	tst.w	r2, #32
 8004150:	d130      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x16c>
}
 8004152:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004154:	f7ff ff74 	bl	8004040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	4620      	mov	r0, r4
 800415a:	f7ff ff73 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
 800415e:	e78a      	b.n	8004076 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004160:	4620      	mov	r0, r4
 8004162:	f7ff ff6d 	bl	8004040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004166:	4620      	mov	r0, r4
 8004168:	f7ff ff6c 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
 800416c:	e79b      	b.n	80040a6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	4620      	mov	r0, r4
 8004170:	f7ff ff66 	bl	8004040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	4620      	mov	r0, r4
 8004176:	f7ff ff65 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
 800417a:	e7ac      	b.n	80040d6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417c:	4620      	mov	r0, r4
 800417e:	f7ff ff5f 	bl	8004040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004182:	4620      	mov	r0, r4
 8004184:	f7ff ff5e 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
 8004188:	e7bd      	b.n	8004106 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800418a:	f06f 0201 	mvn.w	r2, #1
 800418e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004190:	4620      	mov	r0, r4
 8004192:	f7fc fcd1 	bl	8000b38 <HAL_TIM_PeriodElapsedCallback>
 8004196:	e7c1      	b.n	800411c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800419c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800419e:	4620      	mov	r0, r4
 80041a0:	f000 f993 	bl	80044ca <HAL_TIMEx_BreakCallback>
 80041a4:	e7c3      	b.n	800412e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7ff ff4a 	bl	8004046 <HAL_TIM_TriggerCallback>
 80041b2:	e7c5      	b.n	8004140 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041b4:	f06f 0220 	mvn.w	r2, #32
 80041b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 f984 	bl	80044c8 <HAL_TIMEx_CommutCallback>
}
 80041c0:	e7c7      	b.n	8004152 <HAL_TIM_IRQHandler+0x10a>
	...

080041c4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c6:	4a34      	ldr	r2, [pc, #208]	; (8004298 <TIM_Base_SetConfig+0xd4>)
 80041c8:	4290      	cmp	r0, r2
 80041ca:	d04a      	beq.n	8004262 <TIM_Base_SetConfig+0x9e>
 80041cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d0:	4290      	cmp	r0, r2
 80041d2:	d018      	beq.n	8004206 <TIM_Base_SetConfig+0x42>
 80041d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80041d8:	d027      	beq.n	800422a <TIM_Base_SetConfig+0x66>
 80041da:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80041de:	4290      	cmp	r0, r2
 80041e0:	d035      	beq.n	800424e <TIM_Base_SetConfig+0x8a>
 80041e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041e6:	4290      	cmp	r0, r2
 80041e8:	d051      	beq.n	800428e <TIM_Base_SetConfig+0xca>
 80041ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041ee:	4290      	cmp	r0, r2
 80041f0:	d032      	beq.n	8004258 <TIM_Base_SetConfig+0x94>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f6:	694a      	ldr	r2, [r1, #20]
 80041f8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80041fa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041fc:	688b      	ldr	r3, [r1, #8]
 80041fe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004200:	680b      	ldr	r3, [r1, #0]
 8004202:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004204:	e040      	b.n	8004288 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800420a:	684a      	ldr	r2, [r1, #4]
 800420c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800420e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004212:	68ca      	ldr	r2, [r1, #12]
 8004214:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421a:	694a      	ldr	r2, [r1, #20]
 800421c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800421e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004220:	688b      	ldr	r3, [r1, #8]
 8004222:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004224:	680b      	ldr	r3, [r1, #0]
 8004226:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004228:	e02c      	b.n	8004284 <TIM_Base_SetConfig+0xc0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800422e:	684a      	ldr	r2, [r1, #4]
 8004230:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004236:	68ca      	ldr	r2, [r1, #12]
 8004238:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800423a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800423e:	694a      	ldr	r2, [r1, #20]
 8004240:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004242:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004244:	688b      	ldr	r3, [r1, #8]
 8004246:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004248:	680b      	ldr	r3, [r1, #0]
 800424a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800424c:	e01c      	b.n	8004288 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004252:	684a      	ldr	r2, [r1, #4]
 8004254:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004256:	e7ec      	b.n	8004232 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800425c:	684a      	ldr	r2, [r1, #4]
 800425e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004260:	e7e7      	b.n	8004232 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004266:	684a      	ldr	r2, [r1, #4]
 8004268:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426e:	68ca      	ldr	r2, [r1, #12]
 8004270:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004276:	694a      	ldr	r2, [r1, #20]
 8004278:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800427a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800427c:	688b      	ldr	r3, [r1, #8]
 800427e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004280:	680b      	ldr	r3, [r1, #0]
 8004282:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	690b      	ldr	r3, [r1, #16]
 8004286:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004288:	2301      	movs	r3, #1
 800428a:	6143      	str	r3, [r0, #20]
}
 800428c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004292:	684a      	ldr	r2, [r1, #4]
 8004294:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004296:	e7cc      	b.n	8004232 <TIM_Base_SetConfig+0x6e>
 8004298:	40012c00 	.word	0x40012c00

0800429c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800429c:	b340      	cbz	r0, 80042f0 <HAL_TIM_Base_Init+0x54>
{
 800429e:	b510      	push	{r4, lr}
 80042a0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80042a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042a6:	b1f3      	cbz	r3, 80042e6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	2302      	movs	r3, #2
 80042aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ae:	4621      	mov	r1, r4
 80042b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80042b4:	f7ff ff86 	bl	80041c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80042c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80042c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80042ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80042da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80042de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80042e2:	2000      	movs	r0, #0
}
 80042e4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80042e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80042ea:	f7fc ff31 	bl	8001150 <HAL_TIM_Base_MspInit>
 80042ee:	e7db      	b.n	80042a8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80042f0:	2001      	movs	r0, #1
}
 80042f2:	4770      	bx	lr

080042f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042f4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042f6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042fc:	430a      	orrs	r2, r1
 80042fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004302:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004304:	6082      	str	r2, [r0, #8]
}
 8004306:	bc10      	pop	{r4}
 8004308:	4770      	bx	lr

0800430a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800430a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800430e:	2b01      	cmp	r3, #1
 8004310:	f000 809c 	beq.w	800444c <HAL_TIM_ConfigClockSource+0x142>
{
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004318:	2301      	movs	r3, #1
 800431a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800431e:	2302      	movs	r3, #2
 8004320:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004324:	6802      	ldr	r2, [r0, #0]
 8004326:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800432c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004330:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004332:	680b      	ldr	r3, [r1, #0]
 8004334:	2b60      	cmp	r3, #96	; 0x60
 8004336:	d054      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0xd8>
 8004338:	d836      	bhi.n	80043a8 <HAL_TIM_ConfigClockSource+0x9e>
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d06c      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0x10e>
 800433e:	d91b      	bls.n	8004378 <HAL_TIM_ConfigClockSource+0x6e>
 8004340:	2b50      	cmp	r3, #80	; 0x50
 8004342:	d12a      	bne.n	800439a <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004344:	6803      	ldr	r3, [r0, #0]
 8004346:	6848      	ldr	r0, [r1, #4]
 8004348:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800434a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434c:	6a1d      	ldr	r5, [r3, #32]
 800434e:	f025 0501 	bic.w	r5, r5, #1
 8004352:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004354:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004356:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800435a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800435e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004362:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004364:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004366:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004368:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800436a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004370:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004374:	6093      	str	r3, [r2, #8]
}
 8004376:	e010      	b.n	800439a <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8004378:	2b20      	cmp	r3, #32
 800437a:	d002      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x78>
 800437c:	d90a      	bls.n	8004394 <HAL_TIM_ConfigClockSource+0x8a>
 800437e:	2b30      	cmp	r3, #48	; 0x30
 8004380:	d10b      	bne.n	800439a <HAL_TIM_ConfigClockSource+0x90>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004382:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004384:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004386:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800438a:	4313      	orrs	r3, r2
 800438c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004390:	608b      	str	r3, [r1, #8]
}
 8004392:	e002      	b.n	800439a <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8004394:	f033 0210 	bics.w	r2, r3, #16
 8004398:	d0f3      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x78>
  htim->State = HAL_TIM_STATE_READY;
 800439a:	2301      	movs	r3, #1
 800439c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80043a0:	2000      	movs	r0, #0
 80043a2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80043a8:	2b70      	cmp	r3, #112	; 0x70
 80043aa:	d00e      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0xc0>
 80043ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b0:	d1f3      	bne.n	800439a <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 80043b2:	68cb      	ldr	r3, [r1, #12]
 80043b4:	684a      	ldr	r2, [r1, #4]
 80043b6:	6889      	ldr	r1, [r1, #8]
 80043b8:	6800      	ldr	r0, [r0, #0]
 80043ba:	f7ff ff9b 	bl	80042f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	6893      	ldr	r3, [r2, #8]
 80043c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043c6:	6093      	str	r3, [r2, #8]
      break;
 80043c8:	e7e7      	b.n	800439a <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 80043ca:	68cb      	ldr	r3, [r1, #12]
 80043cc:	684a      	ldr	r2, [r1, #4]
 80043ce:	6889      	ldr	r1, [r1, #8]
 80043d0:	6800      	ldr	r0, [r0, #0]
 80043d2:	f7ff ff8f 	bl	80042f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043d6:	6822      	ldr	r2, [r4, #0]
 80043d8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80043de:	6093      	str	r3, [r2, #8]
      break;
 80043e0:	e7db      	b.n	800439a <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e2:	6803      	ldr	r3, [r0, #0]
 80043e4:	684d      	ldr	r5, [r1, #4]
 80043e6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e8:	6a18      	ldr	r0, [r3, #32]
 80043ea:	f020 0010 	bic.w	r0, r0, #16
 80043ee:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80043f2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043f4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004400:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004404:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004406:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004408:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800440a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800440c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004410:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004414:	6093      	str	r3, [r2, #8]
}
 8004416:	e7c0      	b.n	800439a <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004418:	6803      	ldr	r3, [r0, #0]
 800441a:	6848      	ldr	r0, [r1, #4]
 800441c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800441e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004420:	6a1d      	ldr	r5, [r3, #32]
 8004422:	f025 0501 	bic.w	r5, r5, #1
 8004426:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004428:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800442a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800442e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004432:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004436:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800443c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800443e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004444:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004448:	6093      	str	r3, [r2, #8]
}
 800444a:	e7a6      	b.n	800439a <HAL_TIM_ConfigClockSource+0x90>
  __HAL_LOCK(htim);
 800444c:	2002      	movs	r0, #2
}
 800444e:	4770      	bx	lr

08004450 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004450:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d033      	beq.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8004458:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800445a:	2301      	movs	r3, #1
 800445c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	2302      	movs	r3, #2
 8004462:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004466:	6804      	ldr	r4, [r0, #0]
 8004468:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800446c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004470:	680d      	ldr	r5, [r1, #0]
 8004472:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004474:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004476:	6803      	ldr	r3, [r0, #0]
 8004478:	4c12      	ldr	r4, [pc, #72]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800447a:	42a3      	cmp	r3, r4
 800447c:	d012      	beq.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800447e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004482:	42a3      	cmp	r3, r4
 8004484:	d00e      	beq.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d00b      	beq.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800448c:	f5a4 3498 	sub.w	r4, r4, #77824	; 0x13000
 8004490:	42a3      	cmp	r3, r4
 8004492:	d007      	beq.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004494:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004498:	42a3      	cmp	r3, r4
 800449a:	d003      	beq.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800449c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044a0:	42a3      	cmp	r3, r4
 80044a2:	d104      	bne.n	80044ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a8:	6849      	ldr	r1, [r1, #4]
 80044aa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b4:	2300      	movs	r3, #0
 80044b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80044ba:	4618      	mov	r0, r3
}
 80044bc:	bc30      	pop	{r4, r5}
 80044be:	4770      	bx	lr
  __HAL_LOCK(htim);
 80044c0:	2002      	movs	r0, #2
}
 80044c2:	4770      	bx	lr
 80044c4:	40012c00 	.word	0x40012c00

080044c8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c8:	4770      	bx	lr

080044ca <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ca:	4770      	bx	lr

080044cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044cc:	b510      	push	{r4, lr}
 80044ce:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d0:	6802      	ldr	r2, [r0, #0]
 80044d2:	6913      	ldr	r3, [r2, #16]
 80044d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044d8:	68c1      	ldr	r1, [r0, #12]
 80044da:	430b      	orrs	r3, r1
 80044dc:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 80044de:	6801      	ldr	r1, [r0, #0]
 80044e0:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044e2:	6883      	ldr	r3, [r0, #8]
 80044e4:	6900      	ldr	r0, [r0, #16]
 80044e6:	4303      	orrs	r3, r0
 80044e8:	6960      	ldr	r0, [r4, #20]
 80044ea:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80044ec:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80044f0:	f022 020c 	bic.w	r2, r2, #12
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044f8:	6822      	ldr	r2, [r4, #0]
 80044fa:	6953      	ldr	r3, [r2, #20]
 80044fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004500:	69a1      	ldr	r1, [r4, #24]
 8004502:	430b      	orrs	r3, r1
 8004504:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	4b10      	ldr	r3, [pc, #64]	; (800454c <UART_SetConfig+0x80>)
 800450a:	429a      	cmp	r2, r3
 800450c:	d01a      	beq.n	8004544 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800450e:	f7ff fafd 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004512:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004516:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800451a:	6863      	ldr	r3, [r4, #4]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004522:	6824      	ldr	r4, [r4, #0]
 8004524:	480a      	ldr	r0, [pc, #40]	; (8004550 <UART_SetConfig+0x84>)
 8004526:	fba0 2103 	umull	r2, r1, r0, r3
 800452a:	0949      	lsrs	r1, r1, #5
 800452c:	2264      	movs	r2, #100	; 0x64
 800452e:	fb02 3311 	mls	r3, r2, r1, r3
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	3332      	adds	r3, #50	; 0x32
 8004536:	fba0 2303 	umull	r2, r3, r0, r3
 800453a:	0109      	lsls	r1, r1, #4
 800453c:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8004540:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8004542:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7ff faf2 	bl	8003b2c <HAL_RCC_GetPCLK2Freq>
 8004548:	e7e3      	b.n	8004512 <UART_SetConfig+0x46>
 800454a:	bf00      	nop
 800454c:	40013800 	.word	0x40013800
 8004550:	51eb851f 	.word	0x51eb851f

08004554 <HAL_UART_Init>:
  if (huart == NULL)
 8004554:	b358      	cbz	r0, 80045ae <HAL_UART_Init+0x5a>
{
 8004556:	b510      	push	{r4, lr}
 8004558:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800455a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800455e:	b30b      	cbz	r3, 80045a4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	2324      	movs	r3, #36	; 0x24
 8004562:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	68d3      	ldr	r3, [r2, #12]
 800456a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004570:	4620      	mov	r0, r4
 8004572:	f7ff ffab 	bl	80044cc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004576:	6822      	ldr	r2, [r4, #0]
 8004578:	6913      	ldr	r3, [r2, #16]
 800457a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800457e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004580:	6822      	ldr	r2, [r4, #0]
 8004582:	6953      	ldr	r3, [r2, #20]
 8004584:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004588:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	68d3      	ldr	r3, [r2, #12]
 800458e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004592:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	2000      	movs	r0, #0
 8004596:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004598:	2320      	movs	r3, #32
 800459a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800459e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80045a2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80045a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80045a8:	f7fc fe24 	bl	80011f4 <HAL_UART_MspInit>
 80045ac:	e7d8      	b.n	8004560 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80045ae:	2001      	movs	r0, #1
}
 80045b0:	4770      	bx	lr
	...

080045b4 <ppp_notify_phase_cb>:
    }*/
    return len;
}

static void ppp_notify_phase_cb(ppp_pcb *pcb, u8_t phase, void *ctx)
{
 80045b4:	b510      	push	{r4, lr}
    switch (phase)
 80045b6:	290c      	cmp	r1, #12
 80045b8:	d857      	bhi.n	800466a <ppp_notify_phase_cb+0xb6>
 80045ba:	e8df f001 	tbb	[pc, r1]
 80045be:	5607      	.short	0x5607
 80045c0:	56561d12 	.word	0x56561d12
 80045c4:	28565630 	.word	0x28565630
 80045c8:	4638      	.short	0x4638
 80045ca:	4e          	.byte	0x4e
 80045cb:	00          	.byte	0x00
    {
    /* Session is down (either permanently or briefly) */
    case PPP_PHASE_DEAD:
        DEBUG_INFO("PPP_PHASE_DEAD\r\n");
 80045cc:	f00f fea2 	bl	8014314 <sys_get_tick_ms>
 80045d0:	4601      	mov	r1, r0
 80045d2:	4a2b      	ldr	r2, [pc, #172]	; (8004680 <ppp_notify_phase_cb+0xcc>)
 80045d4:	482b      	ldr	r0, [pc, #172]	; (8004684 <ppp_notify_phase_cb+0xd0>)
 80045d6:	f00f fe6f 	bl	80142b8 <app_debug_rtt_raw>
        m_gsm_manager.ppp_phase = PPP_PHASE_DEAD;
 80045da:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <ppp_notify_phase_cb+0xd4>)
 80045dc:	2200      	movs	r2, #0
 80045de:	711a      	strb	r2, [r3, #4]

    default:
        DEBUG_INFO("Unknown PPP phase %d\r\n", phase);
        break;
    }
}
 80045e0:	bd10      	pop	{r4, pc}
        DEBUG_INFO("PPP_PHASE_HOLDOFF\r\n");
 80045e2:	f00f fe97 	bl	8014314 <sys_get_tick_ms>
 80045e6:	4601      	mov	r1, r0
 80045e8:	4a25      	ldr	r2, [pc, #148]	; (8004680 <ppp_notify_phase_cb+0xcc>)
 80045ea:	4828      	ldr	r0, [pc, #160]	; (800468c <ppp_notify_phase_cb+0xd8>)
 80045ec:	f00f fe64 	bl	80142b8 <app_debug_rtt_raw>
        m_gsm_manager.ppp_phase = PPP_PHASE_HOLDOFF;
 80045f0:	4b25      	ldr	r3, [pc, #148]	; (8004688 <ppp_notify_phase_cb+0xd4>)
 80045f2:	2202      	movs	r2, #2
 80045f4:	711a      	strb	r2, [r3, #4]
        break;
 80045f6:	e7f3      	b.n	80045e0 <ppp_notify_phase_cb+0x2c>
        DEBUG_INFO("PPP_PHASE_INITIALIZE\r\n");
 80045f8:	f00f fe8c 	bl	8014314 <sys_get_tick_ms>
 80045fc:	4601      	mov	r1, r0
 80045fe:	4a20      	ldr	r2, [pc, #128]	; (8004680 <ppp_notify_phase_cb+0xcc>)
 8004600:	4823      	ldr	r0, [pc, #140]	; (8004690 <ppp_notify_phase_cb+0xdc>)
 8004602:	f00f fe59 	bl	80142b8 <app_debug_rtt_raw>
        m_gsm_manager.ppp_phase = PPP_PHASE_INITIALIZE;
 8004606:	4b20      	ldr	r3, [pc, #128]	; (8004688 <ppp_notify_phase_cb+0xd4>)
 8004608:	2203      	movs	r2, #3
 800460a:	711a      	strb	r2, [r3, #4]
        break;
 800460c:	e7e8      	b.n	80045e0 <ppp_notify_phase_cb+0x2c>
        DEBUG_INFO("PPP_PHASE_NETWORK\r\n");
 800460e:	f00f fe81 	bl	8014314 <sys_get_tick_ms>
 8004612:	4601      	mov	r1, r0
 8004614:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <ppp_notify_phase_cb+0xcc>)
 8004616:	481f      	ldr	r0, [pc, #124]	; (8004694 <ppp_notify_phase_cb+0xe0>)
 8004618:	f00f fe4e 	bl	80142b8 <app_debug_rtt_raw>
        break;
 800461c:	e7e0      	b.n	80045e0 <ppp_notify_phase_cb+0x2c>
        DEBUG_INFO("PPP_PHASE_ESTABLISH\r\n");
 800461e:	f00f fe79 	bl	8014314 <sys_get_tick_ms>
 8004622:	4601      	mov	r1, r0
 8004624:	4a16      	ldr	r2, [pc, #88]	; (8004680 <ppp_notify_phase_cb+0xcc>)
 8004626:	481c      	ldr	r0, [pc, #112]	; (8004698 <ppp_notify_phase_cb+0xe4>)
 8004628:	f00f fe46 	bl	80142b8 <app_debug_rtt_raw>
        break;
 800462c:	e7d8      	b.n	80045e0 <ppp_notify_phase_cb+0x2c>
        DEBUG_INFO("PPP_PHASE_RUNNING\r\n");
 800462e:	f00f fe71 	bl	8014314 <sys_get_tick_ms>
 8004632:	4601      	mov	r1, r0
 8004634:	4a12      	ldr	r2, [pc, #72]	; (8004680 <ppp_notify_phase_cb+0xcc>)
 8004636:	4819      	ldr	r0, [pc, #100]	; (800469c <ppp_notify_phase_cb+0xe8>)
 8004638:	f00f fe3e 	bl	80142b8 <app_debug_rtt_raw>
        m_gsm_manager.ppp_phase = PPP_PHASE_RUNNING;
 800463c:	4b12      	ldr	r3, [pc, #72]	; (8004688 <ppp_notify_phase_cb+0xd4>)
 800463e:	220a      	movs	r2, #10
 8004640:	711a      	strb	r2, [r3, #4]
        m_ppp_connected = true;
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <ppp_notify_phase_cb+0xec>)
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
        break;
 8004648:	e7ca      	b.n	80045e0 <ppp_notify_phase_cb+0x2c>
        DEBUG_INFO("PPP_PHASE_TERMINATE\r\n");
 800464a:	f00f fe63 	bl	8014314 <sys_get_tick_ms>
 800464e:	4601      	mov	r1, r0
 8004650:	4a0b      	ldr	r2, [pc, #44]	; (8004680 <ppp_notify_phase_cb+0xcc>)
 8004652:	4814      	ldr	r0, [pc, #80]	; (80046a4 <ppp_notify_phase_cb+0xf0>)
 8004654:	f00f fe30 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004658:	e7c2      	b.n	80045e0 <ppp_notify_phase_cb+0x2c>
        DEBUG_INFO("PPP_PHASE_DISCONNECT\r\n");
 800465a:	f00f fe5b 	bl	8014314 <sys_get_tick_ms>
 800465e:	4601      	mov	r1, r0
 8004660:	4a07      	ldr	r2, [pc, #28]	; (8004680 <ppp_notify_phase_cb+0xcc>)
 8004662:	4811      	ldr	r0, [pc, #68]	; (80046a8 <ppp_notify_phase_cb+0xf4>)
 8004664:	f00f fe28 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004668:	e7ba      	b.n	80045e0 <ppp_notify_phase_cb+0x2c>
 800466a:	460c      	mov	r4, r1
        DEBUG_INFO("Unknown PPP phase %d\r\n", phase);
 800466c:	f00f fe52 	bl	8014314 <sys_get_tick_ms>
 8004670:	4601      	mov	r1, r0
 8004672:	4623      	mov	r3, r4
 8004674:	4a02      	ldr	r2, [pc, #8]	; (8004680 <ppp_notify_phase_cb+0xcc>)
 8004676:	480d      	ldr	r0, [pc, #52]	; (80046ac <ppp_notify_phase_cb+0xf8>)
 8004678:	f00f fe1e 	bl	80142b8 <app_debug_rtt_raw>
}
 800467c:	e7b0      	b.n	80045e0 <ppp_notify_phase_cb+0x2c>
 800467e:	bf00      	nop
 8004680:	08015e88 	.word	0x08015e88
 8004684:	08015210 	.word	0x08015210
 8004688:	200001e4 	.word	0x200001e4
 800468c:	0801523c 	.word	0x0801523c
 8004690:	0801526c 	.word	0x0801526c
 8004694:	0801529c 	.word	0x0801529c
 8004698:	080152cc 	.word	0x080152cc
 800469c:	080152fc 	.word	0x080152fc
 80046a0:	200001f0 	.word	0x200001f0
 80046a4:	0801532c 	.word	0x0801532c
 80046a8:	0801535c 	.word	0x0801535c
 80046ac:	0801538c 	.word	0x0801538c

080046b0 <ppp_output_callback>:
{
 80046b0:	b510      	push	{r4, lr}
 80046b2:	4614      	mov	r4, r2
	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1, data, (uint16_t)len);
 80046b4:	b292      	uxth	r2, r2
 80046b6:	2003      	movs	r0, #3
 80046b8:	f7fe f90c 	bl	80028d4 <User_Uart_AsyncTransmit>
}
 80046bc:	4620      	mov	r0, r4
 80046be:	bd10      	pop	{r4, pc}

080046c0 <gsm_data_layer_initialize>:
}
 80046c0:	4770      	bx	lr
	...

080046c4 <gsm_change_state>:
{
 80046c4:	b510      	push	{r4, lr}
 80046c6:	b082      	sub	sp, #8
    if (new_state == GSM_STATE_OK) // Command state -> Data state in PPP mode
 80046c8:	b988      	cbnz	r0, 80046ee <gsm_change_state+0x2a>
        m_gsm_manager.gsm_ready = 2;
 80046ca:	4b33      	ldr	r3, [pc, #204]	; (8004798 <gsm_change_state+0xd4>)
 80046cc:	2202      	movs	r2, #2
 80046ce:	709a      	strb	r2, [r3, #2]
    m_gsm_manager.state = new_state;
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
    m_gsm_manager.step = 0;
 80046d4:	705a      	strb	r2, [r3, #1]
    DEBUG_INFO("Change GSM state to: ");
 80046d6:	f00f fe1d 	bl	8014314 <sys_get_tick_ms>
 80046da:	4601      	mov	r1, r0
 80046dc:	4a2f      	ldr	r2, [pc, #188]	; (800479c <gsm_change_state+0xd8>)
 80046de:	4830      	ldr	r0, [pc, #192]	; (80047a0 <gsm_change_state+0xdc>)
 80046e0:	f00f fdea 	bl	80142b8 <app_debug_rtt_raw>
        DEBUG_RAW("OK\r\n");
 80046e4:	482f      	ldr	r0, [pc, #188]	; (80047a4 <gsm_change_state+0xe0>)
 80046e6:	f00f fde7 	bl	80142b8 <app_debug_rtt_raw>
}
 80046ea:	b002      	add	sp, #8
 80046ec:	bd10      	pop	{r4, pc}
 80046ee:	4604      	mov	r4, r0
    m_gsm_manager.state = new_state;
 80046f0:	4b29      	ldr	r3, [pc, #164]	; (8004798 <gsm_change_state+0xd4>)
 80046f2:	7018      	strb	r0, [r3, #0]
    m_gsm_manager.step = 0;
 80046f4:	2200      	movs	r2, #0
 80046f6:	705a      	strb	r2, [r3, #1]
    DEBUG_INFO("Change GSM state to: ");
 80046f8:	f00f fe0c 	bl	8014314 <sys_get_tick_ms>
 80046fc:	4601      	mov	r1, r0
 80046fe:	4a27      	ldr	r2, [pc, #156]	; (800479c <gsm_change_state+0xd8>)
 8004700:	4827      	ldr	r0, [pc, #156]	; (80047a0 <gsm_change_state+0xdc>)
 8004702:	f00f fdd9 	bl	80142b8 <app_debug_rtt_raw>
    switch ((uint8_t)new_state)
 8004706:	2c05      	cmp	r4, #5
 8004708:	d8ef      	bhi.n	80046ea <gsm_change_state+0x26>
 800470a:	a301      	add	r3, pc, #4	; (adr r3, 8004710 <gsm_change_state+0x4c>)
 800470c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8004710:	080046e5 	.word	0x080046e5
 8004714:	08004729 	.word	0x08004729
 8004718:	080046eb 	.word	0x080046eb
 800471c:	080046eb 	.word	0x080046eb
 8004720:	0800475d 	.word	0x0800475d
 8004724:	08004769 	.word	0x08004769
        DEBUG_RAW("RESET\r\n");
 8004728:	481f      	ldr	r0, [pc, #124]	; (80047a8 <gsm_change_state+0xe4>)
 800472a:	f00f fdc5 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_layer_reset_rx_buffer();
 800472e:	f001 f887 	bl	8005840 <gsm_hw_layer_reset_rx_buffer>
        m_gsm_manager.mode = GSM_INTERNET_MODE_AT_STACK;
 8004732:	2400      	movs	r4, #0
 8004734:	4b18      	ldr	r3, [pc, #96]	; (8004798 <gsm_change_state+0xd4>)
 8004736:	70dc      	strb	r4, [r3, #3]
        GSM_PWR_EN(0);    // Set GSM power en level to 0 = power off device
 8004738:	4622      	mov	r2, r4
 800473a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800473e:	481b      	ldr	r0, [pc, #108]	; (80047ac <gsm_change_state+0xe8>)
 8004740:	f7fe fed0 	bl	80034e4 <HAL_GPIO_WritePin>
        GSM_PWR_RESET(1); // Set GSM Reset pin to high
 8004744:	2201      	movs	r2, #1
 8004746:	2108      	movs	r1, #8
 8004748:	4819      	ldr	r0, [pc, #100]	; (80047b0 <gsm_change_state+0xec>)
 800474a:	f7fe fecb 	bl	80034e4 <HAL_GPIO_WritePin>
        GSM_PWR_KEY(0);   // Reset GSM power key pin
 800474e:	4622      	mov	r2, r4
 8004750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004754:	4817      	ldr	r0, [pc, #92]	; (80047b4 <gsm_change_state+0xf0>)
 8004756:	f7fe fec5 	bl	80034e4 <HAL_GPIO_WritePin>
 800475a:	e7c6      	b.n	80046ea <gsm_change_state+0x26>
        DEBUG_RAW("POWERON\r\n");
 800475c:	4816      	ldr	r0, [pc, #88]	; (80047b8 <gsm_change_state+0xf4>)
 800475e:	f00f fdab 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_layer_reset_rx_buffer(); // Reset USART RX buffer
 8004762:	f001 f86d 	bl	8005840 <gsm_hw_layer_reset_rx_buffer>
        break;
 8004766:	e7c0      	b.n	80046ea <gsm_change_state+0x26>
        if (m_gsm_manager.step == 0)
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <gsm_change_state+0xd4>)
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1bc      	bne.n	80046ea <gsm_change_state+0x26>
                m_gsm_manager.step = 1;
 8004770:	4b09      	ldr	r3, [pc, #36]	; (8004798 <gsm_change_state+0xd4>)
 8004772:	2201      	movs	r2, #1
 8004774:	705a      	strb	r2, [r3, #1]
                m_ppp_connected = false;
 8004776:	2200      	movs	r2, #0
 8004778:	4910      	ldr	r1, [pc, #64]	; (80047bc <gsm_change_state+0xf8>)
 800477a:	700a      	strb	r2, [r1, #0]
                m_gsm_manager.mode = GSM_INTERNET_MODE_AT_STACK;
 800477c:	70da      	strb	r2, [r3, #3]
                gsm_hw_send_at_cmd("ATV1\r\n", "OK\r\n", "", 1000, 5, open_ppp_stack);
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <gsm_change_state+0xfc>)
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	2305      	movs	r3, #5
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800478a:	4a04      	ldr	r2, [pc, #16]	; (800479c <gsm_change_state+0xd8>)
 800478c:	4905      	ldr	r1, [pc, #20]	; (80047a4 <gsm_change_state+0xe0>)
 800478e:	480d      	ldr	r0, [pc, #52]	; (80047c4 <gsm_change_state+0x100>)
 8004790:	f001 f866 	bl	8005860 <gsm_hw_send_at_cmd>
}
 8004794:	e7a9      	b.n	80046ea <gsm_change_state+0x26>
 8004796:	bf00      	nop
 8004798:	200001e4 	.word	0x200001e4
 800479c:	08015e88 	.word	0x08015e88
 80047a0:	080153bc 	.word	0x080153bc
 80047a4:	080153ec 	.word	0x080153ec
 80047a8:	080153f4 	.word	0x080153f4
 80047ac:	40010800 	.word	0x40010800
 80047b0:	40011000 	.word	0x40011000
 80047b4:	40010c00 	.word	0x40010c00
 80047b8:	080153fc 	.word	0x080153fc
 80047bc:	200001f0 	.word	0x200001f0
 80047c0:	080047c9 	.word	0x080047c9
 80047c4:	08015408 	.word	0x08015408

080047c8 <open_ppp_stack>:
{
 80047c8:	b530      	push	{r4, r5, lr}
 80047ca:	b083      	sub	sp, #12
 80047cc:	4605      	mov	r5, r0
 80047ce:	460c      	mov	r4, r1
    DEBUG_INFO("Open PPP stack\r\n");
 80047d0:	f00f fda0 	bl	8014314 <sys_get_tick_ms>
 80047d4:	4601      	mov	r1, r0
 80047d6:	4a5f      	ldr	r2, [pc, #380]	; (8004954 <open_ppp_stack+0x18c>)
 80047d8:	485f      	ldr	r0, [pc, #380]	; (8004958 <open_ppp_stack+0x190>)
 80047da:	f00f fd6d 	bl	80142b8 <app_debug_rtt_raw>
    switch (m_gsm_manager.step)
 80047de:	4b5f      	ldr	r3, [pc, #380]	; (800495c <open_ppp_stack+0x194>)
 80047e0:	785b      	ldrb	r3, [r3, #1]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d810      	bhi.n	800480a <open_ppp_stack+0x42>
 80047e8:	e8df f003 	tbb	[pc, r3]
 80047ec:	4b201102 	.word	0x4b201102
            gsm_hw_send_at_cmd("AT+CSQ\r\n", "OK\r\n", "", 1000, 2, open_ppp_stack);
 80047f0:	4b5b      	ldr	r3, [pc, #364]	; (8004960 <open_ppp_stack+0x198>)
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	2402      	movs	r4, #2
 80047f6:	9400      	str	r4, [sp, #0]
 80047f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047fc:	4a55      	ldr	r2, [pc, #340]	; (8004954 <open_ppp_stack+0x18c>)
 80047fe:	4959      	ldr	r1, [pc, #356]	; (8004964 <open_ppp_stack+0x19c>)
 8004800:	4859      	ldr	r0, [pc, #356]	; (8004968 <open_ppp_stack+0x1a0>)
 8004802:	f001 f82d 	bl	8005860 <gsm_hw_send_at_cmd>
            m_gsm_manager.step = 2;
 8004806:	4b55      	ldr	r3, [pc, #340]	; (800495c <open_ppp_stack+0x194>)
 8004808:	705c      	strb	r4, [r3, #1]
}
 800480a:	b003      	add	sp, #12
 800480c:	bd30      	pop	{r4, r5, pc}
            gsm_hw_send_at_cmd("AT+CPIN?\r\n", "OK\r\n", "", 1000, 5, open_ppp_stack);
 800480e:	4b54      	ldr	r3, [pc, #336]	; (8004960 <open_ppp_stack+0x198>)
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	2305      	movs	r3, #5
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800481a:	4a4e      	ldr	r2, [pc, #312]	; (8004954 <open_ppp_stack+0x18c>)
 800481c:	4951      	ldr	r1, [pc, #324]	; (8004964 <open_ppp_stack+0x19c>)
 800481e:	4853      	ldr	r0, [pc, #332]	; (800496c <open_ppp_stack+0x1a4>)
 8004820:	f001 f81e 	bl	8005860 <gsm_hw_send_at_cmd>
            m_gsm_manager.step = 3;
 8004824:	4b4d      	ldr	r3, [pc, #308]	; (800495c <open_ppp_stack+0x194>)
 8004826:	2203      	movs	r2, #3
 8004828:	705a      	strb	r2, [r3, #1]
        break;
 800482a:	e7ee      	b.n	800480a <open_ppp_stack+0x42>
            if (event == GSM_EVENT_OK)
 800482c:	b9f5      	cbnz	r5, 800486c <open_ppp_stack+0xa4>
                if (strstr(response_buffer, "+CPIN: NOT INSERTED"))
 800482e:	4950      	ldr	r1, [pc, #320]	; (8004970 <open_ppp_stack+0x1a8>)
 8004830:	4620      	mov	r0, r4
 8004832:	f00f fe47 	bl	80144c4 <strstr>
 8004836:	b150      	cbz	r0, 800484e <open_ppp_stack+0x86>
                    DEBUG_INFO("Sim card not inserted\r\n");
 8004838:	f00f fd6c 	bl	8014314 <sys_get_tick_ms>
 800483c:	4601      	mov	r1, r0
 800483e:	4a45      	ldr	r2, [pc, #276]	; (8004954 <open_ppp_stack+0x18c>)
 8004840:	484c      	ldr	r0, [pc, #304]	; (8004974 <open_ppp_stack+0x1ac>)
 8004842:	f00f fd39 	bl	80142b8 <app_debug_rtt_raw>
                    gsm_change_state(GSM_STATE_RESET);
 8004846:	2001      	movs	r0, #1
 8004848:	f7ff ff3c 	bl	80046c4 <gsm_change_state>
                    return;
 800484c:	e7dd      	b.n	800480a <open_ppp_stack+0x42>
                gsm_hw_send_at_cmd("ATD*99***1#\r\n",
 800484e:	4b44      	ldr	r3, [pc, #272]	; (8004960 <open_ppp_stack+0x198>)
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	230a      	movs	r3, #10
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800485a:	4a3e      	ldr	r2, [pc, #248]	; (8004954 <open_ppp_stack+0x18c>)
 800485c:	4946      	ldr	r1, [pc, #280]	; (8004978 <open_ppp_stack+0x1b0>)
 800485e:	4847      	ldr	r0, [pc, #284]	; (800497c <open_ppp_stack+0x1b4>)
 8004860:	f000 fffe 	bl	8005860 <gsm_hw_send_at_cmd>
                m_gsm_manager.step = 4;
 8004864:	4b3d      	ldr	r3, [pc, #244]	; (800495c <open_ppp_stack+0x194>)
 8004866:	2204      	movs	r2, #4
 8004868:	705a      	strb	r2, [r3, #1]
        break;
 800486a:	e7ce      	b.n	800480a <open_ppp_stack+0x42>
                DEBUG_ERROR("Open ppp stack failed\r\n");
 800486c:	f00f fd52 	bl	8014314 <sys_get_tick_ms>
 8004870:	4601      	mov	r1, r0
 8004872:	4a38      	ldr	r2, [pc, #224]	; (8004954 <open_ppp_stack+0x18c>)
 8004874:	4842      	ldr	r0, [pc, #264]	; (8004980 <open_ppp_stack+0x1b8>)
 8004876:	f00f fd1f 	bl	80142b8 <app_debug_rtt_raw>
                gsm_change_state(GSM_STATE_RESET);
 800487a:	2001      	movs	r0, #1
 800487c:	f7ff ff22 	bl	80046c4 <gsm_change_state>
                return;
 8004880:	e7c3      	b.n	800480a <open_ppp_stack+0x42>
            DEBUG_INFO("PPP state: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 8004882:	f00f fd47 	bl	8014314 <sys_get_tick_ms>
 8004886:	4601      	mov	r1, r0
 8004888:	2d00      	cmp	r5, #0
 800488a:	d041      	beq.n	8004910 <open_ppp_stack+0x148>
 800488c:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <open_ppp_stack+0x1bc>)
 800488e:	4a31      	ldr	r2, [pc, #196]	; (8004954 <open_ppp_stack+0x18c>)
 8004890:	483d      	ldr	r0, [pc, #244]	; (8004988 <open_ppp_stack+0x1c0>)
 8004892:	f00f fd11 	bl	80142b8 <app_debug_rtt_raw>
            m_gsm_manager.mode = GSM_INTERNET_MODE_PPP_STACK;
 8004896:	4b31      	ldr	r3, [pc, #196]	; (800495c <open_ppp_stack+0x194>)
 8004898:	2201      	movs	r2, #1
 800489a:	70da      	strb	r2, [r3, #3]
                retry_count++;
 800489c:	4a3b      	ldr	r2, [pc, #236]	; (800498c <open_ppp_stack+0x1c4>)
 800489e:	7813      	ldrb	r3, [r2, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	7013      	strb	r3, [r2, #0]
                if (retry_count > 4)
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d813      	bhi.n	80048d2 <open_ppp_stack+0x10a>
                    m_gsm_manager.step = 3;
 80048aa:	4b2c      	ldr	r3, [pc, #176]	; (800495c <open_ppp_stack+0x194>)
 80048ac:	2203      	movs	r2, #3
 80048ae:	705a      	strb	r2, [r3, #1]
                    ppp_close(m_ppp_control_block, 0);
 80048b0:	2100      	movs	r1, #0
 80048b2:	4b37      	ldr	r3, [pc, #220]	; (8004990 <open_ppp_stack+0x1c8>)
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f00d ff81 	bl	80127bc <ppp_close>
                    gsm_hw_send_at_cmd("ATV1\r\n", "OK\r\n", "", 1000, 5, open_ppp_stack);
 80048ba:	4b29      	ldr	r3, [pc, #164]	; (8004960 <open_ppp_stack+0x198>)
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	2305      	movs	r3, #5
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048c6:	4a23      	ldr	r2, [pc, #140]	; (8004954 <open_ppp_stack+0x18c>)
 80048c8:	4926      	ldr	r1, [pc, #152]	; (8004964 <open_ppp_stack+0x19c>)
 80048ca:	4832      	ldr	r0, [pc, #200]	; (8004994 <open_ppp_stack+0x1cc>)
 80048cc:	f000 ffc8 	bl	8005860 <gsm_hw_send_at_cmd>
 80048d0:	e79b      	b.n	800480a <open_ppp_stack+0x42>
                    retry_count = 0;
 80048d2:	2100      	movs	r1, #0
 80048d4:	4b2d      	ldr	r3, [pc, #180]	; (800498c <open_ppp_stack+0x1c4>)
 80048d6:	7019      	strb	r1, [r3, #0]
                    ppp_close(m_ppp_control_block, 0);
 80048d8:	4b2d      	ldr	r3, [pc, #180]	; (8004990 <open_ppp_stack+0x1c8>)
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	f00d ff6e 	bl	80127bc <ppp_close>
                    gsm_change_state(GSM_STATE_RESET);
 80048e0:	2001      	movs	r0, #1
 80048e2:	f7ff feef 	bl	80046c4 <gsm_change_state>
 80048e6:	e790      	b.n	800480a <open_ppp_stack+0x42>
                    DEBUG_ERROR("Create PPP interface ERR!\r\n");
 80048e8:	f00f fd14 	bl	8014314 <sys_get_tick_ms>
 80048ec:	4601      	mov	r1, r0
 80048ee:	4a19      	ldr	r2, [pc, #100]	; (8004954 <open_ppp_stack+0x18c>)
 80048f0:	4829      	ldr	r0, [pc, #164]	; (8004998 <open_ppp_stack+0x1d0>)
 80048f2:	f00f fce1 	bl	80142b8 <app_debug_rtt_raw>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048f6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80048fa:	4928      	ldr	r1, [pc, #160]	; (800499c <open_ppp_stack+0x1d4>)
 80048fc:	68ca      	ldr	r2, [r1, #12]
 80048fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004902:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <open_ppp_stack+0x1d8>)
 8004904:	4313      	orrs	r3, r2
 8004906:	60cb      	str	r3, [r1, #12]
 8004908:	f3bf 8f4f 	dsb	sy
    __NOP();
 800490c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800490e:	e7fd      	b.n	800490c <open_ppp_stack+0x144>
            DEBUG_INFO("PPP state: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <open_ppp_stack+0x1dc>)
 8004912:	4a10      	ldr	r2, [pc, #64]	; (8004954 <open_ppp_stack+0x18c>)
 8004914:	481c      	ldr	r0, [pc, #112]	; (8004988 <open_ppp_stack+0x1c0>)
 8004916:	f00f fccf 	bl	80142b8 <app_debug_rtt_raw>
            m_gsm_manager.mode = GSM_INTERNET_MODE_PPP_STACK;
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <open_ppp_stack+0x194>)
 800491c:	2201      	movs	r2, #1
 800491e:	70da      	strb	r2, [r3, #3]
                gsm_change_state(GSM_STATE_OK);
 8004920:	2000      	movs	r0, #0
 8004922:	f7ff fecf 	bl	80046c4 <gsm_change_state>
                m_ppp_control_block = pppos_create(&m_ppp_netif, ppp_output_callback, ppp_link_status_cb, NULL);
 8004926:	2300      	movs	r3, #0
 8004928:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <open_ppp_stack+0x1e0>)
 800492a:	4920      	ldr	r1, [pc, #128]	; (80049ac <open_ppp_stack+0x1e4>)
 800492c:	4820      	ldr	r0, [pc, #128]	; (80049b0 <open_ppp_stack+0x1e8>)
 800492e:	f00e fa7d 	bl	8012e2c <pppos_create>
 8004932:	4b17      	ldr	r3, [pc, #92]	; (8004990 <open_ppp_stack+0x1c8>)
 8004934:	6018      	str	r0, [r3, #0]
                if (m_ppp_control_block == NULL)
 8004936:	2800      	cmp	r0, #0
 8004938:	d0d6      	beq.n	80048e8 <open_ppp_stack+0x120>
                ppp_set_default(m_ppp_control_block);
 800493a:	6a00      	ldr	r0, [r0, #32]
 800493c:	f004 fa4c 	bl	8008dd8 <netif_set_default>
                ppp_set_notify_phase_callback(m_ppp_control_block, ppp_notify_phase_cb);
 8004940:	4c13      	ldr	r4, [pc, #76]	; (8004990 <open_ppp_stack+0x1c8>)
 8004942:	491c      	ldr	r1, [pc, #112]	; (80049b4 <open_ppp_stack+0x1ec>)
 8004944:	6820      	ldr	r0, [r4, #0]
 8004946:	f00d fe2d 	bl	80125a4 <ppp_set_notify_phase_callback>
                ppp_connect(m_ppp_control_block, 0);
 800494a:	2100      	movs	r1, #0
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	f00d ff13 	bl	8012778 <ppp_connect>
 8004952:	e75a      	b.n	800480a <open_ppp_stack+0x42>
 8004954:	08015e88 	.word	0x08015e88
 8004958:	08015410 	.word	0x08015410
 800495c:	200001e4 	.word	0x200001e4
 8004960:	080047c9 	.word	0x080047c9
 8004964:	080153ec 	.word	0x080153ec
 8004968:	0801543c 	.word	0x0801543c
 800496c:	08015448 	.word	0x08015448
 8004970:	08015454 	.word	0x08015454
 8004974:	08015468 	.word	0x08015468
 8004978:	0801549c 	.word	0x0801549c
 800497c:	080154a4 	.word	0x080154a4
 8004980:	080154b4 	.word	0x080154b4
 8004984:	08015554 	.word	0x08015554
 8004988:	08015528 	.word	0x08015528
 800498c:	20000438 	.word	0x20000438
 8004990:	200001f4 	.word	0x200001f4
 8004994:	08015408 	.word	0x08015408
 8004998:	080154e8 	.word	0x080154e8
 800499c:	e000ed00 	.word	0xe000ed00
 80049a0:	05fa0004 	.word	0x05fa0004
 80049a4:	08015520 	.word	0x08015520
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080046b1 	.word	0x080046b1
 80049b0:	200001f8 	.word	0x200001f8
 80049b4:	080045b5 	.word	0x080045b5

080049b8 <ppp_link_status_cb>:
{
 80049b8:	b570      	push	{r4, r5, r6, lr}
    switch (err_code)
 80049ba:	290c      	cmp	r1, #12
 80049bc:	f200 80d3 	bhi.w	8004b66 <ppp_link_status_cb+0x1ae>
 80049c0:	e8df f001 	tbb	[pc, r1]
 80049c4:	726a6207 	.word	0x726a6207
 80049c8:	a191827a 	.word	0xa191827a
 80049cc:	c1b9b1a9 	.word	0xc1b9b1a9
 80049d0:	c9          	.byte	0xc9
 80049d1:	00          	.byte	0x00
    struct netif *pppif = ppp_netif(pcb);
 80049d2:	6a06      	ldr	r6, [r0, #32]
        DEBUG_INFO("PPP Connected\r\n");
 80049d4:	f00f fc9e 	bl	8014314 <sys_get_tick_ms>
 80049d8:	4601      	mov	r1, r0
 80049da:	4c73      	ldr	r4, [pc, #460]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 80049dc:	4622      	mov	r2, r4
 80049de:	4873      	ldr	r0, [pc, #460]	; (8004bac <ppp_link_status_cb+0x1f4>)
 80049e0:	f00f fc6a 	bl	80142b8 <app_debug_rtt_raw>
        DEBUG_INFO("\tour_ipaddr    = %s\r\n", ipaddr_ntoa(&pppif->ip_addr));
 80049e4:	f00f fc96 	bl	8014314 <sys_get_tick_ms>
 80049e8:	4605      	mov	r5, r0
 80049ea:	1d30      	adds	r0, r6, #4
 80049ec:	f00a fa82 	bl	800eef4 <ip4addr_ntoa>
 80049f0:	4603      	mov	r3, r0
 80049f2:	4622      	mov	r2, r4
 80049f4:	4629      	mov	r1, r5
 80049f6:	486e      	ldr	r0, [pc, #440]	; (8004bb0 <ppp_link_status_cb+0x1f8>)
 80049f8:	f00f fc5e 	bl	80142b8 <app_debug_rtt_raw>
        DEBUG_INFO("\this_ipaddr    = %s\r\n", ipaddr_ntoa(&pppif->gw));
 80049fc:	f00f fc8a 	bl	8014314 <sys_get_tick_ms>
 8004a00:	4605      	mov	r5, r0
 8004a02:	f106 000c 	add.w	r0, r6, #12
 8004a06:	f00a fa75 	bl	800eef4 <ip4addr_ntoa>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4868      	ldr	r0, [pc, #416]	; (8004bb4 <ppp_link_status_cb+0x1fc>)
 8004a12:	f00f fc51 	bl	80142b8 <app_debug_rtt_raw>
        DEBUG_INFO("\tnetmask       = %s\r\n", ipaddr_ntoa(&pppif->netmask));
 8004a16:	f00f fc7d 	bl	8014314 <sys_get_tick_ms>
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	f106 0008 	add.w	r0, r6, #8
 8004a20:	f00a fa68 	bl	800eef4 <ip4addr_ntoa>
 8004a24:	4603      	mov	r3, r0
 8004a26:	4622      	mov	r2, r4
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4863      	ldr	r0, [pc, #396]	; (8004bb8 <ppp_link_status_cb+0x200>)
 8004a2c:	f00f fc44 	bl	80142b8 <app_debug_rtt_raw>
        ns = dns_getserver(0);
 8004a30:	2000      	movs	r0, #0
 8004a32:	f003 fac3 	bl	8007fbc <dns_getserver>
 8004a36:	4606      	mov	r6, r0
        DEBUG_INFO("\tdns1          = %s\r\n", ipaddr_ntoa(ns));
 8004a38:	f00f fc6c 	bl	8014314 <sys_get_tick_ms>
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	4630      	mov	r0, r6
 8004a40:	f00a fa58 	bl	800eef4 <ip4addr_ntoa>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4622      	mov	r2, r4
 8004a48:	4629      	mov	r1, r5
 8004a4a:	485c      	ldr	r0, [pc, #368]	; (8004bbc <ppp_link_status_cb+0x204>)
 8004a4c:	f00f fc34 	bl	80142b8 <app_debug_rtt_raw>
        ns = dns_getserver(1);
 8004a50:	2001      	movs	r0, #1
 8004a52:	f003 fab3 	bl	8007fbc <dns_getserver>
 8004a56:	4606      	mov	r6, r0
        DEBUG_INFO("\tdns2          = %s\r\n", ipaddr_ntoa(ns));
 8004a58:	f00f fc5c 	bl	8014314 <sys_get_tick_ms>
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f00a fa48 	bl	800eef4 <ip4addr_ntoa>
 8004a64:	4603      	mov	r3, r0
 8004a66:	4622      	mov	r2, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	4855      	ldr	r0, [pc, #340]	; (8004bc0 <ppp_link_status_cb+0x208>)
 8004a6c:	f00f fc24 	bl	80142b8 <app_debug_rtt_raw>
        DEBUG_INFO("PPP is opened OK\r\n");
 8004a70:	f00f fc50 	bl	8014314 <sys_get_tick_ms>
 8004a74:	4601      	mov	r1, r0
 8004a76:	4a4c      	ldr	r2, [pc, #304]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004a78:	4852      	ldr	r0, [pc, #328]	; (8004bc4 <ppp_link_status_cb+0x20c>)
 8004a7a:	f00f fc1d 	bl	80142b8 <app_debug_rtt_raw>
    if (sntp_start == false)
 8004a7e:	4b52      	ldr	r3, [pc, #328]	; (8004bc8 <ppp_link_status_cb+0x210>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d07c      	beq.n	8004b80 <ppp_link_status_cb+0x1c8>
}
 8004a86:	bd70      	pop	{r4, r5, r6, pc}
        DEBUG_INFO("status_cb: Invalid parameter\r\n");
 8004a88:	f00f fc44 	bl	8014314 <sys_get_tick_ms>
 8004a8c:	4601      	mov	r1, r0
 8004a8e:	4a46      	ldr	r2, [pc, #280]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004a90:	484e      	ldr	r0, [pc, #312]	; (8004bcc <ppp_link_status_cb+0x214>)
 8004a92:	f00f fc11 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004a96:	e7f6      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: Unable to open PPP session\r\n");
 8004a98:	f00f fc3c 	bl	8014314 <sys_get_tick_ms>
 8004a9c:	4601      	mov	r1, r0
 8004a9e:	4a42      	ldr	r2, [pc, #264]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004aa0:	484b      	ldr	r0, [pc, #300]	; (8004bd0 <ppp_link_status_cb+0x218>)
 8004aa2:	f00f fc09 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004aa6:	e7ee      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: Invalid I/O device for PPP\r\n");
 8004aa8:	f00f fc34 	bl	8014314 <sys_get_tick_ms>
 8004aac:	4601      	mov	r1, r0
 8004aae:	4a3e      	ldr	r2, [pc, #248]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004ab0:	4848      	ldr	r0, [pc, #288]	; (8004bd4 <ppp_link_status_cb+0x21c>)
 8004ab2:	f00f fc01 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004ab6:	e7e6      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: Unable to allocate resources\r\n");
 8004ab8:	f00f fc2c 	bl	8014314 <sys_get_tick_ms>
 8004abc:	4601      	mov	r1, r0
 8004abe:	4a3a      	ldr	r2, [pc, #232]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004ac0:	4845      	ldr	r0, [pc, #276]	; (8004bd8 <ppp_link_status_cb+0x220>)
 8004ac2:	f00f fbf9 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004ac6:	e7de      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: ppp is closed by user OK! Try to re-open...\r\n");
 8004ac8:	f00f fc24 	bl	8014314 <sys_get_tick_ms>
 8004acc:	4601      	mov	r1, r0
 8004ace:	4a36      	ldr	r2, [pc, #216]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004ad0:	4842      	ldr	r0, [pc, #264]	; (8004bdc <ppp_link_status_cb+0x224>)
 8004ad2:	f00f fbf1 	bl	80142b8 <app_debug_rtt_raw>
        ppp_free(m_ppp_control_block);
 8004ad6:	4b42      	ldr	r3, [pc, #264]	; (8004be0 <ppp_link_status_cb+0x228>)
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	f00d fd6b 	bl	80125b4 <ppp_free>
        gsm_change_state(GSM_STATE_REOPEN_PPP);
 8004ade:	2005      	movs	r0, #5
 8004ae0:	f7ff fdf0 	bl	80046c4 <gsm_change_state>
        break;
 8004ae4:	e7cf      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: Connection lost\r\n");
 8004ae6:	f00f fc15 	bl	8014314 <sys_get_tick_ms>
 8004aea:	4601      	mov	r1, r0
 8004aec:	4a2e      	ldr	r2, [pc, #184]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004aee:	483d      	ldr	r0, [pc, #244]	; (8004be4 <ppp_link_status_cb+0x22c>)
 8004af0:	f00f fbe2 	bl	80142b8 <app_debug_rtt_raw>
        m_ppp_connected = false;
 8004af4:	4b3c      	ldr	r3, [pc, #240]	; (8004be8 <ppp_link_status_cb+0x230>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
        ppp_close(m_ppp_control_block, 1);
 8004afa:	2101      	movs	r1, #1
 8004afc:	4b38      	ldr	r3, [pc, #224]	; (8004be0 <ppp_link_status_cb+0x228>)
 8004afe:	6818      	ldr	r0, [r3, #0]
 8004b00:	f00d fe5c 	bl	80127bc <ppp_close>
        break;
 8004b04:	e7bf      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: Failed authentication challenge\r\n");
 8004b06:	f00f fc05 	bl	8014314 <sys_get_tick_ms>
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004b0e:	4837      	ldr	r0, [pc, #220]	; (8004bec <ppp_link_status_cb+0x234>)
 8004b10:	f00f fbd2 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004b14:	e7b7      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: Failed to meet protocol\n");
 8004b16:	f00f fbfd 	bl	8014314 <sys_get_tick_ms>
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004b1e:	4834      	ldr	r0, [pc, #208]	; (8004bf0 <ppp_link_status_cb+0x238>)
 8004b20:	f00f fbca 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004b24:	e7af      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: Connection timeout\r\n");
 8004b26:	f00f fbf5 	bl	8014314 <sys_get_tick_ms>
 8004b2a:	4601      	mov	r1, r0
 8004b2c:	4a1e      	ldr	r2, [pc, #120]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004b2e:	4831      	ldr	r0, [pc, #196]	; (8004bf4 <ppp_link_status_cb+0x23c>)
 8004b30:	f00f fbc2 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004b34:	e7a7      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: Idle Timeout\r\n");
 8004b36:	f00f fbed 	bl	8014314 <sys_get_tick_ms>
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004b3e:	482e      	ldr	r0, [pc, #184]	; (8004bf8 <ppp_link_status_cb+0x240>)
 8004b40:	f00f fbba 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004b44:	e79f      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: Max connect time reached\r\n");
 8004b46:	f00f fbe5 	bl	8014314 <sys_get_tick_ms>
 8004b4a:	4601      	mov	r1, r0
 8004b4c:	4a16      	ldr	r2, [pc, #88]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004b4e:	482b      	ldr	r0, [pc, #172]	; (8004bfc <ppp_link_status_cb+0x244>)
 8004b50:	f00f fbb2 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004b54:	e797      	b.n	8004a86 <ppp_link_status_cb+0xce>
        DEBUG_INFO("status_cb: Loopback detected\r\n");
 8004b56:	f00f fbdd 	bl	8014314 <sys_get_tick_ms>
 8004b5a:	4601      	mov	r1, r0
 8004b5c:	4a12      	ldr	r2, [pc, #72]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004b5e:	4828      	ldr	r0, [pc, #160]	; (8004c00 <ppp_link_status_cb+0x248>)
 8004b60:	f00f fbaa 	bl	80142b8 <app_debug_rtt_raw>
        break;
 8004b64:	e78f      	b.n	8004a86 <ppp_link_status_cb+0xce>
 8004b66:	460c      	mov	r4, r1
        DEBUG_INFO("status_cb: Unknown error code %d\r\n", err_code);
 8004b68:	f00f fbd4 	bl	8014314 <sys_get_tick_ms>
 8004b6c:	4601      	mov	r1, r0
 8004b6e:	4623      	mov	r3, r4
 8004b70:	4a0d      	ldr	r2, [pc, #52]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004b72:	4824      	ldr	r0, [pc, #144]	; (8004c04 <ppp_link_status_cb+0x24c>)
 8004b74:	f00f fba0 	bl	80142b8 <app_debug_rtt_raw>
    if (err_code == PPPERR_NONE)
 8004b78:	2c00      	cmp	r4, #0
 8004b7a:	f43f af79 	beq.w	8004a70 <ppp_link_status_cb+0xb8>
 8004b7e:	e782      	b.n	8004a86 <ppp_link_status_cb+0xce>
        sntp_start = true;
 8004b80:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <ppp_link_status_cb+0x210>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
        DEBUG_INFO("Initialize stnp\r\n");
 8004b86:	f00f fbc5 	bl	8014314 <sys_get_tick_ms>
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	4a06      	ldr	r2, [pc, #24]	; (8004ba8 <ppp_link_status_cb+0x1f0>)
 8004b8e:	481e      	ldr	r0, [pc, #120]	; (8004c08 <ppp_link_status_cb+0x250>)
 8004b90:	f00f fb92 	bl	80142b8 <app_debug_rtt_raw>
        sntp_setoperatingmode(SNTP_OPMODE_POLL);
 8004b94:	2000      	movs	r0, #0
 8004b96:	f002 fe17 	bl	80077c8 <sntp_setoperatingmode>
        sntp_setservername(0, "pool.ntp.org");
 8004b9a:	491c      	ldr	r1, [pc, #112]	; (8004c0c <ppp_link_status_cb+0x254>)
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	f002 fe39 	bl	8007814 <sntp_setservername>
        sntp_init();
 8004ba2:	f002 fdbf 	bl	8007724 <sntp_init>
 8004ba6:	e76e      	b.n	8004a86 <ppp_link_status_cb+0xce>
 8004ba8:	08015e88 	.word	0x08015e88
 8004bac:	0801555c 	.word	0x0801555c
 8004bb0:	08015588 	.word	0x08015588
 8004bb4:	080155b8 	.word	0x080155b8
 8004bb8:	080155e8 	.word	0x080155e8
 8004bbc:	08015618 	.word	0x08015618
 8004bc0:	08015648 	.word	0x08015648
 8004bc4:	080159b4 	.word	0x080159b4
 8004bc8:	20000439 	.word	0x20000439
 8004bcc:	08015678 	.word	0x08015678
 8004bd0:	080156b0 	.word	0x080156b0
 8004bd4:	080156f4 	.word	0x080156f4
 8004bd8:	08015738 	.word	0x08015738
 8004bdc:	0801577c 	.word	0x0801577c
 8004be0:	200001f4 	.word	0x200001f4
 8004be4:	080157d0 	.word	0x080157d0
 8004be8:	200001f0 	.word	0x200001f0
 8004bec:	08015808 	.word	0x08015808
 8004bf0:	08015850 	.word	0x08015850
 8004bf4:	08015890 	.word	0x08015890
 8004bf8:	080158cc 	.word	0x080158cc
 8004bfc:	08015900 	.word	0x08015900
 8004c00:	08015940 	.word	0x08015940
 8004c04:	08015978 	.word	0x08015978
 8004c08:	080159e0 	.word	0x080159e0
 8004c0c:	08015a0c 	.word	0x08015a0c

08004c10 <gsm_config_module>:
{
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	4604      	mov	r4, r0
 8004c16:	460d      	mov	r5, r1
    switch (m_gsm_manager.step)
 8004c18:	4b9f      	ldr	r3, [pc, #636]	; (8004e98 <gsm_config_module+0x288>)
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	2b17      	cmp	r3, #23
 8004c20:	f200 838a 	bhi.w	8005338 <gsm_config_module+0x728>
 8004c24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004c28:	00300018 	.word	0x00300018
 8004c2c:	0067004e 	.word	0x0067004e
 8004c30:	0095007c 	.word	0x0095007c
 8004c34:	00c700ae 	.word	0x00c700ae
 8004c38:	00fa00e0 	.word	0x00fa00e0
 8004c3c:	01a9016e 	.word	0x01a9016e
 8004c40:	020801f0 	.word	0x020801f0
 8004c44:	023a0221 	.word	0x023a0221
 8004c48:	026c0253 	.word	0x026c0253
 8004c4c:	029e0286 	.word	0x029e0286
 8004c50:	031802c8 	.word	0x031802c8
 8004c54:	03750332 	.word	0x03750332
        if (event != GSM_EVENT_OK)
 8004c58:	b150      	cbz	r0, 8004c70 <gsm_config_module+0x60>
            DEBUG_ERROR("Connect modem ERR!\r\n");
 8004c5a:	f00f fb5b 	bl	8014314 <sys_get_tick_ms>
 8004c5e:	4601      	mov	r1, r0
 8004c60:	4a8e      	ldr	r2, [pc, #568]	; (8004e9c <gsm_config_module+0x28c>)
 8004c62:	488f      	ldr	r0, [pc, #572]	; (8004ea0 <gsm_config_module+0x290>)
 8004c64:	f00f fb28 	bl	80142b8 <app_debug_rtt_raw>
            gsm_change_state(GSM_STATE_RESET);
 8004c68:	2001      	movs	r0, #1
 8004c6a:	f7ff fd2b 	bl	80046c4 <gsm_change_state>
 8004c6e:	e023      	b.n	8004cb8 <gsm_config_module+0xa8>
            gsm_hw_send_at_cmd("ATE0\r\n", "OK\r\n", "", 1000, 10, gsm_config_module);
 8004c70:	4b8c      	ldr	r3, [pc, #560]	; (8004ea4 <gsm_config_module+0x294>)
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	230a      	movs	r3, #10
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c7c:	4a87      	ldr	r2, [pc, #540]	; (8004e9c <gsm_config_module+0x28c>)
 8004c7e:	498a      	ldr	r1, [pc, #552]	; (8004ea8 <gsm_config_module+0x298>)
 8004c80:	488a      	ldr	r0, [pc, #552]	; (8004eac <gsm_config_module+0x29c>)
 8004c82:	f000 fded 	bl	8005860 <gsm_hw_send_at_cmd>
 8004c86:	e017      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Disable AT echo : %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 8004c88:	f00f fb44 	bl	8014314 <sys_get_tick_ms>
 8004c8c:	4601      	mov	r1, r0
 8004c8e:	4d83      	ldr	r5, [pc, #524]	; (8004e9c <gsm_config_module+0x28c>)
 8004c90:	4a87      	ldr	r2, [pc, #540]	; (8004eb0 <gsm_config_module+0x2a0>)
 8004c92:	4b88      	ldr	r3, [pc, #544]	; (8004eb4 <gsm_config_module+0x2a4>)
 8004c94:	2c00      	cmp	r4, #0
 8004c96:	bf08      	it	eq
 8004c98:	4613      	moveq	r3, r2
 8004c9a:	462a      	mov	r2, r5
 8004c9c:	4886      	ldr	r0, [pc, #536]	; (8004eb8 <gsm_config_module+0x2a8>)
 8004c9e:	f00f fb0b 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+CMEE=2\r\n", "OK\r\n", "", 1000, 10, gsm_config_module);
 8004ca2:	4b80      	ldr	r3, [pc, #512]	; (8004ea4 <gsm_config_module+0x294>)
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	230a      	movs	r3, #10
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cae:	462a      	mov	r2, r5
 8004cb0:	497d      	ldr	r1, [pc, #500]	; (8004ea8 <gsm_config_module+0x298>)
 8004cb2:	4882      	ldr	r0, [pc, #520]	; (8004ebc <gsm_config_module+0x2ac>)
 8004cb4:	f000 fdd4 	bl	8005860 <gsm_hw_send_at_cmd>
    m_gsm_manager.step++;
 8004cb8:	4a77      	ldr	r2, [pc, #476]	; (8004e98 <gsm_config_module+0x288>)
 8004cba:	7853      	ldrb	r3, [r2, #1]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	7053      	strb	r3, [r2, #1]
}
 8004cc0:	b004      	add	sp, #16
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
        DEBUG_INFO("Set CMEE report: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 8004cc4:	f00f fb26 	bl	8014314 <sys_get_tick_ms>
 8004cc8:	4601      	mov	r1, r0
 8004cca:	4d74      	ldr	r5, [pc, #464]	; (8004e9c <gsm_config_module+0x28c>)
 8004ccc:	4a78      	ldr	r2, [pc, #480]	; (8004eb0 <gsm_config_module+0x2a0>)
 8004cce:	4b79      	ldr	r3, [pc, #484]	; (8004eb4 <gsm_config_module+0x2a4>)
 8004cd0:	2c00      	cmp	r4, #0
 8004cd2:	bf08      	it	eq
 8004cd4:	4613      	moveq	r3, r2
 8004cd6:	462a      	mov	r2, r5
 8004cd8:	4879      	ldr	r0, [pc, #484]	; (8004ec0 <gsm_config_module+0x2b0>)
 8004cda:	f00f faed 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("ATI\r\n", "OK\r\n", "", 1000, 10, gsm_config_module);
 8004cde:	4b71      	ldr	r3, [pc, #452]	; (8004ea4 <gsm_config_module+0x294>)
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	230a      	movs	r3, #10
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cea:	462a      	mov	r2, r5
 8004cec:	496e      	ldr	r1, [pc, #440]	; (8004ea8 <gsm_config_module+0x298>)
 8004cee:	4875      	ldr	r0, [pc, #468]	; (8004ec4 <gsm_config_module+0x2b4>)
 8004cf0:	f000 fdb6 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8004cf4:	e7e0      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Get module info: %s\r\n", resp_buffer);
 8004cf6:	f00f fb0d 	bl	8014314 <sys_get_tick_ms>
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	4c67      	ldr	r4, [pc, #412]	; (8004e9c <gsm_config_module+0x28c>)
 8004cfe:	462b      	mov	r3, r5
 8004d00:	4622      	mov	r2, r4
 8004d02:	4871      	ldr	r0, [pc, #452]	; (8004ec8 <gsm_config_module+0x2b8>)
 8004d04:	f00f fad8 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT\r\n", "OK\r\n", "", 1000, 10, gsm_config_module);
 8004d08:	4b66      	ldr	r3, [pc, #408]	; (8004ea4 <gsm_config_module+0x294>)
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	230a      	movs	r3, #10
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d14:	4622      	mov	r2, r4
 8004d16:	4964      	ldr	r1, [pc, #400]	; (8004ea8 <gsm_config_module+0x298>)
 8004d18:	486c      	ldr	r0, [pc, #432]	; (8004ecc <gsm_config_module+0x2bc>)
 8004d1a:	f000 fda1 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8004d1e:	e7cb      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Set URC port: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 8004d20:	f00f faf8 	bl	8014314 <sys_get_tick_ms>
 8004d24:	4601      	mov	r1, r0
 8004d26:	4d5d      	ldr	r5, [pc, #372]	; (8004e9c <gsm_config_module+0x28c>)
 8004d28:	4a61      	ldr	r2, [pc, #388]	; (8004eb0 <gsm_config_module+0x2a0>)
 8004d2a:	4b62      	ldr	r3, [pc, #392]	; (8004eb4 <gsm_config_module+0x2a4>)
 8004d2c:	2c00      	cmp	r4, #0
 8004d2e:	bf08      	it	eq
 8004d30:	4613      	moveq	r3, r2
 8004d32:	462a      	mov	r2, r5
 8004d34:	4866      	ldr	r0, [pc, #408]	; (8004ed0 <gsm_config_module+0x2c0>)
 8004d36:	f00f fabf 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+QCFG=\"urc/ri/smsincoming\",\"pulse\",2000\r\n", "OK\r\n", "", 1000, 10, gsm_config_module);
 8004d3a:	4b5a      	ldr	r3, [pc, #360]	; (8004ea4 <gsm_config_module+0x294>)
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	230a      	movs	r3, #10
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d46:	462a      	mov	r2, r5
 8004d48:	4957      	ldr	r1, [pc, #348]	; (8004ea8 <gsm_config_module+0x298>)
 8004d4a:	4862      	ldr	r0, [pc, #392]	; (8004ed4 <gsm_config_module+0x2c4>)
 8004d4c:	f000 fd88 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8004d50:	e7b2      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Set URC ringtype: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 8004d52:	f00f fadf 	bl	8014314 <sys_get_tick_ms>
 8004d56:	4601      	mov	r1, r0
 8004d58:	4d50      	ldr	r5, [pc, #320]	; (8004e9c <gsm_config_module+0x28c>)
 8004d5a:	4a55      	ldr	r2, [pc, #340]	; (8004eb0 <gsm_config_module+0x2a0>)
 8004d5c:	4b55      	ldr	r3, [pc, #340]	; (8004eb4 <gsm_config_module+0x2a4>)
 8004d5e:	2c00      	cmp	r4, #0
 8004d60:	bf08      	it	eq
 8004d62:	4613      	moveq	r3, r2
 8004d64:	462a      	mov	r2, r5
 8004d66:	485c      	ldr	r0, [pc, #368]	; (8004ed8 <gsm_config_module+0x2c8>)
 8004d68:	f00f faa6 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+CNMI=2,1,0,0,0\r\n", "", "OK\r\n", 1000, 10, gsm_config_module);
 8004d6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ea4 <gsm_config_module+0x294>)
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	230a      	movs	r3, #10
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d78:	4a4b      	ldr	r2, [pc, #300]	; (8004ea8 <gsm_config_module+0x298>)
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	4857      	ldr	r0, [pc, #348]	; (8004edc <gsm_config_module+0x2cc>)
 8004d7e:	f000 fd6f 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8004d82:	e799      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Config SMS event report: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 8004d84:	f00f fac6 	bl	8014314 <sys_get_tick_ms>
 8004d88:	4601      	mov	r1, r0
 8004d8a:	4d44      	ldr	r5, [pc, #272]	; (8004e9c <gsm_config_module+0x28c>)
 8004d8c:	4a48      	ldr	r2, [pc, #288]	; (8004eb0 <gsm_config_module+0x2a0>)
 8004d8e:	4b49      	ldr	r3, [pc, #292]	; (8004eb4 <gsm_config_module+0x2a4>)
 8004d90:	2c00      	cmp	r4, #0
 8004d92:	bf08      	it	eq
 8004d94:	4613      	moveq	r3, r2
 8004d96:	462a      	mov	r2, r5
 8004d98:	4851      	ldr	r0, [pc, #324]	; (8004ee0 <gsm_config_module+0x2d0>)
 8004d9a:	f00f fa8d 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+CMGF=1\r\n", "", "OK\r\n", 1000, 10, gsm_config_module);
 8004d9e:	4b41      	ldr	r3, [pc, #260]	; (8004ea4 <gsm_config_module+0x294>)
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	230a      	movs	r3, #10
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004daa:	4a3f      	ldr	r2, [pc, #252]	; (8004ea8 <gsm_config_module+0x298>)
 8004dac:	4629      	mov	r1, r5
 8004dae:	484d      	ldr	r0, [pc, #308]	; (8004ee4 <gsm_config_module+0x2d4>)
 8004db0:	f000 fd56 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8004db4:	e780      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Set SMS text mode: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 8004db6:	f00f faad 	bl	8014314 <sys_get_tick_ms>
 8004dba:	4601      	mov	r1, r0
 8004dbc:	4d37      	ldr	r5, [pc, #220]	; (8004e9c <gsm_config_module+0x28c>)
 8004dbe:	4a3c      	ldr	r2, [pc, #240]	; (8004eb0 <gsm_config_module+0x2a0>)
 8004dc0:	4b3c      	ldr	r3, [pc, #240]	; (8004eb4 <gsm_config_module+0x2a4>)
 8004dc2:	2c00      	cmp	r4, #0
 8004dc4:	bf08      	it	eq
 8004dc6:	4613      	moveq	r3, r2
 8004dc8:	462a      	mov	r2, r5
 8004dca:	4847      	ldr	r0, [pc, #284]	; (8004ee8 <gsm_config_module+0x2d8>)
 8004dcc:	f00f fa74 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT\r\n", "OK\r\n", "", 1000, 5, gsm_config_module);
 8004dd0:	4b34      	ldr	r3, [pc, #208]	; (8004ea4 <gsm_config_module+0x294>)
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	2305      	movs	r3, #5
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ddc:	462a      	mov	r2, r5
 8004dde:	4932      	ldr	r1, [pc, #200]	; (8004ea8 <gsm_config_module+0x298>)
 8004de0:	483a      	ldr	r0, [pc, #232]	; (8004ecc <gsm_config_module+0x2bc>)
 8004de2:	f000 fd3d 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8004de6:	e767      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("AT CNUM: %s, %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]",
 8004de8:	f00f fa94 	bl	8014314 <sys_get_tick_ms>
 8004dec:	4601      	mov	r1, r0
 8004dee:	4e2b      	ldr	r6, [pc, #172]	; (8004e9c <gsm_config_module+0x28c>)
 8004df0:	9500      	str	r5, [sp, #0]
 8004df2:	4a2f      	ldr	r2, [pc, #188]	; (8004eb0 <gsm_config_module+0x2a0>)
 8004df4:	4b2f      	ldr	r3, [pc, #188]	; (8004eb4 <gsm_config_module+0x2a4>)
 8004df6:	2c00      	cmp	r4, #0
 8004df8:	bf08      	it	eq
 8004dfa:	4613      	moveq	r3, r2
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	483b      	ldr	r0, [pc, #236]	; (8004eec <gsm_config_module+0x2dc>)
 8004e00:	f00f fa5a 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+CGSN\r\n", "", "OK\r\n", 1000, 5, gsm_config_module);
 8004e04:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <gsm_config_module+0x294>)
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	2305      	movs	r3, #5
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <gsm_config_module+0x298>)
 8004e12:	4631      	mov	r1, r6
 8004e14:	4836      	ldr	r0, [pc, #216]	; (8004ef0 <gsm_config_module+0x2e0>)
 8004e16:	f000 fd23 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8004e1a:	e74d      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("CSGN resp: %s, Data %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]", (char *)resp_buffer);
 8004e1c:	f00f fa7a 	bl	8014314 <sys_get_tick_ms>
 8004e20:	4601      	mov	r1, r0
 8004e22:	9500      	str	r5, [sp, #0]
 8004e24:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <gsm_config_module+0x2a0>)
 8004e26:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <gsm_config_module+0x2a4>)
 8004e28:	2c00      	cmp	r4, #0
 8004e2a:	bf08      	it	eq
 8004e2c:	4613      	moveq	r3, r2
 8004e2e:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <gsm_config_module+0x28c>)
 8004e30:	4830      	ldr	r0, [pc, #192]	; (8004ef4 <gsm_config_module+0x2e4>)
 8004e32:	f00f fa41 	bl	80142b8 <app_debug_rtt_raw>
        uint8_t *imei_buffer = (uint8_t *)gsm_get_module_imei();
 8004e36:	f000 fddf 	bl	80059f8 <gsm_get_module_imei>
 8004e3a:	4604      	mov	r4, r0
        if (strlen((char *)imei_buffer) < 14)
 8004e3c:	f7fb f9fe 	bl	800023c <strlen>
 8004e40:	280d      	cmp	r0, #13
 8004e42:	d812      	bhi.n	8004e6a <gsm_config_module+0x25a>
            gsm_utilities_get_imei(resp_buffer, (uint8_t *)imei_buffer, 16);
 8004e44:	2210      	movs	r2, #16
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 fddd 	bl	8005a08 <gsm_utilities_get_imei>
            DEBUG_INFO("Get GSM IMEI: %s\r\n", imei_buffer);
 8004e4e:	f00f fa61 	bl	8014314 <sys_get_tick_ms>
 8004e52:	4601      	mov	r1, r0
 8004e54:	4623      	mov	r3, r4
 8004e56:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <gsm_config_module+0x28c>)
 8004e58:	4827      	ldr	r0, [pc, #156]	; (8004ef8 <gsm_config_module+0x2e8>)
 8004e5a:	f00f fa2d 	bl	80142b8 <app_debug_rtt_raw>
            imei_buffer = (uint8_t *)gsm_get_module_imei();
 8004e5e:	f000 fdcb 	bl	80059f8 <gsm_get_module_imei>
            if (strlen((char *)imei_buffer) < 15)
 8004e62:	f7fb f9eb 	bl	800023c <strlen>
 8004e66:	280e      	cmp	r0, #14
 8004e68:	d90b      	bls.n	8004e82 <gsm_config_module+0x272>
        gsm_hw_send_at_cmd("AT+CIMI\r\n", "OK\r\n", "", 1000, 5, gsm_config_module);
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <gsm_config_module+0x294>)
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	2305      	movs	r3, #5
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e76:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <gsm_config_module+0x28c>)
 8004e78:	490b      	ldr	r1, [pc, #44]	; (8004ea8 <gsm_config_module+0x298>)
 8004e7a:	4820      	ldr	r0, [pc, #128]	; (8004efc <gsm_config_module+0x2ec>)
 8004e7c:	f000 fcf0 	bl	8005860 <gsm_hw_send_at_cmd>
    break;
 8004e80:	e71a      	b.n	8004cb8 <gsm_config_module+0xa8>
                DEBUG_INFO("IMEI's invalid!\r\n");
 8004e82:	f00f fa47 	bl	8014314 <sys_get_tick_ms>
 8004e86:	4601      	mov	r1, r0
 8004e88:	4a04      	ldr	r2, [pc, #16]	; (8004e9c <gsm_config_module+0x28c>)
 8004e8a:	481d      	ldr	r0, [pc, #116]	; (8004f00 <gsm_config_module+0x2f0>)
 8004e8c:	f00f fa14 	bl	80142b8 <app_debug_rtt_raw>
                gsm_change_state(GSM_STATE_RESET); // We cant get GSM imei, maybe gsm module error =>> Restart module
 8004e90:	2001      	movs	r0, #1
 8004e92:	f7ff fc17 	bl	80046c4 <gsm_change_state>
                return;
 8004e96:	e713      	b.n	8004cc0 <gsm_config_module+0xb0>
 8004e98:	200001e4 	.word	0x200001e4
 8004e9c:	08015e88 	.word	0x08015e88
 8004ea0:	08015a1c 	.word	0x08015a1c
 8004ea4:	08004c11 	.word	0x08004c11
 8004ea8:	080153ec 	.word	0x080153ec
 8004eac:	08015a4c 	.word	0x08015a4c
 8004eb0:	08015520 	.word	0x08015520
 8004eb4:	08015554 	.word	0x08015554
 8004eb8:	08015a54 	.word	0x08015a54
 8004ebc:	08015a84 	.word	0x08015a84
 8004ec0:	08015a90 	.word	0x08015a90
 8004ec4:	08015ac0 	.word	0x08015ac0
 8004ec8:	08015ac8 	.word	0x08015ac8
 8004ecc:	08015af8 	.word	0x08015af8
 8004ed0:	08015b00 	.word	0x08015b00
 8004ed4:	08015b2c 	.word	0x08015b2c
 8004ed8:	08015b58 	.word	0x08015b58
 8004edc:	08015b88 	.word	0x08015b88
 8004ee0:	08015b9c 	.word	0x08015b9c
 8004ee4:	08015bd4 	.word	0x08015bd4
 8004ee8:	08015be0 	.word	0x08015be0
 8004eec:	08015c14 	.word	0x08015c14
 8004ef0:	08015c40 	.word	0x08015c40
 8004ef4:	08015c4c 	.word	0x08015c4c
 8004ef8:	08015c80 	.word	0x08015c80
 8004efc:	08015cd8 	.word	0x08015cd8
 8004f00:	08015cac 	.word	0x08015cac
        uint8_t *imei_buffer = (uint8_t *)gsm_get_sim_imei();
 8004f04:	f000 fd70 	bl	80059e8 <gsm_get_sim_imei>
 8004f08:	4601      	mov	r1, r0
        gsm_utilities_get_imei(resp_buffer, imei_buffer, 16);
 8004f0a:	2210      	movs	r2, #16
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 fd7b 	bl	8005a08 <gsm_utilities_get_imei>
        DEBUG_INFO("Get SIM IMSI: %s\r\n", gsm_get_sim_imei());
 8004f12:	f00f f9ff 	bl	8014314 <sys_get_tick_ms>
 8004f16:	4604      	mov	r4, r0
 8004f18:	f000 fd66 	bl	80059e8 <gsm_get_sim_imei>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4aac      	ldr	r2, [pc, #688]	; (80051d0 <gsm_config_module+0x5c0>)
 8004f20:	4621      	mov	r1, r4
 8004f22:	48ac      	ldr	r0, [pc, #688]	; (80051d4 <gsm_config_module+0x5c4>)
 8004f24:	f00f f9c8 	bl	80142b8 <app_debug_rtt_raw>
        if (strlen(gsm_get_sim_imei()) < 15)
 8004f28:	f000 fd5e 	bl	80059e8 <gsm_get_sim_imei>
 8004f2c:	f7fb f986 	bl	800023c <strlen>
 8004f30:	280e      	cmp	r0, #14
 8004f32:	d816      	bhi.n	8004f62 <gsm_config_module+0x352>
            DEBUG_ERROR("SIM's not inserted!\r\n");
 8004f34:	f00f f9ee 	bl	8014314 <sys_get_tick_ms>
 8004f38:	4601      	mov	r1, r0
 8004f3a:	4ca5      	ldr	r4, [pc, #660]	; (80051d0 <gsm_config_module+0x5c0>)
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	48a6      	ldr	r0, [pc, #664]	; (80051d8 <gsm_config_module+0x5c8>)
 8004f40:	f00f f9ba 	bl	80142b8 <app_debug_rtt_raw>
            m_gsm_manager.step = 10;
 8004f44:	4ba5      	ldr	r3, [pc, #660]	; (80051dc <gsm_config_module+0x5cc>)
 8004f46:	220a      	movs	r2, #10
 8004f48:	705a      	strb	r2, [r3, #1]
            gsm_hw_send_at_cmd("AT+CGSN\r\n", "", "OK\r\n", 1000, 5, gsm_config_module);
 8004f4a:	4ba5      	ldr	r3, [pc, #660]	; (80051e0 <gsm_config_module+0x5d0>)
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	2305      	movs	r3, #5
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f56:	4aa3      	ldr	r2, [pc, #652]	; (80051e4 <gsm_config_module+0x5d4>)
 8004f58:	4621      	mov	r1, r4
 8004f5a:	48a3      	ldr	r0, [pc, #652]	; (80051e8 <gsm_config_module+0x5d8>)
 8004f5c:	f000 fc80 	bl	8005860 <gsm_hw_send_at_cmd>
 8004f60:	e6aa      	b.n	8004cb8 <gsm_config_module+0xa8>
            gsm_hw_send_at_cmd("AT+QCCID\r\n", "QCCID", "OK\r\n", 1000, 3, gsm_config_module);
 8004f62:	4b9f      	ldr	r3, [pc, #636]	; (80051e0 <gsm_config_module+0x5d0>)
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	2303      	movs	r3, #3
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f6e:	4a9d      	ldr	r2, [pc, #628]	; (80051e4 <gsm_config_module+0x5d4>)
 8004f70:	499e      	ldr	r1, [pc, #632]	; (80051ec <gsm_config_module+0x5dc>)
 8004f72:	489f      	ldr	r0, [pc, #636]	; (80051f0 <gsm_config_module+0x5e0>)
 8004f74:	f000 fc74 	bl	8005860 <gsm_hw_send_at_cmd>
 8004f78:	e69e      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Get SIM IMEI: %s\r\n", (char *)resp_buffer);
 8004f7a:	f00f f9cb 	bl	8014314 <sys_get_tick_ms>
 8004f7e:	4601      	mov	r1, r0
 8004f80:	462b      	mov	r3, r5
 8004f82:	4a93      	ldr	r2, [pc, #588]	; (80051d0 <gsm_config_module+0x5c0>)
 8004f84:	489b      	ldr	r0, [pc, #620]	; (80051f4 <gsm_config_module+0x5e4>)
 8004f86:	f00f f997 	bl	80142b8 <app_debug_rtt_raw>
        gsm_change_hw_polling_interval(5);
 8004f8a:	2005      	movs	r0, #5
 8004f8c:	f000 fc52 	bl	8005834 <gsm_change_hw_polling_interval>
        uint8_t *ccid_buffer = (uint8_t *)gsm_get_sim_ccid();
 8004f90:	f000 fd2e 	bl	80059f0 <gsm_get_sim_ccid>
 8004f94:	4604      	mov	r4, r0
        if (strlen((char *)ccid_buffer) < 10)
 8004f96:	f7fb f951 	bl	800023c <strlen>
 8004f9a:	2809      	cmp	r0, #9
 8004f9c:	d91c      	bls.n	8004fd8 <gsm_config_module+0x3c8>
        DEBUG_INFO("SIM CCID: %s\r\n", ccid_buffer);
 8004f9e:	f00f f9b9 	bl	8014314 <sys_get_tick_ms>
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	4a8a      	ldr	r2, [pc, #552]	; (80051d0 <gsm_config_module+0x5c0>)
 8004fa8:	4893      	ldr	r0, [pc, #588]	; (80051f8 <gsm_config_module+0x5e8>)
 8004faa:	f00f f985 	bl	80142b8 <app_debug_rtt_raw>
        if (strlen((char *)ccid_buffer) < 10 && retry < 2)
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f7fb f944 	bl	800023c <strlen>
 8004fb4:	2809      	cmp	r0, #9
 8004fb6:	d803      	bhi.n	8004fc0 <gsm_config_module+0x3b0>
 8004fb8:	4b90      	ldr	r3, [pc, #576]	; (80051fc <gsm_config_module+0x5ec>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d911      	bls.n	8004fe4 <gsm_config_module+0x3d4>
            gsm_hw_send_at_cmd("AT+CPIN?\r\n", "READY\r\n", "", 3000, 3, gsm_config_module);
 8004fc0:	4b87      	ldr	r3, [pc, #540]	; (80051e0 <gsm_config_module+0x5d0>)
 8004fc2:	9301      	str	r3, [sp, #4]
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004fcc:	4a80      	ldr	r2, [pc, #512]	; (80051d0 <gsm_config_module+0x5c0>)
 8004fce:	498c      	ldr	r1, [pc, #560]	; (8005200 <gsm_config_module+0x5f0>)
 8004fd0:	488c      	ldr	r0, [pc, #560]	; (8005204 <gsm_config_module+0x5f4>)
 8004fd2:	f000 fc45 	bl	8005860 <gsm_hw_send_at_cmd>
 8004fd6:	e66f      	b.n	8004cb8 <gsm_config_module+0xa8>
            gsm_utilities_get_sim_ccid(resp_buffer, ccid_buffer, 20);
 8004fd8:	2214      	movs	r2, #20
 8004fda:	4621      	mov	r1, r4
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f000 fd39 	bl	8005a54 <gsm_utilities_get_sim_ccid>
 8004fe2:	e7dc      	b.n	8004f9e <gsm_config_module+0x38e>
            retry++;
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	4a85      	ldr	r2, [pc, #532]	; (80051fc <gsm_config_module+0x5ec>)
 8004fe8:	6013      	str	r3, [r2, #0]
            gsm_hw_send_at_cmd("AT+QCCID\r\n", "QCCID", "OK\r\n", 1000, 3, gsm_config_module);
 8004fea:	4b7d      	ldr	r3, [pc, #500]	; (80051e0 <gsm_config_module+0x5d0>)
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	2303      	movs	r3, #3
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ff6:	4a7b      	ldr	r2, [pc, #492]	; (80051e4 <gsm_config_module+0x5d4>)
 8004ff8:	497c      	ldr	r1, [pc, #496]	; (80051ec <gsm_config_module+0x5dc>)
 8004ffa:	487d      	ldr	r0, [pc, #500]	; (80051f0 <gsm_config_module+0x5e0>)
 8004ffc:	f000 fc30 	bl	8005860 <gsm_hw_send_at_cmd>
            m_gsm_manager.step = 11;
 8005000:	4b76      	ldr	r3, [pc, #472]	; (80051dc <gsm_config_module+0x5cc>)
 8005002:	220b      	movs	r2, #11
 8005004:	705a      	strb	r2, [r3, #1]
 8005006:	e657      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("CPIN: %s\r\n", (char *)resp_buffer);
 8005008:	f00f f984 	bl	8014314 <sys_get_tick_ms>
 800500c:	4601      	mov	r1, r0
 800500e:	4c70      	ldr	r4, [pc, #448]	; (80051d0 <gsm_config_module+0x5c0>)
 8005010:	462b      	mov	r3, r5
 8005012:	4622      	mov	r2, r4
 8005014:	487c      	ldr	r0, [pc, #496]	; (8005208 <gsm_config_module+0x5f8>)
 8005016:	f00f f94f 	bl	80142b8 <app_debug_rtt_raw>
        gsm_change_hw_polling_interval(5);
 800501a:	2005      	movs	r0, #5
 800501c:	f000 fc0a 	bl	8005834 <gsm_change_hw_polling_interval>
        gsm_hw_send_at_cmd("AT+QIDEACT=1\r\n", "OK\r\n", "", 3000, 1, gsm_config_module);
 8005020:	4b6f      	ldr	r3, [pc, #444]	; (80051e0 <gsm_config_module+0x5d0>)
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	2301      	movs	r3, #1
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800502c:	4622      	mov	r2, r4
 800502e:	496d      	ldr	r1, [pc, #436]	; (80051e4 <gsm_config_module+0x5d4>)
 8005030:	4876      	ldr	r0, [pc, #472]	; (800520c <gsm_config_module+0x5fc>)
 8005032:	f000 fc15 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8005036:	e63f      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("De-activate PDP: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 8005038:	f00f f96c 	bl	8014314 <sys_get_tick_ms>
 800503c:	4601      	mov	r1, r0
 800503e:	4d64      	ldr	r5, [pc, #400]	; (80051d0 <gsm_config_module+0x5c0>)
 8005040:	4a73      	ldr	r2, [pc, #460]	; (8005210 <gsm_config_module+0x600>)
 8005042:	4b74      	ldr	r3, [pc, #464]	; (8005214 <gsm_config_module+0x604>)
 8005044:	2c00      	cmp	r4, #0
 8005046:	bf08      	it	eq
 8005048:	4613      	moveq	r3, r2
 800504a:	462a      	mov	r2, r5
 800504c:	4872      	ldr	r0, [pc, #456]	; (8005218 <gsm_config_module+0x608>)
 800504e:	f00f f933 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+QCFG=\"nwscanmode\",0\r\n", "OK\r\n", "", 5000, 2, gsm_config_module); // Select mode AUTO
 8005052:	4b63      	ldr	r3, [pc, #396]	; (80051e0 <gsm_config_module+0x5d0>)
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	2302      	movs	r3, #2
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	f241 3388 	movw	r3, #5000	; 0x1388
 800505e:	462a      	mov	r2, r5
 8005060:	4960      	ldr	r1, [pc, #384]	; (80051e4 <gsm_config_module+0x5d4>)
 8005062:	486e      	ldr	r0, [pc, #440]	; (800521c <gsm_config_module+0x60c>)
 8005064:	f000 fbfc 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8005068:	e626      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Network search mode AUTO: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 800506a:	f00f f953 	bl	8014314 <sys_get_tick_ms>
 800506e:	4601      	mov	r1, r0
 8005070:	4d57      	ldr	r5, [pc, #348]	; (80051d0 <gsm_config_module+0x5c0>)
 8005072:	4a67      	ldr	r2, [pc, #412]	; (8005210 <gsm_config_module+0x600>)
 8005074:	4b67      	ldr	r3, [pc, #412]	; (8005214 <gsm_config_module+0x604>)
 8005076:	2c00      	cmp	r4, #0
 8005078:	bf08      	it	eq
 800507a:	4613      	moveq	r3, r2
 800507c:	462a      	mov	r2, r5
 800507e:	4868      	ldr	r0, [pc, #416]	; (8005220 <gsm_config_module+0x610>)
 8005080:	f00f f91a 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+CGDCONT=1,\"IP\",\"v-internet\"\r\n", "", "OK\r\n", 1000, 2, gsm_config_module); /** <cid> = 1-24 */
 8005084:	4b56      	ldr	r3, [pc, #344]	; (80051e0 <gsm_config_module+0x5d0>)
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	2302      	movs	r3, #2
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005090:	4a54      	ldr	r2, [pc, #336]	; (80051e4 <gsm_config_module+0x5d4>)
 8005092:	4629      	mov	r1, r5
 8005094:	4863      	ldr	r0, [pc, #396]	; (8005224 <gsm_config_module+0x614>)
 8005096:	f000 fbe3 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 800509a:	e60d      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Define PDP context: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 800509c:	f00f f93a 	bl	8014314 <sys_get_tick_ms>
 80050a0:	4601      	mov	r1, r0
 80050a2:	4d4b      	ldr	r5, [pc, #300]	; (80051d0 <gsm_config_module+0x5c0>)
 80050a4:	4a5a      	ldr	r2, [pc, #360]	; (8005210 <gsm_config_module+0x600>)
 80050a6:	4b5b      	ldr	r3, [pc, #364]	; (8005214 <gsm_config_module+0x604>)
 80050a8:	2c00      	cmp	r4, #0
 80050aa:	bf08      	it	eq
 80050ac:	4613      	moveq	r3, r2
 80050ae:	462a      	mov	r2, r5
 80050b0:	485d      	ldr	r0, [pc, #372]	; (8005228 <gsm_config_module+0x618>)
 80050b2:	f00f f901 	bl	80142b8 <app_debug_rtt_raw>
        			gsm_hw_send_at_cmd("AT+QIACT=1\r\n", "OK\r\n", "", 5000, 5, gsm_config_module);	/** Turn on QIACT lỗi gửi tin với 1 số SIM dùng gói cước trả sau! */
 80050b6:	4b4a      	ldr	r3, [pc, #296]	; (80051e0 <gsm_config_module+0x5d0>)
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	2305      	movs	r3, #5
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	f241 3388 	movw	r3, #5000	; 0x1388
 80050c2:	462a      	mov	r2, r5
 80050c4:	4947      	ldr	r1, [pc, #284]	; (80051e4 <gsm_config_module+0x5d4>)
 80050c6:	4859      	ldr	r0, [pc, #356]	; (800522c <gsm_config_module+0x61c>)
 80050c8:	f000 fbca 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 80050cc:	e5f4      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("CSCS=GSM: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]");
 80050ce:	f00f f921 	bl	8014314 <sys_get_tick_ms>
 80050d2:	4601      	mov	r1, r0
 80050d4:	4d3e      	ldr	r5, [pc, #248]	; (80051d0 <gsm_config_module+0x5c0>)
 80050d6:	4a4e      	ldr	r2, [pc, #312]	; (8005210 <gsm_config_module+0x600>)
 80050d8:	4b4e      	ldr	r3, [pc, #312]	; (8005214 <gsm_config_module+0x604>)
 80050da:	2c00      	cmp	r4, #0
 80050dc:	bf08      	it	eq
 80050de:	4613      	moveq	r3, r2
 80050e0:	462a      	mov	r2, r5
 80050e2:	4853      	ldr	r0, [pc, #332]	; (8005230 <gsm_config_module+0x620>)
 80050e4:	f00f f8e8 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+CGREG=2\r\n", "OK\r\n", "", 1000, 3, gsm_config_module); /** Query CGREG? => +CGREG: <n>,<stat>[,<lac>,<ci>[,<Act>]] */
 80050e8:	4b3d      	ldr	r3, [pc, #244]	; (80051e0 <gsm_config_module+0x5d0>)
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	2303      	movs	r3, #3
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050f4:	462a      	mov	r2, r5
 80050f6:	493b      	ldr	r1, [pc, #236]	; (80051e4 <gsm_config_module+0x5d4>)
 80050f8:	484e      	ldr	r0, [pc, #312]	; (8005234 <gsm_config_module+0x624>)
 80050fa:	f000 fbb1 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 80050fe:	e5db      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Network registration status: %s, data %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]", (char *)resp_buffer);
 8005100:	f00f f908 	bl	8014314 <sys_get_tick_ms>
 8005104:	4601      	mov	r1, r0
 8005106:	4e32      	ldr	r6, [pc, #200]	; (80051d0 <gsm_config_module+0x5c0>)
 8005108:	9500      	str	r5, [sp, #0]
 800510a:	4a41      	ldr	r2, [pc, #260]	; (8005210 <gsm_config_module+0x600>)
 800510c:	4b41      	ldr	r3, [pc, #260]	; (8005214 <gsm_config_module+0x604>)
 800510e:	2c00      	cmp	r4, #0
 8005110:	bf08      	it	eq
 8005112:	4613      	moveq	r3, r2
 8005114:	4632      	mov	r2, r6
 8005116:	4848      	ldr	r0, [pc, #288]	; (8005238 <gsm_config_module+0x628>)
 8005118:	f00f f8ce 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+CGREG?\r\n", "OK\r\n", "", 1000, 2, gsm_config_module);
 800511c:	4b30      	ldr	r3, [pc, #192]	; (80051e0 <gsm_config_module+0x5d0>)
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	2302      	movs	r3, #2
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005128:	4632      	mov	r2, r6
 800512a:	492e      	ldr	r1, [pc, #184]	; (80051e4 <gsm_config_module+0x5d4>)
 800512c:	4843      	ldr	r0, [pc, #268]	; (800523c <gsm_config_module+0x62c>)
 800512e:	f000 fb97 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8005132:	e5c1      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Query network status: %s, data %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]", (char *)resp_buffer); /** +CGREG: 2,1,"3279","487BD01",7 */
 8005134:	f00f f8ee 	bl	8014314 <sys_get_tick_ms>
 8005138:	4601      	mov	r1, r0
 800513a:	2c00      	cmp	r4, #0
 800513c:	f000 8106 	beq.w	800534c <gsm_config_module+0x73c>
 8005140:	9500      	str	r5, [sp, #0]
 8005142:	4b34      	ldr	r3, [pc, #208]	; (8005214 <gsm_config_module+0x604>)
 8005144:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <gsm_config_module+0x5c0>)
 8005146:	483e      	ldr	r0, [pc, #248]	; (8005240 <gsm_config_module+0x630>)
 8005148:	f00f f8b6 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+COPS?\r\n", "OK\r\n", "", 2000, 2, gsm_config_module);
 800514c:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <gsm_config_module+0x5d0>)
 800514e:	9301      	str	r3, [sp, #4]
 8005150:	2302      	movs	r3, #2
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005158:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <gsm_config_module+0x5c0>)
 800515a:	4922      	ldr	r1, [pc, #136]	; (80051e4 <gsm_config_module+0x5d4>)
 800515c:	4839      	ldr	r0, [pc, #228]	; (8005244 <gsm_config_module+0x634>)
 800515e:	f000 fb7f 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8005162:	e5a9      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Query network operator: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]"); /** +COPS: 0,0,"Viettel Viettel",7 */
 8005164:	f00f f8d6 	bl	8014314 <sys_get_tick_ms>
 8005168:	4601      	mov	r1, r0
 800516a:	2c00      	cmp	r4, #0
 800516c:	f000 810f 	beq.w	800538e <gsm_config_module+0x77e>
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <gsm_config_module+0x604>)
 8005172:	4a17      	ldr	r2, [pc, #92]	; (80051d0 <gsm_config_module+0x5c0>)
 8005174:	4834      	ldr	r0, [pc, #208]	; (8005248 <gsm_config_module+0x638>)
 8005176:	f00f f89f 	bl	80142b8 <app_debug_rtt_raw>
        gsm_change_hw_polling_interval(5);
 800517a:	2005      	movs	r0, #5
 800517c:	f000 fb5a 	bl	8005834 <gsm_change_hw_polling_interval>
        gsm_hw_send_at_cmd("AT\r\n", "OK\r\n", "", 1000, 3, gsm_config_module);
 8005180:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <gsm_config_module+0x5d0>)
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	2303      	movs	r3, #3
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800518c:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <gsm_config_module+0x5c0>)
 800518e:	4915      	ldr	r1, [pc, #84]	; (80051e4 <gsm_config_module+0x5d4>)
 8005190:	482e      	ldr	r0, [pc, #184]	; (800524c <gsm_config_module+0x63c>)
 8005192:	f000 fb65 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8005196:	e58f      	b.n	8004cb8 <gsm_config_module+0xa8>
                gsm_hw_send_at_cmd("AT+COPS?\r\n", "OK\r\n", "", 1000, 3, gsm_config_module);
 8005198:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <gsm_config_module+0x5d0>)
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	2303      	movs	r3, #3
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051a4:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <gsm_config_module+0x5c0>)
 80051a6:	490f      	ldr	r1, [pc, #60]	; (80051e4 <gsm_config_module+0x5d4>)
 80051a8:	4826      	ldr	r0, [pc, #152]	; (8005244 <gsm_config_module+0x634>)
 80051aa:	f000 fb59 	bl	8005860 <gsm_hw_send_at_cmd>
                gsm_change_hw_polling_interval(1000);
 80051ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051b2:	f000 fb3f 	bl	8005834 <gsm_change_hw_polling_interval>
                return;
 80051b6:	e583      	b.n	8004cc0 <gsm_config_module+0xb0>
        gsm_hw_send_at_cmd("AT+CCLK?\r\n", "+CCLK:", "OK\r\n", 1000, 5, gsm_config_module);
 80051b8:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <gsm_config_module+0x5d0>)
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	2305      	movs	r3, #5
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051c4:	4a07      	ldr	r2, [pc, #28]	; (80051e4 <gsm_config_module+0x5d4>)
 80051c6:	4922      	ldr	r1, [pc, #136]	; (8005250 <gsm_config_module+0x640>)
 80051c8:	4822      	ldr	r0, [pc, #136]	; (8005254 <gsm_config_module+0x644>)
 80051ca:	f000 fb49 	bl	8005860 <gsm_hw_send_at_cmd>
    break;
 80051ce:	e573      	b.n	8004cb8 <gsm_config_module+0xa8>
 80051d0:	08015e88 	.word	0x08015e88
 80051d4:	08015ce4 	.word	0x08015ce4
 80051d8:	08015d10 	.word	0x08015d10
 80051dc:	200001e4 	.word	0x200001e4
 80051e0:	08004c11 	.word	0x08004c11
 80051e4:	080153ec 	.word	0x080153ec
 80051e8:	08015c40 	.word	0x08015c40
 80051ec:	08015d40 	.word	0x08015d40
 80051f0:	08015d48 	.word	0x08015d48
 80051f4:	08015d54 	.word	0x08015d54
 80051f8:	08015d80 	.word	0x08015d80
 80051fc:	20000434 	.word	0x20000434
 8005200:	08015da8 	.word	0x08015da8
 8005204:	08015448 	.word	0x08015448
 8005208:	08015db0 	.word	0x08015db0
 800520c:	08015dd4 	.word	0x08015dd4
 8005210:	08015520 	.word	0x08015520
 8005214:	08015554 	.word	0x08015554
 8005218:	08015de4 	.word	0x08015de4
 800521c:	08015e14 	.word	0x08015e14
 8005220:	08015e30 	.word	0x08015e30
 8005224:	08015e68 	.word	0x08015e68
 8005228:	08015e8c 	.word	0x08015e8c
 800522c:	08015ec0 	.word	0x08015ec0
 8005230:	08015ed0 	.word	0x08015ed0
 8005234:	08015ef8 	.word	0x08015ef8
 8005238:	08015f08 	.word	0x08015f08
 800523c:	08015f4c 	.word	0x08015f4c
 8005240:	0801606c 	.word	0x0801606c
 8005244:	08015f58 	.word	0x08015f58
 8005248:	080160ac 	.word	0x080160ac
 800524c:	08015af8 	.word	0x08015af8
 8005250:	08015f94 	.word	0x08015f94
 8005254:	08015f9c 	.word	0x08015f9c
        DEBUG_INFO("Query CCLK: %s,%s\r\n",
 8005258:	f00f f85c 	bl	8014314 <sys_get_tick_ms>
 800525c:	4601      	mov	r1, r0
 800525e:	4e5b      	ldr	r6, [pc, #364]	; (80053cc <gsm_config_module+0x7bc>)
 8005260:	9500      	str	r5, [sp, #0]
 8005262:	4a5b      	ldr	r2, [pc, #364]	; (80053d0 <gsm_config_module+0x7c0>)
 8005264:	4b5b      	ldr	r3, [pc, #364]	; (80053d4 <gsm_config_module+0x7c4>)
 8005266:	2c00      	cmp	r4, #0
 8005268:	bf08      	it	eq
 800526a:	4613      	moveq	r3, r2
 800526c:	4632      	mov	r2, r6
 800526e:	485a      	ldr	r0, [pc, #360]	; (80053d8 <gsm_config_module+0x7c8>)
 8005270:	f00f f822 	bl	80142b8 <app_debug_rtt_raw>
        gsm_hw_send_at_cmd("AT+CSQ\r\n", "", "OK\r\n", 1000, 2, gsm_config_module);
 8005274:	4b59      	ldr	r3, [pc, #356]	; (80053dc <gsm_config_module+0x7cc>)
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	2302      	movs	r3, #2
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005280:	4a57      	ldr	r2, [pc, #348]	; (80053e0 <gsm_config_module+0x7d0>)
 8005282:	4631      	mov	r1, r6
 8005284:	4857      	ldr	r0, [pc, #348]	; (80053e4 <gsm_config_module+0x7d4>)
 8005286:	f000 faeb 	bl	8005860 <gsm_hw_send_at_cmd>
    break;
 800528a:	e515      	b.n	8004cb8 <gsm_config_module+0xa8>
        if (event != GSM_EVENT_OK)
 800528c:	bb00      	cbnz	r0, 80052d0 <gsm_config_module+0x6c0>
        uint8_t csq = 99;
 800528e:	2363      	movs	r3, #99	; 0x63
 8005290:	f88d 300f 	strb.w	r3, [sp, #15]
        gsm_utilities_get_signal_strength_from_buffer(resp_buffer, &csq);
 8005294:	f10d 010f 	add.w	r1, sp, #15
 8005298:	4628      	mov	r0, r5
 800529a:	f000 fc6b 	bl	8005b74 <gsm_utilities_get_signal_strength_from_buffer>
        DEBUG_INFO("CSQ: %d\r\n", csq);
 800529e:	f00f f839 	bl	8014314 <sys_get_tick_ms>
 80052a2:	4601      	mov	r1, r0
 80052a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80052a8:	4a48      	ldr	r2, [pc, #288]	; (80053cc <gsm_config_module+0x7bc>)
 80052aa:	484f      	ldr	r0, [pc, #316]	; (80053e8 <gsm_config_module+0x7d8>)
 80052ac:	f00f f804 	bl	80142b8 <app_debug_rtt_raw>
        if (csq == 99) // Invalid CSQ =>> Polling CSQ again
 80052b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80052b4:	2b63      	cmp	r3, #99	; 0x63
 80052b6:	d019      	beq.n	80052ec <gsm_config_module+0x6dc>
            gsm_hw_send_at_cmd("AT\r\n", "OK\r\n", "", 2000, 1, gsm_config_module);
 80052b8:	4b48      	ldr	r3, [pc, #288]	; (80053dc <gsm_config_module+0x7cc>)
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	2301      	movs	r3, #1
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80052c4:	4a41      	ldr	r2, [pc, #260]	; (80053cc <gsm_config_module+0x7bc>)
 80052c6:	4946      	ldr	r1, [pc, #280]	; (80053e0 <gsm_config_module+0x7d0>)
 80052c8:	4848      	ldr	r0, [pc, #288]	; (80053ec <gsm_config_module+0x7dc>)
 80052ca:	f000 fac9 	bl	8005860 <gsm_hw_send_at_cmd>
    break;
 80052ce:	e4f3      	b.n	8004cb8 <gsm_config_module+0xa8>
            DEBUG_INFO("GSM: init fail, reset modem...\r\n");
 80052d0:	f00f f820 	bl	8014314 <sys_get_tick_ms>
 80052d4:	4601      	mov	r1, r0
 80052d6:	4a3d      	ldr	r2, [pc, #244]	; (80053cc <gsm_config_module+0x7bc>)
 80052d8:	4845      	ldr	r0, [pc, #276]	; (80053f0 <gsm_config_module+0x7e0>)
 80052da:	f00e ffed 	bl	80142b8 <app_debug_rtt_raw>
            m_gsm_manager.step = 0;
 80052de:	4b45      	ldr	r3, [pc, #276]	; (80053f4 <gsm_config_module+0x7e4>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	705a      	strb	r2, [r3, #1]
            gsm_change_state(GSM_STATE_RESET);
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7ff f9ed 	bl	80046c4 <gsm_change_state>
            return;
 80052ea:	e4e9      	b.n	8004cc0 <gsm_config_module+0xb0>
            m_gsm_manager.step = 21;
 80052ec:	4b41      	ldr	r3, [pc, #260]	; (80053f4 <gsm_config_module+0x7e4>)
 80052ee:	2215      	movs	r2, #21
 80052f0:	705a      	strb	r2, [r3, #1]
            gsm_hw_send_at_cmd("AT+CSQ\r\n", "OK\r\n", "", 1000, 3, gsm_config_module);
 80052f2:	4b3a      	ldr	r3, [pc, #232]	; (80053dc <gsm_config_module+0x7cc>)
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	2303      	movs	r3, #3
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052fe:	4a33      	ldr	r2, [pc, #204]	; (80053cc <gsm_config_module+0x7bc>)
 8005300:	4937      	ldr	r1, [pc, #220]	; (80053e0 <gsm_config_module+0x7d0>)
 8005302:	4838      	ldr	r0, [pc, #224]	; (80053e4 <gsm_config_module+0x7d4>)
 8005304:	f000 faac 	bl	8005860 <gsm_hw_send_at_cmd>
            gsm_change_hw_polling_interval(500);
 8005308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800530c:	f000 fa92 	bl	8005834 <gsm_change_hw_polling_interval>
 8005310:	e4d2      	b.n	8004cb8 <gsm_config_module+0xa8>
        gsm_change_hw_polling_interval(5);
 8005312:	2005      	movs	r0, #5
 8005314:	f000 fa8e 	bl	8005834 <gsm_change_hw_polling_interval>
        m_gsm_manager.gsm_ready = 1;
 8005318:	4a36      	ldr	r2, [pc, #216]	; (80053f4 <gsm_config_module+0x7e4>)
 800531a:	2301      	movs	r3, #1
 800531c:	7093      	strb	r3, [r2, #2]
        m_gsm_manager.step = 0;
 800531e:	2100      	movs	r1, #0
 8005320:	7051      	strb	r1, [r2, #1]
        gsm_hw_send_at_cmd("AT\r\n", "OK\r\n", "", 2000, 1, open_ppp_stack);
 8005322:	4a35      	ldr	r2, [pc, #212]	; (80053f8 <gsm_config_module+0x7e8>)
 8005324:	9201      	str	r2, [sp, #4]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800532c:	4a27      	ldr	r2, [pc, #156]	; (80053cc <gsm_config_module+0x7bc>)
 800532e:	492c      	ldr	r1, [pc, #176]	; (80053e0 <gsm_config_module+0x7d0>)
 8005330:	482e      	ldr	r0, [pc, #184]	; (80053ec <gsm_config_module+0x7dc>)
 8005332:	f000 fa95 	bl	8005860 <gsm_hw_send_at_cmd>
        break;
 8005336:	e4bf      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_WARN("GSM unhandled step %u\r\n", m_gsm_manager.step);
 8005338:	f00e ffec 	bl	8014314 <sys_get_tick_ms>
 800533c:	4601      	mov	r1, r0
 800533e:	4b2d      	ldr	r3, [pc, #180]	; (80053f4 <gsm_config_module+0x7e4>)
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	4a22      	ldr	r2, [pc, #136]	; (80053cc <gsm_config_module+0x7bc>)
 8005344:	482d      	ldr	r0, [pc, #180]	; (80053fc <gsm_config_module+0x7ec>)
 8005346:	f00e ffb7 	bl	80142b8 <app_debug_rtt_raw>
        break;
 800534a:	e4b5      	b.n	8004cb8 <gsm_config_module+0xa8>
        DEBUG_INFO("Query network status: %s, data %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]", (char *)resp_buffer); /** +CGREG: 2,1,"3279","487BD01",7 */
 800534c:	9500      	str	r5, [sp, #0]
 800534e:	4b20      	ldr	r3, [pc, #128]	; (80053d0 <gsm_config_module+0x7c0>)
 8005350:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <gsm_config_module+0x7bc>)
 8005352:	482b      	ldr	r0, [pc, #172]	; (8005400 <gsm_config_module+0x7f0>)
 8005354:	f00e ffb0 	bl	80142b8 <app_debug_rtt_raw>
            uint8_t access_tech = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	f88d 300f 	strb.w	r3, [sp, #15]
            retval = gsm_utilities_get_network_access_tech(resp_buffer, &access_tech);
 800535e:	f10d 010f 	add.w	r1, sp, #15
 8005362:	4628      	mov	r0, r5
 8005364:	f000 fc18 	bl	8005b98 <gsm_utilities_get_network_access_tech>
            if (retval == false)
 8005368:	2800      	cmp	r0, #0
 800536a:	f47f aeef 	bne.w	800514c <gsm_config_module+0x53c>
                gsm_hw_send_at_cmd("AT+CGREG?\r\n", "OK\r\n", "", 1000, 2, gsm_config_module);
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <gsm_config_module+0x7cc>)
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	2302      	movs	r3, #2
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800537a:	4a14      	ldr	r2, [pc, #80]	; (80053cc <gsm_config_module+0x7bc>)
 800537c:	4918      	ldr	r1, [pc, #96]	; (80053e0 <gsm_config_module+0x7d0>)
 800537e:	4821      	ldr	r0, [pc, #132]	; (8005404 <gsm_config_module+0x7f4>)
 8005380:	f000 fa6e 	bl	8005860 <gsm_hw_send_at_cmd>
                gsm_change_hw_polling_interval(1000);
 8005384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005388:	f000 fa54 	bl	8005834 <gsm_change_hw_polling_interval>
                return;
 800538c:	e498      	b.n	8004cc0 <gsm_config_module+0xb0>
        DEBUG_INFO("Query network operator: %s\r\n", (event == GSM_EVENT_OK) ? "[OK]" : "[FAIL]"); /** +COPS: 0,0,"Viettel Viettel",7 */
 800538e:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <gsm_config_module+0x7c0>)
 8005390:	4a0e      	ldr	r2, [pc, #56]	; (80053cc <gsm_config_module+0x7bc>)
 8005392:	481d      	ldr	r0, [pc, #116]	; (8005408 <gsm_config_module+0x7f8>)
 8005394:	f00e ff90 	bl	80142b8 <app_debug_rtt_raw>
            gsm_utilities_get_network_operator(resp_buffer,
 8005398:	f000 fb32 	bl	8005a00 <gsm_get_network_operator>
 800539c:	4601      	mov	r1, r0
 800539e:	2220      	movs	r2, #32
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 fb8b 	bl	8005abc <gsm_utilities_get_network_operator>
            if (strlen(gsm_get_network_operator()) < 5)
 80053a6:	f000 fb2b 	bl	8005a00 <gsm_get_network_operator>
 80053aa:	f7fa ff47 	bl	800023c <strlen>
 80053ae:	2804      	cmp	r0, #4
 80053b0:	f67f aef2 	bls.w	8005198 <gsm_config_module+0x588>
            DEBUG_INFO("Network operator: %s\r\n", gsm_get_network_operator());
 80053b4:	f00e ffae 	bl	8014314 <sys_get_tick_ms>
 80053b8:	4604      	mov	r4, r0
 80053ba:	f000 fb21 	bl	8005a00 <gsm_get_network_operator>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a02      	ldr	r2, [pc, #8]	; (80053cc <gsm_config_module+0x7bc>)
 80053c2:	4621      	mov	r1, r4
 80053c4:	4811      	ldr	r0, [pc, #68]	; (800540c <gsm_config_module+0x7fc>)
 80053c6:	f00e ff77 	bl	80142b8 <app_debug_rtt_raw>
 80053ca:	e6d6      	b.n	800517a <gsm_config_module+0x56a>
 80053cc:	08015e88 	.word	0x08015e88
 80053d0:	08015520 	.word	0x08015520
 80053d4:	08015554 	.word	0x08015554
 80053d8:	08015fa8 	.word	0x08015fa8
 80053dc:	08004c11 	.word	0x08004c11
 80053e0:	080153ec 	.word	0x080153ec
 80053e4:	0801543c 	.word	0x0801543c
 80053e8:	08016014 	.word	0x08016014
 80053ec:	08015af8 	.word	0x08015af8
 80053f0:	08015fd8 	.word	0x08015fd8
 80053f4:	200001e4 	.word	0x200001e4
 80053f8:	080047c9 	.word	0x080047c9
 80053fc:	08016038 	.word	0x08016038
 8005400:	0801606c 	.word	0x0801606c
 8005404:	08015f4c 	.word	0x08015f4c
 8005408:	080160ac 	.word	0x080160ac
 800540c:	08015f64 	.word	0x08015f64

08005410 <gsm_power_on_sequence>:
{
 8005410:	b510      	push	{r4, lr}
    DEBUG_INFO("GSM hard reset step %d\r\n", step);
 8005412:	f00e ff7f 	bl	8014314 <sys_get_tick_ms>
 8005416:	4601      	mov	r1, r0
 8005418:	4c37      	ldr	r4, [pc, #220]	; (80054f8 <gsm_power_on_sequence+0xe8>)
 800541a:	7823      	ldrb	r3, [r4, #0]
 800541c:	4a37      	ldr	r2, [pc, #220]	; (80054fc <gsm_power_on_sequence+0xec>)
 800541e:	4838      	ldr	r0, [pc, #224]	; (8005500 <gsm_power_on_sequence+0xf0>)
 8005420:	f00e ff4a 	bl	80142b8 <app_debug_rtt_raw>
    switch (step)
 8005424:	7823      	ldrb	r3, [r4, #0]
 8005426:	2b07      	cmp	r3, #7
 8005428:	d81d      	bhi.n	8005466 <gsm_power_on_sequence+0x56>
 800542a:	e8df f003 	tbb	[pc, r3]
 800542e:	1d04      	.short	0x1d04
 8005430:	5a4a3834 	.word	0x5a4a3834
 8005434:	5e5a      	.short	0x5e5a
        m_gsm_manager.gsm_ready = 0;
 8005436:	2400      	movs	r4, #0
 8005438:	4b32      	ldr	r3, [pc, #200]	; (8005504 <gsm_power_on_sequence+0xf4>)
 800543a:	709c      	strb	r4, [r3, #2]
        GSM_PWR_EN(0);
 800543c:	4622      	mov	r2, r4
 800543e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005442:	4831      	ldr	r0, [pc, #196]	; (8005508 <gsm_power_on_sequence+0xf8>)
 8005444:	f7fe f84e 	bl	80034e4 <HAL_GPIO_WritePin>
        GSM_PWR_RESET(1);
 8005448:	2201      	movs	r2, #1
 800544a:	2108      	movs	r1, #8
 800544c:	482f      	ldr	r0, [pc, #188]	; (800550c <gsm_power_on_sequence+0xfc>)
 800544e:	f7fe f849 	bl	80034e4 <HAL_GPIO_WritePin>
        GSM_PWR_KEY(0);
 8005452:	4622      	mov	r2, r4
 8005454:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005458:	482d      	ldr	r0, [pc, #180]	; (8005510 <gsm_power_on_sequence+0x100>)
 800545a:	f7fe f843 	bl	80034e4 <HAL_GPIO_WritePin>
        step++;
 800545e:	4a26      	ldr	r2, [pc, #152]	; (80054f8 <gsm_power_on_sequence+0xe8>)
 8005460:	7813      	ldrb	r3, [r2, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	7013      	strb	r3, [r2, #0]
}
 8005466:	bd10      	pop	{r4, pc}
        GSM_PWR_RESET(0);
 8005468:	2200      	movs	r2, #0
 800546a:	2108      	movs	r1, #8
 800546c:	4827      	ldr	r0, [pc, #156]	; (800550c <gsm_power_on_sequence+0xfc>)
 800546e:	f7fe f839 	bl	80034e4 <HAL_GPIO_WritePin>
        DEBUG_INFO("Gsm power on\r\n");
 8005472:	f00e ff4f 	bl	8014314 <sys_get_tick_ms>
 8005476:	4601      	mov	r1, r0
 8005478:	4a20      	ldr	r2, [pc, #128]	; (80054fc <gsm_power_on_sequence+0xec>)
 800547a:	4826      	ldr	r0, [pc, #152]	; (8005514 <gsm_power_on_sequence+0x104>)
 800547c:	f00e ff1c 	bl	80142b8 <app_debug_rtt_raw>
        GSM_PWR_EN(1);
 8005480:	2201      	movs	r2, #1
 8005482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005486:	4820      	ldr	r0, [pc, #128]	; (8005508 <gsm_power_on_sequence+0xf8>)
 8005488:	f7fe f82c 	bl	80034e4 <HAL_GPIO_WritePin>
        step++;
 800548c:	4a1a      	ldr	r2, [pc, #104]	; (80054f8 <gsm_power_on_sequence+0xe8>)
 800548e:	7813      	ldrb	r3, [r2, #0]
 8005490:	3301      	adds	r3, #1
 8005492:	7013      	strb	r3, [r2, #0]
        break;
 8005494:	e7e7      	b.n	8005466 <gsm_power_on_sequence+0x56>
        step++;
 8005496:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <gsm_power_on_sequence+0xe8>)
 8005498:	2203      	movs	r2, #3
 800549a:	701a      	strb	r2, [r3, #0]
        break;
 800549c:	e7e3      	b.n	8005466 <gsm_power_on_sequence+0x56>
        DEBUG_INFO("Pulse power key\r\n");
 800549e:	f00e ff39 	bl	8014314 <sys_get_tick_ms>
 80054a2:	4601      	mov	r1, r0
 80054a4:	4a15      	ldr	r2, [pc, #84]	; (80054fc <gsm_power_on_sequence+0xec>)
 80054a6:	481c      	ldr	r0, [pc, #112]	; (8005518 <gsm_power_on_sequence+0x108>)
 80054a8:	f00e ff06 	bl	80142b8 <app_debug_rtt_raw>
        GSM_PWR_KEY(1); // set power key to 1, depend on hardware and module
 80054ac:	2201      	movs	r2, #1
 80054ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054b2:	4817      	ldr	r0, [pc, #92]	; (8005510 <gsm_power_on_sequence+0x100>)
 80054b4:	f7fe f816 	bl	80034e4 <HAL_GPIO_WritePin>
        step++;
 80054b8:	4a0f      	ldr	r2, [pc, #60]	; (80054f8 <gsm_power_on_sequence+0xe8>)
 80054ba:	7813      	ldrb	r3, [r2, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	7013      	strb	r3, [r2, #0]
        break;
 80054c0:	e7d1      	b.n	8005466 <gsm_power_on_sequence+0x56>
        GSM_PWR_KEY(0);
 80054c2:	2200      	movs	r2, #0
 80054c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054c8:	4811      	ldr	r0, [pc, #68]	; (8005510 <gsm_power_on_sequence+0x100>)
 80054ca:	f7fe f80b 	bl	80034e4 <HAL_GPIO_WritePin>
        GSM_PWR_RESET(0);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2108      	movs	r1, #8
 80054d2:	480e      	ldr	r0, [pc, #56]	; (800550c <gsm_power_on_sequence+0xfc>)
 80054d4:	f7fe f806 	bl	80034e4 <HAL_GPIO_WritePin>
        step++;
 80054d8:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <gsm_power_on_sequence+0xe8>)
 80054da:	7813      	ldrb	r3, [r2, #0]
 80054dc:	3301      	adds	r3, #1
 80054de:	7013      	strb	r3, [r2, #0]
        break;
 80054e0:	e7c1      	b.n	8005466 <gsm_power_on_sequence+0x56>
        step++;
 80054e2:	3301      	adds	r3, #1
 80054e4:	4a04      	ldr	r2, [pc, #16]	; (80054f8 <gsm_power_on_sequence+0xe8>)
 80054e6:	7013      	strb	r3, [r2, #0]
        break;
 80054e8:	e7bd      	b.n	8005466 <gsm_power_on_sequence+0x56>
        step = 0;
 80054ea:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <gsm_power_on_sequence+0xe8>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
        gsm_change_state(GSM_STATE_POWER_ON); // GSM power seq finished, active gsm by at command
 80054f0:	2004      	movs	r0, #4
 80054f2:	f7ff f8e7 	bl	80046c4 <gsm_change_state>
}
 80054f6:	e7b6      	b.n	8005466 <gsm_power_on_sequence+0x56>
 80054f8:	2000043a 	.word	0x2000043a
 80054fc:	08015e88 	.word	0x08015e88
 8005500:	080160e4 	.word	0x080160e4
 8005504:	200001e4 	.word	0x200001e4
 8005508:	40010800 	.word	0x40010800
 800550c:	40011000 	.word	0x40011000
 8005510:	40010c00 	.word	0x40010c00
 8005514:	08016118 	.word	0x08016118
 8005518:	08016140 	.word	0x08016140

0800551c <gsm_state_machine_polling>:
{
 800551c:	b500      	push	{lr}
 800551e:	b083      	sub	sp, #12
    uint32_t now = sys_get_tick_ms();
 8005520:	f00e fef8 	bl	8014314 <sys_get_tick_ms>
    if (now - m_last_tick >= (uint32_t)1000) // Poll every 1 second
 8005524:	4b19      	ldr	r3, [pc, #100]	; (800558c <gsm_state_machine_polling+0x70>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	1ac3      	subs	r3, r0, r3
 800552a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800552e:	d329      	bcc.n	8005584 <gsm_state_machine_polling+0x68>
        m_last_tick = now;
 8005530:	4b16      	ldr	r3, [pc, #88]	; (800558c <gsm_state_machine_polling+0x70>)
 8005532:	6018      	str	r0, [r3, #0]
        switch (m_gsm_manager.state)
 8005534:	4b16      	ldr	r3, [pc, #88]	; (8005590 <gsm_state_machine_polling+0x74>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d01e      	beq.n	800557a <gsm_state_machine_polling+0x5e>
 800553c:	2b04      	cmp	r3, #4
 800553e:	d00a      	beq.n	8005556 <gsm_state_machine_polling+0x3a>
 8005540:	b303      	cbz	r3, 8005584 <gsm_state_machine_polling+0x68>
            DEBUG_ERROR("Unhandled case %u\r\n", m_gsm_manager.state);
 8005542:	f00e fee7 	bl	8014314 <sys_get_tick_ms>
 8005546:	4601      	mov	r1, r0
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <gsm_state_machine_polling+0x74>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	4a11      	ldr	r2, [pc, #68]	; (8005594 <gsm_state_machine_polling+0x78>)
 800554e:	4812      	ldr	r0, [pc, #72]	; (8005598 <gsm_state_machine_polling+0x7c>)
 8005550:	f00e feb2 	bl	80142b8 <app_debug_rtt_raw>
}
 8005554:	e016      	b.n	8005584 <gsm_state_machine_polling+0x68>
            if (m_gsm_manager.step == 0)
 8005556:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <gsm_state_machine_polling+0x74>)
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	b99b      	cbnz	r3, 8005584 <gsm_state_machine_polling+0x68>
                m_gsm_manager.step = 1;
 800555c:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <gsm_state_machine_polling+0x74>)
 800555e:	2201      	movs	r2, #1
 8005560:	705a      	strb	r2, [r3, #1]
                gsm_hw_send_at_cmd("ATV1\r\n", "OK\r\n", "", 1000, 30, gsm_config_module);
 8005562:	4b0e      	ldr	r3, [pc, #56]	; (800559c <gsm_state_machine_polling+0x80>)
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	231e      	movs	r3, #30
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800556e:	4a09      	ldr	r2, [pc, #36]	; (8005594 <gsm_state_machine_polling+0x78>)
 8005570:	490b      	ldr	r1, [pc, #44]	; (80055a0 <gsm_state_machine_polling+0x84>)
 8005572:	480c      	ldr	r0, [pc, #48]	; (80055a4 <gsm_state_machine_polling+0x88>)
 8005574:	f000 f974 	bl	8005860 <gsm_hw_send_at_cmd>
 8005578:	e004      	b.n	8005584 <gsm_state_machine_polling+0x68>
            m_gsm_manager.gsm_ready = 0;
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <gsm_state_machine_polling+0x74>)
 800557c:	2200      	movs	r2, #0
 800557e:	709a      	strb	r2, [r3, #2]
            gsm_power_on_sequence();
 8005580:	f7ff ff46 	bl	8005410 <gsm_power_on_sequence>
}
 8005584:	b003      	add	sp, #12
 8005586:	f85d fb04 	ldr.w	pc, [sp], #4
 800558a:	bf00      	nop
 800558c:	200001ec 	.word	0x200001ec
 8005590:	200001e4 	.word	0x200001e4
 8005594:	08015e88 	.word	0x08015e88
 8005598:	0801616c 	.word	0x0801616c
 800559c:	08004c11 	.word	0x08004c11
 80055a0:	080153ec 	.word	0x080153ec
 80055a4:	08015408 	.word	0x08015408

080055a8 <lwip_sntp_recv_callback>:

void lwip_sntp_recv_callback(uint32_t time)
{
 80055a8:	b510      	push	{r4, lr}
    if (time == 0)
 80055aa:	b938      	cbnz	r0, 80055bc <lwip_sntp_recv_callback+0x14>
    {
        DEBUG_WARN("NTP: Error, server not responding or bad response\r\n");
 80055ac:	f00e feb2 	bl	8014314 <sys_get_tick_ms>
 80055b0:	4601      	mov	r1, r0
 80055b2:	4a07      	ldr	r2, [pc, #28]	; (80055d0 <lwip_sntp_recv_callback+0x28>)
 80055b4:	4807      	ldr	r0, [pc, #28]	; (80055d4 <lwip_sntp_recv_callback+0x2c>)
 80055b6:	f00e fe7f 	bl	80142b8 <app_debug_rtt_raw>
    }
    else
    {
        DEBUG_INFO("NTP: %u seconds elapsed since 1.1.1970\r\n", time);
    }
}
 80055ba:	bd10      	pop	{r4, pc}
 80055bc:	4604      	mov	r4, r0
        DEBUG_INFO("NTP: %u seconds elapsed since 1.1.1970\r\n", time);
 80055be:	f00e fea9 	bl	8014314 <sys_get_tick_ms>
 80055c2:	4601      	mov	r1, r0
 80055c4:	4623      	mov	r3, r4
 80055c6:	4a02      	ldr	r2, [pc, #8]	; (80055d0 <lwip_sntp_recv_callback+0x28>)
 80055c8:	4803      	ldr	r0, [pc, #12]	; (80055d8 <lwip_sntp_recv_callback+0x30>)
 80055ca:	f00e fe75 	bl	80142b8 <app_debug_rtt_raw>
}
 80055ce:	e7f4      	b.n	80055ba <lwip_sntp_recv_callback+0x12>
 80055d0:	08015e88 	.word	0x08015e88
 80055d4:	0801619c 	.word	0x0801619c
 80055d8:	080161ec 	.word	0x080161ec

080055dc <gsm_hw_pppos_polling>:
    return gsm_hardware_layer_copy_ppp_buffer(data, len);
}

static uint8_t m_ppp_rx_buffer[512];
void gsm_hw_pppos_polling(void)
{
 80055dc:	b500      	push	{lr}
 80055de:	b083      	sub	sp, #12
    uint32_t sio_size = 0;

	uint8_t *buffer = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	9301      	str	r3, [sp, #4]
	uint16_t u16len = (uint16_t) 256;
	int16_t remain = 0;
 80055e4:	f8ad 3002 	strh.w	r3, [sp, #2]
//	static uint8_t rx[256];
	if( User_Uart_Received(USER_UART_CHANNEL_USART1, &buffer, u16len, &remain) == E_OK)
 80055e8:	f10d 0302 	add.w	r3, sp, #2
 80055ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055f0:	a901      	add	r1, sp, #4
 80055f2:	2003      	movs	r0, #3
 80055f4:	f7fd f998 	bl	8002928 <User_Uart_Received>
 80055f8:	b158      	cbz	r0, 8005612 <gsm_hw_pppos_polling+0x36>
	{
		gsm_hw_layer_uart_fill_rx(buffer, (256 + (uint32_t)remain));
	}

    sys_check_timeouts();
 80055fa:	f008 fc85 	bl	800df08 <sys_check_timeouts>
    return gsm_hardware_layer_copy_ppp_buffer(data, len);
 80055fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005602:	480b      	ldr	r0, [pc, #44]	; (8005630 <gsm_hw_pppos_polling+0x54>)
 8005604:	f000 f9c8 	bl	8005998 <gsm_hardware_layer_copy_ppp_buffer>

    sio_size = sio_read(0, m_ppp_rx_buffer, 512);
    if (sio_size > 0)
 8005608:	4602      	mov	r2, r0
 800560a:	b950      	cbnz	r0, 8005622 <gsm_hw_pppos_polling+0x46>
    {
        // Bypass data into ppp stack
        pppos_input(gsm_data_layer_get_ppp_control_block(), m_ppp_rx_buffer, sio_size);
    }
}
 800560c:	b003      	add	sp, #12
 800560e:	f85d fb04 	ldr.w	pc, [sp], #4
		gsm_hw_layer_uart_fill_rx(buffer, (256 + (uint32_t)remain));
 8005612:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8005616:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800561a:	9801      	ldr	r0, [sp, #4]
 800561c:	f000 f968 	bl	80058f0 <gsm_hw_layer_uart_fill_rx>
 8005620:	e7eb      	b.n	80055fa <gsm_hw_pppos_polling+0x1e>
        pppos_input(gsm_data_layer_get_ppp_control_block(), m_ppp_rx_buffer, sio_size);
 8005622:	4903      	ldr	r1, [pc, #12]	; (8005630 <gsm_hw_pppos_polling+0x54>)
 8005624:	4b03      	ldr	r3, [pc, #12]	; (8005634 <gsm_hw_pppos_polling+0x58>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	f00d fc2e 	bl	8012e88 <pppos_input>
}
 800562c:	e7ee      	b.n	800560c <gsm_hw_pppos_polling+0x30>
 800562e:	bf00      	nop
 8005630:	20000234 	.word	0x20000234
 8005634:	200001f4 	.word	0x200001f4

08005638 <gsm_is_in_ppp_mode>:

bool gsm_is_in_ppp_mode(void)
{
    return m_gsm_manager.mode == GSM_INTERNET_MODE_PPP_STACK ? true : false;
 8005638:	4b03      	ldr	r3, [pc, #12]	; (8005648 <gsm_is_in_ppp_mode+0x10>)
 800563a:	78d8      	ldrb	r0, [r3, #3]
}
 800563c:	2801      	cmp	r0, #1
 800563e:	bf14      	ite	ne
 8005640:	2000      	movne	r0, #0
 8005642:	2001      	moveq	r0, #1
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	200001e4 	.word	0x200001e4

0800564c <gsm_data_layer_is_ppp_connected>:

bool gsm_data_layer_is_ppp_connected(void)
{
    return m_ppp_connected;
}
 800564c:	4b01      	ldr	r3, [pc, #4]	; (8005654 <gsm_data_layer_is_ppp_connected+0x8>)
 800564e:	7818      	ldrb	r0, [r3, #0]
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	200001f0 	.word	0x200001f0

08005658 <gsm_mnr_task>:

void gsm_mnr_task(void *arg)
{
 8005658:	b508      	push	{r3, lr}
    gsm_hw_layer_run();
 800565a:	f000 f835 	bl	80056c8 <gsm_hw_layer_run>
    gsm_state_machine_polling();
 800565e:	f7ff ff5d 	bl	800551c <gsm_state_machine_polling>
    gsm_hw_pppos_polling();
 8005662:	f7ff ffbb 	bl	80055dc <gsm_hw_pppos_polling>

}
 8005666:	bd08      	pop	{r3, pc}

08005668 <usart1_hw_uart_send_raw>:
static char m_gsm_imei[16] = {0};
static char m_sim_imei[16];
static char m_nw_operator[32];
static char m_sim_ccid[21];
extern void usart1_hw_uart_send_raw(uint8_t *data, uint32_t length)
{
 8005668:	b508      	push	{r3, lr}
	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART1, data, (uint16_t)length);
 800566a:	b28a      	uxth	r2, r1
 800566c:	4601      	mov	r1, r0
 800566e:	2003      	movs	r0, #3
 8005670:	f7fd f930 	bl	80028d4 <User_Uart_AsyncTransmit>
}
 8005674:	bd08      	pop	{r3, pc}
	...

08005678 <gsm_init_hw>:

void gsm_init_hw(void)
{
 8005678:	b508      	push	{r3, lr}
    // Turn off GSM power
    GSM_PWR_EN(0);
 800567a:	2200      	movs	r2, #0
 800567c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005680:	480c      	ldr	r0, [pc, #48]	; (80056b4 <gsm_init_hw+0x3c>)
 8005682:	f7fd ff2f 	bl	80034e4 <HAL_GPIO_WritePin>
    GSM_PWR_RESET(1);
 8005686:	2201      	movs	r2, #1
 8005688:	2108      	movs	r1, #8
 800568a:	480b      	ldr	r0, [pc, #44]	; (80056b8 <gsm_init_hw+0x40>)
 800568c:	f7fd ff2a 	bl	80034e4 <HAL_GPIO_WritePin>
    GSM_PWR_KEY(0);
 8005690:	2200      	movs	r2, #0
 8005692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005696:	4809      	ldr	r0, [pc, #36]	; (80056bc <gsm_init_hw+0x44>)
 8005698:	f7fd ff24 	bl	80034e4 <HAL_GPIO_WritePin>

    // Enable GSM USART
    User_Uart_Init(&User_Uart_ConfigPtr);
 800569c:	4808      	ldr	r0, [pc, #32]	; (80056c0 <gsm_init_hw+0x48>)
 800569e:	f7fd f8ef 	bl	8002880 <User_Uart_Init>
    
    // Init gsm data layer
    gsm_data_layer_initialize();
 80056a2:	f7ff f80d 	bl	80046c0 <gsm_data_layer_initialize>
    
    
    // Change gsm first state to RESET
    gsm_change_state(GSM_STATE_RESET); 
 80056a6:	2001      	movs	r0, #1
 80056a8:	f7ff f80c 	bl	80046c4 <gsm_change_state>
    m_last_poll = sys_get_tick_ms();
}

void gsm_change_hw_polling_interval(uint32_t ms)
{
    m_poll_interval = ms;
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <gsm_init_hw+0x4c>)
 80056ae:	2205      	movs	r2, #5
 80056b0:	601a      	str	r2, [r3, #0]
}
 80056b2:	bd08      	pop	{r3, pc}
 80056b4:	40010800 	.word	0x40010800
 80056b8:	40011000 	.word	0x40011000
 80056bc:	40010c00 	.word	0x40010c00
 80056c0:	080151b8 	.word	0x080151b8
 80056c4:	2000000c 	.word	0x2000000c

080056c8 <gsm_hw_layer_run>:
{
 80056c8:	b530      	push	{r4, r5, lr}
 80056ca:	b083      	sub	sp, #12
    uint32_t now = sys_get_tick_ms();
 80056cc:	f00e fe22 	bl	8014314 <sys_get_tick_ms>
    if ((now - m_last_poll) < m_poll_interval)
 80056d0:	4b4c      	ldr	r3, [pc, #304]	; (8005804 <gsm_hw_layer_run+0x13c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	1ac3      	subs	r3, r0, r3
 80056d6:	4a4c      	ldr	r2, [pc, #304]	; (8005808 <gsm_hw_layer_run+0x140>)
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	4293      	cmp	r3, r2
 80056dc:	f0c0 8090 	bcc.w	8005800 <gsm_hw_layer_run+0x138>
    m_last_poll = now;
 80056e0:	4b48      	ldr	r3, [pc, #288]	; (8005804 <gsm_hw_layer_run+0x13c>)
 80056e2:	6018      	str	r0, [r3, #0]
    if (m_gsm_atc.atc.retry_count_atc)
 80056e4:	4b49      	ldr	r3, [pc, #292]	; (800580c <gsm_hw_layer_run+0x144>)
 80056e6:	7d1b      	ldrb	r3, [r3, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d04d      	beq.n	8005788 <gsm_hw_layer_run+0xc0>
  __ASM volatile ("cpsid i" : : : "memory");
 80056ec:	b672      	cpsid	i
        if (m_new_uart_data)
 80056ee:	4b48      	ldr	r3, [pc, #288]	; (8005810 <gsm_hw_layer_run+0x148>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d02f      	beq.n	8005756 <gsm_hw_layer_run+0x8e>
            m_new_uart_data = false;
 80056f6:	2300      	movs	r3, #0
 80056f8:	4a45      	ldr	r2, [pc, #276]	; (8005810 <gsm_hw_layer_run+0x148>)
 80056fa:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056fc:	b662      	cpsie	i
        if (ret_now == false
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d142      	bne.n	8005788 <gsm_hw_layer_run+0xc0>
        && (strstr((char *)(m_gsm_atc.atc.recv_buff.buffer), m_gsm_atc.atc.expect_resp_from_atc)))
 8005702:	4842      	ldr	r0, [pc, #264]	; (800580c <gsm_hw_layer_run+0x144>)
 8005704:	6841      	ldr	r1, [r0, #4]
 8005706:	3016      	adds	r0, #22
 8005708:	f00e fedc 	bl	80144c4 <strstr>
 800570c:	2800      	cmp	r0, #0
 800570e:	d03b      	beq.n	8005788 <gsm_hw_layer_run+0xc0>
            if (m_gsm_atc.atc.expected_response_at_the_end 
 8005710:	4b3e      	ldr	r3, [pc, #248]	; (800580c <gsm_hw_layer_run+0x144>)
 8005712:	689c      	ldr	r4, [r3, #8]
 8005714:	b30c      	cbz	r4, 800575a <gsm_hw_layer_run+0x92>
                && strlen(m_gsm_atc.atc.expected_response_at_the_end))
 8005716:	7823      	ldrb	r3, [r4, #0]
 8005718:	b1fb      	cbz	r3, 800575a <gsm_hw_layer_run+0x92>
                current_response_length = m_gsm_atc.atc.recv_buff.index;
 800571a:	4b3c      	ldr	r3, [pc, #240]	; (800580c <gsm_hw_layer_run+0x144>)
 800571c:	f8b3 5116 	ldrh.w	r5, [r3, #278]	; 0x116
 8005720:	4b3c      	ldr	r3, [pc, #240]	; (8005814 <gsm_hw_layer_run+0x14c>)
 8005722:	601d      	str	r5, [r3, #0]
                expect_compare_length = strlen(m_gsm_atc.atc.expected_response_at_the_end);
 8005724:	4620      	mov	r0, r4
 8005726:	f7fa fd89 	bl	800023c <strlen>
 800572a:	4602      	mov	r2, r0
 800572c:	4b3a      	ldr	r3, [pc, #232]	; (8005818 <gsm_hw_layer_run+0x150>)
 800572e:	6018      	str	r0, [r3, #0]
                if (expect_compare_length < current_response_length)
 8005730:	4285      	cmp	r5, r0
 8005732:	d929      	bls.n	8005788 <gsm_hw_layer_run+0xc0>
                    p_compare_end_str = &m_gsm_atc.atc.recv_buff.buffer[current_response_length - expect_compare_length];
 8005734:	f105 0016 	add.w	r0, r5, #22
 8005738:	1a80      	subs	r0, r0, r2
 800573a:	4b34      	ldr	r3, [pc, #208]	; (800580c <gsm_hw_layer_run+0x144>)
 800573c:	4418      	add	r0, r3
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <gsm_hw_layer_run+0x154>)
 8005740:	6018      	str	r0, [r3, #0]
                    if ((memcmp(p_compare_end_str, m_gsm_atc.atc.expected_response_at_the_end, expect_compare_length) == 0))
 8005742:	4621      	mov	r1, r4
 8005744:	f00e fe16 	bl	8014374 <memcmp>
 8005748:	b138      	cbz	r0, 800575a <gsm_hw_layer_run+0x92>
                        expect_end_str = (uint8_t*)m_gsm_atc.atc.expected_response_at_the_end;
 800574a:	4b35      	ldr	r3, [pc, #212]	; (8005820 <gsm_hw_layer_run+0x158>)
 800574c:	601c      	str	r4, [r3, #0]
                        uart_rx_pointer = m_gsm_atc.atc.recv_buff.buffer;
 800574e:	4b35      	ldr	r3, [pc, #212]	; (8005824 <gsm_hw_layer_run+0x15c>)
 8005750:	4a35      	ldr	r2, [pc, #212]	; (8005828 <gsm_hw_layer_run+0x160>)
 8005752:	601a      	str	r2, [r3, #0]
            if (do_cb)
 8005754:	e018      	b.n	8005788 <gsm_hw_layer_run+0xc0>
    bool ret_now = true;
 8005756:	2301      	movs	r3, #1
 8005758:	e7d0      	b.n	80056fc <gsm_hw_layer_run+0x34>
                m_gsm_atc.atc.retry_count_atc = 0;
 800575a:	4b2c      	ldr	r3, [pc, #176]	; (800580c <gsm_hw_layer_run+0x144>)
 800575c:	2100      	movs	r1, #0
 800575e:	7519      	strb	r1, [r3, #20]
                m_gsm_atc.atc.timeout_atc_ms = 0;
 8005760:	60d9      	str	r1, [r3, #12]
                m_gsm_atc.atc.recv_buff.buffer[m_gsm_atc.atc.recv_buff.index] = 0;
 8005762:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8005766:	441a      	add	r2, r3
 8005768:	7591      	strb	r1, [r2, #22]
                if (m_gsm_atc.atc.send_at_callback)
 800576a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800576e:	b113      	cbz	r3, 8005776 <gsm_hw_layer_run+0xae>
                    m_gsm_atc.atc.send_at_callback(GSM_EVENT_OK, m_gsm_atc.atc.recv_buff.buffer);
 8005770:	492d      	ldr	r1, [pc, #180]	; (8005828 <gsm_hw_layer_run+0x160>)
 8005772:	2000      	movs	r0, #0
 8005774:	4798      	blx	r3
                m_gsm_atc.atc.recv_buff.index = 0;
 8005776:	4825      	ldr	r0, [pc, #148]	; (800580c <gsm_hw_layer_run+0x144>)
 8005778:	2100      	movs	r1, #0
 800577a:	f8a0 1116 	strh.w	r1, [r0, #278]	; 0x116
                memset(m_gsm_atc.atc.recv_buff.buffer, 0, sizeof(((gsm_atc_buffer_t*)0)->buffer));
 800577e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005782:	3016      	adds	r0, #22
 8005784:	f00e fe2c 	bl	80143e0 <memset>
    uint32_t diff = sys_get_tick_ms() - m_gsm_atc.atc.current_timeout_atc_ms;
 8005788:	f00e fdc4 	bl	8014314 <sys_get_tick_ms>
    if (m_gsm_atc.atc.timeout_atc_ms && 
 800578c:	4b1f      	ldr	r3, [pc, #124]	; (800580c <gsm_hw_layer_run+0x144>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d031      	beq.n	80057f8 <gsm_hw_layer_run+0x130>
    uint32_t diff = sys_get_tick_ms() - m_gsm_atc.atc.current_timeout_atc_ms;
 8005794:	4a1d      	ldr	r2, [pc, #116]	; (800580c <gsm_hw_layer_run+0x144>)
 8005796:	6912      	ldr	r2, [r2, #16]
 8005798:	1a80      	subs	r0, r0, r2
    if (m_gsm_atc.atc.timeout_atc_ms && 
 800579a:	4283      	cmp	r3, r0
 800579c:	d82c      	bhi.n	80057f8 <gsm_hw_layer_run+0x130>
        if (m_gsm_atc.atc.retry_count_atc)
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <gsm_hw_layer_run+0x144>)
 80057a0:	7d1b      	ldrb	r3, [r3, #20]
 80057a2:	b1db      	cbz	r3, 80057dc <gsm_hw_layer_run+0x114>
            m_gsm_atc.atc.retry_count_atc--;
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	4a18      	ldr	r2, [pc, #96]	; (800580c <gsm_hw_layer_run+0x144>)
 80057aa:	7513      	strb	r3, [r2, #20]
        if (m_gsm_atc.atc.retry_count_atc == 0)
 80057ac:	b1b3      	cbz	r3, 80057dc <gsm_hw_layer_run+0x114>
            DEBUG_INFO("Resend ATC: %sExpect %s\r\n", m_gsm_atc.atc.cmd, m_gsm_atc.atc.expect_resp_from_atc);
 80057ae:	f00e fdb1 	bl	8014314 <sys_get_tick_ms>
 80057b2:	4601      	mov	r1, r0
 80057b4:	4c15      	ldr	r4, [pc, #84]	; (800580c <gsm_hw_layer_run+0x144>)
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	4a1b      	ldr	r2, [pc, #108]	; (800582c <gsm_hw_layer_run+0x164>)
 80057be:	481c      	ldr	r0, [pc, #112]	; (8005830 <gsm_hw_layer_run+0x168>)
 80057c0:	f00e fd7a 	bl	80142b8 <app_debug_rtt_raw>
            m_gsm_atc.atc.current_timeout_atc_ms = sys_get_tick_ms();
 80057c4:	f00e fda6 	bl	8014314 <sys_get_tick_ms>
 80057c8:	6120      	str	r0, [r4, #16]
            gsm_hw_uart_send_raw((uint8_t*)m_gsm_atc.atc.cmd, strlen(m_gsm_atc.atc.cmd));
 80057ca:	6824      	ldr	r4, [r4, #0]
 80057cc:	4620      	mov	r0, r4
 80057ce:	f7fa fd35 	bl	800023c <strlen>
 80057d2:	4601      	mov	r1, r0
}


void gsm_hw_uart_send_raw(uint8_t* raw, uint32_t length)
{
    usart1_hw_uart_send_raw(raw, length);
 80057d4:	4620      	mov	r0, r4
 80057d6:	f7ff ff47 	bl	8005668 <usart1_hw_uart_send_raw>
}
 80057da:	e00d      	b.n	80057f8 <gsm_hw_layer_run+0x130>
            m_gsm_atc.atc.timeout_atc_ms = 0;
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <gsm_hw_layer_run+0x144>)
 80057de:	2200      	movs	r2, #0
 80057e0:	60da      	str	r2, [r3, #12]
            if (m_gsm_atc.atc.send_at_callback != NULL)
 80057e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80057e6:	b113      	cbz	r3, 80057ee <gsm_hw_layer_run+0x126>
                m_gsm_atc.atc.send_at_callback(GSM_EVENT_TIMEOUT, NULL);
 80057e8:	4611      	mov	r1, r2
 80057ea:	2001      	movs	r0, #1
 80057ec:	4798      	blx	r3
            m_gsm_atc.atc.recv_buff.index = 0;
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <gsm_hw_layer_run+0x144>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            m_gsm_atc.atc.recv_buff.buffer[m_gsm_atc.atc.recv_buff.index] = 0;
 80057f6:	759a      	strb	r2, [r3, #22]
    m_last_poll = sys_get_tick_ms();
 80057f8:	f00e fd8c 	bl	8014314 <sys_get_tick_ms>
 80057fc:	4b01      	ldr	r3, [pc, #4]	; (8005804 <gsm_hw_layer_run+0x13c>)
 80057fe:	6018      	str	r0, [r3, #0]
}
 8005800:	b003      	add	sp, #12
 8005802:	bd30      	pop	{r4, r5, pc}
 8005804:	2000096c 	.word	0x2000096c
 8005808:	2000000c 	.word	0x2000000c
 800580c:	2000043c 	.word	0x2000043c
 8005810:	20000970 	.word	0x20000970
 8005814:	20002cf4 	.word	0x20002cf4
 8005818:	20002cf8 	.word	0x20002cf8
 800581c:	20002cfc 	.word	0x20002cfc
 8005820:	20002cf0 	.word	0x20002cf0
 8005824:	20000010 	.word	0x20000010
 8005828:	20000452 	.word	0x20000452
 800582c:	08015e88 	.word	0x08015e88
 8005830:	0801626c 	.word	0x0801626c

08005834 <gsm_change_hw_polling_interval>:
    m_poll_interval = ms;
 8005834:	4b01      	ldr	r3, [pc, #4]	; (800583c <gsm_change_hw_polling_interval+0x8>)
 8005836:	6018      	str	r0, [r3, #0]
}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	2000000c 	.word	0x2000000c

08005840 <gsm_hw_layer_reset_rx_buffer>:
{
 8005840:	b510      	push	{r4, lr}
    memset(m_gsm_atc.atc.recv_buff.buffer, 0, sizeof(((gsm_atc_buffer_t*)0)->buffer));
 8005842:	4c06      	ldr	r4, [pc, #24]	; (800585c <gsm_hw_layer_reset_rx_buffer+0x1c>)
 8005844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005848:	2100      	movs	r1, #0
 800584a:	f104 0016 	add.w	r0, r4, #22
 800584e:	f00e fdc7 	bl	80143e0 <memset>
    m_gsm_atc.atc.recv_buff.index = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    m_gsm_atc.atc.retry_count_atc = 0;
 8005858:	7523      	strb	r3, [r4, #20]
}
 800585a:	bd10      	pop	{r4, pc}
 800585c:	2000043c 	.word	0x2000043c

08005860 <gsm_hw_send_at_cmd>:
{
 8005860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005864:	4605      	mov	r5, r0
 8005866:	9e09      	ldr	r6, [sp, #36]	; 0x24
    if (timeout == 0 || callback == NULL)
 8005868:	b34b      	cbz	r3, 80058be <gsm_hw_send_at_cmd+0x5e>
 800586a:	4688      	mov	r8, r1
 800586c:	4617      	mov	r7, r2
 800586e:	4699      	mov	r9, r3
 8005870:	b32e      	cbz	r6, 80058be <gsm_hw_send_at_cmd+0x5e>
    if (strlen(cmd) < 64)
 8005872:	f7fa fce3 	bl	800023c <strlen>
 8005876:	283f      	cmp	r0, #63	; 0x3f
 8005878:	d92a      	bls.n	80058d0 <gsm_hw_send_at_cmd+0x70>
    m_gsm_atc.atc.cmd = cmd;
 800587a:	4c1a      	ldr	r4, [pc, #104]	; (80058e4 <gsm_hw_send_at_cmd+0x84>)
 800587c:	6025      	str	r5, [r4, #0]
    m_gsm_atc.atc.expect_resp_from_atc = expect_resp;
 800587e:	f8c4 8004 	str.w	r8, [r4, #4]
    m_gsm_atc.atc.expected_response_at_the_end = expected_response_at_the_end_of_response;
 8005882:	60a7      	str	r7, [r4, #8]
    m_gsm_atc.atc.retry_count_atc = retry_count;
 8005884:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8005888:	7523      	strb	r3, [r4, #20]
    m_gsm_atc.atc.send_at_callback = callback;
 800588a:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
    m_gsm_atc.atc.timeout_atc_ms = timeout;
 800588e:	f8c4 900c 	str.w	r9, [r4, #12]
    m_gsm_atc.atc.current_timeout_atc_ms = sys_get_tick_ms();
 8005892:	f00e fd3f 	bl	8014314 <sys_get_tick_ms>
 8005896:	6120      	str	r0, [r4, #16]
    memset(m_gsm_atc.atc.recv_buff.buffer, 0, sizeof(((gsm_atc_buffer_t*)0)->buffer));
 8005898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800589c:	2100      	movs	r1, #0
 800589e:	f104 0016 	add.w	r0, r4, #22
 80058a2:	f00e fd9d 	bl	80143e0 <memset>
    m_gsm_atc.atc.recv_buff.index = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    gsm_hw_uart_send_raw((uint8_t*)cmd, strlen(cmd));
 80058ac:	4628      	mov	r0, r5
 80058ae:	f7fa fcc5 	bl	800023c <strlen>
 80058b2:	4601      	mov	r1, r0
    usart1_hw_uart_send_raw(raw, length);
 80058b4:	4628      	mov	r0, r5
 80058b6:	f7ff fed7 	bl	8005668 <usart1_hw_uart_send_raw>
}
 80058ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        gsm_hw_uart_send_raw((uint8_t*)cmd, strlen(m_gsm_atc.atc.cmd));
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <gsm_hw_send_at_cmd+0x84>)
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	f7fa fcbb 	bl	800023c <strlen>
 80058c6:	4601      	mov	r1, r0
    usart1_hw_uart_send_raw(raw, length);
 80058c8:	4628      	mov	r0, r5
 80058ca:	f7ff fecd 	bl	8005668 <usart1_hw_uart_send_raw>
}
 80058ce:	e7f4      	b.n	80058ba <gsm_hw_send_at_cmd+0x5a>
        DEBUG_INFO("ATC: %s", cmd);
 80058d0:	f00e fd20 	bl	8014314 <sys_get_tick_ms>
 80058d4:	4601      	mov	r1, r0
 80058d6:	462b      	mov	r3, r5
 80058d8:	4a03      	ldr	r2, [pc, #12]	; (80058e8 <gsm_hw_send_at_cmd+0x88>)
 80058da:	4804      	ldr	r0, [pc, #16]	; (80058ec <gsm_hw_send_at_cmd+0x8c>)
 80058dc:	f00e fcec 	bl	80142b8 <app_debug_rtt_raw>
 80058e0:	e7cb      	b.n	800587a <gsm_hw_send_at_cmd+0x1a>
 80058e2:	bf00      	nop
 80058e4:	2000043c 	.word	0x2000043c
 80058e8:	08015e88 	.word	0x08015e88
 80058ec:	080162a0 	.word	0x080162a0

080058f0 <gsm_hw_layer_uart_fill_rx>:

uint32_t prev_index = 0;
void gsm_hw_layer_uart_fill_rx(uint8_t *data, uint32_t length)
{
	if (length)
 80058f0:	b901      	cbnz	r1, 80058f4 <gsm_hw_layer_uart_fill_rx+0x4>
 80058f2:	4770      	bx	lr
{
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	4604      	mov	r4, r0
 80058f8:	460d      	mov	r5, r1
	{			
		m_new_uart_data = true;
 80058fa:	4b21      	ldr	r3, [pc, #132]	; (8005980 <gsm_hw_layer_uart_fill_rx+0x90>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	701a      	strb	r2, [r3, #0]
        // Device do not enter AT mode =>> bypass data into PPP stack
        if (gsm_is_in_ppp_mode())
 8005900:	f7ff fe9a 	bl	8005638 <gsm_is_in_ppp_mode>
 8005904:	b1b8      	cbz	r0, 8005936 <gsm_hw_layer_uart_fill_rx+0x46>
 8005906:	4b1f      	ldr	r3, [pc, #124]	; (8005984 <gsm_hw_layer_uart_fill_rx+0x94>)
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	1e60      	subs	r0, r4, #1
 800590c:	4405      	add	r5, r0
        {
            for (uint32_t i = 0; i < length; i++)
            {
                m_gsm_modem_buffer.buffer[m_gsm_modem_buffer.idx_in++] = data[i];
 800590e:	491d      	ldr	r1, [pc, #116]	; (8005984 <gsm_hw_layer_uart_fill_rx+0x94>)
                if (m_gsm_modem_buffer.idx_in >= GSM_PPP_MODEM_BUFFER_SIZE)
                {
                    m_gsm_modem_buffer.idx_in = 0;
                }
                m_gsm_modem_buffer.buffer[m_gsm_modem_buffer.idx_in] = 0;
 8005910:	2600      	movs	r6, #0
                m_gsm_modem_buffer.buffer[m_gsm_modem_buffer.idx_in++] = data[i];
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	b292      	uxth	r2, r2
 8005916:	440b      	add	r3, r1
 8005918:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800591c:	711c      	strb	r4, [r3, #4]
 800591e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005922:	bf34      	ite	cc
 8005924:	4613      	movcc	r3, r2
 8005926:	2300      	movcs	r3, #0
                m_gsm_modem_buffer.buffer[m_gsm_modem_buffer.idx_in] = 0;
 8005928:	18ca      	adds	r2, r1, r3
 800592a:	7116      	strb	r6, [r2, #4]
            for (uint32_t i = 0; i < length; i++)
 800592c:	4285      	cmp	r5, r0
 800592e:	d1f0      	bne.n	8005912 <gsm_hw_layer_uart_fill_rx+0x22>
 8005930:	4a14      	ldr	r2, [pc, #80]	; (8005984 <gsm_hw_layer_uart_fill_rx+0x94>)
 8005932:	8013      	strh	r3, [r2, #0]
                    return;
                }
            }
        }
	}
}
 8005934:	bd70      	pop	{r4, r5, r6, pc}
            prev_index = m_gsm_atc.atc.recv_buff.index;
 8005936:	4b14      	ldr	r3, [pc, #80]	; (8005988 <gsm_hw_layer_uart_fill_rx+0x98>)
 8005938:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 800593c:	4b13      	ldr	r3, [pc, #76]	; (800598c <gsm_hw_layer_uart_fill_rx+0x9c>)
 800593e:	601a      	str	r2, [r3, #0]
            for (uint32_t i = 0; i < length; i++)
 8005940:	1e60      	subs	r0, r4, #1
 8005942:	4405      	add	r5, r0
                m_gsm_atc.atc.recv_buff.buffer[m_gsm_atc.atc.recv_buff.index++] = data[i];
 8005944:	4910      	ldr	r1, [pc, #64]	; (8005988 <gsm_hw_layer_uart_fill_rx+0x98>)
 8005946:	f8b1 2116 	ldrh.w	r2, [r1, #278]	; 0x116
 800594a:	1c53      	adds	r3, r2, #1
 800594c:	b29b      	uxth	r3, r3
 800594e:	f8a1 3116 	strh.w	r3, [r1, #278]	; 0x116
 8005952:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8005956:	440a      	add	r2, r1
 8005958:	7594      	strb	r4, [r2, #22]
                if (m_gsm_atc.atc.recv_buff.index >= sizeof(((gsm_atc_buffer_t*)0)->buffer))
 800595a:	2bff      	cmp	r3, #255	; 0xff
 800595c:	d802      	bhi.n	8005964 <gsm_hw_layer_uart_fill_rx+0x74>
            for (uint32_t i = 0; i < length; i++)
 800595e:	42a8      	cmp	r0, r5
 8005960:	d1f1      	bne.n	8005946 <gsm_hw_layer_uart_fill_rx+0x56>
 8005962:	e7e7      	b.n	8005934 <gsm_hw_layer_uart_fill_rx+0x44>
                    DEBUG_ERROR("GSM ATC RX overflow\r\n");
 8005964:	f00e fcd6 	bl	8014314 <sys_get_tick_ms>
 8005968:	4601      	mov	r1, r0
 800596a:	4a09      	ldr	r2, [pc, #36]	; (8005990 <gsm_hw_layer_uart_fill_rx+0xa0>)
 800596c:	4809      	ldr	r0, [pc, #36]	; (8005994 <gsm_hw_layer_uart_fill_rx+0xa4>)
 800596e:	f00e fca3 	bl	80142b8 <app_debug_rtt_raw>
                    m_gsm_atc.atc.recv_buff.index = 0;
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <gsm_hw_layer_uart_fill_rx+0x98>)
 8005974:	2200      	movs	r2, #0
 8005976:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                    m_gsm_atc.atc.recv_buff.buffer[0] = 0;
 800597a:	759a      	strb	r2, [r3, #22]
                    return;
 800597c:	e7da      	b.n	8005934 <gsm_hw_layer_uart_fill_rx+0x44>
 800597e:	bf00      	nop
 8005980:	20000970 	.word	0x20000970
 8005984:	20000568 	.word	0x20000568
 8005988:	2000043c 	.word	0x2000043c
 800598c:	200009bc 	.word	0x200009bc
 8005990:	08015e88 	.word	0x08015e88
 8005994:	080162c4 	.word	0x080162c4

08005998 <gsm_hardware_layer_copy_ppp_buffer>:

uint32_t gsm_hardware_layer_copy_ppp_buffer(uint8_t *data, uint32_t len)
{
 8005998:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t i = 0;
    for (i = 0; i < len; i++)
 800599a:	460d      	mov	r5, r1
 800599c:	b301      	cbz	r1, 80059e0 <gsm_hardware_layer_copy_ppp_buffer+0x48>
 800599e:	4a11      	ldr	r2, [pc, #68]	; (80059e4 <gsm_hardware_layer_copy_ppp_buffer+0x4c>)
 80059a0:	8853      	ldrh	r3, [r2, #2]
    {
        if (m_gsm_modem_buffer.idx_out == m_gsm_modem_buffer.idx_in)
 80059a2:	8814      	ldrh	r4, [r2, #0]
 80059a4:	1e42      	subs	r2, r0, #1
 80059a6:	2100      	movs	r1, #0
    for (i = 0; i < len; i++)
 80059a8:	4608      	mov	r0, r1
        {
            return i;       // No more memory
        }
        data[i] = m_gsm_modem_buffer.buffer[m_gsm_modem_buffer.idx_out];
 80059aa:	4f0e      	ldr	r7, [pc, #56]	; (80059e4 <gsm_hardware_layer_copy_ppp_buffer+0x4c>)
 80059ac:	2601      	movs	r6, #1
        if (m_gsm_modem_buffer.idx_out == m_gsm_modem_buffer.idx_in)
 80059ae:	429c      	cmp	r4, r3
 80059b0:	d011      	beq.n	80059d6 <gsm_hardware_layer_copy_ppp_buffer+0x3e>
        data[i] = m_gsm_modem_buffer.buffer[m_gsm_modem_buffer.idx_out];
 80059b2:	18f9      	adds	r1, r7, r3
 80059b4:	7909      	ldrb	r1, [r1, #4]
 80059b6:	f802 1f01 	strb.w	r1, [r2, #1]!
        m_gsm_modem_buffer.idx_out++;
 80059ba:	3301      	adds	r3, #1
 80059bc:	b29b      	uxth	r3, r3
        if (m_gsm_modem_buffer.idx_out == GSM_PPP_MODEM_BUFFER_SIZE)
            m_gsm_modem_buffer.idx_out = 0;
 80059be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c2:	bf08      	it	eq
 80059c4:	2300      	moveq	r3, #0
    for (i = 0; i < len; i++)
 80059c6:	3001      	adds	r0, #1
 80059c8:	4631      	mov	r1, r6
 80059ca:	4285      	cmp	r5, r0
 80059cc:	d1ef      	bne.n	80059ae <gsm_hardware_layer_copy_ppp_buffer+0x16>
 80059ce:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <gsm_hardware_layer_copy_ppp_buffer+0x4c>)
 80059d0:	8053      	strh	r3, [r2, #2]
    }
    return i;
}
 80059d2:	bcf0      	pop	{r4, r5, r6, r7}
 80059d4:	4770      	bx	lr
 80059d6:	2900      	cmp	r1, #0
 80059d8:	d0fb      	beq.n	80059d2 <gsm_hardware_layer_copy_ppp_buffer+0x3a>
 80059da:	4a02      	ldr	r2, [pc, #8]	; (80059e4 <gsm_hardware_layer_copy_ppp_buffer+0x4c>)
 80059dc:	8053      	strh	r3, [r2, #2]
 80059de:	e7f8      	b.n	80059d2 <gsm_hardware_layer_copy_ppp_buffer+0x3a>
    for (i = 0; i < len; i++)
 80059e0:	4608      	mov	r0, r1
 80059e2:	e7f6      	b.n	80059d2 <gsm_hardware_layer_copy_ppp_buffer+0x3a>
 80059e4:	20000568 	.word	0x20000568

080059e8 <gsm_get_sim_imei>:

char *gsm_get_sim_imei(void)
{
	return m_sim_imei;
}
 80059e8:	4800      	ldr	r0, [pc, #0]	; (80059ec <gsm_get_sim_imei+0x4>)
 80059ea:	4770      	bx	lr
 80059ec:	200009ac 	.word	0x200009ac

080059f0 <gsm_get_sim_ccid>:

char *gsm_get_sim_ccid(void)
{
	return m_sim_ccid;
}
 80059f0:	4800      	ldr	r0, [pc, #0]	; (80059f4 <gsm_get_sim_ccid+0x4>)
 80059f2:	4770      	bx	lr
 80059f4:	20000994 	.word	0x20000994

080059f8 <gsm_get_module_imei>:

char *gsm_get_module_imei(void)
{
	return m_gsm_imei;
}
 80059f8:	4800      	ldr	r0, [pc, #0]	; (80059fc <gsm_get_module_imei+0x4>)
 80059fa:	4770      	bx	lr
 80059fc:	20000558 	.word	0x20000558

08005a00 <gsm_get_network_operator>:
}

char *gsm_get_network_operator(void)
{
	return m_nw_operator;
}
 8005a00:	4800      	ldr	r0, [pc, #0]	; (8005a04 <gsm_get_network_operator+0x4>)
 8005a02:	4770      	bx	lr
 8005a04:	20000974 	.word	0x20000974

08005a08 <gsm_utilities_get_imei>:
    *csq = gsm_utilities_get_number_from_string(6, tmp_buff);
    return true;
}

void gsm_utilities_get_imei(uint8_t *imei_buffer, uint8_t *result, uint8_t max_lenth)
{
 8005a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	4689      	mov	r9, r1
 8005a10:	4690      	mov	r8, r2
    uint8_t count = 0;
    uint8_t tmp_count = 0;

    for (count = 0; count < strlen((char *)imei_buffer); count++)
 8005a12:	2400      	movs	r4, #0
    uint8_t tmp_count = 0;
 8005a14:	4626      	mov	r6, r4
    for (count = 0; count < strlen((char *)imei_buffer); count++)
 8005a16:	e002      	b.n	8005a1e <gsm_utilities_get_imei+0x16>
        if (imei_buffer[count] >= '0' && imei_buffer[count] <= '9')
        {
            result[tmp_count++] = imei_buffer[count];
        }

        if (tmp_count >= max_lenth)
 8005a18:	3401      	adds	r4, #1
 8005a1a:	4546      	cmp	r6, r8
 8005a1c:	d210      	bcs.n	8005a40 <gsm_utilities_get_imei+0x38>
    for (count = 0; count < strlen((char *)imei_buffer); count++)
 8005a1e:	b2e5      	uxtb	r5, r4
 8005a20:	4638      	mov	r0, r7
 8005a22:	f7fa fc0b 	bl	800023c <strlen>
 8005a26:	42a8      	cmp	r0, r5
 8005a28:	d90f      	bls.n	8005a4a <gsm_utilities_get_imei+0x42>
        if (imei_buffer[count] >= '0' && imei_buffer[count] <= '9')
 8005a2a:	5d7a      	ldrb	r2, [r7, r5]
 8005a2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b09      	cmp	r3, #9
 8005a34:	d8f0      	bhi.n	8005a18 <gsm_utilities_get_imei+0x10>
            result[tmp_count++] = imei_buffer[count];
 8005a36:	1c73      	adds	r3, r6, #1
 8005a38:	f809 2006 	strb.w	r2, [r9, r6]
 8005a3c:	b2de      	uxtb	r6, r3
 8005a3e:	e7eb      	b.n	8005a18 <gsm_utilities_get_imei+0x10>
        {
            result[tmp_count-1] = 0;
 8005a40:	eb09 0306 	add.w	r3, r9, r6
 8005a44:	2200      	movs	r2, #0
 8005a46:	f803 2c01 	strb.w	r2, [r3, #-1]
            break;
        }
    }

    result[tmp_count] = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f809 3006 	strb.w	r3, [r9, r6]
}
 8005a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005a54 <gsm_utilities_get_sim_ccid>:

void gsm_utilities_get_sim_ccid(uint8_t *imei_buffer, uint8_t *result, uint8_t max_lenth)
{
 8005a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	468a      	mov	sl, r1
 8005a5a:	4690      	mov	r8, r2
	/* +QCCID: 8984012012120000151F\r\nOK\r\n*/
	char *p = strstr((char*)imei_buffer, "+QCCID: ");
 8005a5c:	4916      	ldr	r1, [pc, #88]	; (8005ab8 <gsm_utilities_get_sim_ccid+0x64>)
 8005a5e:	f00e fd31 	bl	80144c4 <strstr>
	if (p == NULL)
 8005a62:	b328      	cbz	r0, 8005ab0 <gsm_utilities_get_sim_ccid+0x5c>
 8005a64:	4606      	mov	r6, r0
	{
		*result = 0;
		return;
	}
	p += strlen("+QCCID: ");
 8005a66:	f100 0908 	add.w	r9, r0, #8
	
    uint8_t count = 0;
    uint8_t tmp_count = 0;

    for (count = 0; count < strlen((char *)p); count++)
 8005a6a:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005a6e:	3607      	adds	r6, #7
 8005a70:	2400      	movs	r4, #0
 8005a72:	b2e5      	uxtb	r5, r4
 8005a74:	4648      	mov	r0, r9
 8005a76:	f7fa fbe1 	bl	800023c <strlen>
 8005a7a:	42a0      	cmp	r0, r4
 8005a7c:	d913      	bls.n	8005aa6 <gsm_utilities_get_sim_ccid+0x52>
    {
        if (p[count] >= '0' && p[count] <= '9')
 8005a7e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8005a82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b09      	cmp	r3, #9
 8005a8a:	d80c      	bhi.n	8005aa6 <gsm_utilities_get_sim_ccid+0x52>
        {
            result[tmp_count++] = p[count];
 8005a8c:	3501      	adds	r5, #1
 8005a8e:	b2ed      	uxtb	r5, r5
 8005a90:	f807 2f01 	strb.w	r2, [r7, #1]!
        }
		else
		{
			break;
		}
        if (tmp_count >= max_lenth)
 8005a94:	3401      	adds	r4, #1
 8005a96:	b2e3      	uxtb	r3, r4
 8005a98:	4598      	cmp	r8, r3
 8005a9a:	d8ea      	bhi.n	8005a72 <gsm_utilities_get_sim_ccid+0x1e>
        {
            result[tmp_count-1] = 0;
 8005a9c:	eb0a 0305 	add.w	r3, sl, r5
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f803 2c01 	strb.w	r2, [r3, #-1]
            break;
        }
    }

    result[tmp_count] = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f80a 3005 	strb.w	r3, [sl, r5]
}
 8005aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*result = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f88a 3000 	strb.w	r3, [sl]
		return;
 8005ab6:	e7f9      	b.n	8005aac <gsm_utilities_get_sim_ccid+0x58>
 8005ab8:	080162f4 	.word	0x080162f4

08005abc <gsm_utilities_get_network_operator>:
 * @created	:	15/10/2015
 * @version	:
 * @reviewer:	
 */
void gsm_utilities_get_network_operator(char *buffer, char *nw_operator, uint8_t max_len)
{
 8005abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	4688      	mov	r8, r1
 8005ac4:	4691      	mov	r9, r2
	* +COPS: 0,0,"Viettel Viettel",7
	*
	* OK
	*/
#if 1
        *nw_operator = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	700b      	strb	r3, [r1, #0]
	char *tmp_buff = strstr(buffer, "+COPS:");
 8005aca:	4918      	ldr	r1, [pc, #96]	; (8005b2c <gsm_utilities_get_network_operator+0x70>)
 8005acc:	f00e fcfa 	bl	80144c4 <strstr>
	if(tmp_buff == NULL) return;	
 8005ad0:	b1c8      	cbz	r0, 8005b06 <gsm_utilities_get_network_operator+0x4a>
 8005ad2:	4607      	mov	r7, r0
	
	uint8_t comma_idx[5] = {0};
 8005ad4:	2600      	movs	r6, #0
 8005ad6:	9600      	str	r6, [sp, #0]
 8005ad8:	f88d 6004 	strb.w	r6, [sp, #4]
	uint8_t index = 0;
	for(uint8_t i = 0; i < strlen(tmp_buff); i++)
 8005adc:	4635      	mov	r5, r6
 8005ade:	e000      	b.n	8005ae2 <gsm_utilities_get_network_operator+0x26>
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	b2ec      	uxtb	r4, r5
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f7fa fba9 	bl	800023c <strlen>
 8005aea:	42a0      	cmp	r0, r4
 8005aec:	d909      	bls.n	8005b02 <gsm_utilities_get_network_operator+0x46>
	{
		if(tmp_buff[i] == '"') comma_idx[index++] = i;
 8005aee:	5d3b      	ldrb	r3, [r7, r4]
 8005af0:	2b22      	cmp	r3, #34	; 0x22
 8005af2:	d1f5      	bne.n	8005ae0 <gsm_utilities_get_network_operator+0x24>
 8005af4:	1c73      	adds	r3, r6, #1
 8005af6:	aa02      	add	r2, sp, #8
 8005af8:	4416      	add	r6, r2
 8005afa:	f806 4c08 	strb.w	r4, [r6, #-8]
 8005afe:	b2de      	uxtb	r6, r3
 8005b00:	e7ee      	b.n	8005ae0 <gsm_utilities_get_network_operator+0x24>
	}
	if(index >= 2)
 8005b02:	2e01      	cmp	r6, #1
 8005b04:	d802      	bhi.n	8005b0c <gsm_utilities_get_network_operator+0x50>
		
		//Copy operator name
		memcpy(nw_operator, &tmp_buff[comma_idx[0] + 1], length - 1);
	}
#endif
}
 8005b06:	b003      	add	sp, #12
 8005b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t length = comma_idx[1] - comma_idx[0];
 8005b0c:	f89d 1000 	ldrb.w	r1, [sp]
 8005b10:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005b14:	1a52      	subs	r2, r2, r1
 8005b16:	b2d2      	uxtb	r2, r2
		memcpy(nw_operator, &tmp_buff[comma_idx[0] + 1], length - 1);
 8005b18:	454a      	cmp	r2, r9
 8005b1a:	bf28      	it	cs
 8005b1c:	464a      	movcs	r2, r9
 8005b1e:	3101      	adds	r1, #1
 8005b20:	3a01      	subs	r2, #1
 8005b22:	4439      	add	r1, r7
 8005b24:	4640      	mov	r0, r8
 8005b26:	f00e fc33 	bl	8014390 <memcpy>
 8005b2a:	e7ec      	b.n	8005b06 <gsm_utilities_get_network_operator+0x4a>
 8005b2c:	08016300 	.word	0x08016300

08005b30 <gsm_utilities_get_number_from_string>:
 * 	Ham doc mot so trong chuoi bat dau tu dia chi nao do.
 *	Buffer = abc124mff thi gsm_utilities_get_number_from_string(3,Buffer) = 123
 *
 */
uint32_t gsm_utilities_get_number_from_string(uint16_t begin_index, char *buffer)
{
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4604      	mov	r4, r0
 8005b34:	460d      	mov	r5, r1
    // assert(buffer);

    uint32_t value = 0;
    uint16_t tmp = begin_index;
    uint32_t len = strlen(buffer);
 8005b36:	4608      	mov	r0, r1
 8005b38:	f7fa fb80 	bl	800023c <strlen>
    while (buffer[tmp] && tmp < len)
 8005b3c:	5d2b      	ldrb	r3, [r5, r4]
 8005b3e:	b1ab      	cbz	r3, 8005b6c <gsm_utilities_get_number_from_string+0x3c>
 8005b40:	4601      	mov	r1, r0
 8005b42:	42a0      	cmp	r0, r4
 8005b44:	d914      	bls.n	8005b70 <gsm_utilities_get_number_from_string+0x40>
    uint32_t value = 0;
 8005b46:	2000      	movs	r0, #0
    {
        if (buffer[tmp] >= '0' && buffer[tmp] <= '9')
 8005b48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	2a09      	cmp	r2, #9
 8005b50:	d80b      	bhi.n	8005b6a <gsm_utilities_get_number_from_string+0x3a>
        {
            value *= 10;
 8005b52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
            value += buffer[tmp] - 48;
 8005b56:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005b5a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
        }
        else
        {
            break;
        }
        tmp++;
 8005b5e:	3401      	adds	r4, #1
 8005b60:	b2a4      	uxth	r4, r4
    while (buffer[tmp] && tmp < len)
 8005b62:	5d2b      	ldrb	r3, [r5, r4]
 8005b64:	b10b      	cbz	r3, 8005b6a <gsm_utilities_get_number_from_string+0x3a>
 8005b66:	428c      	cmp	r4, r1
 8005b68:	d3ee      	bcc.n	8005b48 <gsm_utilities_get_number_from_string+0x18>
    }

    return value;
}
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t value = 0;
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	e7fc      	b.n	8005b6a <gsm_utilities_get_number_from_string+0x3a>
 8005b70:	2000      	movs	r0, #0
    return value;
 8005b72:	e7fa      	b.n	8005b6a <gsm_utilities_get_number_from_string+0x3a>

08005b74 <gsm_utilities_get_signal_strength_from_buffer>:
{
 8005b74:	b510      	push	{r4, lr}
 8005b76:	460c      	mov	r4, r1
    char *tmp_buff = strstr((char *)buffer, "+CSQ:");
 8005b78:	4906      	ldr	r1, [pc, #24]	; (8005b94 <gsm_utilities_get_signal_strength_from_buffer+0x20>)
 8005b7a:	f00e fca3 	bl	80144c4 <strstr>
    if (tmp_buff == NULL)
 8005b7e:	b130      	cbz	r0, 8005b8e <gsm_utilities_get_signal_strength_from_buffer+0x1a>
 8005b80:	4601      	mov	r1, r0
    *csq = gsm_utilities_get_number_from_string(6, tmp_buff);
 8005b82:	2006      	movs	r0, #6
 8005b84:	f7ff ffd4 	bl	8005b30 <gsm_utilities_get_number_from_string>
 8005b88:	7020      	strb	r0, [r4, #0]
    return true;
 8005b8a:	2001      	movs	r0, #1
}
 8005b8c:	bd10      	pop	{r4, pc}
        return false;
 8005b8e:	2000      	movs	r0, #0
 8005b90:	e7fc      	b.n	8005b8c <gsm_utilities_get_signal_strength_from_buffer+0x18>
 8005b92:	bf00      	nop
 8005b94:	08016308 	.word	0x08016308

08005b98 <gsm_utilities_get_network_access_tech>:
{
 8005b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	4688      	mov	r8, r1
    char *tmp_buff = strstr(buffer, "+CGREG:");
 8005ba0:	4919      	ldr	r1, [pc, #100]	; (8005c08 <gsm_utilities_get_network_access_tech+0x70>)
 8005ba2:	f00e fc8f 	bl	80144c4 <strstr>
    if (tmp_buff == NULL)
 8005ba6:	b368      	cbz	r0, 8005c04 <gsm_utilities_get_network_access_tech+0x6c>
 8005ba8:	4607      	mov	r7, r0
    uint8_t comma_idx[12] = {0};
 8005baa:	2600      	movs	r6, #0
 8005bac:	9601      	str	r6, [sp, #4]
 8005bae:	9602      	str	r6, [sp, #8]
 8005bb0:	9603      	str	r6, [sp, #12]
    for (uint8_t i = 0; i < strlen(tmp_buff); i++)
 8005bb2:	4635      	mov	r5, r6
 8005bb4:	e000      	b.n	8005bb8 <gsm_utilities_get_network_access_tech+0x20>
 8005bb6:	3501      	adds	r5, #1
 8005bb8:	b2ec      	uxtb	r4, r5
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f7fa fb3e 	bl	800023c <strlen>
 8005bc0:	42a0      	cmp	r0, r4
 8005bc2:	d909      	bls.n	8005bd8 <gsm_utilities_get_network_access_tech+0x40>
        if (tmp_buff[i] == ',')
 8005bc4:	5d3b      	ldrb	r3, [r7, r4]
 8005bc6:	2b2c      	cmp	r3, #44	; 0x2c
 8005bc8:	d1f5      	bne.n	8005bb6 <gsm_utilities_get_network_access_tech+0x1e>
            comma_idx[index++] = i;
 8005bca:	1c73      	adds	r3, r6, #1
 8005bcc:	aa04      	add	r2, sp, #16
 8005bce:	4416      	add	r6, r2
 8005bd0:	f806 4c0c 	strb.w	r4, [r6, #-12]
 8005bd4:	b2de      	uxtb	r6, r3
 8005bd6:	e7ee      	b.n	8005bb6 <gsm_utilities_get_network_access_tech+0x1e>
    if (index >= 4)
 8005bd8:	2e03      	cmp	r6, #3
 8005bda:	d803      	bhi.n	8005be4 <gsm_utilities_get_network_access_tech+0x4c>
    return false;
 8005bdc:	2000      	movs	r0, #0
}
 8005bde:	b004      	add	sp, #16
 8005be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *access_technology = gsm_utilities_get_number_from_string(comma_idx[3] + 1, tmp_buff);
 8005be4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005be8:	4639      	mov	r1, r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	f7ff ffa0 	bl	8005b30 <gsm_utilities_get_number_from_string>
 8005bf0:	b2c0      	uxtb	r0, r0
        if (*access_technology > 9)
 8005bf2:	2809      	cmp	r0, #9
        *access_technology = gsm_utilities_get_number_from_string(comma_idx[3] + 1, tmp_buff);
 8005bf4:	bf92      	itee	ls
 8005bf6:	f888 0000 	strbls.w	r0, [r8]
            *access_technology  = 9;
 8005bfa:	2309      	movhi	r3, #9
 8005bfc:	f888 3000 	strbhi.w	r3, [r8]
        return true;
 8005c00:	2001      	movs	r0, #1
 8005c02:	e7ec      	b.n	8005bde <gsm_utilities_get_network_access_tech+0x46>
        return false;
 8005c04:	2000      	movs	r0, #0
 8005c06:	e7ea      	b.n	8005bde <gsm_utilities_get_network_access_tech+0x46>
 8005c08:	08016310 	.word	0x08016310

08005c0c <mqtt_pub_request_cb>:
/* -----------------------------------------------------------------
4. Using outgoing publish
*/
/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 8005c0c:	b510      	push	{r4, lr}
    if (result != ERR_OK)
 8005c0e:	b149      	cbz	r1, 8005c24 <mqtt_pub_request_cb+0x18>
 8005c10:	460c      	mov	r4, r1
    {
        DEBUG_INFO("Publish result: %d\r\n", result);
 8005c12:	f00e fb7f 	bl	8014314 <sys_get_tick_ms>
 8005c16:	4601      	mov	r1, r0
 8005c18:	4623      	mov	r3, r4
 8005c1a:	4a06      	ldr	r2, [pc, #24]	; (8005c34 <mqtt_pub_request_cb+0x28>)
 8005c1c:	4806      	ldr	r0, [pc, #24]	; (8005c38 <mqtt_pub_request_cb+0x2c>)
 8005c1e:	f00e fb4b 	bl	80142b8 <app_debug_rtt_raw>
    }
    else
    {
        DEBUG_INFO("Publish: OK\r\n");
    }
}
 8005c22:	bd10      	pop	{r4, pc}
        DEBUG_INFO("Publish: OK\r\n");
 8005c24:	f00e fb76 	bl	8014314 <sys_get_tick_ms>
 8005c28:	4601      	mov	r1, r0
 8005c2a:	4a02      	ldr	r2, [pc, #8]	; (8005c34 <mqtt_pub_request_cb+0x28>)
 8005c2c:	4803      	ldr	r0, [pc, #12]	; (8005c3c <mqtt_pub_request_cb+0x30>)
 8005c2e:	f00e fb43 	bl	80142b8 <app_debug_rtt_raw>
}
 8005c32:	e7f6      	b.n	8005c22 <mqtt_pub_request_cb+0x16>
 8005c34:	08015e88 	.word	0x08015e88
 8005c38:	08016318 	.word	0x08016318
 8005c3c:	08016348 	.word	0x08016348

08005c40 <mqtt_dns_found>:

/**
 * @brief DNS found callback when using DNS names as server address.
 */
static void mqtt_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg)
{
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4605      	mov	r5, r0
 8005c44:	460c      	mov	r4, r1
    DEBUG_INFO("mqtt_dns_found: %s\r\n", hostname);
 8005c46:	f00e fb65 	bl	8014314 <sys_get_tick_ms>
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	462b      	mov	r3, r5
 8005c4e:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <mqtt_dns_found+0x58>)
 8005c50:	4812      	ldr	r0, [pc, #72]	; (8005c9c <mqtt_dns_found+0x5c>)
 8005c52:	f00e fb31 	bl	80142b8 <app_debug_rtt_raw>

    LWIP_UNUSED_ARG(hostname);
    LWIP_UNUSED_ARG(arg);

    if (ipaddr != NULL)
 8005c56:	b1a4      	cbz	r4, 8005c82 <mqtt_dns_found+0x42>
    {
        /* Address resolved, send request */
        m_mqtt_server_address.addr = ipaddr->addr;
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	4d11      	ldr	r5, [pc, #68]	; (8005ca0 <mqtt_dns_found+0x60>)
 8005c5c:	602b      	str	r3, [r5, #0]
        DEBUG_INFO("Server address resolved = %s\r\n", ipaddr_ntoa(&m_mqtt_server_address));
 8005c5e:	f00e fb59 	bl	8014314 <sys_get_tick_ms>
 8005c62:	4604      	mov	r4, r0
 8005c64:	4628      	mov	r0, r5
 8005c66:	f009 f945 	bl	800eef4 <ip4addr_ntoa>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <mqtt_dns_found+0x58>)
 8005c6e:	4621      	mov	r1, r4
 8005c70:	480c      	ldr	r0, [pc, #48]	; (8005ca4 <mqtt_dns_found+0x64>)
 8005c72:	f00e fb21 	bl	80142b8 <app_debug_rtt_raw>
        m_is_dns_resolved = 1;
 8005c76:	2301      	movs	r3, #1
 8005c78:	4a0b      	ldr	r2, [pc, #44]	; (8005ca8 <mqtt_dns_found+0x68>)
 8005c7a:	7013      	strb	r3, [r2, #0]
        m_mqtt_process_now = true;
 8005c7c:	4a0b      	ldr	r2, [pc, #44]	; (8005cac <mqtt_dns_found+0x6c>)
 8005c7e:	7013      	strb	r3, [r2, #0]
    {
        /* DNS resolving failed -> try another server */
        DEBUG_INFO("mqtt_dns_found: Failed to resolve server address resolved, trying next server\r\n");
        m_is_dns_resolved = 0;
    }
}
 8005c80:	bd38      	pop	{r3, r4, r5, pc}
        DEBUG_INFO("mqtt_dns_found: Failed to resolve server address resolved, trying next server\r\n");
 8005c82:	f00e fb47 	bl	8014314 <sys_get_tick_ms>
 8005c86:	4601      	mov	r1, r0
 8005c88:	4a03      	ldr	r2, [pc, #12]	; (8005c98 <mqtt_dns_found+0x58>)
 8005c8a:	4809      	ldr	r0, [pc, #36]	; (8005cb0 <mqtt_dns_found+0x70>)
 8005c8c:	f00e fb14 	bl	80142b8 <app_debug_rtt_raw>
        m_is_dns_resolved = 0;
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <mqtt_dns_found+0x68>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	701a      	strb	r2, [r3, #0]
}
 8005c96:	e7f3      	b.n	8005c80 <mqtt_dns_found+0x40>
 8005c98:	08015e88 	.word	0x08015e88
 8005c9c:	08016370 	.word	0x08016370
 8005ca0:	20000a18 	.word	0x20000a18
 8005ca4:	080163a0 	.word	0x080163a0
 8005ca8:	200009e4 	.word	0x200009e4
 8005cac:	200009e7 	.word	0x200009e7
 8005cb0:	080163d8 	.word	0x080163d8

08005cb4 <mqtt_client_connection_callback>:
{
 8005cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	4605      	mov	r5, r0
 8005cbc:	460e      	mov	r6, r1
 8005cbe:	4614      	mov	r4, r2
    DEBUG_INFO("mqtt_client_connection_callback reason: %d\r\n", status);
 8005cc0:	f00e fb28 	bl	8014314 <sys_get_tick_ms>
 8005cc4:	4601      	mov	r1, r0
 8005cc6:	4623      	mov	r3, r4
 8005cc8:	4a23      	ldr	r2, [pc, #140]	; (8005d58 <mqtt_client_connection_callback+0xa4>)
 8005cca:	4824      	ldr	r0, [pc, #144]	; (8005d5c <mqtt_client_connection_callback+0xa8>)
 8005ccc:	f00e faf4 	bl	80142b8 <app_debug_rtt_raw>
    if (status == MQTT_CONNECT_ACCEPTED)
 8005cd0:	bb84      	cbnz	r4, 8005d34 <mqtt_client_connection_callback+0x80>
        DEBUG_INFO("mqtt_connection_cb: Successfully connected\r\n");
 8005cd2:	f00e fb1f 	bl	8014314 <sys_get_tick_ms>
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8005d58 <mqtt_client_connection_callback+0xa4>
 8005cdc:	4642      	mov	r2, r8
 8005cde:	4820      	ldr	r0, [pc, #128]	; (8005d60 <mqtt_client_connection_callback+0xac>)
 8005ce0:	f00e faea 	bl	80142b8 <app_debug_rtt_raw>
        m_mqtt_process_now = true;
 8005ce4:	2401      	movs	r4, #1
 8005ce6:	4b1f      	ldr	r3, [pc, #124]	; (8005d64 <mqtt_client_connection_callback+0xb0>)
 8005ce8:	701c      	strb	r4, [r3, #0]
        m_mqtt_state = MQTT_CLIENT_STATE_CONNECTED;
 8005cea:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <mqtt_client_connection_callback+0xb4>)
 8005cec:	2203      	movs	r2, #3
 8005cee:	701a      	strb	r2, [r3, #0]
        mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8005cf0:	4633      	mov	r3, r6
 8005cf2:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <mqtt_client_connection_callback+0xb8>)
 8005cf4:	491e      	ldr	r1, [pc, #120]	; (8005d70 <mqtt_client_connection_callback+0xbc>)
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f001 f9d6 	bl	80070a8 <mqtt_set_inpub_callback>
        DEBUG_INFO("Subscribe %s\r\n", m_mqtt_subscribe_topic_name);
 8005cfc:	f00e fb0a 	bl	8014314 <sys_get_tick_ms>
 8005d00:	4601      	mov	r1, r0
 8005d02:	4f1c      	ldr	r7, [pc, #112]	; (8005d74 <mqtt_client_connection_callback+0xc0>)
 8005d04:	463b      	mov	r3, r7
 8005d06:	4642      	mov	r2, r8
 8005d08:	481b      	ldr	r0, [pc, #108]	; (8005d78 <mqtt_client_connection_callback+0xc4>)
 8005d0a:	f00e fad5 	bl	80142b8 <app_debug_rtt_raw>
        err = mqtt_subscribe(client, m_mqtt_subscribe_topic_name, SUB_QoS, mqtt_sub_request_cb, arg);
 8005d0e:	9401      	str	r4, [sp, #4]
 8005d10:	9600      	str	r6, [sp, #0]
 8005d12:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <mqtt_client_connection_callback+0xc8>)
 8005d14:	4622      	mov	r2, r4
 8005d16:	4639      	mov	r1, r7
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f001 f903 	bl	8006f24 <mqtt_sub_unsub>
        if (err != ERR_OK)
 8005d1e:	4604      	mov	r4, r0
 8005d20:	b1b0      	cbz	r0, 8005d50 <mqtt_client_connection_callback+0x9c>
            DEBUG_INFO("mqtt_subscribe return: %d\r\n", err);
 8005d22:	f00e faf7 	bl	8014314 <sys_get_tick_ms>
 8005d26:	4601      	mov	r1, r0
 8005d28:	4623      	mov	r3, r4
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	4814      	ldr	r0, [pc, #80]	; (8005d80 <mqtt_client_connection_callback+0xcc>)
 8005d2e:	f00e fac3 	bl	80142b8 <app_debug_rtt_raw>
 8005d32:	e00d      	b.n	8005d50 <mqtt_client_connection_callback+0x9c>
        DEBUG_INFO("[%s] mqtt connection status %d\r\n", __FUNCTION__);
 8005d34:	f00e faee 	bl	8014314 <sys_get_tick_ms>
 8005d38:	4601      	mov	r1, r0
 8005d3a:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <mqtt_client_connection_callback+0xd0>)
 8005d3c:	4a06      	ldr	r2, [pc, #24]	; (8005d58 <mqtt_client_connection_callback+0xa4>)
 8005d3e:	4812      	ldr	r0, [pc, #72]	; (8005d88 <mqtt_client_connection_callback+0xd4>)
 8005d40:	f00e faba 	bl	80142b8 <app_debug_rtt_raw>
        mqtt_disconnect(&m_mqtt_static_client);
 8005d44:	4811      	ldr	r0, [pc, #68]	; (8005d8c <mqtt_client_connection_callback+0xd8>)
 8005d46:	f001 fbb7 	bl	80074b8 <mqtt_disconnect>
        m_mqtt_state = MQTT_CLIENT_STATE_DISCONNECTED;
 8005d4a:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <mqtt_client_connection_callback+0xb4>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
}
 8005d50:	b002      	add	sp, #8
 8005d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d56:	bf00      	nop
 8005d58:	08015e88 	.word	0x08015e88
 8005d5c:	08016444 	.word	0x08016444
 8005d60:	0801648c 	.word	0x0801648c
 8005d64:	200009e7 	.word	0x200009e7
 8005d68:	20000a1c 	.word	0x20000a1c
 8005d6c:	08005e35 	.word	0x08005e35
 8005d70:	08005eed 	.word	0x08005eed
 8005d74:	20000c10 	.word	0x20000c10
 8005d78:	080164d4 	.word	0x080164d4
 8005d7c:	08005d91 	.word	0x08005d91
 8005d80:	080164fc 	.word	0x080164fc
 8005d84:	080169a8 	.word	0x080169a8
 8005d88:	08016534 	.word	0x08016534
 8005d8c:	20000a20 	.word	0x20000a20

08005d90 <mqtt_sub_request_cb>:
{
 8005d90:	b510      	push	{r4, lr}
 8005d92:	b082      	sub	sp, #8
    if (result != ERR_OK)
 8005d94:	b351      	cbz	r1, 8005dec <mqtt_sub_request_cb+0x5c>
 8005d96:	4604      	mov	r4, r0
        DEBUG_INFO("Retry send subscribe...\r\n");
 8005d98:	f00e fabc 	bl	8014314 <sys_get_tick_ms>
 8005d9c:	4601      	mov	r1, r0
 8005d9e:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <mqtt_sub_request_cb+0x7c>)
 8005da0:	481b      	ldr	r0, [pc, #108]	; (8005e10 <mqtt_sub_request_cb+0x80>)
 8005da2:	f00e fa89 	bl	80142b8 <app_debug_rtt_raw>
        m_sub_req_err_count++;
 8005da6:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <mqtt_sub_request_cb+0x84>)
 8005da8:	7813      	ldrb	r3, [r2, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	7013      	strb	r3, [r2, #0]
        if (m_sub_req_err_count >= 5)
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d908      	bls.n	8005dc6 <mqtt_sub_request_cb+0x36>
            mqtt_disconnect(&m_mqtt_static_client);
 8005db4:	4818      	ldr	r0, [pc, #96]	; (8005e18 <mqtt_sub_request_cb+0x88>)
 8005db6:	f001 fb7f 	bl	80074b8 <mqtt_disconnect>
            m_sub_req_err_count = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <mqtt_sub_request_cb+0x84>)
 8005dbe:	7013      	strb	r3, [r2, #0]
            m_mqtt_state = MQTT_CLIENT_STATE_DISCONNECTED;
 8005dc0:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <mqtt_sub_request_cb+0x8c>)
 8005dc2:	7013      	strb	r3, [r2, #0]
 8005dc4:	e01f      	b.n	8005e06 <mqtt_sub_request_cb+0x76>
            err_t err = mqtt_subscribe(&m_mqtt_static_client,
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	9201      	str	r2, [sp, #4]
 8005dca:	9400      	str	r4, [sp, #0]
 8005dcc:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <mqtt_sub_request_cb+0x90>)
 8005dce:	4915      	ldr	r1, [pc, #84]	; (8005e24 <mqtt_sub_request_cb+0x94>)
 8005dd0:	4811      	ldr	r0, [pc, #68]	; (8005e18 <mqtt_sub_request_cb+0x88>)
 8005dd2:	f001 f8a7 	bl	8006f24 <mqtt_sub_unsub>
            if (err != ERR_OK)
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	b1a8      	cbz	r0, 8005e06 <mqtt_sub_request_cb+0x76>
                DEBUG_INFO("mqtt_subscribe error %d\r\n", err);
 8005dda:	f00e fa9b 	bl	8014314 <sys_get_tick_ms>
 8005dde:	4601      	mov	r1, r0
 8005de0:	4623      	mov	r3, r4
 8005de2:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <mqtt_sub_request_cb+0x7c>)
 8005de4:	4810      	ldr	r0, [pc, #64]	; (8005e28 <mqtt_sub_request_cb+0x98>)
 8005de6:	f00e fa67 	bl	80142b8 <app_debug_rtt_raw>
 8005dea:	e00c      	b.n	8005e06 <mqtt_sub_request_cb+0x76>
        m_sub_req_err_count = 0;
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <mqtt_sub_request_cb+0x84>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]
        m_mqtt_process_now = true;
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <mqtt_sub_request_cb+0x9c>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]
        DEBUG_INFO("Subscribed\r\n");
 8005df8:	f00e fa8c 	bl	8014314 <sys_get_tick_ms>
 8005dfc:	4601      	mov	r1, r0
 8005dfe:	4a03      	ldr	r2, [pc, #12]	; (8005e0c <mqtt_sub_request_cb+0x7c>)
 8005e00:	480b      	ldr	r0, [pc, #44]	; (8005e30 <mqtt_sub_request_cb+0xa0>)
 8005e02:	f00e fa59 	bl	80142b8 <app_debug_rtt_raw>
}
 8005e06:	b002      	add	sp, #8
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08015e88 	.word	0x08015e88
 8005e10:	08016570 	.word	0x08016570
 8005e14:	20000d40 	.word	0x20000d40
 8005e18:	20000a20 	.word	0x20000a20
 8005e1c:	20000a1c 	.word	0x20000a1c
 8005e20:	08005d91 	.word	0x08005d91
 8005e24:	20000c10 	.word	0x20000c10
 8005e28:	080165a4 	.word	0x080165a4
 8005e2c:	200009e7 	.word	0x200009e7
 8005e30:	080165d8 	.word	0x080165d8

08005e34 <mqtt_incoming_data_cb>:
{
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	460e      	mov	r6, r1
 8005e3a:	4615      	mov	r5, r2
 8005e3c:	461c      	mov	r4, r3
    DEBUG_INFO("MQTT data cb, length %d, flags %u\r\n", len, (unsigned int)flags);
 8005e3e:	f00e fa69 	bl	8014314 <sys_get_tick_ms>
 8005e42:	9400      	str	r4, [sp, #0]
 8005e44:	462b      	mov	r3, r5
 8005e46:	4a1f      	ldr	r2, [pc, #124]	; (8005ec4 <mqtt_incoming_data_cb+0x90>)
 8005e48:	4601      	mov	r1, r0
 8005e4a:	481f      	ldr	r0, [pc, #124]	; (8005ec8 <mqtt_incoming_data_cb+0x94>)
 8005e4c:	f00e fa34 	bl	80142b8 <app_debug_rtt_raw>
    if (flags & MQTT_DATA_FLAG_LAST)
 8005e50:	f014 0f01 	tst.w	r4, #1
 8005e54:	d101      	bne.n	8005e5a <mqtt_incoming_data_cb+0x26>
}
 8005e56:	b002      	add	sp, #8
 8005e58:	bd70      	pop	{r4, r5, r6, pc}
        DEBUG_INFO("Payload data: %s\r\n", (const char *)data);
 8005e5a:	f00e fa5b 	bl	8014314 <sys_get_tick_ms>
 8005e5e:	4601      	mov	r1, r0
 8005e60:	4633      	mov	r3, r6
 8005e62:	4a18      	ldr	r2, [pc, #96]	; (8005ec4 <mqtt_incoming_data_cb+0x90>)
 8005e64:	4819      	ldr	r0, [pc, #100]	; (8005ecc <mqtt_incoming_data_cb+0x98>)
 8005e66:	f00e fa27 	bl	80142b8 <app_debug_rtt_raw>
        if (m_is_valid_sub_topic == 1)
 8005e6a:	4b19      	ldr	r3, [pc, #100]	; (8005ed0 <mqtt_incoming_data_cb+0x9c>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d10e      	bne.n	8005e90 <mqtt_incoming_data_cb+0x5c>
            m_is_valid_sub_topic = 0;
 8005e72:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <mqtt_incoming_data_cb+0x9c>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	701a      	strb	r2, [r3, #0]
            if (strstr((char *)data, "UDFW,"))
 8005e78:	4916      	ldr	r1, [pc, #88]	; (8005ed4 <mqtt_incoming_data_cb+0xa0>)
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f00e fb22 	bl	80144c4 <strstr>
 8005e80:	b160      	cbz	r0, 8005e9c <mqtt_incoming_data_cb+0x68>
                DEBUG_INFO("Update firmware\r\n");
 8005e82:	f00e fa47 	bl	8014314 <sys_get_tick_ms>
 8005e86:	4601      	mov	r1, r0
 8005e88:	4a0e      	ldr	r2, [pc, #56]	; (8005ec4 <mqtt_incoming_data_cb+0x90>)
 8005e8a:	4813      	ldr	r0, [pc, #76]	; (8005ed8 <mqtt_incoming_data_cb+0xa4>)
 8005e8c:	f00e fa14 	bl	80142b8 <app_debug_rtt_raw>
        memset(m_mqtt_static_client.rx_buffer, 0, MQTT_VAR_HEADER_BUFFER_LEN);
 8005e90:	2280      	movs	r2, #128	; 0x80
 8005e92:	2100      	movs	r1, #0
 8005e94:	4811      	ldr	r0, [pc, #68]	; (8005edc <mqtt_incoming_data_cb+0xa8>)
 8005e96:	f00e faa3 	bl	80143e0 <memset>
}
 8005e9a:	e7dc      	b.n	8005e56 <mqtt_incoming_data_cb+0x22>
            else if (strstr((char *)data, "PLEASE RESET"))
 8005e9c:	4910      	ldr	r1, [pc, #64]	; (8005ee0 <mqtt_incoming_data_cb+0xac>)
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f00e fb10 	bl	80144c4 <strstr>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d0f3      	beq.n	8005e90 <mqtt_incoming_data_cb+0x5c>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ea8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005eac:	490d      	ldr	r1, [pc, #52]	; (8005ee4 <mqtt_incoming_data_cb+0xb0>)
 8005eae:	68ca      	ldr	r2, [r1, #12]
 8005eb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <mqtt_incoming_data_cb+0xb4>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60cb      	str	r3, [r1, #12]
 8005eba:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005ebe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8005ec0:	e7fd      	b.n	8005ebe <mqtt_incoming_data_cb+0x8a>
 8005ec2:	bf00      	nop
 8005ec4:	08015e88 	.word	0x08015e88
 8005ec8:	08016600 	.word	0x08016600
 8005ecc:	08016640 	.word	0x08016640
 8005ed0:	200009e5 	.word	0x200009e5
 8005ed4:	0801666c 	.word	0x0801666c
 8005ed8:	08016674 	.word	0x08016674
 8005edc:	20000a8c 	.word	0x20000a8c
 8005ee0:	080166a0 	.word	0x080166a0
 8005ee4:	e000ed00 	.word	0xe000ed00
 8005ee8:	05fa0004 	.word	0x05fa0004

08005eec <mqtt_incoming_publish_cb>:
{
 8005eec:	b530      	push	{r4, r5, lr}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	4615      	mov	r5, r2
    DEBUG_INFO("MQTT publish cb topic %s, length %u\r\n", topic, (unsigned int)tot_len);
 8005ef4:	f00e fa0e 	bl	8014314 <sys_get_tick_ms>
 8005ef8:	4601      	mov	r1, r0
 8005efa:	9500      	str	r5, [sp, #0]
 8005efc:	4623      	mov	r3, r4
 8005efe:	4a07      	ldr	r2, [pc, #28]	; (8005f1c <mqtt_incoming_publish_cb+0x30>)
 8005f00:	4807      	ldr	r0, [pc, #28]	; (8005f20 <mqtt_incoming_publish_cb+0x34>)
 8005f02:	f00e f9d9 	bl	80142b8 <app_debug_rtt_raw>
    if (strcmp(topic, m_mqtt_subscribe_topic_name) == 0)
 8005f06:	4907      	ldr	r1, [pc, #28]	; (8005f24 <mqtt_incoming_publish_cb+0x38>)
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f7fa f98d 	bl	8000228 <strcmp>
 8005f0e:	fab0 f080 	clz	r0, r0
 8005f12:	0940      	lsrs	r0, r0, #5
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <mqtt_incoming_publish_cb+0x3c>)
 8005f16:	7018      	strb	r0, [r3, #0]
}
 8005f18:	b003      	add	sp, #12
 8005f1a:	bd30      	pop	{r4, r5, pc}
 8005f1c:	08015e88 	.word	0x08015e88
 8005f20:	080166b0 	.word	0x080166b0
 8005f24:	20000c10 	.word	0x20000c10
 8005f28:	200009e5 	.word	0x200009e5

08005f2c <mqtt_client_polling_task>:

/**
 * @note Task call every 1s
 */
void mqtt_client_polling_task(void *arg)
{
 8005f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f30:	b08c      	sub	sp, #48	; 0x30
    static uint8_t mqtt_tick = 0;
    static uint32_t tick = 0, last_time_send_sub_request = 0, last_time_send_hearbeat = 0;
    static uint32_t m_current_tick;
    uint32_t now = sys_get_tick_ms();
 8005f32:	f00e f9ef 	bl	8014314 <sys_get_tick_ms>
 8005f36:	4604      	mov	r4, r0

    if ((now - m_current_tick >= (uint32_t)1000) || m_mqtt_process_now)
 8005f38:	4ba2      	ldr	r3, [pc, #648]	; (80061c4 <mqtt_client_polling_task+0x298>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	1ac3      	subs	r3, r0, r3
 8005f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f42:	d203      	bcs.n	8005f4c <mqtt_client_polling_task+0x20>
 8005f44:	4ba0      	ldr	r3, [pc, #640]	; (80061c8 <mqtt_client_polling_task+0x29c>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d03d      	beq.n	8005fc8 <mqtt_client_polling_task+0x9c>
    {
        m_mqtt_process_now = false;
 8005f4c:	4b9e      	ldr	r3, [pc, #632]	; (80061c8 <mqtt_client_polling_task+0x29c>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	701a      	strb	r2, [r3, #0]
        m_current_tick = now;
 8005f52:	4b9c      	ldr	r3, [pc, #624]	; (80061c4 <mqtt_client_polling_task+0x298>)
 8005f54:	601c      	str	r4, [r3, #0]
    {
        return;
    }

    static bool m_mqtt_allow = false;
    if (gsm_data_layer_is_ppp_connected())
 8005f56:	f7ff fb79 	bl	800564c <gsm_data_layer_is_ppp_connected>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d02b      	beq.n	8005fb6 <mqtt_client_polling_task+0x8a>
    {
        if (m_mqtt_allow == false)
 8005f5e:	4b9b      	ldr	r3, [pc, #620]	; (80061cc <mqtt_client_polling_task+0x2a0>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	b173      	cbz	r3, 8005f82 <mqtt_client_polling_task+0x56>
        m_mqtt_allow = false;
    }

    if (m_mqtt_allow)
    {
        mqtt_tick++;
 8005f64:	4a9a      	ldr	r2, [pc, #616]	; (80061d0 <mqtt_client_polling_task+0x2a4>)
 8005f66:	7813      	ldrb	r3, [r2, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	7013      	strb	r3, [r2, #0]
        switch (m_mqtt_state)
 8005f6e:	4a99      	ldr	r2, [pc, #612]	; (80061d4 <mqtt_client_polling_task+0x2a8>)
 8005f70:	7812      	ldrb	r2, [r2, #0]
 8005f72:	2a03      	cmp	r2, #3
 8005f74:	d828      	bhi.n	8005fc8 <mqtt_client_polling_task+0x9c>
 8005f76:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005f7a:	0032      	.short	0x0032
 8005f7c:	0077003c 	.word	0x0077003c
 8005f80:	00ce      	.short	0x00ce
            m_mqtt_allow = true;
 8005f82:	4b92      	ldr	r3, [pc, #584]	; (80061cc <mqtt_client_polling_task+0x2a0>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	701a      	strb	r2, [r3, #0]
            if (mqtt_client_is_connected(&m_mqtt_static_client))
 8005f88:	4893      	ldr	r0, [pc, #588]	; (80061d8 <mqtt_client_polling_task+0x2ac>)
 8005f8a:	f001 faaf 	bl	80074ec <mqtt_client_is_connected>
 8005f8e:	b958      	cbnz	r0, 8005fa8 <mqtt_client_polling_task+0x7c>
            DEBUG_INFO("MQTT thread started\r\n");
 8005f90:	f00e f9c0 	bl	8014314 <sys_get_tick_ms>
 8005f94:	4601      	mov	r1, r0
 8005f96:	4a91      	ldr	r2, [pc, #580]	; (80061dc <mqtt_client_polling_task+0x2b0>)
 8005f98:	4891      	ldr	r0, [pc, #580]	; (80061e0 <mqtt_client_polling_task+0x2b4>)
 8005f9a:	f00e f98d 	bl	80142b8 <app_debug_rtt_raw>
    if (m_mqtt_allow)
 8005f9e:	4b8b      	ldr	r3, [pc, #556]	; (80061cc <mqtt_client_polling_task+0x2a0>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1de      	bne.n	8005f64 <mqtt_client_polling_task+0x38>
 8005fa6:	e00c      	b.n	8005fc2 <mqtt_client_polling_task+0x96>
                mqtt_disconnect(&m_mqtt_static_client);
 8005fa8:	488b      	ldr	r0, [pc, #556]	; (80061d8 <mqtt_client_polling_task+0x2ac>)
 8005faa:	f001 fa85 	bl	80074b8 <mqtt_disconnect>
                m_mqtt_state = MQTT_CLIENT_STATE_DISCONNECTED;
 8005fae:	4b89      	ldr	r3, [pc, #548]	; (80061d4 <mqtt_client_polling_task+0x2a8>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	e7ec      	b.n	8005f90 <mqtt_client_polling_task+0x64>
        if (m_mqtt_allow)
 8005fb6:	4b85      	ldr	r3, [pc, #532]	; (80061cc <mqtt_client_polling_task+0x2a0>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	b943      	cbnz	r3, 8005fce <mqtt_client_polling_task+0xa2>
        m_mqtt_allow = false;
 8005fbc:	4b83      	ldr	r3, [pc, #524]	; (80061cc <mqtt_client_polling_task+0x2a0>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]
            break;
        }
    }
    else
    {
        mqtt_tick = 4;
 8005fc2:	4b83      	ldr	r3, [pc, #524]	; (80061d0 <mqtt_client_polling_task+0x2a4>)
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	701a      	strb	r2, [r3, #0]
    }
}
 8005fc8:	b00c      	add	sp, #48	; 0x30
 8005fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            DEBUG_INFO("MQTT thread stopped\r\n");
 8005fce:	f00e f9a1 	bl	8014314 <sys_get_tick_ms>
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	4a81      	ldr	r2, [pc, #516]	; (80061dc <mqtt_client_polling_task+0x2b0>)
 8005fd6:	4883      	ldr	r0, [pc, #524]	; (80061e4 <mqtt_client_polling_task+0x2b8>)
 8005fd8:	f00e f96e 	bl	80142b8 <app_debug_rtt_raw>
 8005fdc:	e7ee      	b.n	8005fbc <mqtt_client_polling_task+0x90>
            m_is_dns_resolved = 0;
 8005fde:	4b82      	ldr	r3, [pc, #520]	; (80061e8 <mqtt_client_polling_task+0x2bc>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
            m_mqtt_state = MQTT_CLIENT_STATE_RESOLVE_HOSTNAME;
 8005fe4:	4b7b      	ldr	r3, [pc, #492]	; (80061d4 <mqtt_client_polling_task+0x2a8>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	701a      	strb	r2, [r3, #0]
            mqtt_tick = 4;
 8005fea:	4b79      	ldr	r3, [pc, #484]	; (80061d0 <mqtt_client_polling_task+0x2a4>)
 8005fec:	2204      	movs	r2, #4
 8005fee:	701a      	strb	r2, [r3, #0]
            break;
 8005ff0:	e7ea      	b.n	8005fc8 <mqtt_client_polling_task+0x9c>
            if (!m_is_dns_resolved)
 8005ff2:	4a7d      	ldr	r2, [pc, #500]	; (80061e8 <mqtt_client_polling_task+0x2bc>)
 8005ff4:	7812      	ldrb	r2, [r2, #0]
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	d12f      	bne.n	800605a <mqtt_client_polling_task+0x12e>
                if (mqtt_tick >= 5)
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d9e4      	bls.n	8005fc8 <mqtt_client_polling_task+0x9c>
                    mqtt_tick = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	4a73      	ldr	r2, [pc, #460]	; (80061d0 <mqtt_client_polling_task+0x2a4>)
 8006002:	7013      	strb	r3, [r2, #0]
                    err_t err = dns_gethostbyname(m_cfg.broker_addr,
 8006004:	4a79      	ldr	r2, [pc, #484]	; (80061ec <mqtt_client_polling_task+0x2c0>)
 8006006:	497a      	ldr	r1, [pc, #488]	; (80061f0 <mqtt_client_polling_task+0x2c4>)
 8006008:	487a      	ldr	r0, [pc, #488]	; (80061f4 <mqtt_client_polling_task+0x2c8>)
 800600a:	6840      	ldr	r0, [r0, #4]
 800600c:	f002 f95c 	bl	80082c8 <dns_gethostbyname>
                    if (err == ERR_INPROGRESS)
 8006010:	f110 0f05 	cmn.w	r0, #5
 8006014:	d014      	beq.n	8006040 <mqtt_client_polling_task+0x114>
                    else if (err == ERR_OK)
 8006016:	2800      	cmp	r0, #0
 8006018:	d1d6      	bne.n	8005fc8 <mqtt_client_polling_task+0x9c>
                        DEBUG_INFO("DNS resolved aready, host %s, mqtt_ipaddr = %s\r\n",
 800601a:	f00e f97b 	bl	8014314 <sys_get_tick_ms>
 800601e:	4604      	mov	r4, r0
 8006020:	4b74      	ldr	r3, [pc, #464]	; (80061f4 <mqtt_client_polling_task+0x2c8>)
 8006022:	685d      	ldr	r5, [r3, #4]
 8006024:	4872      	ldr	r0, [pc, #456]	; (80061f0 <mqtt_client_polling_task+0x2c4>)
 8006026:	f008 ff65 	bl	800eef4 <ip4addr_ntoa>
 800602a:	9000      	str	r0, [sp, #0]
 800602c:	462b      	mov	r3, r5
 800602e:	4a6b      	ldr	r2, [pc, #428]	; (80061dc <mqtt_client_polling_task+0x2b0>)
 8006030:	4621      	mov	r1, r4
 8006032:	4871      	ldr	r0, [pc, #452]	; (80061f8 <mqtt_client_polling_task+0x2cc>)
 8006034:	f00e f940 	bl	80142b8 <app_debug_rtt_raw>
                        m_is_dns_resolved = 1;
 8006038:	4b6b      	ldr	r3, [pc, #428]	; (80061e8 <mqtt_client_polling_task+0x2bc>)
 800603a:	2201      	movs	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e7c3      	b.n	8005fc8 <mqtt_client_polling_task+0x9c>
                        DEBUG_INFO("sntp_request: %d - Waiting for server %s address to be resolved\r\n", 
 8006040:	f00e f968 	bl	8014314 <sys_get_tick_ms>
 8006044:	4601      	mov	r1, r0
 8006046:	4b6b      	ldr	r3, [pc, #428]	; (80061f4 <mqtt_client_polling_task+0x2c8>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	f06f 0304 	mvn.w	r3, #4
 8006050:	4a62      	ldr	r2, [pc, #392]	; (80061dc <mqtt_client_polling_task+0x2b0>)
 8006052:	486a      	ldr	r0, [pc, #424]	; (80061fc <mqtt_client_polling_task+0x2d0>)
 8006054:	f00e f930 	bl	80142b8 <app_debug_rtt_raw>
 8006058:	e7b6      	b.n	8005fc8 <mqtt_client_polling_task+0x9c>
                mqtt_tick = 9;
 800605a:	4b5d      	ldr	r3, [pc, #372]	; (80061d0 <mqtt_client_polling_task+0x2a4>)
 800605c:	2209      	movs	r2, #9
 800605e:	701a      	strb	r2, [r3, #0]
                m_mqtt_state = MQTT_CLIENT_STATE_CONNECTING;
 8006060:	4b5c      	ldr	r3, [pc, #368]	; (80061d4 <mqtt_client_polling_task+0x2a8>)
 8006062:	2202      	movs	r2, #2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	e7af      	b.n	8005fc8 <mqtt_client_polling_task+0x9c>
            if (mqtt_tick >= 10)
 8006068:	2b09      	cmp	r3, #9
 800606a:	d9ad      	bls.n	8005fc8 <mqtt_client_polling_task+0x9c>
            m_cfg.client_id,
 800606c:	4a61      	ldr	r2, [pc, #388]	; (80061f4 <mqtt_client_polling_task+0x2c8>)
    struct mqtt_connect_client_info_t client_info =
 800606e:	68d3      	ldr	r3, [r2, #12]
 8006070:	9305      	str	r3, [sp, #20]
 8006072:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006076:	f8ad 3020 	strh.w	r3, [sp, #32]
 800607a:	2300      	movs	r3, #0
 800607c:	9309      	str	r3, [sp, #36]	; 0x24
 800607e:	930a      	str	r3, [sp, #40]	; 0x28
 8006080:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8006084:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    client_info.client_user = m_cfg.user_name;
 8006088:	6911      	ldr	r1, [r2, #16]
 800608a:	9106      	str	r1, [sp, #24]
    client_info.client_pass = m_cfg.password;
 800608c:	6951      	ldr	r1, [r2, #20]
 800608e:	9107      	str	r1, [sp, #28]
    err_t err = mqtt_client_connect(client,
 8006090:	a905      	add	r1, sp, #20
 8006092:	9101      	str	r1, [sp, #4]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	4b5a      	ldr	r3, [pc, #360]	; (8006200 <mqtt_client_polling_task+0x2d4>)
 8006098:	8912      	ldrh	r2, [r2, #8]
 800609a:	4955      	ldr	r1, [pc, #340]	; (80061f0 <mqtt_client_polling_task+0x2c4>)
 800609c:	484e      	ldr	r0, [pc, #312]	; (80061d8 <mqtt_client_polling_task+0x2ac>)
 800609e:	f001 f81b 	bl	80070d8 <mqtt_client_connect>
    if (err != ERR_OK)
 80060a2:	4604      	mov	r4, r0
 80060a4:	b1b0      	cbz	r0, 80060d4 <mqtt_client_polling_task+0x1a8>
        DEBUG_INFO("mqtt_connect return %d\r\n", err);
 80060a6:	f00e f935 	bl	8014314 <sys_get_tick_ms>
 80060aa:	4601      	mov	r1, r0
 80060ac:	4623      	mov	r3, r4
 80060ae:	4a4b      	ldr	r2, [pc, #300]	; (80061dc <mqtt_client_polling_task+0x2b0>)
 80060b0:	4854      	ldr	r0, [pc, #336]	; (8006204 <mqtt_client_polling_task+0x2d8>)
 80060b2:	f00e f901 	bl	80142b8 <app_debug_rtt_raw>
        if (err == ERR_ISCONN)
 80060b6:	f114 0f0a 	cmn.w	r4, #10
 80060ba:	d003      	beq.n	80060c4 <mqtt_client_polling_task+0x198>
                    mqtt_tick = 0;
 80060bc:	4b44      	ldr	r3, [pc, #272]	; (80061d0 <mqtt_client_polling_task+0x2a4>)
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	e781      	b.n	8005fc8 <mqtt_client_polling_task+0x9c>
            DEBUG_INFO("MQTT already connected\r\n");
 80060c4:	f00e f926 	bl	8014314 <sys_get_tick_ms>
 80060c8:	4601      	mov	r1, r0
 80060ca:	4a44      	ldr	r2, [pc, #272]	; (80061dc <mqtt_client_polling_task+0x2b0>)
 80060cc:	484e      	ldr	r0, [pc, #312]	; (8006208 <mqtt_client_polling_task+0x2dc>)
 80060ce:	f00e f8f3 	bl	80142b8 <app_debug_rtt_raw>
 80060d2:	e7f3      	b.n	80060bc <mqtt_client_polling_task+0x190>
        DEBUG_INFO("Host %s:%d %s, client id %s\r\n",
 80060d4:	f00e f91e 	bl	8014314 <sys_get_tick_ms>
 80060d8:	4604      	mov	r4, r0
 80060da:	4d46      	ldr	r5, [pc, #280]	; (80061f4 <mqtt_client_polling_task+0x2c8>)
 80060dc:	686f      	ldr	r7, [r5, #4]
 80060de:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80060e2:	4843      	ldr	r0, [pc, #268]	; (80061f0 <mqtt_client_polling_task+0x2c4>)
 80060e4:	f008 ff06 	bl	800eef4 <ip4addr_ntoa>
 80060e8:	4e3c      	ldr	r6, [pc, #240]	; (80061dc <mqtt_client_polling_task+0x2b0>)
 80060ea:	68eb      	ldr	r3, [r5, #12]
 80060ec:	9302      	str	r3, [sp, #8]
 80060ee:	9001      	str	r0, [sp, #4]
 80060f0:	f8cd 8000 	str.w	r8, [sp]
 80060f4:	463b      	mov	r3, r7
 80060f6:	4632      	mov	r2, r6
 80060f8:	4621      	mov	r1, r4
 80060fa:	4844      	ldr	r0, [pc, #272]	; (800620c <mqtt_client_polling_task+0x2e0>)
 80060fc:	f00e f8dc 	bl	80142b8 <app_debug_rtt_raw>
        DEBUG_INFO("mqtt_client_connect: OK\r\n");
 8006100:	f00e f908 	bl	8014314 <sys_get_tick_ms>
 8006104:	4601      	mov	r1, r0
 8006106:	4632      	mov	r2, r6
 8006108:	4841      	ldr	r0, [pc, #260]	; (8006210 <mqtt_client_polling_task+0x2e4>)
 800610a:	f00e f8d5 	bl	80142b8 <app_debug_rtt_raw>
                    mqtt_tick = 5; /* Gui login sau 5s */
 800610e:	4b30      	ldr	r3, [pc, #192]	; (80061d0 <mqtt_client_polling_task+0x2a4>)
 8006110:	2205      	movs	r2, #5
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	e758      	b.n	8005fc8 <mqtt_client_polling_task+0x9c>
            tick = now;
 8006116:	4b3f      	ldr	r3, [pc, #252]	; (8006214 <mqtt_client_polling_task+0x2e8>)
 8006118:	601c      	str	r4, [r3, #0]
            if (last_time_send_sub_request == 0 || last_time_send_sub_request > tick)
 800611a:	4b3f      	ldr	r3, [pc, #252]	; (8006218 <mqtt_client_polling_task+0x2ec>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	b10b      	cbz	r3, 8006124 <mqtt_client_polling_task+0x1f8>
 8006120:	42a3      	cmp	r3, r4
 8006122:	d901      	bls.n	8006128 <mqtt_client_polling_task+0x1fc>
                last_time_send_sub_request = tick;
 8006124:	4b3c      	ldr	r3, [pc, #240]	; (8006218 <mqtt_client_polling_task+0x2ec>)
 8006126:	601c      	str	r4, [r3, #0]
            if (mqtt_client_is_connected(&m_mqtt_static_client))
 8006128:	482b      	ldr	r0, [pc, #172]	; (80061d8 <mqtt_client_polling_task+0x2ac>)
 800612a:	f001 f9df 	bl	80074ec <mqtt_client_is_connected>
 800612e:	2800      	cmp	r0, #0
 8006130:	f000 8098 	beq.w	8006264 <mqtt_client_polling_task+0x338>
                if (tick >= (last_time_send_sub_request + m_cfg.periodic_sub_req_s*1000))
 8006134:	4b37      	ldr	r3, [pc, #220]	; (8006214 <mqtt_client_polling_task+0x2e8>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4b2e      	ldr	r3, [pc, #184]	; (80061f4 <mqtt_client_polling_task+0x2c8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4936      	ldr	r1, [pc, #216]	; (8006218 <mqtt_client_polling_task+0x2ec>)
 800613e:	6809      	ldr	r1, [r1, #0]
 8006140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006144:	fb00 1303 	mla	r3, r0, r3, r1
 8006148:	4293      	cmp	r3, r2
 800614a:	d975      	bls.n	8006238 <mqtt_client_polling_task+0x30c>
                if (tick - last_time_send_hearbeat >= (uint32_t)30000)
 800614c:	4b31      	ldr	r3, [pc, #196]	; (8006214 <mqtt_client_polling_task+0x2e8>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	4b32      	ldr	r3, [pc, #200]	; (800621c <mqtt_client_polling_task+0x2f0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	f247 512f 	movw	r1, #29999	; 0x752f
 800615a:	428b      	cmp	r3, r1
 800615c:	f67f af34 	bls.w	8005fc8 <mqtt_client_polling_task+0x9c>
                    last_time_send_hearbeat = tick;
 8006160:	4b2e      	ldr	r3, [pc, #184]	; (800621c <mqtt_client_polling_task+0x2f0>)
 8006162:	601a      	str	r2, [r3, #0]
   snprintf(m_mqtt_tx_buffer, sizeof(m_mqtt_tx_buffer), "%s", "Xin chao cac ban");
 8006164:	4e2e      	ldr	r6, [pc, #184]	; (8006220 <mqtt_client_polling_task+0x2f4>)
 8006166:	4f2f      	ldr	r7, [pc, #188]	; (8006224 <mqtt_client_polling_task+0x2f8>)
 8006168:	4634      	mov	r4, r6
 800616a:	463d      	mov	r5, r7
 800616c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800616e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	7023      	strb	r3, [r4, #0]
                             strlen(m_mqtt_tx_buffer),
 8006174:	4630      	mov	r0, r6
 8006176:	f7fa f861 	bl	800023c <strlen>
    err_t err = mqtt_publish(&m_mqtt_static_client,
 800617a:	4d2b      	ldr	r5, [pc, #172]	; (8006228 <mqtt_client_polling_task+0x2fc>)
 800617c:	2200      	movs	r2, #0
 800617e:	9203      	str	r2, [sp, #12]
 8006180:	4b2a      	ldr	r3, [pc, #168]	; (800622c <mqtt_client_polling_task+0x300>)
 8006182:	9302      	str	r3, [sp, #8]
 8006184:	9201      	str	r2, [sp, #4]
 8006186:	2301      	movs	r3, #1
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	b283      	uxth	r3, r0
 800618c:	4632      	mov	r2, r6
 800618e:	4629      	mov	r1, r5
 8006190:	4811      	ldr	r0, [pc, #68]	; (80061d8 <mqtt_client_polling_task+0x2ac>)
 8006192:	f000 fe07 	bl	8006da4 <mqtt_publish>
 8006196:	4604      	mov	r4, r0
    DEBUG_INFO("Publish data \"%s\" to topic %s\r\n", "Xin chao cac ban", m_mqtt_publish_topic_name);  
 8006198:	f00e f8bc 	bl	8014314 <sys_get_tick_ms>
 800619c:	4601      	mov	r1, r0
 800619e:	9500      	str	r5, [sp, #0]
 80061a0:	463b      	mov	r3, r7
 80061a2:	4a0e      	ldr	r2, [pc, #56]	; (80061dc <mqtt_client_polling_task+0x2b0>)
 80061a4:	4822      	ldr	r0, [pc, #136]	; (8006230 <mqtt_client_polling_task+0x304>)
 80061a6:	f00e f887 	bl	80142b8 <app_debug_rtt_raw>
    if (err != ERR_OK)
 80061aa:	2c00      	cmp	r4, #0
 80061ac:	f43f af0c 	beq.w	8005fc8 <mqtt_client_polling_task+0x9c>
        DEBUG_INFO("Publish err: %d\r\n", err);
 80061b0:	f00e f8b0 	bl	8014314 <sys_get_tick_ms>
 80061b4:	4601      	mov	r1, r0
 80061b6:	4623      	mov	r3, r4
 80061b8:	4a08      	ldr	r2, [pc, #32]	; (80061dc <mqtt_client_polling_task+0x2b0>)
 80061ba:	481e      	ldr	r0, [pc, #120]	; (8006234 <mqtt_client_polling_task+0x308>)
 80061bc:	f00e f87c 	bl	80142b8 <app_debug_rtt_raw>
        return;
 80061c0:	e702      	b.n	8005fc8 <mqtt_client_polling_task+0x9c>
 80061c2:	bf00      	nop
 80061c4:	200009e0 	.word	0x200009e0
 80061c8:	200009e7 	.word	0x200009e7
 80061cc:	200009e6 	.word	0x200009e6
 80061d0:	20000d41 	.word	0x20000d41
 80061d4:	20000a1c 	.word	0x20000a1c
 80061d8:	20000a20 	.word	0x20000a20
 80061dc:	08015e88 	.word	0x08015e88
 80061e0:	080166f0 	.word	0x080166f0
 80061e4:	08016720 	.word	0x08016720
 80061e8:	200009e4 	.word	0x200009e4
 80061ec:	08005c41 	.word	0x08005c41
 80061f0:	20000a18 	.word	0x20000a18
 80061f4:	200009c8 	.word	0x200009c8
 80061f8:	080167ac 	.word	0x080167ac
 80061fc:	08016750 	.word	0x08016750
 8006200:	08005cb5 	.word	0x08005cb5
 8006204:	080167f8 	.word	0x080167f8
 8006208:	0801682c 	.word	0x0801682c
 800620c:	08016860 	.word	0x08016860
 8006210:	08016898 	.word	0x08016898
 8006214:	20000d44 	.word	0x20000d44
 8006218:	200009c4 	.word	0x200009c4
 800621c:	200009c0 	.word	0x200009c0
 8006220:	20000c40 	.word	0x20000c40
 8006224:	080168f4 	.word	0x080168f4
 8006228:	200009e8 	.word	0x200009e8
 800622c:	08005c0d 	.word	0x08005c0d
 8006230:	08016908 	.word	0x08016908
 8006234:	08016944 	.word	0x08016944
                    last_time_send_sub_request = tick;
 8006238:	4b0c      	ldr	r3, [pc, #48]	; (800626c <mqtt_client_polling_task+0x340>)
 800623a:	601a      	str	r2, [r3, #0]
    err_t err = mqtt_subscribe(&m_mqtt_static_client, 
 800623c:	4c0c      	ldr	r4, [pc, #48]	; (8006270 <mqtt_client_polling_task+0x344>)
 800623e:	2201      	movs	r2, #1
 8006240:	9201      	str	r2, [sp, #4]
 8006242:	2300      	movs	r3, #0
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <mqtt_client_polling_task+0x348>)
 8006248:	4621      	mov	r1, r4
 800624a:	480b      	ldr	r0, [pc, #44]	; (8006278 <mqtt_client_polling_task+0x34c>)
 800624c:	f000 fe6a 	bl	8006f24 <mqtt_sub_unsub>
    DEBUG_INFO("%s: topic %s\r\n", __FUNCTION__, m_mqtt_subscribe_topic_name);
 8006250:	f00e f860 	bl	8014314 <sys_get_tick_ms>
 8006254:	4601      	mov	r1, r0
 8006256:	9400      	str	r4, [sp, #0]
 8006258:	4b08      	ldr	r3, [pc, #32]	; (800627c <mqtt_client_polling_task+0x350>)
 800625a:	4a09      	ldr	r2, [pc, #36]	; (8006280 <mqtt_client_polling_task+0x354>)
 800625c:	4809      	ldr	r0, [pc, #36]	; (8006284 <mqtt_client_polling_task+0x358>)
 800625e:	f00e f82b 	bl	80142b8 <app_debug_rtt_raw>
}
 8006262:	e773      	b.n	800614c <mqtt_client_polling_task+0x220>
                m_mqtt_state = MQTT_CLIENT_STATE_DISCONNECTED;
 8006264:	4b08      	ldr	r3, [pc, #32]	; (8006288 <mqtt_client_polling_task+0x35c>)
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e6ad      	b.n	8005fc8 <mqtt_client_polling_task+0x9c>
 800626c:	200009c4 	.word	0x200009c4
 8006270:	20000c10 	.word	0x20000c10
 8006274:	08005d91 	.word	0x08005d91
 8006278:	20000a20 	.word	0x20000a20
 800627c:	080169c8 	.word	0x080169c8
 8006280:	08015e88 	.word	0x08015e88
 8006284:	080168cc 	.word	0x080168cc
 8006288:	20000a1c 	.word	0x20000a1c

0800628c <mqtt_client_initialize>:

    return false;
}

void mqtt_client_initialize(mqtt_client_cfg_t *cfg)
{
 800628c:	b430      	push	{r4, r5}
 800628e:	4605      	mov	r5, r0
    memcpy(&m_cfg, cfg, sizeof(mqtt_client_cfg_t));
 8006290:	4c0d      	ldr	r4, [pc, #52]	; (80062c8 <mqtt_client_initialize+0x3c>)
 8006292:	6800      	ldr	r0, [r0, #0]
 8006294:	6869      	ldr	r1, [r5, #4]
 8006296:	68aa      	ldr	r2, [r5, #8]
 8006298:	68eb      	ldr	r3, [r5, #12]
 800629a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800629c:	6928      	ldr	r0, [r5, #16]
 800629e:	6969      	ldr	r1, [r5, #20]
 80062a0:	c403      	stmia	r4!, {r0, r1}
    snprintf(m_mqtt_publish_topic_name, sizeof(m_mqtt_subscribe_topic_name), "%s", "test_pub_porting_lwip_stm32");
 80062a2:	4c0a      	ldr	r4, [pc, #40]	; (80062cc <mqtt_client_initialize+0x40>)
 80062a4:	4d0a      	ldr	r5, [pc, #40]	; (80062d0 <mqtt_client_initialize+0x44>)
 80062a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80062ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    snprintf(m_mqtt_subscribe_topic_name, sizeof(m_mqtt_publish_topic_name), "%s", "test_sub_porting_lwip_stm32");
 80062b2:	4c08      	ldr	r4, [pc, #32]	; (80062d4 <mqtt_client_initialize+0x48>)
 80062b4:	4d08      	ldr	r5, [pc, #32]	; (80062d8 <mqtt_client_initialize+0x4c>)
 80062b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80062be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80062c2:	bc30      	pop	{r4, r5}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	200009c8 	.word	0x200009c8
 80062cc:	200009e8 	.word	0x200009e8
 80062d0:	08016970 	.word	0x08016970
 80062d4:	20000c10 	.word	0x20000c10
 80062d8:	0801698c 	.word	0x0801698c

080062dc <mqtt_ringbuf_put>:

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
  rb->buf[rb->put] = item;
 80062dc:	8803      	ldrh	r3, [r0, #0]
 80062de:	18c2      	adds	r2, r0, r3
 80062e0:	7111      	strb	r1, [r2, #4]
  rb->put++;
 80062e2:	3301      	adds	r3, #1
 80062e4:	b29b      	uxth	r3, r3
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80062e6:	2bff      	cmp	r3, #255	; 0xff
    rb->put = 0;
 80062e8:	bf88      	it	hi
 80062ea:	2300      	movhi	r3, #0
 80062ec:	8003      	strh	r3, [r0, #0]
  }
}
 80062ee:	4770      	bx	lr

080062f0 <mqtt_output_append_u16>:
  mqtt_ringbuf_put(rb, value);
}

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4605      	mov	r5, r0
 80062f4:	460c      	mov	r4, r1
  mqtt_ringbuf_put(rb, value >> 8);
 80062f6:	0a09      	lsrs	r1, r1, #8
 80062f8:	f7ff fff0 	bl	80062dc <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 80062fc:	b2e1      	uxtb	r1, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	f7ff ffec 	bl	80062dc <mqtt_ringbuf_put>
}
 8006304:	bd38      	pop	{r3, r4, r5, pc}

08006306 <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8006306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006308:	4606      	mov	r6, r0
 800630a:	460d      	mov	r5, r1
 800630c:	4617      	mov	r7, r2
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800630e:	0a11      	lsrs	r1, r2, #8
 8006310:	f7ff ffe4 	bl	80062dc <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8006314:	b2f9      	uxtb	r1, r7
 8006316:	4630      	mov	r0, r6
 8006318:	f7ff ffe0 	bl	80062dc <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800631c:	b157      	cbz	r7, 8006334 <mqtt_output_append_string+0x2e>
 800631e:	1e6c      	subs	r4, r5, #1
 8006320:	3f01      	subs	r7, #1
 8006322:	b2bf      	uxth	r7, r7
 8006324:	443d      	add	r5, r7
    mqtt_ringbuf_put(rb, str[n]);
 8006326:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800632a:	4630      	mov	r0, r6
 800632c:	f7ff ffd6 	bl	80062dc <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8006330:	42ac      	cmp	r4, r5
 8006332:	d1f8      	bne.n	8006326 <mqtt_output_append_string+0x20>
  }
}
 8006334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006338 <mqtt_create_request>:
{
 8006338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800633c:	460f      	mov	r7, r1
 800633e:	4690      	mov	r8, r2
 8006340:	4699      	mov	r9, r3
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8006342:	4606      	mov	r6, r0
 8006344:	b178      	cbz	r0, 8006366 <mqtt_create_request+0x2e>
  for (n = 0; n < r_objs_len; n++) {
 8006346:	b307      	cbz	r7, 800638a <mqtt_create_request+0x52>
 8006348:	2400      	movs	r4, #0
 800634a:	4620      	mov	r0, r4
    if (r_objs[n].next == &r_objs[n]) {
 800634c:	0103      	lsls	r3, r0, #4
 800634e:	eb06 1500 	add.w	r5, r6, r0, lsl #4
 8006352:	58f0      	ldr	r0, [r6, r3]
 8006354:	4285      	cmp	r5, r0
 8006356:	d00e      	beq.n	8006376 <mqtt_create_request+0x3e>
  for (n = 0; n < r_objs_len; n++) {
 8006358:	3401      	adds	r4, #1
 800635a:	b2e4      	uxtb	r4, r4
 800635c:	4620      	mov	r0, r4
 800635e:	42bc      	cmp	r4, r7
 8006360:	d3f4      	bcc.n	800634c <mqtt_create_request+0x14>
  struct mqtt_request_t *r = NULL;
 8006362:	2000      	movs	r0, #0
 8006364:	e00f      	b.n	8006386 <mqtt_create_request+0x4e>
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8006366:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <mqtt_create_request+0x58>)
 8006368:	f240 1223 	movw	r2, #291	; 0x123
 800636c:	4909      	ldr	r1, [pc, #36]	; (8006394 <mqtt_create_request+0x5c>)
 800636e:	480a      	ldr	r0, [pc, #40]	; (8006398 <mqtt_create_request+0x60>)
 8006370:	f00d ffa2 	bl	80142b8 <app_debug_rtt_raw>
 8006374:	e7e7      	b.n	8006346 <mqtt_create_request+0xe>
      r->next = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	6003      	str	r3, [r0, #0]
      r->cb = cb;
 800637a:	f8c0 9004 	str.w	r9, [r0, #4]
      r->arg = arg;
 800637e:	9b08      	ldr	r3, [sp, #32]
 8006380:	6083      	str	r3, [r0, #8]
      r->pkt_id = pkt_id;
 8006382:	f8a0 800c 	strh.w	r8, [r0, #12]
}
 8006386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  struct mqtt_request_t *r = NULL;
 800638a:	2000      	movs	r0, #0
  return r;
 800638c:	e7fb      	b.n	8006386 <mqtt_create_request+0x4e>
 800638e:	bf00      	nop
 8006390:	080169e8 	.word	0x080169e8
 8006394:	08016a14 	.word	0x08016a14
 8006398:	08016a38 	.word	0x08016a38

0800639c <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	460d      	mov	r5, r1
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 80063a0:	1c4c      	adds	r4, r1, #1
 80063a2:	b2a4      	uxth	r4, r4

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 80063a4:	4606      	mov	r6, r0
 80063a6:	b198      	cbz	r0, 80063d0 <mqtt_output_check_space+0x34>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 80063a8:	3401      	adds	r4, #1
 80063aa:	b2a4      	uxth	r4, r4
    r_length >>= 7;
  } while (r_length > 0);
 80063ac:	09ed      	lsrs	r5, r5, #7
 80063ae:	d1fb      	bne.n	80063a8 <mqtt_output_check_space+0xc>
  u32_t len = rb->put - rb->get;
 80063b0:	8830      	ldrh	r0, [r6, #0]
 80063b2:	8873      	ldrh	r3, [r6, #2]
 80063b4:	1ac0      	subs	r0, r0, r3
  if (len > 0xFFFF) {
 80063b6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 80063ba:	bf28      	it	cs
 80063bc:	f500 7080 	addcs.w	r0, r0, #256	; 0x100

  return (total_len <= mqtt_ringbuf_free(rb));
 80063c0:	b280      	uxth	r0, r0
 80063c2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
}
 80063c6:	4284      	cmp	r4, r0
 80063c8:	bfcc      	ite	gt
 80063ca:	2000      	movgt	r0, #0
 80063cc:	2001      	movle	r0, #1
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 80063d0:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <mqtt_output_check_space+0x44>)
 80063d2:	f240 2207 	movw	r2, #519	; 0x207
 80063d6:	4903      	ldr	r1, [pc, #12]	; (80063e4 <mqtt_output_check_space+0x48>)
 80063d8:	4803      	ldr	r0, [pc, #12]	; (80063e8 <mqtt_output_check_space+0x4c>)
 80063da:	f00d ff6d 	bl	80142b8 <app_debug_rtt_raw>
 80063de:	e7e3      	b.n	80063a8 <mqtt_output_check_space+0xc>
 80063e0:	080169e8 	.word	0x080169e8
 80063e4:	08016a64 	.word	0x08016a64
 80063e8:	08016a38 	.word	0x08016a38

080063ec <mqtt_append_request>:
{
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	460d      	mov	r5, r1
  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 80063f0:	4604      	mov	r4, r0
 80063f2:	b188      	cbz	r0, 8006418 <mqtt_append_request+0x2c>
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	b313      	cbz	r3, 800643e <mqtt_append_request+0x52>
  s16_t time_before = 0;
 80063f8:	2200      	movs	r2, #0
    time_before += iter->timeout_diff;
 80063fa:	89d8      	ldrh	r0, [r3, #14]
 80063fc:	4402      	add	r2, r0
 80063fe:	b294      	uxth	r4, r2
 8006400:	b212      	sxth	r2, r2
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8006402:	461e      	mov	r6, r3
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f7      	bne.n	80063fa <mqtt_append_request+0xe>
  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 800640a:	2a1e      	cmp	r2, #30
 800640c:	dc0c      	bgt.n	8006428 <mqtt_append_request+0x3c>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 800640e:	f1c4 041e 	rsb	r4, r4, #30
 8006412:	81ec      	strh	r4, [r5, #14]
    head->next = r;
 8006414:	6035      	str	r5, [r6, #0]
}
 8006416:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8006418:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <mqtt_append_request+0x5c>)
 800641a:	f240 123f 	movw	r2, #319	; 0x13f
 800641e:	490b      	ldr	r1, [pc, #44]	; (800644c <mqtt_append_request+0x60>)
 8006420:	480b      	ldr	r0, [pc, #44]	; (8006450 <mqtt_append_request+0x64>)
 8006422:	f00d ff49 	bl	80142b8 <app_debug_rtt_raw>
 8006426:	e7e5      	b.n	80063f4 <mqtt_append_request+0x8>
  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8006428:	4b07      	ldr	r3, [pc, #28]	; (8006448 <mqtt_append_request+0x5c>)
 800642a:	f240 1247 	movw	r2, #327	; 0x147
 800642e:	4909      	ldr	r1, [pc, #36]	; (8006454 <mqtt_append_request+0x68>)
 8006430:	4807      	ldr	r0, [pc, #28]	; (8006450 <mqtt_append_request+0x64>)
 8006432:	f00d ff41 	bl	80142b8 <app_debug_rtt_raw>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8006436:	f1c4 041e 	rsb	r4, r4, #30
 800643a:	81ec      	strh	r4, [r5, #14]
  if (head == NULL) {
 800643c:	e7ea      	b.n	8006414 <mqtt_append_request+0x28>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 800643e:	231e      	movs	r3, #30
 8006440:	81eb      	strh	r3, [r5, #14]
    *tail = r;
 8006442:	6025      	str	r5, [r4, #0]
 8006444:	e7e7      	b.n	8006416 <mqtt_append_request+0x2a>
 8006446:	bf00      	nop
 8006448:	080169e8 	.word	0x080169e8
 800644c:	08016a88 	.word	0x08016a88
 8006450:	08016a38 	.word	0x08016a38
 8006454:	08016aac 	.word	0x08016aac

08006458 <mqtt_ringbuf_advance_get_idx>:
{
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4605      	mov	r5, r0
 800645c:	460c      	mov	r4, r1
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 800645e:	29ff      	cmp	r1, #255	; 0xff
 8006460:	d808      	bhi.n	8006474 <mqtt_ringbuf_advance_get_idx+0x1c>
  rb->get += len;
 8006462:	8869      	ldrh	r1, [r5, #2]
 8006464:	440c      	add	r4, r1
 8006466:	b2a4      	uxth	r4, r4
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8006468:	2cff      	cmp	r4, #255	; 0xff
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800646a:	bf88      	it	hi
 800646c:	f5a4 7480 	subhi.w	r4, r4, #256	; 0x100
 8006470:	806c      	strh	r4, [r5, #2]
}
 8006472:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8006474:	4b03      	ldr	r3, [pc, #12]	; (8006484 <mqtt_ringbuf_advance_get_idx+0x2c>)
 8006476:	22cb      	movs	r2, #203	; 0xcb
 8006478:	4903      	ldr	r1, [pc, #12]	; (8006488 <mqtt_ringbuf_advance_get_idx+0x30>)
 800647a:	4804      	ldr	r0, [pc, #16]	; (800648c <mqtt_ringbuf_advance_get_idx+0x34>)
 800647c:	f00d ff1c 	bl	80142b8 <app_debug_rtt_raw>
 8006480:	e7ef      	b.n	8006462 <mqtt_ringbuf_advance_get_idx+0xa>
 8006482:	bf00      	nop
 8006484:	080169e8 	.word	0x080169e8
 8006488:	08016ae4 	.word	0x08016ae4
 800648c:	08016a38 	.word	0x08016a38

08006490 <mqtt_take_request>:
{
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	460c      	mov	r4, r1
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8006494:	4605      	mov	r5, r0
 8006496:	b118      	cbz	r0, 80064a0 <mqtt_take_request+0x10>
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	b1ab      	cbz	r3, 80064c8 <mqtt_take_request+0x38>
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800649c:	2100      	movs	r1, #0
 800649e:	e008      	b.n	80064b2 <mqtt_take_request+0x22>
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <mqtt_take_request+0x58>)
 80064a2:	f240 1267 	movw	r2, #359	; 0x167
 80064a6:	4911      	ldr	r1, [pc, #68]	; (80064ec <mqtt_take_request+0x5c>)
 80064a8:	4811      	ldr	r0, [pc, #68]	; (80064f0 <mqtt_take_request+0x60>)
 80064aa:	f00d ff05 	bl	80142b8 <app_debug_rtt_raw>
 80064ae:	e7f3      	b.n	8006498 <mqtt_take_request+0x8>
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80064b0:	4603      	mov	r3, r0
    if (iter->pkt_id == pkt_id) {
 80064b2:	899a      	ldrh	r2, [r3, #12]
 80064b4:	42a2      	cmp	r2, r4
 80064b6:	d009      	beq.n	80064cc <mqtt_take_request+0x3c>
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	2800      	cmp	r0, #0
 80064be:	d1f7      	bne.n	80064b0 <mqtt_take_request+0x20>
 80064c0:	e011      	b.n	80064e6 <mqtt_take_request+0x56>
      *tail = iter->next;
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	602a      	str	r2, [r5, #0]
 80064c6:	e005      	b.n	80064d4 <mqtt_take_request+0x44>
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80064c8:	4618      	mov	r0, r3
  return iter;
 80064ca:	e00c      	b.n	80064e6 <mqtt_take_request+0x56>
    if (prev == NULL) {
 80064cc:	2900      	cmp	r1, #0
 80064ce:	d0f8      	beq.n	80064c2 <mqtt_take_request+0x32>
      prev->next = iter->next;
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	600a      	str	r2, [r1, #0]
    if (iter->next != NULL) {
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	b11a      	cbz	r2, 80064e0 <mqtt_take_request+0x50>
      iter->next->timeout_diff += iter->timeout_diff;
 80064d8:	89d1      	ldrh	r1, [r2, #14]
 80064da:	89d8      	ldrh	r0, [r3, #14]
 80064dc:	4401      	add	r1, r0
 80064de:	81d1      	strh	r1, [r2, #14]
    iter->next = NULL;
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	4618      	mov	r0, r3
}
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	080169e8 	.word	0x080169e8
 80064ec:	08016b24 	.word	0x08016b24
 80064f0:	08016a38 	.word	0x08016a38

080064f4 <mqtt_output_append_fixed_header>:
{
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	4605      	mov	r5, r0
 80064f8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	f003 0306 	and.w	r3, r3, #6
 8006502:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8006506:	f006 0601 	and.w	r6, r6, #1
 800650a:	4333      	orrs	r3, r6
 800650c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8006510:	00d2      	lsls	r2, r2, #3
 8006512:	f002 0208 	and.w	r2, r2, #8
 8006516:	4313      	orrs	r3, r2
  mqtt_ringbuf_put(rb, value);
 8006518:	b2d9      	uxtb	r1, r3
 800651a:	f7ff fedf 	bl	80062dc <mqtt_ringbuf_put>
}
 800651e:	e005      	b.n	800652c <mqtt_output_append_fixed_header+0x38>
  mqtt_ringbuf_put(rb, value);
 8006520:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006524:	4628      	mov	r0, r5
 8006526:	f7ff fed9 	bl	80062dc <mqtt_ringbuf_put>
    r_length >>= 7;
 800652a:	09e4      	lsrs	r4, r4, #7
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800652c:	f004 017f 	and.w	r1, r4, #127	; 0x7f
 8006530:	2c7f      	cmp	r4, #127	; 0x7f
 8006532:	d8f5      	bhi.n	8006520 <mqtt_output_append_fixed_header+0x2c>
  mqtt_ringbuf_put(rb, value);
 8006534:	4628      	mov	r0, r5
 8006536:	f7ff fed1 	bl	80062dc <mqtt_ringbuf_put>
}
 800653a:	bd70      	pop	{r4, r5, r6, pc}

0800653c <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	460d      	mov	r5, r1
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8006540:	4604      	mov	r4, r0
 8006542:	b350      	cbz	r0, 800659a <mqtt_close+0x5e>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8006544:	68e0      	ldr	r0, [r4, #12]
 8006546:	b180      	cbz	r0, 800656a <mqtt_close+0x2e>
    err_t res;
    altcp_recv(client->conn, NULL);
 8006548:	2100      	movs	r1, #0
 800654a:	f003 fb79 	bl	8009c40 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800654e:	2100      	movs	r1, #0
 8006550:	68e0      	ldr	r0, [r4, #12]
 8006552:	f003 fba9 	bl	8009ca8 <tcp_err>
    altcp_sent(client->conn, NULL);
 8006556:	2100      	movs	r1, #0
 8006558:	68e0      	ldr	r0, [r4, #12]
 800655a:	f003 fb8b 	bl	8009c74 <tcp_sent>
    res = altcp_close(client->conn);
 800655e:	68e0      	ldr	r0, [r4, #12]
 8006560:	f004 f826 	bl	800a5b0 <tcp_close>
    if (res != ERR_OK) {
 8006564:	bb08      	cbnz	r0, 80065aa <mqtt_close+0x6e>
      altcp_abort(client->conn);
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	60e3      	str	r3, [r4, #12]
  for (iter = *tail; iter != NULL; iter = next) {
 800656a:	69a3      	ldr	r3, [r4, #24]
 800656c:	b123      	cbz	r3, 8006578 <mqtt_close+0x3c>
    next = iter->next;
 800656e:	461a      	mov	r2, r3
 8006570:	681b      	ldr	r3, [r3, #0]
    r->next = r;
 8006572:	6012      	str	r2, [r2, #0]
  for (iter = *tail; iter != NULL; iter = next) {
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1fa      	bne.n	800656e <mqtt_close+0x32>
  *tail = NULL;
 8006578:	2300      	movs	r3, #0
 800657a:	61a3      	str	r3, [r4, #24]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800657c:	4621      	mov	r1, r4
 800657e:	480d      	ldr	r0, [pc, #52]	; (80065b4 <mqtt_close+0x78>)
 8006580:	f007 fca2 	bl	800dec8 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8006584:	7aa3      	ldrb	r3, [r4, #10]
 8006586:	b13b      	cbz	r3, 8006598 <mqtt_close+0x5c>

    client->conn_state = TCP_DISCONNECTED;
 8006588:	2300      	movs	r3, #0
 800658a:	72a3      	strb	r3, [r4, #10]
    if (client->connect_cb != NULL) {
 800658c:	6963      	ldr	r3, [r4, #20]
 800658e:	b11b      	cbz	r3, 8006598 <mqtt_close+0x5c>
      client->connect_cb(client, client->connect_arg, reason);
 8006590:	462a      	mov	r2, r5
 8006592:	6921      	ldr	r1, [r4, #16]
 8006594:	4620      	mov	r0, r4
 8006596:	4798      	blx	r3
    }
  }
}
 8006598:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800659a:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <mqtt_close+0x7c>)
 800659c:	f240 221b 	movw	r2, #539	; 0x21b
 80065a0:	4906      	ldr	r1, [pc, #24]	; (80065bc <mqtt_close+0x80>)
 80065a2:	4807      	ldr	r0, [pc, #28]	; (80065c0 <mqtt_close+0x84>)
 80065a4:	f00d fe88 	bl	80142b8 <app_debug_rtt_raw>
 80065a8:	e7cc      	b.n	8006544 <mqtt_close+0x8>
      altcp_abort(client->conn);
 80065aa:	68e0      	ldr	r0, [r4, #12]
 80065ac:	f003 fe02 	bl	800a1b4 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
 80065b0:	e7d9      	b.n	8006566 <mqtt_close+0x2a>
 80065b2:	bf00      	nop
 80065b4:	080065f9 	.word	0x080065f9
 80065b8:	080169e8 	.word	0x080169e8
 80065bc:	08016b44 	.word	0x08016b44
 80065c0:	08016a38 	.word	0x08016a38

080065c4 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 80065c4:	b510      	push	{r4, lr}
  mqtt_client_t *client = (mqtt_client_t *)arg;
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 80065c6:	4604      	mov	r4, r0
 80065c8:	b138      	cbz	r0, 80065da <mqtt_tcp_err_cb+0x16>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60e3      	str	r3, [r4, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80065ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7ff ffb2 	bl	800653c <mqtt_close>
}
 80065d8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 80065da:	4b04      	ldr	r3, [pc, #16]	; (80065ec <mqtt_tcp_err_cb+0x28>)
 80065dc:	f240 32f6 	movw	r2, #1014	; 0x3f6
 80065e0:	4903      	ldr	r1, [pc, #12]	; (80065f0 <mqtt_tcp_err_cb+0x2c>)
 80065e2:	4804      	ldr	r0, [pc, #16]	; (80065f4 <mqtt_tcp_err_cb+0x30>)
 80065e4:	f00d fe68 	bl	80142b8 <app_debug_rtt_raw>
 80065e8:	e7ef      	b.n	80065ca <mqtt_tcp_err_cb+0x6>
 80065ea:	bf00      	nop
 80065ec:	080169e8 	.word	0x080169e8
 80065f0:	08016b60 	.word	0x08016b60
 80065f4:	08016a38 	.word	0x08016a38

080065f8 <mqtt_cyclic_timer>:
{
 80065f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fa:	b083      	sub	sp, #12
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 80065fc:	4606      	mov	r6, r0
 80065fe:	b130      	cbz	r0, 800660e <mqtt_cyclic_timer+0x16>
  if (client->conn_state == MQTT_CONNECTING) {
 8006600:	7ab3      	ldrb	r3, [r6, #10]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d00b      	beq.n	800661e <mqtt_cyclic_timer+0x26>
  } else if (client->conn_state == MQTT_CONNECTED) {
 8006606:	2b03      	cmp	r3, #3
 8006608:	d01e      	beq.n	8006648 <mqtt_cyclic_timer+0x50>
}
 800660a:	b003      	add	sp, #12
 800660c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800660e:	4b35      	ldr	r3, [pc, #212]	; (80066e4 <mqtt_cyclic_timer+0xec>)
 8006610:	f44f 7211 	mov.w	r2, #580	; 0x244
 8006614:	4934      	ldr	r1, [pc, #208]	; (80066e8 <mqtt_cyclic_timer+0xf0>)
 8006616:	4835      	ldr	r0, [pc, #212]	; (80066ec <mqtt_cyclic_timer+0xf4>)
 8006618:	f00d fe4e 	bl	80142b8 <app_debug_rtt_raw>
 800661c:	e7f0      	b.n	8006600 <mqtt_cyclic_timer+0x8>
    client->cyclic_tick++;
 800661e:	8833      	ldrh	r3, [r6, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	b29b      	uxth	r3, r3
 8006624:	8033      	strh	r3, [r6, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8006626:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800662a:	2b63      	cmp	r3, #99	; 0x63
 800662c:	dc06      	bgt.n	800663c <mqtt_cyclic_timer+0x44>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800662e:	4632      	mov	r2, r6
 8006630:	492f      	ldr	r1, [pc, #188]	; (80066f0 <mqtt_cyclic_timer+0xf8>)
 8006632:	f241 3088 	movw	r0, #5000	; 0x1388
 8006636:	f007 fbe1 	bl	800ddfc <sys_timeout>
}
 800663a:	e7e6      	b.n	800660a <mqtt_cyclic_timer+0x12>
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800663c:	f240 1101 	movw	r1, #257	; 0x101
 8006640:	4630      	mov	r0, r6
 8006642:	f7ff ff7b 	bl	800653c <mqtt_close>
  if (restart_timer) {
 8006646:	e7e0      	b.n	800660a <mqtt_cyclic_timer+0x12>
  r = *tail;
 8006648:	69b4      	ldr	r4, [r6, #24]
  while (t > 0 && r != NULL) {
 800664a:	b1c4      	cbz	r4, 800667e <mqtt_cyclic_timer+0x86>
 800664c:	2505      	movs	r5, #5
        r->cb(r->arg, ERR_TIMEOUT);
 800664e:	f06f 0702 	mvn.w	r7, #2
 8006652:	e003      	b.n	800665c <mqtt_cyclic_timer+0x64>
    r->next = r;
 8006654:	6024      	str	r4, [r4, #0]
      r = *(struct mqtt_request_t *const volatile *)tail;
 8006656:	69b4      	ldr	r4, [r6, #24]
  while (t > 0 && r != NULL) {
 8006658:	b18d      	cbz	r5, 800667e <mqtt_cyclic_timer+0x86>
 800665a:	b184      	cbz	r4, 800667e <mqtt_cyclic_timer+0x86>
    if (t >= r->timeout_diff) {
 800665c:	b2aa      	uxth	r2, r5
 800665e:	89e3      	ldrh	r3, [r4, #14]
 8006660:	429a      	cmp	r2, r3
 8006662:	d30a      	bcc.n	800667a <mqtt_cyclic_timer+0x82>
      t -= (u8_t)r->timeout_diff;
 8006664:	1aed      	subs	r5, r5, r3
 8006666:	b2ed      	uxtb	r5, r5
      *tail = r->next;
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	61b3      	str	r3, [r6, #24]
      if (r->cb != NULL) {
 800666c:	6863      	ldr	r3, [r4, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <mqtt_cyclic_timer+0x5c>
        r->cb(r->arg, ERR_TIMEOUT);
 8006672:	4639      	mov	r1, r7
 8006674:	68a0      	ldr	r0, [r4, #8]
 8006676:	4798      	blx	r3
 8006678:	e7ec      	b.n	8006654 <mqtt_cyclic_timer+0x5c>
      r->timeout_diff -= t;
 800667a:	1a9d      	subs	r5, r3, r2
 800667c:	81e5      	strh	r5, [r4, #14]
    if (client->keep_alive > 0) {
 800667e:	8872      	ldrh	r2, [r6, #2]
 8006680:	2a00      	cmp	r2, #0
 8006682:	d0d4      	beq.n	800662e <mqtt_cyclic_timer+0x36>
      client->server_watchdog++;
 8006684:	88b3      	ldrh	r3, [r6, #4]
 8006686:	3301      	adds	r3, #1
 8006688:	b29b      	uxth	r3, r3
 800668a:	80b3      	strh	r3, [r6, #4]
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800668c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006690:	eb02 0252 	add.w	r2, r2, r2, lsr #1
 8006694:	4293      	cmp	r3, r2
 8006696:	dc0b      	bgt.n	80066b0 <mqtt_cyclic_timer+0xb8>
  u8_t restart_timer = 1;
 8006698:	2401      	movs	r4, #1
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800669a:	8833      	ldrh	r3, [r6, #0]
 800669c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80066a0:	8872      	ldrh	r2, [r6, #2]
 80066a2:	4291      	cmp	r1, r2
 80066a4:	da0b      	bge.n	80066be <mqtt_cyclic_timer+0xc6>
        client->cyclic_tick++;
 80066a6:	3301      	adds	r3, #1
 80066a8:	8033      	strh	r3, [r6, #0]
  if (restart_timer) {
 80066aa:	2c00      	cmp	r4, #0
 80066ac:	d0ad      	beq.n	800660a <mqtt_cyclic_timer+0x12>
 80066ae:	e7be      	b.n	800662e <mqtt_cyclic_timer+0x36>
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80066b0:	f240 1101 	movw	r1, #257	; 0x101
 80066b4:	4630      	mov	r0, r6
 80066b6:	f7ff ff41 	bl	800653c <mqtt_close>
        restart_timer = 0;
 80066ba:	2400      	movs	r4, #0
 80066bc:	e7ed      	b.n	800669a <mqtt_cyclic_timer+0xa2>
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 80066be:	f106 05ec 	add.w	r5, r6, #236	; 0xec
 80066c2:	2100      	movs	r1, #0
 80066c4:	4628      	mov	r0, r5
 80066c6:	f7ff fe69 	bl	800639c <mqtt_output_check_space>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	d0ed      	beq.n	80066aa <mqtt_cyclic_timer+0xb2>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 80066ce:	2700      	movs	r7, #0
 80066d0:	9701      	str	r7, [sp, #4]
 80066d2:	9700      	str	r7, [sp, #0]
 80066d4:	463b      	mov	r3, r7
 80066d6:	463a      	mov	r2, r7
 80066d8:	210c      	movs	r1, #12
 80066da:	4628      	mov	r0, r5
 80066dc:	f7ff ff0a 	bl	80064f4 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 80066e0:	8037      	strh	r7, [r6, #0]
 80066e2:	e7e2      	b.n	80066aa <mqtt_cyclic_timer+0xb2>
 80066e4:	080169e8 	.word	0x080169e8
 80066e8:	08016b80 	.word	0x08016b80
 80066ec:	08016a38 	.word	0x08016a38
 80066f0:	080065f9 	.word	0x080065f9

080066f4 <mqtt_output_send>:
{
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	4606      	mov	r6, r0
 80066f8:	460f      	mov	r7, r1
  u32_t len = rb->put - rb->get;
 80066fa:	8842      	ldrh	r2, [r0, #2]
 80066fc:	8803      	ldrh	r3, [r0, #0]
 80066fe:	1a9b      	subs	r3, r3, r2
  if (len > 0xFFFF) {
 8006700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8006704:	bf2c      	ite	cs
 8006706:	f503 7480 	addcs.w	r4, r3, #256	; 0x100
  u32_t len = rb->put - rb->get;
 800670a:	461c      	movcc	r4, r3
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800670c:	b2a1      	uxth	r1, r4
 800670e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8006712:	4281      	cmp	r1, r0
  return (u16_t)len;
 8006714:	bfb2      	itee	lt
 8006716:	460c      	movlt	r4, r1
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8006718:	f5c2 7480 	rsbge	r4, r2, #256	; 0x100
 800671c:	b2a4      	uxthge	r4, r4
  u16_t send_len = altcp_sndbuf(tpcb);
 800671e:	f8b7 5068 	ldrh.w	r5, [r7, #104]	; 0x68
  if (send_len == 0 || ringbuf_lin_len == 0) {
 8006722:	b195      	cbz	r5, 800674a <mqtt_output_send+0x56>
 8006724:	b18c      	cbz	r4, 800674a <mqtt_output_send+0x56>
  if (send_len > ringbuf_lin_len) {
 8006726:	42ac      	cmp	r4, r5
 8006728:	d242      	bcs.n	80067b0 <mqtt_output_send+0xbc>
  if (len > 0xFFFF) {
 800672a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800672e:	bf28      	it	cs
 8006730:	f503 7380 	addcs.w	r3, r3, #256	; 0x100
  return (u16_t)len;
 8006734:	b29d      	uxth	r5, r3
  return &rb->buf[rb->get];
 8006736:	1d11      	adds	r1, r2, #4
 8006738:	4431      	add	r1, r6
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800673a:	42ac      	cmp	r4, r5
 800673c:	d206      	bcs.n	800674c <mqtt_output_send+0x58>
 800673e:	2303      	movs	r3, #3
 8006740:	4622      	mov	r2, r4
 8006742:	4638      	mov	r0, r7
 8006744:	f006 f8de 	bl	800c904 <tcp_write>
  if ((err == ERR_OK) && wrap) {
 8006748:	b158      	cbz	r0, 8006762 <mqtt_output_send+0x6e>
}
 800674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800674c:	2301      	movs	r3, #1
 800674e:	4622      	mov	r2, r4
 8006750:	4638      	mov	r0, r7
 8006752:	f006 f8d7 	bl	800c904 <tcp_write>
  if ((err == ERR_OK) && wrap) {
 8006756:	2800      	cmp	r0, #0
 8006758:	d1f7      	bne.n	800674a <mqtt_output_send+0x56>
 800675a:	42ac      	cmp	r4, r5
    send_len = ringbuf_lin_len;
 800675c:	bf28      	it	cs
 800675e:	4625      	movcs	r5, r4
  if ((err == ERR_OK) && wrap) {
 8006760:	d22f      	bcs.n	80067c2 <mqtt_output_send+0xce>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8006762:	4621      	mov	r1, r4
 8006764:	4630      	mov	r0, r6
 8006766:	f7ff fe77 	bl	8006458 <mqtt_ringbuf_advance_get_idx>
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800676a:	f8b7 5068 	ldrh.w	r5, [r7, #104]	; 0x68
  u32_t len = rb->put - rb->get;
 800676e:	8871      	ldrh	r1, [r6, #2]
 8006770:	8833      	ldrh	r3, [r6, #0]
 8006772:	1a5b      	subs	r3, r3, r1
  if (len > 0xFFFF) {
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8006778:	bf28      	it	cs
 800677a:	f503 7380 	addcs.w	r3, r3, #256	; 0x100
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800677e:	b298      	uxth	r0, r3
 8006780:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8006784:	4604      	mov	r4, r0
 8006786:	4290      	cmp	r0, r2
 8006788:	bfa8      	it	ge
 800678a:	4614      	movge	r4, r2
 800678c:	42a5      	cmp	r5, r4
 800678e:	db05      	blt.n	800679c <mqtt_output_send+0xa8>
 8006790:	4290      	cmp	r0, r2
  return (u16_t)len;
 8006792:	bfb2      	itee	lt
 8006794:	4605      	movlt	r5, r0
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8006796:	f5c1 7580 	rsbge	r5, r1, #256	; 0x100
 800679a:	b2ad      	uxthge	r5, r5
  return &rb->buf[rb->get];
 800679c:	3104      	adds	r1, #4
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800679e:	2301      	movs	r3, #1
 80067a0:	462a      	mov	r2, r5
 80067a2:	4431      	add	r1, r6
 80067a4:	4638      	mov	r0, r7
 80067a6:	f006 f8ad 	bl	800c904 <tcp_write>
  if (err == ERR_OK) {
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d1cd      	bne.n	800674a <mqtt_output_send+0x56>
 80067ae:	e008      	b.n	80067c2 <mqtt_output_send+0xce>
  return &rb->buf[rb->get];
 80067b0:	1d11      	adds	r1, r2, #4
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80067b2:	2301      	movs	r3, #1
 80067b4:	462a      	mov	r2, r5
 80067b6:	4431      	add	r1, r6
 80067b8:	4638      	mov	r0, r7
 80067ba:	f006 f8a3 	bl	800c904 <tcp_write>
  if ((err == ERR_OK) && wrap) {
 80067be:	2800      	cmp	r0, #0
 80067c0:	d1c3      	bne.n	800674a <mqtt_output_send+0x56>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80067c2:	4629      	mov	r1, r5
 80067c4:	4630      	mov	r0, r6
 80067c6:	f7ff fe47 	bl	8006458 <mqtt_ringbuf_advance_get_idx>
    altcp_output(tpcb);
 80067ca:	4638      	mov	r0, r7
 80067cc:	f006 ffde 	bl	800d78c <tcp_output>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
 80067d0:	e7bb      	b.n	800674a <mqtt_output_send+0x56>

080067d2 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 80067d2:	b508      	push	{r3, lr}
  mqtt_client_t *client = (mqtt_client_t *)arg;
  if (client->conn_state == MQTT_CONNECTED) {
 80067d4:	7a83      	ldrb	r3, [r0, #10]
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d001      	beq.n	80067de <mqtt_tcp_poll_cb+0xc>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
  }
  return ERR_OK;
}
 80067da:	2000      	movs	r0, #0
 80067dc:	bd08      	pop	{r3, pc}
    mqtt_output_send(&client->output, tpcb);
 80067de:	30ec      	adds	r0, #236	; 0xec
 80067e0:	f7ff ff88 	bl	80066f4 <mqtt_output_send>
 80067e4:	e7f9      	b.n	80067da <mqtt_tcp_poll_cb+0x8>

080067e6 <mqtt_tcp_sent_cb>:
{
 80067e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (client->conn_state == MQTT_CONNECTED) {
 80067e8:	7a83      	ldrb	r3, [r0, #10]
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d001      	beq.n	80067f2 <mqtt_tcp_sent_cb+0xc>
}
 80067ee:	2000      	movs	r0, #0
 80067f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f2:	4605      	mov	r5, r0
    client->cyclic_tick = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	8003      	strh	r3, [r0, #0]
    client->server_watchdog = 0;
 80067f8:	8083      	strh	r3, [r0, #4]
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 80067fa:	f100 0718 	add.w	r7, r0, #24
 80067fe:	461e      	mov	r6, r3
 8006800:	e000      	b.n	8006804 <mqtt_tcp_sent_cb+0x1e>
    r->next = r;
 8006802:	6024      	str	r4, [r4, #0]
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8006804:	4631      	mov	r1, r6
 8006806:	4638      	mov	r0, r7
 8006808:	f7ff fe42 	bl	8006490 <mqtt_take_request>
 800680c:	4604      	mov	r4, r0
 800680e:	b130      	cbz	r0, 800681e <mqtt_tcp_sent_cb+0x38>
      if (r->cb != NULL) {
 8006810:	6863      	ldr	r3, [r4, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f5      	beq.n	8006802 <mqtt_tcp_sent_cb+0x1c>
        r->cb(r->arg, ERR_OK);
 8006816:	4631      	mov	r1, r6
 8006818:	68a0      	ldr	r0, [r4, #8]
 800681a:	4798      	blx	r3
 800681c:	e7f1      	b.n	8006802 <mqtt_tcp_sent_cb+0x1c>
    mqtt_output_send(&client->output, client->conn);
 800681e:	68e9      	ldr	r1, [r5, #12]
 8006820:	f105 00ec 	add.w	r0, r5, #236	; 0xec
 8006824:	f7ff ff66 	bl	80066f4 <mqtt_output_send>
 8006828:	e7e1      	b.n	80067ee <mqtt_tcp_sent_cb+0x8>

0800682a <pub_ack_rec_rel_response>:
{
 800682a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800682e:	b083      	sub	sp, #12
 8006830:	4605      	mov	r5, r0
 8006832:	4688      	mov	r8, r1
 8006834:	4691      	mov	r9, r2
 8006836:	461f      	mov	r7, r3
  if (mqtt_output_check_space(&client->output, 2)) {
 8006838:	f100 06ec 	add.w	r6, r0, #236	; 0xec
 800683c:	2102      	movs	r1, #2
 800683e:	4630      	mov	r0, r6
 8006840:	f7ff fdac 	bl	800639c <mqtt_output_check_space>
 8006844:	b1a8      	cbz	r0, 8006872 <pub_ack_rec_rel_response+0x48>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8006846:	2302      	movs	r3, #2
 8006848:	9301      	str	r3, [sp, #4]
 800684a:	2400      	movs	r4, #0
 800684c:	9400      	str	r4, [sp, #0]
 800684e:	463b      	mov	r3, r7
 8006850:	4622      	mov	r2, r4
 8006852:	4641      	mov	r1, r8
 8006854:	4630      	mov	r0, r6
 8006856:	f7ff fe4d 	bl	80064f4 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800685a:	4649      	mov	r1, r9
 800685c:	4630      	mov	r0, r6
 800685e:	f7ff fd47 	bl	80062f0 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8006862:	68e9      	ldr	r1, [r5, #12]
 8006864:	4630      	mov	r0, r6
 8006866:	f7ff ff45 	bl	80066f4 <mqtt_output_send>
  err_t err = ERR_OK;
 800686a:	4620      	mov	r0, r4
}
 800686c:	b003      	add	sp, #12
 800686e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = ERR_MEM;
 8006872:	f04f 30ff 	mov.w	r0, #4294967295
 8006876:	e7f9      	b.n	800686c <pub_ack_rec_rel_response+0x42>

08006878 <mqtt_message_received>:
{
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	b083      	sub	sp, #12
 800687e:	4604      	mov	r4, r0
 8006880:	4689      	mov	r9, r1
 8006882:	4615      	mov	r5, r2
 8006884:	461e      	mov	r6, r3
  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8006886:	f100 0a6c 	add.w	sl, r0, #108	; 0x6c
 800688a:	eb0a 0701 	add.w	r7, sl, r1
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800688e:	f890 806c 	ldrb.w	r8, [r0, #108]	; 0x6c
 8006892:	ea4f 1818 	mov.w	r8, r8, lsr #4
  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8006896:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006898:	2b7f      	cmp	r3, #127	; 0x7f
 800689a:	d840      	bhi.n	800691e <mqtt_message_received+0xa6>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800689c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800689e:	4599      	cmp	r9, r3
 80068a0:	d845      	bhi.n	800692e <mqtt_message_received+0xb6>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 80068a2:	eb09 0305 	add.w	r3, r9, r5
 80068a6:	2b80      	cmp	r3, #128	; 0x80
 80068a8:	dc49      	bgt.n	800693e <mqtt_message_received+0xc6>
  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 80068aa:	f1b8 0f02 	cmp.w	r8, #2
 80068ae:	d050      	beq.n	8006952 <mqtt_message_received+0xda>
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 80068b0:	f1b8 0f0d 	cmp.w	r8, #13
 80068b4:	f000 80ff 	beq.w	8006ab6 <mqtt_message_received+0x23e>
  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 80068b8:	f1b8 0f03 	cmp.w	r8, #3
 80068bc:	d065      	beq.n	800698a <mqtt_message_received+0x112>
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 80068be:	f81a 1009 	ldrb.w	r1, [sl, r9]
    pkt_id |= (u16_t)var_hdr_payload[1];
 80068c2:	787a      	ldrb	r2, [r7, #1]
    if (pkt_id == 0) {
 80068c4:	ea52 2101 	orrs.w	r1, r2, r1, lsl #8
 80068c8:	f000 810d 	beq.w	8006ae6 <mqtt_message_received+0x26e>
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 80068cc:	f1b8 0f05 	cmp.w	r8, #5
 80068d0:	f000 80dc 	beq.w	8006a8c <mqtt_message_received+0x214>
    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 80068d4:	f1b8 0f06 	cmp.w	r8, #6
 80068d8:	f000 80e1 	beq.w	8006a9e <mqtt_message_received+0x226>
    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 80068dc:	f1b8 0f09 	cmp.w	r8, #9
 80068e0:	f000 812a 	beq.w	8006b38 <mqtt_message_received+0x2c0>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80068e4:	f1b8 0f0b 	cmp.w	r8, #11
 80068e8:	f200 8100 	bhi.w	8006aec <mqtt_message_received+0x274>
 80068ec:	f44f 6309 	mov.w	r3, #2192	; 0x890
 80068f0:	fa23 f808 	lsr.w	r8, r3, r8
 80068f4:	f018 0f01 	tst.w	r8, #1
 80068f8:	f000 80fb 	beq.w	8006af2 <mqtt_message_received+0x27a>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 80068fc:	f104 0018 	add.w	r0, r4, #24
 8006900:	f7ff fdc6 	bl	8006490 <mqtt_take_request>
      if (r != NULL) {
 8006904:	4604      	mov	r4, r0
 8006906:	2800      	cmp	r0, #0
 8006908:	f000 8113 	beq.w	8006b32 <mqtt_message_received+0x2ba>
        } else if (r->cb != NULL) {
 800690c:	6863      	ldr	r3, [r4, #4]
 800690e:	b113      	cbz	r3, 8006916 <mqtt_message_received+0x9e>
          r->cb(r->arg, ERR_OK);
 8006910:	2100      	movs	r1, #0
 8006912:	68a0      	ldr	r0, [r4, #8]
 8006914:	4798      	blx	r3
    r->next = r;
 8006916:	6024      	str	r4, [r4, #0]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006918:	f04f 0a00 	mov.w	sl, #0
}
 800691c:	e0cd      	b.n	8006aba <mqtt_message_received+0x242>
  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800691e:	4b92      	ldr	r3, [pc, #584]	; (8006b68 <mqtt_message_received+0x2f0>)
 8006920:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006924:	4991      	ldr	r1, [pc, #580]	; (8006b6c <mqtt_message_received+0x2f4>)
 8006926:	4892      	ldr	r0, [pc, #584]	; (8006b70 <mqtt_message_received+0x2f8>)
 8006928:	f00d fcc6 	bl	80142b8 <app_debug_rtt_raw>
 800692c:	e7b6      	b.n	800689c <mqtt_message_received+0x24>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800692e:	4b8e      	ldr	r3, [pc, #568]	; (8006b68 <mqtt_message_received+0x2f0>)
 8006930:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8006934:	498f      	ldr	r1, [pc, #572]	; (8006b74 <mqtt_message_received+0x2fc>)
 8006936:	488e      	ldr	r0, [pc, #568]	; (8006b70 <mqtt_message_received+0x2f8>)
 8006938:	f00d fcbe 	bl	80142b8 <app_debug_rtt_raw>
 800693c:	e7b1      	b.n	80068a2 <mqtt_message_received+0x2a>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800693e:	4b8a      	ldr	r3, [pc, #552]	; (8006b68 <mqtt_message_received+0x2f0>)
 8006940:	f240 22ad 	movw	r2, #685	; 0x2ad
 8006944:	498c      	ldr	r1, [pc, #560]	; (8006b78 <mqtt_message_received+0x300>)
 8006946:	488a      	ldr	r0, [pc, #552]	; (8006b70 <mqtt_message_received+0x2f8>)
 8006948:	f00d fcb6 	bl	80142b8 <app_debug_rtt_raw>
 800694c:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006950:	e0b3      	b.n	8006aba <mqtt_message_received+0x242>
    if (client->conn_state == MQTT_CONNECTING) {
 8006952:	7aa3      	ldrb	r3, [r4, #10]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d002      	beq.n	800695e <mqtt_message_received+0xe6>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006958:	f04f 0a00 	mov.w	sl, #0
 800695c:	e0ad      	b.n	8006aba <mqtt_message_received+0x242>
      if (length < 2) {
 800695e:	2d01      	cmp	r5, #1
 8006960:	f240 80a6 	bls.w	8006ab0 <mqtt_message_received+0x238>
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8006964:	f897 a001 	ldrb.w	sl, [r7, #1]
      if (res == MQTT_CONNECT_ACCEPTED) {
 8006968:	f1ba 0f00 	cmp.w	sl, #0
 800696c:	f040 80a5 	bne.w	8006aba <mqtt_message_received+0x242>
        client->cyclic_tick = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	8023      	strh	r3, [r4, #0]
        client->conn_state = MQTT_CONNECTED;
 8006974:	2303      	movs	r3, #3
 8006976:	72a3      	strb	r3, [r4, #10]
        if (client->connect_cb != 0) {
 8006978:	6963      	ldr	r3, [r4, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 809d 	beq.w	8006aba <mqtt_message_received+0x242>
          client->connect_cb(client, client->connect_arg, res);
 8006980:	2200      	movs	r2, #0
 8006982:	6921      	ldr	r1, [r4, #16]
 8006984:	4620      	mov	r0, r4
 8006986:	4798      	blx	r3
 8006988:	e097      	b.n	8006aba <mqtt_message_received+0x242>
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800698a:	f894 806c 	ldrb.w	r8, [r4, #108]	; 0x6c
 800698e:	f3c8 0841 	ubfx	r8, r8, #1, #2
    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8006992:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	d845      	bhi.n	8006a24 <mqtt_message_received+0x1ac>
      u16_t qos_len = (qos ? 2U : 0U);
 8006998:	f1b8 0f00 	cmp.w	r8, #0
 800699c:	bf14      	ite	ne
 800699e:	2302      	movne	r3, #2
 80069a0:	2300      	moveq	r3, #0
      if (length < 2 + qos_len) {
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	4295      	cmp	r5, r2
 80069a6:	f340 808c 	ble.w	8006ac2 <mqtt_message_received+0x24a>
      topic_len = var_hdr_payload[0];
 80069aa:	f81a 2009 	ldrb.w	r2, [sl, r9]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 80069ae:	f897 b001 	ldrb.w	fp, [r7, #1]
 80069b2:	eb0b 2b02 	add.w	fp, fp, r2, lsl #8
 80069b6:	fa1f fb8b 	uxth.w	fp, fp
      if ((topic_len > length - (2 + qos_len)) ||
 80069ba:	1c9a      	adds	r2, r3, #2
 80069bc:	1aaa      	subs	r2, r5, r2
 80069be:	4593      	cmp	fp, r2
 80069c0:	f300 8082 	bgt.w	8006ac8 <mqtt_message_received+0x250>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 80069c4:	f1c9 027e 	rsb	r2, r9, #126	; 0x7e
 80069c8:	1ad3      	subs	r3, r2, r3
      if ((topic_len > length - (2 + qos_len)) ||
 80069ca:	459b      	cmp	fp, r3
 80069cc:	d87f      	bhi.n	8006ace <mqtt_message_received+0x256>
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 80069ce:	f1c9 0180 	rsb	r1, r9, #128	; 0x80
      after_topic = 2 + topic_len;
 80069d2:	f10b 0902 	add.w	r9, fp, #2
 80069d6:	fa1f f989 	uxth.w	r9, r9
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 80069da:	464b      	mov	r3, r9
 80069dc:	f1b8 0f00 	cmp.w	r8, #0
 80069e0:	f040 8096 	bne.w	8006b10 <mqtt_message_received+0x298>
 80069e4:	f109 0301 	add.w	r3, r9, #1
 80069e8:	4299      	cmp	r1, r3
 80069ea:	f0c0 808b 	bcc.w	8006b04 <mqtt_message_received+0x28c>
        client->inpub_pkt_id = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	8123      	strh	r3, [r4, #8]
      topic = var_hdr_payload + 2;
 80069f2:	1cba      	adds	r2, r7, #2
 80069f4:	9200      	str	r2, [sp, #0]
      bkp = topic[topic_len];
 80069f6:	4611      	mov	r1, r2
 80069f8:	f812 300b 	ldrb.w	r3, [r2, fp]
 80069fc:	9301      	str	r3, [sp, #4]
      topic[topic_len] = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	f802 300b 	strb.w	r3, [r2, fp]
      payload_length = length - after_topic;
 8006a04:	eba5 0a09 	sub.w	sl, r5, r9
 8006a08:	fa1f fa8a 	uxth.w	sl, sl
      if (client->pub_cb != NULL) {
 8006a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a0e:	b11b      	cbz	r3, 8006a18 <mqtt_message_received+0x1a0>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8006a10:	eb0a 0206 	add.w	r2, sl, r6
 8006a14:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006a16:	4798      	blx	r3
      topic[topic_len] = bkp;
 8006a18:	9b00      	ldr	r3, [sp, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	9b01      	ldr	r3, [sp, #4]
 8006a1e:	f802 300b 	strb.w	r3, [r2, fp]
 8006a22:	e002      	b.n	8006a2a <mqtt_message_received+0x1b2>
    u16_t payload_length = length;
 8006a24:	46aa      	mov	sl, r5
    u16_t payload_offset = 0;
 8006a26:	f04f 0900 	mov.w	r9, #0
    if (payload_length > 0 || remaining_length == 0) {
 8006a2a:	f1ba 0f00 	cmp.w	sl, #0
 8006a2e:	d11b      	bne.n	8006a68 <mqtt_message_received+0x1f0>
 8006a30:	2e00      	cmp	r6, #0
 8006a32:	d142      	bne.n	8006aba <mqtt_message_received+0x242>
      if (length < (size_t)(payload_offset + payload_length)) {
 8006a34:	45a9      	cmp	r9, r5
 8006a36:	d862      	bhi.n	8006afe <mqtt_message_received+0x286>
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8006a38:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	eb07 0109 	add.w	r1, r7, r9
 8006a42:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006a44:	47a8      	blx	r5
      if (remaining_length == 0 && qos > 0) {
 8006a46:	f1b8 0f00 	cmp.w	r8, #0
 8006a4a:	d049      	beq.n	8006ae0 <mqtt_message_received+0x268>
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8006a4c:	f1b8 0f01 	cmp.w	r8, #1
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	8922      	ldrh	r2, [r4, #8]
 8006a56:	bf0c      	ite	eq
 8006a58:	2104      	moveq	r1, #4
 8006a5a:	2105      	movne	r1, #5
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f7ff fee4 	bl	800682a <pub_ack_rec_rel_response>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006a62:	f04f 0a00 	mov.w	sl, #0
 8006a66:	e028      	b.n	8006aba <mqtt_message_received+0x242>
      if (length < (size_t)(payload_offset + payload_length)) {
 8006a68:	eb09 030a 	add.w	r3, r9, sl
 8006a6c:	429d      	cmp	r5, r3
 8006a6e:	d334      	bcc.n	8006ada <mqtt_message_received+0x262>
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8006a70:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006a72:	fab6 f386 	clz	r3, r6
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	4652      	mov	r2, sl
 8006a7a:	eb07 0109 	add.w	r1, r7, r9
 8006a7e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006a80:	47a8      	blx	r5
      if (remaining_length == 0 && qos > 0) {
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d0df      	beq.n	8006a46 <mqtt_message_received+0x1ce>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006a86:	f04f 0a00 	mov.w	sl, #0
 8006a8a:	e016      	b.n	8006aba <mqtt_message_received+0x242>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	460a      	mov	r2, r1
 8006a90:	2106      	movs	r1, #6
 8006a92:	4620      	mov	r0, r4
 8006a94:	f7ff fec9 	bl	800682a <pub_ack_rec_rel_response>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006a98:	f04f 0a00 	mov.w	sl, #0
 8006a9c:	e00d      	b.n	8006aba <mqtt_message_received+0x242>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	460a      	mov	r2, r1
 8006aa2:	2107      	movs	r1, #7
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f7ff fec0 	bl	800682a <pub_ack_rec_rel_response>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006aaa:	f04f 0a00 	mov.w	sl, #0
 8006aae:	e004      	b.n	8006aba <mqtt_message_received+0x242>
  return MQTT_CONNECT_DISCONNECTED;
 8006ab0:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006ab4:	e001      	b.n	8006aba <mqtt_message_received+0x242>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006ab6:	f04f 0a00 	mov.w	sl, #0
}
 8006aba:	4650      	mov	r0, sl
 8006abc:	b003      	add	sp, #12
 8006abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return MQTT_CONNECT_DISCONNECTED;
 8006ac2:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006ac6:	e7f8      	b.n	8006aba <mqtt_message_received+0x242>
 8006ac8:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006acc:	e7f5      	b.n	8006aba <mqtt_message_received+0x242>
 8006ace:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006ad2:	e7f2      	b.n	8006aba <mqtt_message_received+0x242>
 8006ad4:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006ad8:	e7ef      	b.n	8006aba <mqtt_message_received+0x242>
 8006ada:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006ade:	e7ec      	b.n	8006aba <mqtt_message_received+0x242>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006ae0:	f04f 0a00 	mov.w	sl, #0
 8006ae4:	e7e9      	b.n	8006aba <mqtt_message_received+0x242>
  return MQTT_CONNECT_DISCONNECTED;
 8006ae6:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006aea:	e7e6      	b.n	8006aba <mqtt_message_received+0x242>
 8006aec:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006af0:	e7e3      	b.n	8006aba <mqtt_message_received+0x242>
 8006af2:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006af6:	e7e0      	b.n	8006aba <mqtt_message_received+0x242>
 8006af8:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006afc:	e7dd      	b.n	8006aba <mqtt_message_received+0x242>
 8006afe:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006b02:	e7da      	b.n	8006aba <mqtt_message_received+0x242>
 8006b04:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006b08:	e7d7      	b.n	8006aba <mqtt_message_received+0x242>
 8006b0a:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8006b0e:	e7d4      	b.n	8006aba <mqtt_message_received+0x242>
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8006b10:	f109 0902 	add.w	r9, r9, #2
 8006b14:	4549      	cmp	r1, r9
 8006b16:	d3f8      	bcc.n	8006b0a <mqtt_message_received+0x292>
        if (length < after_topic + 2U) {
 8006b18:	454d      	cmp	r5, r9
 8006b1a:	d3db      	bcc.n	8006ad4 <mqtt_message_received+0x25c>
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8006b1c:	5cfa      	ldrb	r2, [r7, r3]
 8006b1e:	443b      	add	r3, r7
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006b26:	8123      	strh	r3, [r4, #8]
        after_topic += 2;
 8006b28:	f10b 0904 	add.w	r9, fp, #4
 8006b2c:	fa1f f989 	uxth.w	r9, r9
 8006b30:	e75f      	b.n	80069f2 <mqtt_message_received+0x17a>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006b32:	f04f 0a00 	mov.w	sl, #0
 8006b36:	e7c0      	b.n	8006aba <mqtt_message_received+0x242>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8006b38:	f104 0018 	add.w	r0, r4, #24
 8006b3c:	f7ff fca8 	bl	8006490 <mqtt_take_request>
      if (r != NULL) {
 8006b40:	4604      	mov	r4, r0
 8006b42:	b170      	cbz	r0, 8006b62 <mqtt_message_received+0x2ea>
          if (length < 3) {
 8006b44:	2d02      	cmp	r5, #2
 8006b46:	d9d7      	bls.n	8006af8 <mqtt_message_received+0x280>
  if (r->cb != NULL) {
 8006b48:	6863      	ldr	r3, [r4, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f43f aee3 	beq.w	8006916 <mqtt_message_received+0x9e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8006b50:	78ba      	ldrb	r2, [r7, #2]
 8006b52:	2a03      	cmp	r2, #3
 8006b54:	bf34      	ite	cc
 8006b56:	2100      	movcc	r1, #0
 8006b58:	f06f 010c 	mvncs.w	r1, #12
 8006b5c:	68a0      	ldr	r0, [r4, #8]
 8006b5e:	4798      	blx	r3
 8006b60:	e6d9      	b.n	8006916 <mqtt_message_received+0x9e>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006b62:	f04f 0a00 	mov.w	sl, #0
 8006b66:	e7a8      	b.n	8006aba <mqtt_message_received+0x242>
 8006b68:	080169e8 	.word	0x080169e8
 8006b6c:	08016ba4 	.word	0x08016ba4
 8006b70:	08016a38 	.word	0x08016a38
 8006b74:	08016bd4 	.word	0x08016bd4
 8006b78:	08016bf8 	.word	0x08016bf8

08006b7c <mqtt_tcp_recv_cb>:
{
 8006b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b80:	b087      	sub	sp, #28
 8006b82:	460c      	mov	r4, r1
 8006b84:	4693      	mov	fp, r2
 8006b86:	9302      	str	r3, [sp, #8]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8006b88:	4605      	mov	r5, r0
 8006b8a:	b318      	cbz	r0, 8006bd4 <mqtt_tcp_recv_cb+0x58>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8006b8c:	68eb      	ldr	r3, [r5, #12]
 8006b8e:	42a3      	cmp	r3, r4
 8006b90:	d006      	beq.n	8006ba0 <mqtt_tcp_recv_cb+0x24>
 8006b92:	4b69      	ldr	r3, [pc, #420]	; (8006d38 <mqtt_tcp_recv_cb+0x1bc>)
 8006b94:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8006b98:	4968      	ldr	r1, [pc, #416]	; (8006d3c <mqtt_tcp_recv_cb+0x1c0>)
 8006b9a:	4869      	ldr	r0, [pc, #420]	; (8006d40 <mqtt_tcp_recv_cb+0x1c4>)
 8006b9c:	f00d fb8c 	bl	80142b8 <app_debug_rtt_raw>
  if (p == NULL) {
 8006ba0:	f1bb 0f00 	cmp.w	fp, #0
 8006ba4:	d01e      	beq.n	8006be4 <mqtt_tcp_recv_cb+0x68>
    if (err != ERR_OK) {
 8006ba6:	9b02      	ldr	r3, [sp, #8]
 8006ba8:	bb23      	cbnz	r3, 8006bf4 <mqtt_tcp_recv_cb+0x78>
    altcp_recved(pcb, p->tot_len);
 8006baa:	f8bb 1008 	ldrh.w	r1, [fp, #8]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f002 ffc8 	bl	8009b44 <tcp_recved>
  while (p->tot_len > in_offset) {
 8006bb4:	f8bb 7008 	ldrh.w	r7, [fp, #8]
 8006bb8:	2f00      	cmp	r7, #0
 8006bba:	f000 809b 	beq.w	8006cf4 <mqtt_tcp_recv_cb+0x178>
  u32_t msg_rem_len = 0;
 8006bbe:	2600      	movs	r6, #0
  u16_t in_offset = 0;
 8006bc0:	46b0      	mov	r8, r6
  u8_t fixed_hdr_idx = 0;
 8006bc2:	4634      	mov	r4, r6
            fixed_hdr_idx = 0;
 8006bc4:	9604      	str	r6, [sp, #16]
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8006bc6:	f105 036c 	add.w	r3, r5, #108	; 0x6c
 8006bca:	9305      	str	r3, [sp, #20]
 8006bcc:	f8cd b004 	str.w	fp, [sp, #4]
 8006bd0:	46b3      	mov	fp, r6
 8006bd2:	e033      	b.n	8006c3c <mqtt_tcp_recv_cb+0xc0>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8006bd4:	4b58      	ldr	r3, [pc, #352]	; (8006d38 <mqtt_tcp_recv_cb+0x1bc>)
 8006bd6:	f240 32a7 	movw	r2, #935	; 0x3a7
 8006bda:	495a      	ldr	r1, [pc, #360]	; (8006d44 <mqtt_tcp_recv_cb+0x1c8>)
 8006bdc:	4858      	ldr	r0, [pc, #352]	; (8006d40 <mqtt_tcp_recv_cb+0x1c4>)
 8006bde:	f00d fb6b 	bl	80142b8 <app_debug_rtt_raw>
 8006be2:	e7d3      	b.n	8006b8c <mqtt_tcp_recv_cb+0x10>
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8006be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006be8:	4628      	mov	r0, r5
 8006bea:	f7ff fca7 	bl	800653c <mqtt_close>
  return ERR_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9302      	str	r3, [sp, #8]
 8006bf2:	e002      	b.n	8006bfa <mqtt_tcp_recv_cb+0x7e>
      pbuf_free(p);
 8006bf4:	4658      	mov	r0, fp
 8006bf6:	f002 fa6b 	bl	80090d0 <pbuf_free>
}
 8006bfa:	9802      	ldr	r0, [sp, #8]
 8006bfc:	b007      	add	sp, #28
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (fixed_hdr_idx < client->msg_idx) {
 8006c02:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006c04:	429c      	cmp	r4, r3
 8006c06:	d25a      	bcs.n	8006cbe <mqtt_tcp_recv_cb+0x142>
        b = client->rx_buffer[fixed_hdr_idx];
 8006c08:	192b      	adds	r3, r5, r4
 8006c0a:	f893 b06c 	ldrb.w	fp, [r3, #108]	; 0x6c
      fixed_hdr_idx++;
 8006c0e:	3401      	adds	r4, #1
 8006c10:	b2e4      	uxtb	r4, r4
      if (fixed_hdr_idx >= 2) {
 8006c12:	2c01      	cmp	r4, #1
 8006c14:	d90e      	bls.n	8006c34 <mqtt_tcp_recv_cb+0xb8>
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8006c16:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
 8006c1a:	1ea2      	subs	r2, r4, #2
 8006c1c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8006c20:	4093      	lsls	r3, r2
 8006c22:	431e      	orrs	r6, r3
        if ((b & 0x80) == 0) {
 8006c24:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8006c28:	d104      	bne.n	8006c34 <mqtt_tcp_recv_cb+0xb8>
          if (msg_rem_len == 0) {
 8006c2a:	2e00      	cmp	r6, #0
 8006c2c:	d057      	beq.n	8006cde <mqtt_tcp_recv_cb+0x162>
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8006c2e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006c30:	1ae3      	subs	r3, r4, r3
 8006c32:	441e      	add	r6, r3
  while (p->tot_len > in_offset) {
 8006c34:	9b01      	ldr	r3, [sp, #4]
 8006c36:	891f      	ldrh	r7, [r3, #8]
 8006c38:	4547      	cmp	r7, r8
 8006c3a:	d95a      	bls.n	8006cf2 <mqtt_tcp_recv_cb+0x176>
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8006c3c:	2c01      	cmp	r4, #1
 8006c3e:	d9e0      	bls.n	8006c02 <mqtt_tcp_recv_cb+0x86>
 8006c40:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8006c44:	d1dd      	bne.n	8006c02 <mqtt_tcp_recv_cb+0x86>
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8006c46:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8006c48:	1b12      	subs	r2, r2, r4
 8006c4a:	f1c4 0380 	rsb	r3, r4, #128	; 0x80
 8006c4e:	fbb2 f9f3 	udiv	r9, r2, r3
 8006c52:	fb03 2219 	mls	r2, r3, r9, r2
 8006c56:	fa1f f982 	uxth.w	r9, r2
 8006c5a:	eb09 0104 	add.w	r1, r9, r4
 8006c5e:	b289      	uxth	r1, r1
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8006c60:	eba7 0708 	sub.w	r7, r7, r8
 8006c64:	b2bf      	uxth	r7, r7
 8006c66:	42b7      	cmp	r7, r6
 8006c68:	bf28      	it	cs
 8006c6a:	b2b7      	uxthcs	r7, r6
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8006c6c:	f1c1 0380 	rsb	r3, r1, #128	; 0x80
 8006c70:	b29b      	uxth	r3, r3
      if (cpy_len > buffer_space) {
 8006c72:	9303      	str	r3, [sp, #12]
 8006c74:	469a      	mov	sl, r3
 8006c76:	42bb      	cmp	r3, r7
 8006c78:	bf28      	it	cs
 8006c7a:	46ba      	movcs	sl, r7
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8006c7c:	4643      	mov	r3, r8
 8006c7e:	4652      	mov	r2, sl
 8006c80:	9805      	ldr	r0, [sp, #20]
 8006c82:	4401      	add	r1, r0
 8006c84:	9801      	ldr	r0, [sp, #4]
 8006c86:	f002 fcc5 	bl	8009614 <pbuf_copy_partial>
      client->msg_idx += cpy_len;
 8006c8a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006c8c:	4453      	add	r3, sl
 8006c8e:	66ab      	str	r3, [r5, #104]	; 0x68
      in_offset += cpy_len;
 8006c90:	44d0      	add	r8, sl
 8006c92:	fa1f f888 	uxth.w	r8, r8
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8006c96:	ebb6 060a 	subs.w	r6, r6, sl
 8006c9a:	d035      	beq.n	8006d08 <mqtt_tcp_recv_cb+0x18c>
 8006c9c:	9a03      	ldr	r2, [sp, #12]
 8006c9e:	42ba      	cmp	r2, r7
 8006ca0:	d8c8      	bhi.n	8006c34 <mqtt_tcp_recv_cb+0xb8>
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8006ca2:	eb09 020a 	add.w	r2, r9, sl
 8006ca6:	4633      	mov	r3, r6
 8006ca8:	b292      	uxth	r2, r2
 8006caa:	4621      	mov	r1, r4
 8006cac:	4628      	mov	r0, r5
 8006cae:	f7ff fde3 	bl	8006878 <mqtt_message_received>
        if (res != MQTT_CONNECT_ACCEPTED) {
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d0bd      	beq.n	8006c34 <mqtt_tcp_recv_cb+0xb8>
 8006cb8:	f8dd b004 	ldr.w	fp, [sp, #4]
 8006cbc:	e034      	b.n	8006d28 <mqtt_tcp_recv_cb+0x1ac>
        b = pbuf_get_at(p, in_offset++);
 8006cbe:	f108 0701 	add.w	r7, r8, #1
 8006cc2:	b2bf      	uxth	r7, r7
 8006cc4:	4641      	mov	r1, r8
 8006cc6:	9801      	ldr	r0, [sp, #4]
 8006cc8:	f002 fded 	bl	80098a6 <pbuf_get_at>
 8006ccc:	4683      	mov	fp, r0
        client->rx_buffer[client->msg_idx++] = b;
 8006cce:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	66aa      	str	r2, [r5, #104]	; 0x68
 8006cd4:	442b      	add	r3, r5
 8006cd6:	f883 006c 	strb.w	r0, [r3, #108]	; 0x6c
        b = pbuf_get_at(p, in_offset++);
 8006cda:	46b8      	mov	r8, r7
 8006cdc:	e797      	b.n	8006c0e <mqtt_tcp_recv_cb+0x92>
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8006cde:	2300      	movs	r3, #0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f7ff fdc7 	bl	8006878 <mqtt_message_received>
            client->msg_idx = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	66ab      	str	r3, [r5, #104]	; 0x68
            fixed_hdr_idx = 0;
 8006cee:	9c04      	ldr	r4, [sp, #16]
 8006cf0:	e7a0      	b.n	8006c34 <mqtt_tcp_recv_cb+0xb8>
 8006cf2:	469b      	mov	fp, r3
    pbuf_free(p);
 8006cf4:	4658      	mov	r0, fp
 8006cf6:	f002 f9eb 	bl	80090d0 <pbuf_free>
    if (client->keep_alive != 0) {
 8006cfa:	886b      	ldrh	r3, [r5, #2]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f43f af7c 	beq.w	8006bfa <mqtt_tcp_recv_cb+0x7e>
      client->server_watchdog = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	80ab      	strh	r3, [r5, #4]
 8006d06:	e778      	b.n	8006bfa <mqtt_tcp_recv_cb+0x7e>
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8006d08:	eb09 020a 	add.w	r2, r9, sl
 8006d0c:	4633      	mov	r3, r6
 8006d0e:	b292      	uxth	r2, r2
 8006d10:	4621      	mov	r1, r4
 8006d12:	4628      	mov	r0, r5
 8006d14:	f7ff fdb0 	bl	8006878 <mqtt_message_received>
        if (res != MQTT_CONNECT_ACCEPTED) {
 8006d18:	4607      	mov	r7, r0
 8006d1a:	b918      	cbnz	r0, 8006d24 <mqtt_tcp_recv_cb+0x1a8>
          client->msg_idx = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	66ab      	str	r3, [r5, #104]	; 0x68
          fixed_hdr_idx = 0;
 8006d20:	9c04      	ldr	r4, [sp, #16]
 8006d22:	e787      	b.n	8006c34 <mqtt_tcp_recv_cb+0xb8>
 8006d24:	f8dd b004 	ldr.w	fp, [sp, #4]
    pbuf_free(p);
 8006d28:	4658      	mov	r0, fp
 8006d2a:	f002 f9d1 	bl	80090d0 <pbuf_free>
      mqtt_close(client, res);
 8006d2e:	4639      	mov	r1, r7
 8006d30:	4628      	mov	r0, r5
 8006d32:	f7ff fc03 	bl	800653c <mqtt_close>
 8006d36:	e7e0      	b.n	8006cfa <mqtt_tcp_recv_cb+0x17e>
 8006d38:	080169e8 	.word	0x080169e8
 8006d3c:	08016c34 	.word	0x08016c34
 8006d40:	08016a38 	.word	0x08016a38
 8006d44:	08016c10 	.word	0x08016c10

08006d48 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  mqtt_client_t *client = (mqtt_client_t *)arg;

  if (err != ERR_OK) {
 8006d4a:	4616      	mov	r6, r2
 8006d4c:	b10a      	cbz	r2, 8006d52 <mqtt_tcp_connect_cb+0xa>

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);

  return ERR_OK;
}
 8006d4e:	4630      	mov	r0, r6
 8006d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d52:	4604      	mov	r4, r0
 8006d54:	460d      	mov	r5, r1
  client->msg_idx = 0;
 8006d56:	2700      	movs	r7, #0
 8006d58:	6687      	str	r7, [r0, #104]	; 0x68
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8006d5a:	490e      	ldr	r1, [pc, #56]	; (8006d94 <mqtt_tcp_connect_cb+0x4c>)
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f002 ff6f 	bl	8009c40 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8006d62:	490d      	ldr	r1, [pc, #52]	; (8006d98 <mqtt_tcp_connect_cb+0x50>)
 8006d64:	4628      	mov	r0, r5
 8006d66:	f002 ff85 	bl	8009c74 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	490b      	ldr	r1, [pc, #44]	; (8006d9c <mqtt_tcp_connect_cb+0x54>)
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f002 ffb4 	bl	8009cdc <tcp_poll>
  client->conn_state = MQTT_CONNECTING;
 8006d74:	2302      	movs	r3, #2
 8006d76:	72a3      	strb	r3, [r4, #10]
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8006d78:	4622      	mov	r2, r4
 8006d7a:	4909      	ldr	r1, [pc, #36]	; (8006da0 <mqtt_tcp_connect_cb+0x58>)
 8006d7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8006d80:	f007 f83c 	bl	800ddfc <sys_timeout>
  client->cyclic_tick = 0;
 8006d84:	8027      	strh	r7, [r4, #0]
  mqtt_output_send(&client->output, client->conn);
 8006d86:	68e1      	ldr	r1, [r4, #12]
 8006d88:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 8006d8c:	f7ff fcb2 	bl	80066f4 <mqtt_output_send>
  return ERR_OK;
 8006d90:	e7dd      	b.n	8006d4e <mqtt_tcp_connect_cb+0x6>
 8006d92:	bf00      	nop
 8006d94:	08006b7d 	.word	0x08006b7d
 8006d98:	080067e7 	.word	0x080067e7
 8006d9c:	080067d3 	.word	0x080067d3
 8006da0:	080065f9 	.word	0x080065f9

08006da4 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8006da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	b085      	sub	sp, #20
 8006daa:	4688      	mov	r8, r1
 8006dac:	9202      	str	r2, [sp, #8]
 8006dae:	4699      	mov	r9, r3
 8006db0:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8006db4:	4606      	mov	r6, r0
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d050      	beq.n	8006e5c <mqtt_publish+0xb8>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8006dba:	f1b8 0f00 	cmp.w	r8, #0
 8006dbe:	d055      	beq.n	8006e6c <mqtt_publish+0xc8>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8006dc0:	7ab3      	ldrb	r3, [r6, #10]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d05a      	beq.n	8006e7c <mqtt_publish+0xd8>

  topic_strlen = strlen(topic);
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f7f9 fa38 	bl	800023c <strlen>
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8006dcc:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8006dd0:	4298      	cmp	r0, r3
 8006dd2:	d85d      	bhi.n	8006e90 <mqtt_publish+0xec>
  topic_len = (u16_t)topic_strlen;
 8006dd4:	b285      	uxth	r5, r0
  total_len = 2 + topic_len + payload_length;
 8006dd6:	1cac      	adds	r4, r5, #2
 8006dd8:	444c      	add	r4, r9

  if (qos > 0) {
 8006dda:	f1ba 0f00 	cmp.w	sl, #0
 8006dde:	d161      	bne.n	8006ea4 <mqtt_publish+0x100>
    total_len += 2;
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8006de0:	f04f 0b00 	mov.w	fp, #0
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8006de4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8006de8:	d268      	bcs.n	8006ebc <mqtt_publish+0x118>
  remaining_length = (u16_t)total_len;
 8006dea:	b2a4      	uxth	r4, r4

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8006dec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006df2:	465a      	mov	r2, fp
 8006df4:	2104      	movs	r1, #4
 8006df6:	f106 001c 	add.w	r0, r6, #28
 8006dfa:	f7ff fa9d 	bl	8006338 <mqtt_create_request>
  if (r == NULL) {
 8006dfe:	9003      	str	r0, [sp, #12]
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d07d      	beq.n	8006f00 <mqtt_publish+0x15c>
    return ERR_MEM;
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8006e04:	f106 07ec 	add.w	r7, r6, #236	; 0xec
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	f7ff fac6 	bl	800639c <mqtt_output_check_space>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d05d      	beq.n	8006ed0 <mqtt_publish+0x12c>
    mqtt_delete_request(r);
    return ERR_MEM;
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8006e14:	9401      	str	r4, [sp, #4]
 8006e16:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	4653      	mov	r3, sl
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2103      	movs	r1, #3
 8006e22:	4638      	mov	r0, r7
 8006e24:	f7ff fb66 	bl	80064f4 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8006e28:	462a      	mov	r2, r5
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	f7ff fa6a 	bl	8006306 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8006e32:	f1ba 0f00 	cmp.w	sl, #0
 8006e36:	d150      	bne.n	8006eda <mqtt_publish+0x136>
    mqtt_output_append_u16(&client->output, pkt_id);
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8006e38:	9b02      	ldr	r3, [sp, #8]
 8006e3a:	b113      	cbz	r3, 8006e42 <mqtt_publish+0x9e>
 8006e3c:	f1b9 0f00 	cmp.w	r9, #0
 8006e40:	d150      	bne.n	8006ee4 <mqtt_publish+0x140>
    mqtt_output_append_buf(&client->output, payload, payload_length);
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8006e42:	9903      	ldr	r1, [sp, #12]
 8006e44:	f106 0018 	add.w	r0, r6, #24
 8006e48:	f7ff fad0 	bl	80063ec <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8006e4c:	68f1      	ldr	r1, [r6, #12]
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f7ff fc50 	bl	80066f4 <mqtt_output_send>
  return ERR_OK;
 8006e54:	2000      	movs	r0, #0
}
 8006e56:	b005      	add	sp, #20
 8006e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8006e5c:	4b2a      	ldr	r3, [pc, #168]	; (8006f08 <mqtt_publish+0x164>)
 8006e5e:	f240 4254 	movw	r2, #1108	; 0x454
 8006e62:	492a      	ldr	r1, [pc, #168]	; (8006f0c <mqtt_publish+0x168>)
 8006e64:	482a      	ldr	r0, [pc, #168]	; (8006f10 <mqtt_publish+0x16c>)
 8006e66:	f00d fa27 	bl	80142b8 <app_debug_rtt_raw>
 8006e6a:	e7a6      	b.n	8006dba <mqtt_publish+0x16>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8006e6c:	4b26      	ldr	r3, [pc, #152]	; (8006f08 <mqtt_publish+0x164>)
 8006e6e:	f240 4255 	movw	r2, #1109	; 0x455
 8006e72:	4928      	ldr	r1, [pc, #160]	; (8006f14 <mqtt_publish+0x170>)
 8006e74:	4826      	ldr	r0, [pc, #152]	; (8006f10 <mqtt_publish+0x16c>)
 8006e76:	f00d fa1f 	bl	80142b8 <app_debug_rtt_raw>
 8006e7a:	e7a1      	b.n	8006dc0 <mqtt_publish+0x1c>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8006e7c:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <mqtt_publish+0x164>)
 8006e7e:	f240 4256 	movw	r2, #1110	; 0x456
 8006e82:	4925      	ldr	r1, [pc, #148]	; (8006f18 <mqtt_publish+0x174>)
 8006e84:	4822      	ldr	r0, [pc, #136]	; (8006f10 <mqtt_publish+0x16c>)
 8006e86:	f00d fa17 	bl	80142b8 <app_debug_rtt_raw>
 8006e8a:	f06f 000a 	mvn.w	r0, #10
 8006e8e:	e7e2      	b.n	8006e56 <mqtt_publish+0xb2>
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8006e90:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <mqtt_publish+0x164>)
 8006e92:	f240 4259 	movw	r2, #1113	; 0x459
 8006e96:	4921      	ldr	r1, [pc, #132]	; (8006f1c <mqtt_publish+0x178>)
 8006e98:	481d      	ldr	r0, [pc, #116]	; (8006f10 <mqtt_publish+0x16c>)
 8006e9a:	f00d fa0d 	bl	80142b8 <app_debug_rtt_raw>
 8006e9e:	f06f 000f 	mvn.w	r0, #15
 8006ea2:	e7d8      	b.n	8006e56 <mqtt_publish+0xb2>
    total_len += 2;
 8006ea4:	3402      	adds	r4, #2
  client->pkt_id_seq++;
 8006ea6:	88f3      	ldrh	r3, [r6, #6]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	b29b      	uxth	r3, r3
  if (client->pkt_id_seq == 0) {
 8006eac:	b10b      	cbz	r3, 8006eb2 <mqtt_publish+0x10e>
  client->pkt_id_seq++;
 8006eae:	80f3      	strh	r3, [r6, #6]
 8006eb0:	e001      	b.n	8006eb6 <mqtt_publish+0x112>
    client->pkt_id_seq++;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	80f3      	strh	r3, [r6, #6]
  return client->pkt_id_seq;
 8006eb6:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 8006eba:	e793      	b.n	8006de4 <mqtt_publish+0x40>
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8006ebc:	4b12      	ldr	r3, [pc, #72]	; (8006f08 <mqtt_publish+0x164>)
 8006ebe:	f240 4265 	movw	r2, #1125	; 0x465
 8006ec2:	4917      	ldr	r1, [pc, #92]	; (8006f20 <mqtt_publish+0x17c>)
 8006ec4:	4812      	ldr	r0, [pc, #72]	; (8006f10 <mqtt_publish+0x16c>)
 8006ec6:	f00d f9f7 	bl	80142b8 <app_debug_rtt_raw>
 8006eca:	f06f 000f 	mvn.w	r0, #15
 8006ece:	e7c2      	b.n	8006e56 <mqtt_publish+0xb2>
    r->next = r;
 8006ed0:	9b03      	ldr	r3, [sp, #12]
 8006ed2:	601b      	str	r3, [r3, #0]
    return ERR_MEM;
 8006ed4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ed8:	e7bd      	b.n	8006e56 <mqtt_publish+0xb2>
    mqtt_output_append_u16(&client->output, pkt_id);
 8006eda:	4659      	mov	r1, fp
 8006edc:	4638      	mov	r0, r7
 8006ede:	f7ff fa07 	bl	80062f0 <mqtt_output_append_u16>
 8006ee2:	e7a9      	b.n	8006e38 <mqtt_publish+0x94>
 8006ee4:	1e5c      	subs	r4, r3, #1
 8006ee6:	f109 39ff 	add.w	r9, r9, #4294967295
 8006eea:	fa1f f989 	uxth.w	r9, r9
 8006eee:	4499      	add	r9, r3
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8006ef0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f7ff f9f1 	bl	80062dc <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8006efa:	454c      	cmp	r4, r9
 8006efc:	d1f8      	bne.n	8006ef0 <mqtt_publish+0x14c>
 8006efe:	e7a0      	b.n	8006e42 <mqtt_publish+0x9e>
    return ERR_MEM;
 8006f00:	f04f 30ff 	mov.w	r0, #4294967295
 8006f04:	e7a7      	b.n	8006e56 <mqtt_publish+0xb2>
 8006f06:	bf00      	nop
 8006f08:	080169e8 	.word	0x080169e8
 8006f0c:	08016c5c 	.word	0x08016c5c
 8006f10:	08016a38 	.word	0x08016a38
 8006f14:	08016c7c 	.word	0x08016c7c
 8006f18:	08016c98 	.word	0x08016c98
 8006f1c:	08016cb8 	.word	0x08016cb8
 8006f20:	08016cdc 	.word	0x08016cdc

08006f24 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	460f      	mov	r7, r1
 8006f2c:	4691      	mov	r9, r2
 8006f2e:	4698      	mov	r8, r3
 8006f30:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8006f34:	4604      	mov	r4, r0
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d055      	beq.n	8006fe6 <mqtt_sub_unsub+0xc2>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8006f3a:	2f00      	cmp	r7, #0
 8006f3c:	d05b      	beq.n	8006ff6 <mqtt_sub_unsub+0xd2>

  topic_strlen = strlen(topic);
 8006f3e:	4638      	mov	r0, r7
 8006f40:	f7f9 f97c 	bl	800023c <strlen>
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8006f44:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8006f48:	4298      	cmp	r0, r3
 8006f4a:	d85c      	bhi.n	8007006 <mqtt_sub_unsub+0xe2>
  topic_len = (u16_t)topic_strlen;
 8006f4c:	b285      	uxth	r5, r0
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8006f4e:	1d2e      	adds	r6, r5, #4
 8006f50:	f1ba 0f00 	cmp.w	sl, #0
 8006f54:	bf18      	it	ne
 8006f56:	3601      	addne	r6, #1
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8006f58:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8006f5c:	d25d      	bcs.n	800701a <mqtt_sub_unsub+0xf6>
  remaining_length = (u16_t)total_len;
 8006f5e:	b2b6      	uxth	r6, r6

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8006f60:	f1b9 0f02 	cmp.w	r9, #2
 8006f64:	d863      	bhi.n	800702e <mqtt_sub_unsub+0x10a>
  if (client->conn_state == TCP_DISCONNECTED) {
 8006f66:	7aa3      	ldrb	r3, [r4, #10]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d070      	beq.n	800704e <mqtt_sub_unsub+0x12a>
  client->pkt_id_seq++;
 8006f6c:	88e3      	ldrh	r3, [r4, #6]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	b29b      	uxth	r3, r3
  if (client->pkt_id_seq == 0) {
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d063      	beq.n	800703e <mqtt_sub_unsub+0x11a>
  client->pkt_id_seq++;
 8006f76:	80e3      	strh	r3, [r4, #6]
  return client->pkt_id_seq;
 8006f78:	f8b4 b006 	ldrh.w	fp, [r4, #6]
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
  }

  pkt_id = msg_generate_packet_id(client);
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8006f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	4643      	mov	r3, r8
 8006f82:	465a      	mov	r2, fp
 8006f84:	2104      	movs	r1, #4
 8006f86:	f104 001c 	add.w	r0, r4, #28
 8006f8a:	f7ff f9d5 	bl	8006338 <mqtt_create_request>
  if (r == NULL) {
 8006f8e:	9003      	str	r0, [sp, #12]
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d05f      	beq.n	8007054 <mqtt_sub_unsub+0x130>
    return ERR_MEM;
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8006f94:	f104 08ec 	add.w	r8, r4, #236	; 0xec
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	f7ff f9fe 	bl	800639c <mqtt_output_check_space>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d04f      	beq.n	8007044 <mqtt_sub_unsub+0x120>
    return ERR_MEM;
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8006fa4:	f1ba 0f00 	cmp.w	sl, #0
 8006fa8:	d157      	bne.n	800705a <mqtt_sub_unsub+0x136>
 8006faa:	9601      	str	r6, [sp, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	9200      	str	r2, [sp, #0]
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	210a      	movs	r1, #10
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	f7ff fa9d 	bl	80064f4 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8006fba:	4659      	mov	r1, fp
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	f7ff f997 	bl	80062f0 <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8006fc2:	462a      	mov	r2, r5
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	f7ff f99d 	bl	8006306 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8006fcc:	9903      	ldr	r1, [sp, #12]
 8006fce:	f104 0018 	add.w	r0, r4, #24
 8006fd2:	f7ff fa0b 	bl	80063ec <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8006fd6:	68e1      	ldr	r1, [r4, #12]
 8006fd8:	4640      	mov	r0, r8
 8006fda:	f7ff fb8b 	bl	80066f4 <mqtt_output_send>
  return ERR_OK;
 8006fde:	2000      	movs	r0, #0
}
 8006fe0:	b005      	add	sp, #20
 8006fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8006fe6:	4b29      	ldr	r3, [pc, #164]	; (800708c <mqtt_sub_unsub+0x168>)
 8006fe8:	f240 429f 	movw	r2, #1183	; 0x49f
 8006fec:	4928      	ldr	r1, [pc, #160]	; (8007090 <mqtt_sub_unsub+0x16c>)
 8006fee:	4829      	ldr	r0, [pc, #164]	; (8007094 <mqtt_sub_unsub+0x170>)
 8006ff0:	f00d f962 	bl	80142b8 <app_debug_rtt_raw>
 8006ff4:	e7a1      	b.n	8006f3a <mqtt_sub_unsub+0x16>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8006ff6:	4b25      	ldr	r3, [pc, #148]	; (800708c <mqtt_sub_unsub+0x168>)
 8006ff8:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8006ffc:	4926      	ldr	r1, [pc, #152]	; (8007098 <mqtt_sub_unsub+0x174>)
 8006ffe:	4825      	ldr	r0, [pc, #148]	; (8007094 <mqtt_sub_unsub+0x170>)
 8007000:	f00d f95a 	bl	80142b8 <app_debug_rtt_raw>
 8007004:	e79b      	b.n	8006f3e <mqtt_sub_unsub+0x1a>
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8007006:	4b21      	ldr	r3, [pc, #132]	; (800708c <mqtt_sub_unsub+0x168>)
 8007008:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800700c:	4923      	ldr	r1, [pc, #140]	; (800709c <mqtt_sub_unsub+0x178>)
 800700e:	4821      	ldr	r0, [pc, #132]	; (8007094 <mqtt_sub_unsub+0x170>)
 8007010:	f00d f952 	bl	80142b8 <app_debug_rtt_raw>
 8007014:	f06f 000f 	mvn.w	r0, #15
 8007018:	e7e2      	b.n	8006fe0 <mqtt_sub_unsub+0xbc>
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800701a:	4b1c      	ldr	r3, [pc, #112]	; (800708c <mqtt_sub_unsub+0x168>)
 800701c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8007020:	491f      	ldr	r1, [pc, #124]	; (80070a0 <mqtt_sub_unsub+0x17c>)
 8007022:	481c      	ldr	r0, [pc, #112]	; (8007094 <mqtt_sub_unsub+0x170>)
 8007024:	f00d f948 	bl	80142b8 <app_debug_rtt_raw>
 8007028:	f06f 000f 	mvn.w	r0, #15
 800702c:	e7d8      	b.n	8006fe0 <mqtt_sub_unsub+0xbc>
  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800702e:	4b17      	ldr	r3, [pc, #92]	; (800708c <mqtt_sub_unsub+0x168>)
 8007030:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8007034:	491b      	ldr	r1, [pc, #108]	; (80070a4 <mqtt_sub_unsub+0x180>)
 8007036:	4817      	ldr	r0, [pc, #92]	; (8007094 <mqtt_sub_unsub+0x170>)
 8007038:	f00d f93e 	bl	80142b8 <app_debug_rtt_raw>
 800703c:	e793      	b.n	8006f66 <mqtt_sub_unsub+0x42>
    client->pkt_id_seq++;
 800703e:	2301      	movs	r3, #1
 8007040:	80e3      	strh	r3, [r4, #6]
 8007042:	e799      	b.n	8006f78 <mqtt_sub_unsub+0x54>
    r->next = r;
 8007044:	9b03      	ldr	r3, [sp, #12]
 8007046:	601b      	str	r3, [r3, #0]
    return ERR_MEM;
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
}
 800704c:	e7c8      	b.n	8006fe0 <mqtt_sub_unsub+0xbc>
    return ERR_CONN;
 800704e:	f06f 000a 	mvn.w	r0, #10
 8007052:	e7c5      	b.n	8006fe0 <mqtt_sub_unsub+0xbc>
    return ERR_MEM;
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	e7c2      	b.n	8006fe0 <mqtt_sub_unsub+0xbc>
  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 800705a:	9601      	str	r6, [sp, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	9200      	str	r2, [sp, #0]
 8007060:	2301      	movs	r3, #1
 8007062:	2108      	movs	r1, #8
 8007064:	4640      	mov	r0, r8
 8007066:	f7ff fa45 	bl	80064f4 <mqtt_output_append_fixed_header>
  mqtt_output_append_u16(&client->output, pkt_id);
 800706a:	4659      	mov	r1, fp
 800706c:	4640      	mov	r0, r8
 800706e:	f7ff f93f 	bl	80062f0 <mqtt_output_append_u16>
  mqtt_output_append_string(&client->output, topic, topic_len);
 8007072:	462a      	mov	r2, r5
 8007074:	4639      	mov	r1, r7
 8007076:	4640      	mov	r0, r8
 8007078:	f7ff f945 	bl	8006306 <mqtt_output_append_string>
  mqtt_ringbuf_put(rb, value);
 800707c:	4649      	mov	r1, r9
 800707e:	2902      	cmp	r1, #2
 8007080:	bf28      	it	cs
 8007082:	2102      	movcs	r1, #2
 8007084:	4640      	mov	r0, r8
 8007086:	f7ff f929 	bl	80062dc <mqtt_ringbuf_put>
}
 800708a:	e79f      	b.n	8006fcc <mqtt_sub_unsub+0xa8>
 800708c:	080169e8 	.word	0x080169e8
 8007090:	08016d00 	.word	0x08016d00
 8007094:	08016a38 	.word	0x08016a38
 8007098:	08016d20 	.word	0x08016d20
 800709c:	08016d40 	.word	0x08016d40
 80070a0:	08016d68 	.word	0x08016d68
 80070a4:	08016d90 	.word	0x08016d90

080070a8 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	460e      	mov	r6, r1
 80070ac:	4617      	mov	r7, r2
 80070ae:	461d      	mov	r5, r3
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 80070b0:	4604      	mov	r4, r0
 80070b2:	b118      	cbz	r0, 80070bc <mqtt_set_inpub_callback+0x14>
  client->data_cb = data_cb;
 80070b4:	6627      	str	r7, [r4, #96]	; 0x60
  client->pub_cb = pub_cb;
 80070b6:	6666      	str	r6, [r4, #100]	; 0x64
  client->inpub_arg = arg;
 80070b8:	65e5      	str	r5, [r4, #92]	; 0x5c
}
 80070ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 80070bc:	4b03      	ldr	r3, [pc, #12]	; (80070cc <mqtt_set_inpub_callback+0x24>)
 80070be:	f240 42da 	movw	r2, #1242	; 0x4da
 80070c2:	4903      	ldr	r1, [pc, #12]	; (80070d0 <mqtt_set_inpub_callback+0x28>)
 80070c4:	4803      	ldr	r0, [pc, #12]	; (80070d4 <mqtt_set_inpub_callback+0x2c>)
 80070c6:	f00d f8f7 	bl	80142b8 <app_debug_rtt_raw>
 80070ca:	e7f3      	b.n	80070b4 <mqtt_set_inpub_callback+0xc>
 80070cc:	080169e8 	.word	0x080169e8
 80070d0:	08016da8 	.word	0x08016da8
 80070d4:	08016a38 	.word	0x08016a38

080070d8 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	b089      	sub	sp, #36	; 0x24
 80070de:	4689      	mov	r9, r1
 80070e0:	9205      	str	r2, [sp, #20]
 80070e2:	461c      	mov	r4, r3
 80070e4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
  u16_t client_user_len = 0, client_pass_len = 0;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 80070e6:	4605      	mov	r5, r0
 80070e8:	2800      	cmp	r0, #0
 80070ea:	f000 80b8 	beq.w	800725e <mqtt_client_connect+0x186>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 80070ee:	f1b9 0f00 	cmp.w	r9, #0
 80070f2:	f000 80bc 	beq.w	800726e <mqtt_client_connect+0x196>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 80070f6:	2e00      	cmp	r6, #0
 80070f8:	f000 80c1 	beq.w	800727e <mqtt_client_connect+0x1a6>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 80070fc:	6832      	ldr	r2, [r6, #0]
 80070fe:	2a00      	cmp	r2, #0
 8007100:	f000 80c5 	beq.w	800728e <mqtt_client_connect+0x1b6>

  if (client->conn_state != TCP_DISCONNECTED) {
 8007104:	7aaf      	ldrb	r7, [r5, #10]
 8007106:	2f00      	cmp	r7, #0
 8007108:	f040 81a3 	bne.w	8007452 <mqtt_client_connect+0x37a>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800710c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8007110:	2100      	movs	r1, #0
 8007112:	4628      	mov	r0, r5
 8007114:	f00d f964 	bl	80143e0 <memset>
  client->connect_arg = arg;
 8007118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800711a:	612b      	str	r3, [r5, #16]
  client->connect_cb = cb;
 800711c:	616c      	str	r4, [r5, #20]
  client->keep_alive = client_info->keep_alive;
 800711e:	89b3      	ldrh	r3, [r6, #12]
 8007120:	806b      	strh	r3, [r5, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8007122:	f105 031c 	add.w	r3, r5, #28
    r_objs[n].next = &r_objs[n];
 8007126:	61eb      	str	r3, [r5, #28]
 8007128:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 800712c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800712e:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8007132:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007134:	f105 034c 	add.w	r3, r5, #76	; 0x4c
 8007138:	64eb      	str	r3, [r5, #76]	; 0x4c

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800713a:	6930      	ldr	r0, [r6, #16]
 800713c:	2800      	cmp	r0, #0
 800713e:	f000 80cf 	beq.w	80072e0 <mqtt_client_connect+0x208>
 8007142:	f8d6 8014 	ldr.w	r8, [r6, #20]
 8007146:	f1b8 0f00 	cmp.w	r8, #0
 800714a:	f000 80cd 	beq.w	80072e8 <mqtt_client_connect+0x210>
    flags |= MQTT_CONNECT_FLAG_WILL;
    flags |= (client_info->will_qos & 3) << 3;
 800714e:	7e37      	ldrb	r7, [r6, #24]
 8007150:	00ff      	lsls	r7, r7, #3
 8007152:	f007 0718 	and.w	r7, r7, #24
 8007156:	f047 0704 	orr.w	r7, r7, #4
    if (client_info->will_retain) {
 800715a:	7e73      	ldrb	r3, [r6, #25]
 800715c:	b10b      	cbz	r3, 8007162 <mqtt_client_connect+0x8a>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800715e:	f047 0720 	orr.w	r7, r7, #32
    }
    len = strlen(client_info->will_topic);
 8007162:	f7f9 f86b 	bl	800023c <strlen>
 8007166:	4604      	mov	r4, r0
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8007168:	28ff      	cmp	r0, #255	; 0xff
 800716a:	f200 8098 	bhi.w	800729e <mqtt_client_connect+0x1c6>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800716e:	2800      	cmp	r0, #0
 8007170:	f000 80a0 	beq.w	80072b4 <mqtt_client_connect+0x1dc>
    will_topic_len = (u8_t)len;
 8007174:	b2c3      	uxtb	r3, r0
 8007176:	9306      	str	r3, [sp, #24]
    len = strlen(client_info->will_msg);
 8007178:	4640      	mov	r0, r8
 800717a:	f7f9 f85f 	bl	800023c <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800717e:	28ff      	cmp	r0, #255	; 0xff
 8007180:	f200 80a3 	bhi.w	80072ca <mqtt_client_connect+0x1f2>
    will_msg_len = (u8_t)len;
 8007184:	b2c3      	uxtb	r3, r0
 8007186:	9307      	str	r3, [sp, #28]
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8007188:	b2e4      	uxtb	r4, r4
 800718a:	340e      	adds	r4, #14
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
    remaining_length = (u16_t)len;
 800718c:	441c      	add	r4, r3
  }
  if (client_info->client_user != NULL) {
 800718e:	6870      	ldr	r0, [r6, #4]
 8007190:	2800      	cmp	r0, #0
 8007192:	f000 80ce 	beq.w	8007332 <mqtt_client_connect+0x25a>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8007196:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    len = strlen(client_info->client_user);
 800719a:	f7f9 f84f 	bl	800023c <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800719e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80071a2:	f080 80a5 	bcs.w	80072f0 <mqtt_client_connect+0x218>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 80071a6:	2800      	cmp	r0, #0
 80071a8:	f000 80ad 	beq.w	8007306 <mqtt_client_connect+0x22e>
    client_user_len = (u16_t)len;
 80071ac:	fa1f fb80 	uxth.w	fp, r0
    len = remaining_length + 2 + client_user_len;
 80071b0:	3402      	adds	r4, #2
 80071b2:	445c      	add	r4, fp
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80071b4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    remaining_length = (u16_t)len;
 80071b8:	bf38      	it	cc
 80071ba:	b2a4      	uxthcc	r4, r4
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80071bc:	f080 80ae 	bcs.w	800731c <mqtt_client_connect+0x244>
  }
  if (client_info->client_pass != NULL) {
 80071c0:	68b0      	ldr	r0, [r6, #8]
 80071c2:	2800      	cmp	r0, #0
 80071c4:	f000 80d9 	beq.w	800737a <mqtt_client_connect+0x2a2>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 80071c8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    len = strlen(client_info->client_pass);
 80071cc:	f7f9 f836 	bl	800023c <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 80071d0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80071d4:	f080 80b0 	bcs.w	8007338 <mqtt_client_connect+0x260>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 80071d8:	2800      	cmp	r0, #0
 80071da:	f000 80b8 	beq.w	800734e <mqtt_client_connect+0x276>
    client_pass_len = (u16_t)len;
 80071de:	fa1f f880 	uxth.w	r8, r0
    len = remaining_length + 2 + client_pass_len;
 80071e2:	3402      	adds	r4, #2
 80071e4:	4444      	add	r4, r8
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80071e6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    remaining_length = (u16_t)len;
 80071ea:	bf38      	it	cc
 80071ec:	b2a4      	uxthcc	r4, r4
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80071ee:	f080 80b9 	bcs.w	8007364 <mqtt_client_connect+0x28c>
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;

  len = strlen(client_info->client_id);
 80071f2:	6830      	ldr	r0, [r6, #0]
 80071f4:	f7f9 f822 	bl	800023c <strlen>
 80071f8:	9004      	str	r0, [sp, #16]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 80071fa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80071fe:	f080 80bf 	bcs.w	8007380 <mqtt_client_connect+0x2a8>
  client_id_length = (u16_t)len;
  len = remaining_length + 2 + client_id_length;
 8007202:	3402      	adds	r4, #2
 8007204:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8007208:	441c      	add	r4, r3
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800720a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800720e:	f080 80c2 	bcs.w	8007396 <mqtt_client_connect+0x2be>
  remaining_length = (u16_t)len;
 8007212:	b2a4      	uxth	r4, r4

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8007214:	f105 0aec 	add.w	sl, r5, #236	; 0xec
 8007218:	4621      	mov	r1, r4
 800721a:	4650      	mov	r0, sl
 800721c:	f7ff f8be 	bl	800639c <mqtt_output_check_space>
 8007220:	2800      	cmp	r0, #0
 8007222:	f000 811a 	beq.w	800745a <mqtt_client_connect+0x382>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8007226:	2000      	movs	r0, #0
 8007228:	f003 f8f6 	bl	800a418 <tcp_new_ip_type>
 800722c:	60e8      	str	r0, [r5, #12]
  }
  if (client->conn == NULL) {
 800722e:	2800      	cmp	r0, #0
 8007230:	f000 8117 	beq.w	8007462 <mqtt_client_connect+0x38a>
    return ERR_MEM;
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8007234:	4629      	mov	r1, r5
 8007236:	f002 fcff 	bl	8009c38 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800723a:	2200      	movs	r2, #0
 800723c:	498b      	ldr	r1, [pc, #556]	; (800746c <mqtt_client_connect+0x394>)
 800723e:	68e8      	ldr	r0, [r5, #12]
 8007240:	f002 fbd6 	bl	80099f0 <tcp_bind>
  if (err != ERR_OK) {
 8007244:	9003      	str	r0, [sp, #12]
 8007246:	2800      	cmp	r0, #0
 8007248:	f000 80b0 	beq.w	80073ac <mqtt_client_connect+0x2d4>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
  }
  return ERR_OK;

tcp_fail:
  altcp_abort(client->conn);
 800724c:	68e8      	ldr	r0, [r5, #12]
 800724e:	f002 ffb1 	bl	800a1b4 <tcp_abort>
  client->conn = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	60eb      	str	r3, [r5, #12]
  return err;
}
 8007256:	9803      	ldr	r0, [sp, #12]
 8007258:	b009      	add	sp, #36	; 0x24
 800725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800725e:	4b84      	ldr	r3, [pc, #528]	; (8007470 <mqtt_client_connect+0x398>)
 8007260:	f240 520f 	movw	r2, #1295	; 0x50f
 8007264:	4983      	ldr	r1, [pc, #524]	; (8007474 <mqtt_client_connect+0x39c>)
 8007266:	4884      	ldr	r0, [pc, #528]	; (8007478 <mqtt_client_connect+0x3a0>)
 8007268:	f00d f826 	bl	80142b8 <app_debug_rtt_raw>
 800726c:	e73f      	b.n	80070ee <mqtt_client_connect+0x16>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800726e:	4b80      	ldr	r3, [pc, #512]	; (8007470 <mqtt_client_connect+0x398>)
 8007270:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8007274:	4981      	ldr	r1, [pc, #516]	; (800747c <mqtt_client_connect+0x3a4>)
 8007276:	4880      	ldr	r0, [pc, #512]	; (8007478 <mqtt_client_connect+0x3a0>)
 8007278:	f00d f81e 	bl	80142b8 <app_debug_rtt_raw>
 800727c:	e73b      	b.n	80070f6 <mqtt_client_connect+0x1e>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800727e:	4b7c      	ldr	r3, [pc, #496]	; (8007470 <mqtt_client_connect+0x398>)
 8007280:	f240 5211 	movw	r2, #1297	; 0x511
 8007284:	497e      	ldr	r1, [pc, #504]	; (8007480 <mqtt_client_connect+0x3a8>)
 8007286:	487c      	ldr	r0, [pc, #496]	; (8007478 <mqtt_client_connect+0x3a0>)
 8007288:	f00d f816 	bl	80142b8 <app_debug_rtt_raw>
 800728c:	e736      	b.n	80070fc <mqtt_client_connect+0x24>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800728e:	4b78      	ldr	r3, [pc, #480]	; (8007470 <mqtt_client_connect+0x398>)
 8007290:	f240 5212 	movw	r2, #1298	; 0x512
 8007294:	497b      	ldr	r1, [pc, #492]	; (8007484 <mqtt_client_connect+0x3ac>)
 8007296:	4878      	ldr	r0, [pc, #480]	; (8007478 <mqtt_client_connect+0x3a0>)
 8007298:	f00d f80e 	bl	80142b8 <app_debug_rtt_raw>
 800729c:	e732      	b.n	8007104 <mqtt_client_connect+0x2c>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800729e:	4b74      	ldr	r3, [pc, #464]	; (8007470 <mqtt_client_connect+0x398>)
 80072a0:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 80072a4:	4978      	ldr	r1, [pc, #480]	; (8007488 <mqtt_client_connect+0x3b0>)
 80072a6:	4874      	ldr	r0, [pc, #464]	; (8007478 <mqtt_client_connect+0x3a0>)
 80072a8:	f00d f806 	bl	80142b8 <app_debug_rtt_raw>
 80072ac:	f06f 0305 	mvn.w	r3, #5
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	e7d0      	b.n	8007256 <mqtt_client_connect+0x17e>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 80072b4:	4b6e      	ldr	r3, [pc, #440]	; (8007470 <mqtt_client_connect+0x398>)
 80072b6:	f240 5229 	movw	r2, #1321	; 0x529
 80072ba:	4974      	ldr	r1, [pc, #464]	; (800748c <mqtt_client_connect+0x3b4>)
 80072bc:	486e      	ldr	r0, [pc, #440]	; (8007478 <mqtt_client_connect+0x3a0>)
 80072be:	f00c fffb 	bl	80142b8 <app_debug_rtt_raw>
 80072c2:	f06f 0305 	mvn.w	r3, #5
 80072c6:	9303      	str	r3, [sp, #12]
 80072c8:	e7c5      	b.n	8007256 <mqtt_client_connect+0x17e>
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 80072ca:	4b69      	ldr	r3, [pc, #420]	; (8007470 <mqtt_client_connect+0x398>)
 80072cc:	f240 522c 	movw	r2, #1324	; 0x52c
 80072d0:	496f      	ldr	r1, [pc, #444]	; (8007490 <mqtt_client_connect+0x3b8>)
 80072d2:	4869      	ldr	r0, [pc, #420]	; (8007478 <mqtt_client_connect+0x3a0>)
 80072d4:	f00c fff0 	bl	80142b8 <app_debug_rtt_raw>
 80072d8:	f06f 0305 	mvn.w	r3, #5
 80072dc:	9303      	str	r3, [sp, #12]
 80072de:	e7ba      	b.n	8007256 <mqtt_client_connect+0x17e>
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80072e0:	9707      	str	r7, [sp, #28]
 80072e2:	9706      	str	r7, [sp, #24]
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80072e4:	240a      	movs	r4, #10
 80072e6:	e752      	b.n	800718e <mqtt_client_connect+0xb6>
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80072e8:	9707      	str	r7, [sp, #28]
 80072ea:	9706      	str	r7, [sp, #24]
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80072ec:	240a      	movs	r4, #10
 80072ee:	e74e      	b.n	800718e <mqtt_client_connect+0xb6>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 80072f0:	4b5f      	ldr	r3, [pc, #380]	; (8007470 <mqtt_client_connect+0x398>)
 80072f2:	f240 5235 	movw	r2, #1333	; 0x535
 80072f6:	4967      	ldr	r1, [pc, #412]	; (8007494 <mqtt_client_connect+0x3bc>)
 80072f8:	485f      	ldr	r0, [pc, #380]	; (8007478 <mqtt_client_connect+0x3a0>)
 80072fa:	f00c ffdd 	bl	80142b8 <app_debug_rtt_raw>
 80072fe:	f06f 0305 	mvn.w	r3, #5
 8007302:	9303      	str	r3, [sp, #12]
 8007304:	e7a7      	b.n	8007256 <mqtt_client_connect+0x17e>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8007306:	4b5a      	ldr	r3, [pc, #360]	; (8007470 <mqtt_client_connect+0x398>)
 8007308:	f240 5236 	movw	r2, #1334	; 0x536
 800730c:	4962      	ldr	r1, [pc, #392]	; (8007498 <mqtt_client_connect+0x3c0>)
 800730e:	485a      	ldr	r0, [pc, #360]	; (8007478 <mqtt_client_connect+0x3a0>)
 8007310:	f00c ffd2 	bl	80142b8 <app_debug_rtt_raw>
 8007314:	f06f 0305 	mvn.w	r3, #5
 8007318:	9303      	str	r3, [sp, #12]
 800731a:	e79c      	b.n	8007256 <mqtt_client_connect+0x17e>
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800731c:	4b54      	ldr	r3, [pc, #336]	; (8007470 <mqtt_client_connect+0x398>)
 800731e:	f240 5239 	movw	r2, #1337	; 0x539
 8007322:	495e      	ldr	r1, [pc, #376]	; (800749c <mqtt_client_connect+0x3c4>)
 8007324:	4854      	ldr	r0, [pc, #336]	; (8007478 <mqtt_client_connect+0x3a0>)
 8007326:	f00c ffc7 	bl	80142b8 <app_debug_rtt_raw>
 800732a:	f06f 0305 	mvn.w	r3, #5
 800732e:	9303      	str	r3, [sp, #12]
 8007330:	e791      	b.n	8007256 <mqtt_client_connect+0x17e>
  u16_t client_user_len = 0, client_pass_len = 0;
 8007332:	f04f 0b00 	mov.w	fp, #0
 8007336:	e743      	b.n	80071c0 <mqtt_client_connect+0xe8>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8007338:	4b4d      	ldr	r3, [pc, #308]	; (8007470 <mqtt_client_connect+0x398>)
 800733a:	f240 523f 	movw	r2, #1343	; 0x53f
 800733e:	4958      	ldr	r1, [pc, #352]	; (80074a0 <mqtt_client_connect+0x3c8>)
 8007340:	484d      	ldr	r0, [pc, #308]	; (8007478 <mqtt_client_connect+0x3a0>)
 8007342:	f00c ffb9 	bl	80142b8 <app_debug_rtt_raw>
 8007346:	f06f 0305 	mvn.w	r3, #5
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	e783      	b.n	8007256 <mqtt_client_connect+0x17e>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800734e:	4b48      	ldr	r3, [pc, #288]	; (8007470 <mqtt_client_connect+0x398>)
 8007350:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8007354:	4953      	ldr	r1, [pc, #332]	; (80074a4 <mqtt_client_connect+0x3cc>)
 8007356:	4848      	ldr	r0, [pc, #288]	; (8007478 <mqtt_client_connect+0x3a0>)
 8007358:	f00c ffae 	bl	80142b8 <app_debug_rtt_raw>
 800735c:	f06f 0305 	mvn.w	r3, #5
 8007360:	9303      	str	r3, [sp, #12]
 8007362:	e778      	b.n	8007256 <mqtt_client_connect+0x17e>
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8007364:	4b42      	ldr	r3, [pc, #264]	; (8007470 <mqtt_client_connect+0x398>)
 8007366:	f240 5243 	movw	r2, #1347	; 0x543
 800736a:	494c      	ldr	r1, [pc, #304]	; (800749c <mqtt_client_connect+0x3c4>)
 800736c:	4842      	ldr	r0, [pc, #264]	; (8007478 <mqtt_client_connect+0x3a0>)
 800736e:	f00c ffa3 	bl	80142b8 <app_debug_rtt_raw>
 8007372:	f06f 0305 	mvn.w	r3, #5
 8007376:	9303      	str	r3, [sp, #12]
 8007378:	e76d      	b.n	8007256 <mqtt_client_connect+0x17e>
  u16_t client_user_len = 0, client_pass_len = 0;
 800737a:	f04f 0800 	mov.w	r8, #0
 800737e:	e738      	b.n	80071f2 <mqtt_client_connect+0x11a>
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8007380:	4b3b      	ldr	r3, [pc, #236]	; (8007470 <mqtt_client_connect+0x398>)
 8007382:	f240 524b 	movw	r2, #1355	; 0x54b
 8007386:	4948      	ldr	r1, [pc, #288]	; (80074a8 <mqtt_client_connect+0x3d0>)
 8007388:	483b      	ldr	r0, [pc, #236]	; (8007478 <mqtt_client_connect+0x3a0>)
 800738a:	f00c ff95 	bl	80142b8 <app_debug_rtt_raw>
 800738e:	f06f 0305 	mvn.w	r3, #5
 8007392:	9303      	str	r3, [sp, #12]
 8007394:	e75f      	b.n	8007256 <mqtt_client_connect+0x17e>
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8007396:	4b36      	ldr	r3, [pc, #216]	; (8007470 <mqtt_client_connect+0x398>)
 8007398:	f240 524e 	movw	r2, #1358	; 0x54e
 800739c:	493f      	ldr	r1, [pc, #252]	; (800749c <mqtt_client_connect+0x3c4>)
 800739e:	4836      	ldr	r0, [pc, #216]	; (8007478 <mqtt_client_connect+0x3a0>)
 80073a0:	f00c ff8a 	bl	80142b8 <app_debug_rtt_raw>
 80073a4:	f06f 0305 	mvn.w	r3, #5
 80073a8:	9303      	str	r3, [sp, #12]
 80073aa:	e754      	b.n	8007256 <mqtt_client_connect+0x17e>
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 80073ac:	4b3f      	ldr	r3, [pc, #252]	; (80074ac <mqtt_client_connect+0x3d4>)
 80073ae:	9a05      	ldr	r2, [sp, #20]
 80073b0:	4649      	mov	r1, r9
 80073b2:	68e8      	ldr	r0, [r5, #12]
 80073b4:	f002 fcf4 	bl	8009da0 <tcp_connect>
  if (err != ERR_OK) {
 80073b8:	9003      	str	r0, [sp, #12]
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f47f af46 	bne.w	800724c <mqtt_client_connect+0x174>
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 80073c0:	f047 0902 	orr.w	r9, r7, #2
  altcp_err(client->conn, mqtt_tcp_err_cb);
 80073c4:	493a      	ldr	r1, [pc, #232]	; (80074b0 <mqtt_client_connect+0x3d8>)
 80073c6:	68e8      	ldr	r0, [r5, #12]
 80073c8:	f002 fc6e 	bl	8009ca8 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 80073cc:	2101      	movs	r1, #1
 80073ce:	72a9      	strb	r1, [r5, #10]
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 80073d0:	9401      	str	r4, [sp, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	9200      	str	r2, [sp, #0]
 80073d6:	4613      	mov	r3, r2
 80073d8:	4650      	mov	r0, sl
 80073da:	f7ff f88b 	bl	80064f4 <mqtt_output_append_fixed_header>
  mqtt_output_append_string(&client->output, "MQTT", 4);
 80073de:	2204      	movs	r2, #4
 80073e0:	4934      	ldr	r1, [pc, #208]	; (80074b4 <mqtt_client_connect+0x3dc>)
 80073e2:	4650      	mov	r0, sl
 80073e4:	f7fe ff8f 	bl	8006306 <mqtt_output_append_string>
  mqtt_ringbuf_put(rb, value);
 80073e8:	2104      	movs	r1, #4
 80073ea:	4650      	mov	r0, sl
 80073ec:	f7fe ff76 	bl	80062dc <mqtt_ringbuf_put>
 80073f0:	4649      	mov	r1, r9
 80073f2:	4650      	mov	r0, sl
 80073f4:	f7fe ff72 	bl	80062dc <mqtt_ringbuf_put>
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 80073f8:	89b1      	ldrh	r1, [r6, #12]
 80073fa:	4650      	mov	r0, sl
 80073fc:	f7fe ff78 	bl	80062f0 <mqtt_output_append_u16>
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8007400:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8007404:	6831      	ldr	r1, [r6, #0]
 8007406:	4650      	mov	r0, sl
 8007408:	f7fe ff7d 	bl	8006306 <mqtt_output_append_string>
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800740c:	f017 0f04 	tst.w	r7, #4
 8007410:	d10c      	bne.n	800742c <mqtt_client_connect+0x354>
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8007412:	f019 0f80 	tst.w	r9, #128	; 0x80
 8007416:	d116      	bne.n	8007446 <mqtt_client_connect+0x36e>
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8007418:	f017 0f40 	tst.w	r7, #64	; 0x40
 800741c:	f43f af1b 	beq.w	8007256 <mqtt_client_connect+0x17e>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8007420:	4642      	mov	r2, r8
 8007422:	68b1      	ldr	r1, [r6, #8]
 8007424:	4650      	mov	r0, sl
 8007426:	f7fe ff6e 	bl	8006306 <mqtt_output_append_string>
 800742a:	e714      	b.n	8007256 <mqtt_client_connect+0x17e>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800742c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8007430:	6931      	ldr	r1, [r6, #16]
 8007432:	4650      	mov	r0, sl
 8007434:	f7fe ff67 	bl	8006306 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8007438:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800743c:	6971      	ldr	r1, [r6, #20]
 800743e:	4650      	mov	r0, sl
 8007440:	f7fe ff61 	bl	8006306 <mqtt_output_append_string>
 8007444:	e7e5      	b.n	8007412 <mqtt_client_connect+0x33a>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8007446:	465a      	mov	r2, fp
 8007448:	6871      	ldr	r1, [r6, #4]
 800744a:	4650      	mov	r0, sl
 800744c:	f7fe ff5b 	bl	8006306 <mqtt_output_append_string>
 8007450:	e7e2      	b.n	8007418 <mqtt_client_connect+0x340>
    return ERR_ISCONN;
 8007452:	f06f 0309 	mvn.w	r3, #9
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	e6fd      	b.n	8007256 <mqtt_client_connect+0x17e>
    return ERR_MEM;
 800745a:	f04f 33ff 	mov.w	r3, #4294967295
 800745e:	9303      	str	r3, [sp, #12]
 8007460:	e6f9      	b.n	8007256 <mqtt_client_connect+0x17e>
    return ERR_MEM;
 8007462:	f04f 33ff 	mov.w	r3, #4294967295
 8007466:	9303      	str	r3, [sp, #12]
 8007468:	e6f5      	b.n	8007256 <mqtt_client_connect+0x17e>
 800746a:	bf00      	nop
 800746c:	08019224 	.word	0x08019224
 8007470:	080169e8 	.word	0x080169e8
 8007474:	08016dd0 	.word	0x08016dd0
 8007478:	08016a38 	.word	0x08016a38
 800747c:	08016df4 	.word	0x08016df4
 8007480:	08016e1c 	.word	0x08016e1c
 8007484:	08016e48 	.word	0x08016e48
 8007488:	08016e7c 	.word	0x08016e7c
 800748c:	08016ebc 	.word	0x08016ebc
 8007490:	08016efc 	.word	0x08016efc
 8007494:	08016f38 	.word	0x08016f38
 8007498:	08016f78 	.word	0x08016f78
 800749c:	08016fbc 	.word	0x08016fbc
 80074a0:	08016fec 	.word	0x08016fec
 80074a4:	0801702c 	.word	0x0801702c
 80074a8:	08017070 	.word	0x08017070
 80074ac:	08006d49 	.word	0x08006d49
 80074b0:	080065c5 	.word	0x080065c5
 80074b4:	080170ac 	.word	0x080170ac

080074b8 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 80074b8:	b510      	push	{r4, lr}
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 80074ba:	4604      	mov	r4, r0
 80074bc:	b110      	cbz	r0, 80074c4 <mqtt_disconnect+0xc>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 80074be:	7aa3      	ldrb	r3, [r4, #10]
 80074c0:	b943      	cbnz	r3, 80074d4 <mqtt_disconnect+0x1c>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
    mqtt_close(client, (mqtt_connection_status_t)0);
  }
}
 80074c2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 80074c4:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <mqtt_disconnect+0x28>)
 80074c6:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80074ca:	4906      	ldr	r1, [pc, #24]	; (80074e4 <mqtt_disconnect+0x2c>)
 80074cc:	4806      	ldr	r0, [pc, #24]	; (80074e8 <mqtt_disconnect+0x30>)
 80074ce:	f00c fef3 	bl	80142b8 <app_debug_rtt_raw>
 80074d2:	e7f4      	b.n	80074be <mqtt_disconnect+0x6>
    client->conn_state = TCP_DISCONNECTED;
 80074d4:	2100      	movs	r1, #0
 80074d6:	72a1      	strb	r1, [r4, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 80074d8:	4620      	mov	r0, r4
 80074da:	f7ff f82f 	bl	800653c <mqtt_close>
}
 80074de:	e7f0      	b.n	80074c2 <mqtt_disconnect+0xa>
 80074e0:	080169e8 	.word	0x080169e8
 80074e4:	080170b4 	.word	0x080170b4
 80074e8:	08016a38 	.word	0x08016a38

080074ec <mqtt_client_is_connected>:
 * @param client MQTT client
 * @return 1 if connected to server, 0 otherwise
 */
u8_t
mqtt_client_is_connected(mqtt_client_t *client)
{
 80074ec:	b510      	push	{r4, lr}
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_is_connected: client != NULL", client);
 80074ee:	4604      	mov	r4, r0
 80074f0:	b128      	cbz	r0, 80074fe <mqtt_client_is_connected+0x12>
  return client->conn_state == MQTT_CONNECTED;
 80074f2:	7aa0      	ldrb	r0, [r4, #10]
}
 80074f4:	2803      	cmp	r0, #3
 80074f6:	bf14      	ite	ne
 80074f8:	2000      	movne	r0, #0
 80074fa:	2001      	moveq	r0, #1
 80074fc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("mqtt_client_is_connected: client != NULL", client);
 80074fe:	4b04      	ldr	r3, [pc, #16]	; (8007510 <mqtt_client_is_connected+0x24>)
 8007500:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007504:	4903      	ldr	r1, [pc, #12]	; (8007514 <mqtt_client_is_connected+0x28>)
 8007506:	4804      	ldr	r0, [pc, #16]	; (8007518 <mqtt_client_is_connected+0x2c>)
 8007508:	f00c fed6 	bl	80142b8 <app_debug_rtt_raw>
 800750c:	e7f1      	b.n	80074f2 <mqtt_client_is_connected+0x6>
 800750e:	bf00      	nop
 8007510:	080169e8 	.word	0x080169e8
 8007514:	080170d4 	.word	0x080170d4
 8007518:	08016a38 	.word	0x08016a38

0800751c <sntp_retry>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_retry(void *arg)
{
 800751c:	b510      	push	{r4, lr}

  LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_retry: Next request will be sent in %"U32_F" ms\n",
                                 sntp_retry_timeout));

  /* set up a timer to send a retry and increase the retry delay */
  sys_timeout(sntp_retry_timeout, sntp_request, NULL);
 800751e:	4c08      	ldr	r4, [pc, #32]	; (8007540 <sntp_retry+0x24>)
 8007520:	2200      	movs	r2, #0
 8007522:	4908      	ldr	r1, [pc, #32]	; (8007544 <sntp_retry+0x28>)
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	f006 fc69 	bl	800ddfc <sys_timeout>

#if SNTP_RETRY_TIMEOUT_EXP
  {
    u32_t new_retry_timeout;
    /* increase the timeout for next retry */
    new_retry_timeout = sntp_retry_timeout << 1;
 800752a:	6823      	ldr	r3, [r4, #0]
    /* limit to maximum timeout and prevent overflow */
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 800752c:	4a06      	ldr	r2, [pc, #24]	; (8007548 <sntp_retry+0x2c>)
 800752e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8007532:	d304      	bcc.n	800753e <sntp_retry+0x22>
 8007534:	0059      	lsls	r1, r3, #1
 8007536:	428b      	cmp	r3, r1
        (new_retry_timeout > sntp_retry_timeout)) {
      sntp_retry_timeout = new_retry_timeout;
 8007538:	bf3c      	itt	cc
 800753a:	4623      	movcc	r3, r4
 800753c:	6019      	strcc	r1, [r3, #0]
    }
  }
#endif /* SNTP_RETRY_TIMEOUT_EXP */
}
 800753e:	bd10      	pop	{r4, pc}
 8007540:	20000d50 	.word	0x20000d50
 8007544:	080075d9 	.word	0x080075d9
 8007548:	000249f0 	.word	0x000249f0

0800754c <sntp_send_request>:
 *
 * @param server_addr resolved IP address of the SNTP server
 */
static void
sntp_send_request(const ip_addr_t *server_addr)
{
 800754c:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ASSERT("server_addr != NULL", server_addr != NULL);
 800754e:	4606      	mov	r6, r0
 8007550:	b320      	cbz	r0, 800759c <sntp_send_request+0x50>

  p = pbuf_alloc(PBUF_TRANSPORT, SNTP_MSG_LEN, PBUF_RAM);
 8007552:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007556:	2130      	movs	r1, #48	; 0x30
 8007558:	2038      	movs	r0, #56	; 0x38
 800755a:	f001 fe23 	bl	80091a4 <pbuf_alloc>
  if (p != NULL) {
 800755e:	4604      	mov	r4, r0
 8007560:	b320      	cbz	r0, 80075ac <sntp_send_request+0x60>
    struct sntp_msg *sntpmsg = (struct sntp_msg *)p->payload;
 8007562:	6845      	ldr	r5, [r0, #4]
  memset(req, 0, SNTP_MSG_LEN);
 8007564:	2230      	movs	r2, #48	; 0x30
 8007566:	2100      	movs	r1, #0
 8007568:	4628      	mov	r0, r5
 800756a:	f00c ff39 	bl	80143e0 <memset>
  req->li_vn_mode = SNTP_LI_NO_WARNING | SNTP_VERSION | SNTP_MODE_CLIENT;
 800756e:	2323      	movs	r3, #35	; 0x23
 8007570:	702b      	strb	r3, [r5, #0]
    LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_send_request: Sending request to server\n"));
    /* initialize request message */
    sntp_initialize_request(sntpmsg);
    /* send request */
    udp_sendto(sntp_pcb, p, server_addr, SNTP_PORT);
 8007572:	237b      	movs	r3, #123	; 0x7b
 8007574:	4632      	mov	r2, r6
 8007576:	4621      	mov	r1, r4
 8007578:	4810      	ldr	r0, [pc, #64]	; (80075bc <sntp_send_request+0x70>)
 800757a:	6800      	ldr	r0, [r0, #0]
 800757c:	f007 f828 	bl	800e5d0 <udp_sendto>
    /* free the pbuf after sending it */
    pbuf_free(p);
 8007580:	4620      	mov	r0, r4
 8007582:	f001 fda5 	bl	80090d0 <pbuf_free>
#if SNTP_MONITOR_SERVER_REACHABILITY
    /* indicate new packet has been sent */
    sntp_servers[sntp_current_server].reachability <<= 1;
 8007586:	4a0e      	ldr	r2, [pc, #56]	; (80075c0 <sntp_send_request+0x74>)
 8007588:	7a13      	ldrb	r3, [r2, #8]
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	7213      	strb	r3, [r2, #8]
#endif /* SNTP_MONITOR_SERVER_REACHABILITY */
    /* set up receive timeout: try next server or retry on timeout */
    sys_timeout((u32_t)SNTP_RECV_TIMEOUT, sntp_try_next_server, NULL);
 800758e:	2200      	movs	r2, #0
 8007590:	490c      	ldr	r1, [pc, #48]	; (80075c4 <sntp_send_request+0x78>)
 8007592:	f643 2098 	movw	r0, #15000	; 0x3a98
 8007596:	f006 fc31 	bl	800ddfc <sys_timeout>
    LWIP_DEBUGF(SNTP_DEBUG_SERIOUS, ("sntp_send_request: Out of memory, trying again in %"U32_F" ms\n",
                                     (u32_t)SNTP_RETRY_TIMEOUT));
    /* out of memory: set up a timer to send a retry */
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
  }
}
 800759a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("server_addr != NULL", server_addr != NULL);
 800759c:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <sntp_send_request+0x7c>)
 800759e:	f44f 7208 	mov.w	r2, #544	; 0x220
 80075a2:	490a      	ldr	r1, [pc, #40]	; (80075cc <sntp_send_request+0x80>)
 80075a4:	480a      	ldr	r0, [pc, #40]	; (80075d0 <sntp_send_request+0x84>)
 80075a6:	f00c fe87 	bl	80142b8 <app_debug_rtt_raw>
 80075aa:	e7d2      	b.n	8007552 <sntp_send_request+0x6>
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
 80075ac:	2200      	movs	r2, #0
 80075ae:	4909      	ldr	r1, [pc, #36]	; (80075d4 <sntp_send_request+0x88>)
 80075b0:	f643 2098 	movw	r0, #15000	; 0x3a98
 80075b4:	f006 fc22 	bl	800ddfc <sys_timeout>
}
 80075b8:	e7ef      	b.n	800759a <sntp_send_request+0x4e>
 80075ba:	bf00      	nop
 80075bc:	20000d4c 	.word	0x20000d4c
 80075c0:	20000d54 	.word	0x20000d54
 80075c4:	0800751d 	.word	0x0800751d
 80075c8:	08017100 	.word	0x08017100
 80075cc:	0801712c 	.word	0x0801712c
 80075d0:	08016a38 	.word	0x08016a38
 80075d4:	080075d9 	.word	0x080075d9

080075d8 <sntp_request>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_request(void *arg)
{
 80075d8:	b500      	push	{lr}
 80075da:	b083      	sub	sp, #12

  LWIP_UNUSED_ARG(arg);

  /* initialize SNTP server address */
#if SNTP_SERVER_DNS
  if (sntp_servers[sntp_current_server].name) {
 80075dc:	4b11      	ldr	r3, [pc, #68]	; (8007624 <sntp_request+0x4c>)
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	b170      	cbz	r0, 8007600 <sntp_request+0x28>
    /* always resolve the name and rely on dns-internal caching & timeout */
    ip_addr_set_zero(&sntp_servers[sntp_current_server].addr);
 80075e2:	2300      	movs	r3, #0
 80075e4:	4a0f      	ldr	r2, [pc, #60]	; (8007624 <sntp_request+0x4c>)
 80075e6:	6053      	str	r3, [r2, #4]
    err = dns_gethostbyname(sntp_servers[sntp_current_server].name, &sntp_server_address,
 80075e8:	4a0f      	ldr	r2, [pc, #60]	; (8007628 <sntp_request+0x50>)
 80075ea:	a901      	add	r1, sp, #4
 80075ec:	f000 fe6c 	bl	80082c8 <dns_gethostbyname>
                            sntp_dns_found, NULL);
    if (err == ERR_INPROGRESS) {
 80075f0:	f110 0f05 	cmn.w	r0, #5
 80075f4:	d00b      	beq.n	800760e <sntp_request+0x36>
      /* DNS request sent, wait for sntp_dns_found being called */
      LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_request: Waiting for server address to be resolved.\n"));
      return;
    } else if (err == ERR_OK) {
 80075f6:	b968      	cbnz	r0, 8007614 <sntp_request+0x3c>
      sntp_servers[sntp_current_server].addr = sntp_server_address;
 80075f8:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <sntp_request+0x4c>)
 80075fa:	9a01      	ldr	r2, [sp, #4]
 80075fc:	605a      	str	r2, [r3, #4]
  {
    sntp_server_address = sntp_servers[sntp_current_server].addr;
    err = (ip_addr_isany_val(sntp_server_address)) ? ERR_ARG : ERR_OK;
  }

  if (err == ERR_OK) {
 80075fe:	e003      	b.n	8007608 <sntp_request+0x30>
    sntp_server_address = sntp_servers[sntp_current_server].addr;
 8007600:	4b08      	ldr	r3, [pc, #32]	; (8007624 <sntp_request+0x4c>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	9301      	str	r3, [sp, #4]
    err = (ip_addr_isany_val(sntp_server_address)) ? ERR_ARG : ERR_OK;
 8007606:	b12b      	cbz	r3, 8007614 <sntp_request+0x3c>
    LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_request: current server address is %s\n",
                                   ipaddr_ntoa(&sntp_server_address)));
    sntp_send_request(&sntp_server_address);
 8007608:	a801      	add	r0, sp, #4
 800760a:	f7ff ff9f 	bl	800754c <sntp_send_request>
  } else {
    /* address conversion failed, try another server */
    LWIP_DEBUGF(SNTP_DEBUG_WARN_STATE, ("sntp_request: Invalid server address, trying next server.\n"));
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
  }
}
 800760e:	b003      	add	sp, #12
 8007610:	f85d fb04 	ldr.w	pc, [sp], #4
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
 8007614:	2200      	movs	r2, #0
 8007616:	4905      	ldr	r1, [pc, #20]	; (800762c <sntp_request+0x54>)
 8007618:	f643 2098 	movw	r0, #15000	; 0x3a98
 800761c:	f006 fbee 	bl	800ddfc <sys_timeout>
 8007620:	e7f5      	b.n	800760e <sntp_request+0x36>
 8007622:	bf00      	nop
 8007624:	20000d54 	.word	0x20000d54
 8007628:	08007631 	.word	0x08007631
 800762c:	0800751d 	.word	0x0800751d

08007630 <sntp_dns_found>:
{
 8007630:	b508      	push	{r3, lr}
  if (ipaddr != NULL) {
 8007632:	b131      	cbz	r1, 8007642 <sntp_dns_found+0x12>
 8007634:	4608      	mov	r0, r1
    sntp_servers[sntp_current_server].addr = *ipaddr;
 8007636:	680a      	ldr	r2, [r1, #0]
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <sntp_dns_found+0x1c>)
 800763a:	605a      	str	r2, [r3, #4]
    sntp_send_request(ipaddr);
 800763c:	f7ff ff86 	bl	800754c <sntp_send_request>
}
 8007640:	bd08      	pop	{r3, pc}
    sntp_try_next_server(NULL);
 8007642:	2000      	movs	r0, #0
 8007644:	f7ff ff6a 	bl	800751c <sntp_retry>
}
 8007648:	e7fa      	b.n	8007640 <sntp_dns_found+0x10>
 800764a:	bf00      	nop
 800764c:	20000d54 	.word	0x20000d54

08007650 <sntp_recv>:
{
 8007650:	b510      	push	{r4, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	4614      	mov	r4, r2
    if (p->tot_len == SNTP_MSG_LEN) {
 8007656:	8913      	ldrh	r3, [r2, #8]
 8007658:	2b30      	cmp	r3, #48	; 0x30
 800765a:	d004      	beq.n	8007666 <sntp_recv+0x16>
  pbuf_free(p);
 800765c:	4620      	mov	r0, r4
 800765e:	f001 fd37 	bl	80090d0 <pbuf_free>
}
 8007662:	b002      	add	sp, #8
 8007664:	bd10      	pop	{r4, pc}
      mode = pbuf_get_at(p, SNTP_OFFSET_LI_VN_MODE) & SNTP_MODE_MASK;
 8007666:	2100      	movs	r1, #0
 8007668:	4610      	mov	r0, r2
 800766a:	f002 f91c 	bl	80098a6 <pbuf_get_at>
 800766e:	f000 0007 	and.w	r0, r0, #7
      if (((sntp_opmode == SNTP_OPMODE_POLL)       && (mode == SNTP_MODE_SERVER)) ||
 8007672:	4b25      	ldr	r3, [pc, #148]	; (8007708 <sntp_recv+0xb8>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	b98b      	cbnz	r3, 800769c <sntp_recv+0x4c>
 8007678:	2804      	cmp	r0, #4
 800767a:	d1ef      	bne.n	800765c <sntp_recv+0xc>
        stratum = pbuf_get_at(p, SNTP_OFFSET_STRATUM);
 800767c:	2101      	movs	r1, #1
 800767e:	4620      	mov	r0, r4
 8007680:	f002 f911 	bl	80098a6 <pbuf_get_at>
        if (stratum == SNTP_STRATUM_KOD) {
 8007684:	b978      	cbnz	r0, 80076a6 <sntp_recv+0x56>
  pbuf_free(p);
 8007686:	4620      	mov	r0, r4
 8007688:	f001 fd22 	bl	80090d0 <pbuf_free>
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 800768c:	4b1e      	ldr	r3, [pc, #120]	; (8007708 <sntp_recv+0xb8>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e6      	bne.n	8007662 <sntp_recv+0x12>
      sntp_try_next_server(NULL);
 8007694:	2000      	movs	r0, #0
 8007696:	f7ff ff41 	bl	800751c <sntp_retry>
}
 800769a:	e7e2      	b.n	8007662 <sntp_recv+0x12>
      if (((sntp_opmode == SNTP_OPMODE_POLL)       && (mode == SNTP_MODE_SERVER)) ||
 800769c:	2b01      	cmp	r3, #1
 800769e:	d1dd      	bne.n	800765c <sntp_recv+0xc>
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 80076a0:	2805      	cmp	r0, #5
 80076a2:	d1db      	bne.n	800765c <sntp_recv+0xc>
 80076a4:	e7ea      	b.n	800767c <sntp_recv+0x2c>
          pbuf_copy_partial(p, &timestamps, sizeof(timestamps), SNTP_OFFSET_TIMESTAMPS);
 80076a6:	2328      	movs	r3, #40	; 0x28
 80076a8:	2208      	movs	r2, #8
 80076aa:	4669      	mov	r1, sp
 80076ac:	4620      	mov	r0, r4
 80076ae:	f001 ffb1 	bl	8009614 <pbuf_copy_partial>
  pbuf_free(p);
 80076b2:	4620      	mov	r0, r4
 80076b4:	f001 fd0c 	bl	80090d0 <pbuf_free>
  sec  = (s32_t)lwip_ntohl(timestamps->xmit.sec);
 80076b8:	9800      	ldr	r0, [sp, #0]
 80076ba:	f000 f8b6 	bl	800782a <lwip_htonl>
 80076be:	4604      	mov	r4, r0
  frac = lwip_ntohl(timestamps->xmit.frac);
 80076c0:	9801      	ldr	r0, [sp, #4]
 80076c2:	f000 f8b2 	bl	800782a <lwip_htonl>
  SNTP_SET_SYSTEM_TIME_NTP(sec, frac);
 80076c6:	4811      	ldr	r0, [pc, #68]	; (800770c <sntp_recv+0xbc>)
 80076c8:	4420      	add	r0, r4
 80076ca:	f7fd ff6d 	bl	80055a8 <lwip_sntp_recv_callback>
    sntp_servers[sntp_current_server].reachability |= 1;
 80076ce:	4a10      	ldr	r2, [pc, #64]	; (8007710 <sntp_recv+0xc0>)
 80076d0:	7a13      	ldrb	r3, [r2, #8]
 80076d2:	f043 0301 	orr.w	r3, r3, #1
 80076d6:	7213      	strb	r3, [r2, #8]
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 80076d8:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <sntp_recv+0xb8>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1c0      	bne.n	8007662 <sntp_recv+0x12>
      sys_untimeout(sntp_try_next_server, NULL);
 80076e0:	2100      	movs	r1, #0
 80076e2:	480c      	ldr	r0, [pc, #48]	; (8007714 <sntp_recv+0xc4>)
 80076e4:	f006 fbf0 	bl	800dec8 <sys_untimeout>
      sys_untimeout(sntp_request, NULL);
 80076e8:	4c0b      	ldr	r4, [pc, #44]	; (8007718 <sntp_recv+0xc8>)
 80076ea:	2100      	movs	r1, #0
 80076ec:	4620      	mov	r0, r4
 80076ee:	f006 fbeb 	bl	800dec8 <sys_untimeout>
      SNTP_RESET_RETRY_TIMEOUT();
 80076f2:	4b0a      	ldr	r3, [pc, #40]	; (800771c <sntp_recv+0xcc>)
 80076f4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80076f8:	601a      	str	r2, [r3, #0]
      sys_timeout(sntp_update_delay, sntp_request, NULL);
 80076fa:	2200      	movs	r2, #0
 80076fc:	4621      	mov	r1, r4
 80076fe:	4808      	ldr	r0, [pc, #32]	; (8007720 <sntp_recv+0xd0>)
 8007700:	f006 fb7c 	bl	800ddfc <sys_timeout>
      LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_recv: Scheduled next time request: %"U32_F" ms\n",
 8007704:	e7ad      	b.n	8007662 <sntp_recv+0x12>
 8007706:	bf00      	nop
 8007708:	20000d48 	.word	0x20000d48
 800770c:	7c558180 	.word	0x7c558180
 8007710:	20000d54 	.word	0x20000d54
 8007714:	0800751d 	.word	0x0800751d
 8007718:	080075d9 	.word	0x080075d9
 800771c:	20000d50 	.word	0x20000d50
 8007720:	0036ee80 	.word	0x0036ee80

08007724 <sntp_init>:
#else
#error SNTP_SERVER_ADDRESS string not supported SNTP_SERVER_DNS==0
#endif
#endif /* SNTP_SERVER_ADDRESS */

  if (sntp_pcb == NULL) {
 8007724:	4b1e      	ldr	r3, [pc, #120]	; (80077a0 <sntp_init+0x7c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	b103      	cbz	r3, 800772c <sntp_init+0x8>
 800772a:	4770      	bx	lr
{
 800772c:	b510      	push	{r4, lr}
    sntp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800772e:	202e      	movs	r0, #46	; 0x2e
 8007730:	f006 ffa2 	bl	800e678 <udp_new_ip_type>
 8007734:	4b1a      	ldr	r3, [pc, #104]	; (80077a0 <sntp_init+0x7c>)
 8007736:	6018      	str	r0, [r3, #0]
    LWIP_ASSERT("Failed to allocate udp pcb for sntp client", sntp_pcb != NULL);
 8007738:	b198      	cbz	r0, 8007762 <sntp_init+0x3e>
    if (sntp_pcb != NULL) {
      udp_recv(sntp_pcb, sntp_recv, NULL);
 800773a:	2200      	movs	r2, #0
 800773c:	4919      	ldr	r1, [pc, #100]	; (80077a4 <sntp_init+0x80>)
 800773e:	f006 ff51 	bl	800e5e4 <udp_recv>

      if (sntp_opmode == SNTP_OPMODE_POLL) {
 8007742:	4b19      	ldr	r3, [pc, #100]	; (80077a8 <sntp_init+0x84>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b1c3      	cbz	r3, 800777a <sntp_init+0x56>
#if SNTP_STARTUP_DELAY
        sys_timeout((u32_t)SNTP_STARTUP_DELAY_FUNC, sntp_request, NULL);
#else
        sntp_request(NULL);
#endif
      } else if (sntp_opmode == SNTP_OPMODE_LISTENONLY) {
 8007748:	2b01      	cmp	r3, #1
 800774a:	d115      	bne.n	8007778 <sntp_init+0x54>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
 800774c:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <sntp_init+0x7c>)
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	7a43      	ldrb	r3, [r0, #9]
 8007752:	f043 0320 	orr.w	r3, r3, #32
 8007756:	7243      	strb	r3, [r0, #9]
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
 8007758:	227b      	movs	r2, #123	; 0x7b
 800775a:	4914      	ldr	r1, [pc, #80]	; (80077ac <sntp_init+0x88>)
 800775c:	f006 fd14 	bl	800e188 <udp_bind>
      }
    }
  }
}
 8007760:	e00a      	b.n	8007778 <sntp_init+0x54>
    LWIP_ASSERT("Failed to allocate udp pcb for sntp client", sntp_pcb != NULL);
 8007762:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <sntp_init+0x8c>)
 8007764:	f240 2296 	movw	r2, #662	; 0x296
 8007768:	4912      	ldr	r1, [pc, #72]	; (80077b4 <sntp_init+0x90>)
 800776a:	4813      	ldr	r0, [pc, #76]	; (80077b8 <sntp_init+0x94>)
 800776c:	f00c fda4 	bl	80142b8 <app_debug_rtt_raw>
    if (sntp_pcb != NULL) {
 8007770:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <sntp_init+0x7c>)
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	2800      	cmp	r0, #0
 8007776:	d1e0      	bne.n	800773a <sntp_init+0x16>
}
 8007778:	bd10      	pop	{r4, pc}
        SNTP_RESET_RETRY_TIMEOUT();
 800777a:	4b10      	ldr	r3, [pc, #64]	; (80077bc <sntp_init+0x98>)
 800777c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007780:	601a      	str	r2, [r3, #0]
        sys_timeout((u32_t)SNTP_STARTUP_DELAY_FUNC, sntp_request, NULL);
 8007782:	f00c fdc1 	bl	8014308 <sys_rand>
 8007786:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <sntp_init+0x9c>)
 8007788:	fba3 2300 	umull	r2, r3, r3, r0
 800778c:	0b1b      	lsrs	r3, r3, #12
 800778e:	2200      	movs	r2, #0
 8007790:	490c      	ldr	r1, [pc, #48]	; (80077c4 <sntp_init+0xa0>)
 8007792:	f241 3488 	movw	r4, #5000	; 0x1388
 8007796:	fb04 0013 	mls	r0, r4, r3, r0
 800779a:	f006 fb2f 	bl	800ddfc <sys_timeout>
 800779e:	e7eb      	b.n	8007778 <sntp_init+0x54>
 80077a0:	20000d4c 	.word	0x20000d4c
 80077a4:	08007651 	.word	0x08007651
 80077a8:	20000d48 	.word	0x20000d48
 80077ac:	08019224 	.word	0x08019224
 80077b0:	08017100 	.word	0x08017100
 80077b4:	08017140 	.word	0x08017140
 80077b8:	08016a38 	.word	0x08016a38
 80077bc:	20000d50 	.word	0x20000d50
 80077c0:	d1b71759 	.word	0xd1b71759
 80077c4:	080075d9 	.word	0x080075d9

080077c8 <sntp_setoperatingmode>:
 * Sets the operating mode.
 * @param operating_mode one of the available operating modes
 */
void
sntp_setoperatingmode(u8_t operating_mode)
{
 80077c8:	b510      	push	{r4, lr}
 80077ca:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("Invalid operating mode", operating_mode <= SNTP_OPMODE_LISTENONLY);
 80077cc:	2801      	cmp	r0, #1
 80077ce:	d80c      	bhi.n	80077ea <sntp_setoperatingmode+0x22>
  LWIP_ASSERT("Operating mode must not be set while SNTP client is running", sntp_pcb == NULL);
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <sntp_setoperatingmode+0x34>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	b133      	cbz	r3, 80077e4 <sntp_setoperatingmode+0x1c>
 80077d6:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <sntp_setoperatingmode+0x38>)
 80077d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80077dc:	4909      	ldr	r1, [pc, #36]	; (8007804 <sntp_setoperatingmode+0x3c>)
 80077de:	480a      	ldr	r0, [pc, #40]	; (8007808 <sntp_setoperatingmode+0x40>)
 80077e0:	f00c fd6a 	bl	80142b8 <app_debug_rtt_raw>
  sntp_opmode = operating_mode;
 80077e4:	4b09      	ldr	r3, [pc, #36]	; (800780c <sntp_setoperatingmode+0x44>)
 80077e6:	701c      	strb	r4, [r3, #0]
}
 80077e8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("Invalid operating mode", operating_mode <= SNTP_OPMODE_LISTENONLY);
 80077ea:	4b05      	ldr	r3, [pc, #20]	; (8007800 <sntp_setoperatingmode+0x38>)
 80077ec:	f240 22d1 	movw	r2, #721	; 0x2d1
 80077f0:	4907      	ldr	r1, [pc, #28]	; (8007810 <sntp_setoperatingmode+0x48>)
 80077f2:	4805      	ldr	r0, [pc, #20]	; (8007808 <sntp_setoperatingmode+0x40>)
 80077f4:	f00c fd60 	bl	80142b8 <app_debug_rtt_raw>
 80077f8:	e7ea      	b.n	80077d0 <sntp_setoperatingmode+0x8>
 80077fa:	bf00      	nop
 80077fc:	20000d4c 	.word	0x20000d4c
 8007800:	08017100 	.word	0x08017100
 8007804:	08017184 	.word	0x08017184
 8007808:	08016a38 	.word	0x08016a38
 800780c:	20000d48 	.word	0x20000d48
 8007810:	0801716c 	.word	0x0801716c

08007814 <sntp_setservername>:
 */
void
sntp_setservername(u8_t idx, const char *server)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (idx < SNTP_MAX_SERVERS) {
 8007814:	b908      	cbnz	r0, 800781a <sntp_setservername+0x6>
    sntp_servers[idx].name = server;
 8007816:	4b01      	ldr	r3, [pc, #4]	; (800781c <sntp_setservername+0x8>)
 8007818:	6019      	str	r1, [r3, #0]
  }
}
 800781a:	4770      	bx	lr
 800781c:	20000d54 	.word	0x20000d54

08007820 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8007820:	0a03      	lsrs	r3, r0, #8
 8007822:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8007826:	b280      	uxth	r0, r0
 8007828:	4770      	bx	lr

0800782a <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 800782a:	0e03      	lsrs	r3, r0, #24
 800782c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007830:	0202      	lsls	r2, r0, #8
 8007832:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8007836:	4313      	orrs	r3, r2
 8007838:	0a00      	lsrs	r0, r0, #8
 800783a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
 800783e:	4318      	orrs	r0, r3
 8007840:	4770      	bx	lr

08007842 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8007842:	b4f0      	push	{r4, r5, r6, r7}
 8007844:	4605      	mov	r5, r0
 8007846:	e003      	b.n	8007850 <lwip_strnicmp+0xe>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 8007848:	1b53      	subs	r3, r2, r5
 800784a:	42d8      	cmn	r0, r3
 800784c:	d017      	beq.n	800787e <lwip_strnicmp+0x3c>
 800784e:	b194      	cbz	r4, 8007876 <lwip_strnicmp+0x34>
    c1 = *str1++;
 8007850:	f815 4b01 	ldrb.w	r4, [r5], #1
    c2 = *str2++;
 8007854:	f811 3b01 	ldrb.w	r3, [r1], #1
    if (c1 != c2) {
 8007858:	429c      	cmp	r4, r3
 800785a:	d0f5      	beq.n	8007848 <lwip_strnicmp+0x6>
      char c1_upc = c1 | 0x20;
 800785c:	f044 0720 	orr.w	r7, r4, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8007860:	f1a7 0661 	sub.w	r6, r7, #97	; 0x61
 8007864:	b2f6      	uxtb	r6, r6
 8007866:	2e19      	cmp	r6, #25
 8007868:	d807      	bhi.n	800787a <lwip_strnicmp+0x38>
        if (c1_upc != c2_upc) {
 800786a:	f043 0320 	orr.w	r3, r3, #32
 800786e:	429f      	cmp	r7, r3
 8007870:	d0ea      	beq.n	8007848 <lwip_strnicmp+0x6>
          return 1;
 8007872:	2001      	movs	r0, #1
 8007874:	e004      	b.n	8007880 <lwip_strnicmp+0x3e>
  return 0;
 8007876:	2000      	movs	r0, #0
 8007878:	e002      	b.n	8007880 <lwip_strnicmp+0x3e>
        return 1;
 800787a:	2001      	movs	r0, #1
 800787c:	e000      	b.n	8007880 <lwip_strnicmp+0x3e>
  return 0;
 800787e:	2000      	movs	r0, #0
}
 8007880:	bcf0      	pop	{r4, r5, r6, r7}
 8007882:	4770      	bx	lr

08007884 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8007884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007888:	4605      	mov	r5, r0
 800788a:	468a      	mov	sl, r1
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800788c:	4681      	mov	r9, r0
 800788e:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8007892:	4e2b      	ldr	r6, [pc, #172]	; (8007940 <dns_call_found+0xbc>)
 8007894:	eb06 1603 	add.w	r6, r6, r3, lsl #4
 8007898:	3610      	adds	r6, #16
 800789a:	4c2a      	ldr	r4, [pc, #168]	; (8007944 <dns_call_found+0xc0>)
 800789c:	f104 0824 	add.w	r8, r4, #36	; 0x24
      /* flush this entry */
      dns_requests[i].found = NULL;
 80078a0:	f04f 0b00 	mov.w	fp, #0
 80078a4:	e002      	b.n	80078ac <dns_call_found+0x28>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80078a6:	340c      	adds	r4, #12
 80078a8:	4544      	cmp	r4, r8
 80078aa:	d00c      	beq.n	80078c6 <dns_call_found+0x42>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0f9      	beq.n	80078a6 <dns_call_found+0x22>
 80078b2:	7a22      	ldrb	r2, [r4, #8]
 80078b4:	42aa      	cmp	r2, r5
 80078b6:	d1f6      	bne.n	80078a6 <dns_call_found+0x22>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80078b8:	6862      	ldr	r2, [r4, #4]
 80078ba:	4651      	mov	r1, sl
 80078bc:	4630      	mov	r0, r6
 80078be:	4798      	blx	r3
      dns_requests[i].found = NULL;
 80078c0:	f8c4 b000 	str.w	fp, [r4]
 80078c4:	e7ef      	b.n	80078a6 <dns_call_found+0x22>
 80078c6:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <dns_call_found+0xbc>)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80078c8:	2300      	movs	r3, #0
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80078ca:	eb09 09c9 	add.w	r9, r9, r9, lsl #3
 80078ce:	eb02 1909 	add.w	r9, r2, r9, lsl #4
 80078d2:	e003      	b.n	80078dc <dns_call_found+0x58>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80078d4:	3301      	adds	r3, #1
 80078d6:	3290      	adds	r2, #144	; 0x90
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d012      	beq.n	8007902 <dns_call_found+0x7e>
    if (i == idx) {
 80078dc:	b2d9      	uxtb	r1, r3
 80078de:	428d      	cmp	r5, r1
 80078e0:	d0f8      	beq.n	80078d4 <dns_call_found+0x50>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 80078e2:	7a91      	ldrb	r1, [r2, #10]
 80078e4:	2902      	cmp	r1, #2
 80078e6:	d1f5      	bne.n	80078d4 <dns_call_found+0x50>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80078e8:	7bd0      	ldrb	r0, [r2, #15]
 80078ea:	f899 100f 	ldrb.w	r1, [r9, #15]
 80078ee:	4288      	cmp	r0, r1
 80078f0:	d1f0      	bne.n	80078d4 <dns_call_found+0x50>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80078f2:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80078f6:	4b12      	ldr	r3, [pc, #72]	; (8007940 <dns_call_found+0xbc>)
 80078f8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 80078fc:	2203      	movs	r2, #3
 80078fe:	73da      	strb	r2, [r3, #15]
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8007900:	e007      	b.n	8007912 <dns_call_found+0x8e>
 8007902:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8007906:	4a0e      	ldr	r2, [pc, #56]	; (8007940 <dns_call_found+0xbc>)
 8007908:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800790c:	7bdb      	ldrb	r3, [r3, #15]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <dns_call_found+0x92>
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  }
#endif
}
 8007912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8007916:	4c0c      	ldr	r4, [pc, #48]	; (8007948 <dns_call_found+0xc4>)
 8007918:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800791c:	f006 fe76 	bl	800e60c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <dns_call_found+0xbc>)
 8007922:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8007926:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800792a:	7bd2      	ldrb	r2, [r2, #15]
 800792c:	2100      	movs	r1, #0
 800792e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8007932:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8007936:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 800793a:	2303      	movs	r3, #3
 800793c:	73eb      	strb	r3, [r5, #15]
}
 800793e:	e7e8      	b.n	8007912 <dns_call_found+0x8e>
 8007940:	20000da0 	.word	0x20000da0
 8007944:	20000d70 	.word	0x20000d70
 8007948:	20000d64 	.word	0x20000d64

0800794c <dns_send>:
{
 800794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007950:	b085      	sub	sp, #20
 8007952:	4682      	mov	sl, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8007954:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
 8007958:	4b5b      	ldr	r3, [pc, #364]	; (8007ac8 <dns_send+0x17c>)
 800795a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800795e:	7adb      	ldrb	r3, [r3, #11]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d83e      	bhi.n	80079e2 <dns_send+0x96>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8007964:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
 8007968:	4a57      	ldr	r2, [pc, #348]	; (8007ac8 <dns_send+0x17c>)
 800796a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800796e:	7ada      	ldrb	r2, [r3, #11]
 8007970:	4b56      	ldr	r3, [pc, #344]	; (8007acc <dns_send+0x180>)
 8007972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d03b      	beq.n	80079f2 <dns_send+0xa6>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800797a:	eb0a 05ca 	add.w	r5, sl, sl, lsl #3
 800797e:	4b52      	ldr	r3, [pc, #328]	; (8007ac8 <dns_send+0x17c>)
 8007980:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 8007984:	3510      	adds	r5, #16
 8007986:	4628      	mov	r0, r5
 8007988:	f7f8 fc58 	bl	800023c <strlen>
 800798c:	f100 0112 	add.w	r1, r0, #18
 8007990:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007994:	b289      	uxth	r1, r1
 8007996:	2038      	movs	r0, #56	; 0x38
 8007998:	f001 fc04 	bl	80091a4 <pbuf_alloc>
  if (p != NULL) {
 800799c:	4681      	mov	r9, r0
 800799e:	2800      	cmp	r0, #0
 80079a0:	f000 808e 	beq.w	8007ac0 <dns_send+0x174>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80079a4:	2300      	movs	r3, #0
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	9302      	str	r3, [sp, #8]
 80079aa:	9303      	str	r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 80079ac:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
 80079b0:	4a45      	ldr	r2, [pc, #276]	; (8007ac8 <dns_send+0x17c>)
 80079b2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80079b6:	8918      	ldrh	r0, [r3, #8]
 80079b8:	f7ff ff32 	bl	8007820 <lwip_htons>
 80079bc:	f8ad 0004 	strh.w	r0, [sp, #4]
    hdr.flags1 = DNS_FLAG1_RD;
 80079c0:	2301      	movs	r3, #1
 80079c2:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.numquestions = PP_HTONS(1);
 80079c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079ca:	f8ad 3008 	strh.w	r3, [sp, #8]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80079ce:	220c      	movs	r2, #12
 80079d0:	a901      	add	r1, sp, #4
 80079d2:	4648      	mov	r0, r9
 80079d4:	f001 fe6c 	bl	80096b0 <pbuf_take>
    --hostname;
 80079d8:	3d01      	subs	r5, #1
    query_idx = SIZEOF_DNS_HDR;
 80079da:	260c      	movs	r6, #12
      if (query_idx + n + 1 > 0xFFFF) {
 80079dc:	f64f 7bfe 	movw	fp, #65534	; 0xfffe
 80079e0:	e030      	b.n	8007a44 <dns_send+0xf8>
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80079e2:	4b3b      	ldr	r3, [pc, #236]	; (8007ad0 <dns_send+0x184>)
 80079e4:	f240 22fa 	movw	r2, #762	; 0x2fa
 80079e8:	493a      	ldr	r1, [pc, #232]	; (8007ad4 <dns_send+0x188>)
 80079ea:	483b      	ldr	r0, [pc, #236]	; (8007ad8 <dns_send+0x18c>)
 80079ec:	f00c fc64 	bl	80142b8 <app_debug_rtt_raw>
 80079f0:	e7b8      	b.n	8007964 <dns_send+0x18>
    dns_call_found(idx, NULL);
 80079f2:	2100      	movs	r1, #0
 80079f4:	4650      	mov	r0, sl
 80079f6:	f7ff ff45 	bl	8007884 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 80079fa:	eb0a 0aca 	add.w	sl, sl, sl, lsl #3
 80079fe:	4b32      	ldr	r3, [pc, #200]	; (8007ac8 <dns_send+0x17c>)
 8007a00:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 8007a04:	2400      	movs	r4, #0
 8007a06:	729c      	strb	r4, [r3, #10]
}
 8007a08:	4620      	mov	r0, r4
 8007a0a:	b005      	add	sp, #20
 8007a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ++hostname;
 8007a10:	4645      	mov	r5, r8
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007a12:	2400      	movs	r4, #0
      copy_len = (u16_t)(hostname - hostname_part);
 8007a14:	eba5 0708 	sub.w	r7, r5, r8
 8007a18:	b2bf      	uxth	r7, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8007a1a:	1933      	adds	r3, r6, r4
 8007a1c:	455b      	cmp	r3, fp
 8007a1e:	dc21      	bgt.n	8007a64 <dns_send+0x118>
      pbuf_put_at(p, query_idx, n);
 8007a20:	4622      	mov	r2, r4
 8007a22:	4631      	mov	r1, r6
 8007a24:	4648      	mov	r0, r9
 8007a26:	f001 ff45 	bl	80098b4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8007a2a:	1c73      	adds	r3, r6, #1
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	463a      	mov	r2, r7
 8007a30:	4641      	mov	r1, r8
 8007a32:	4648      	mov	r0, r9
 8007a34:	f001 fea2 	bl	800977c <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8007a38:	4434      	add	r4, r6
 8007a3a:	b2a4      	uxth	r4, r4
 8007a3c:	1c66      	adds	r6, r4, #1
 8007a3e:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8007a40:	782b      	ldrb	r3, [r5, #0]
 8007a42:	b1ab      	cbz	r3, 8007a70 <dns_send+0x124>
      ++hostname;
 8007a44:	f105 0801 	add.w	r8, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007a48:	786b      	ldrb	r3, [r5, #1]
 8007a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a4c:	d0e0      	beq.n	8007a10 <dns_send+0xc4>
      ++hostname;
 8007a4e:	4645      	mov	r5, r8
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007a50:	2400      	movs	r4, #0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0de      	beq.n	8007a14 <dns_send+0xc8>
        ++n;
 8007a56:	3401      	adds	r4, #1
 8007a58:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007a5a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8007a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a60:	d1f7      	bne.n	8007a52 <dns_send+0x106>
 8007a62:	e7d7      	b.n	8007a14 <dns_send+0xc8>
  pbuf_free(p);
 8007a64:	4648      	mov	r0, r9
 8007a66:	f001 fb33 	bl	80090d0 <pbuf_free>
  return ERR_VAL;
 8007a6a:	f06f 0405 	mvn.w	r4, #5
 8007a6e:	e7cb      	b.n	8007a08 <dns_send+0xbc>
    pbuf_put_at(p, query_idx, 0);
 8007a70:	2200      	movs	r2, #0
 8007a72:	4631      	mov	r1, r6
 8007a74:	4648      	mov	r0, r9
 8007a76:	f001 ff1d 	bl	80098b4 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8007a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a7e:	f8ad 3000 	strh.w	r3, [sp]
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8007a82:	f8ad 3002 	strh.w	r3, [sp, #2]
    query_idx++;
 8007a86:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	4669      	mov	r1, sp
 8007a8e:	4648      	mov	r0, r9
 8007a90:	f001 fe74 	bl	800977c <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <dns_send+0x17c>)
 8007a96:	eb0a 02ca 	add.w	r2, sl, sl, lsl #3
 8007a9a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007a9e:	7ad1      	ldrb	r1, [r2, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8007aa0:	7bd4      	ldrb	r4, [r2, #15]
 8007aa2:	2335      	movs	r3, #53	; 0x35
 8007aa4:	4a09      	ldr	r2, [pc, #36]	; (8007acc <dns_send+0x180>)
 8007aa6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007aaa:	4649      	mov	r1, r9
 8007aac:	480b      	ldr	r0, [pc, #44]	; (8007adc <dns_send+0x190>)
 8007aae:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007ab2:	f006 fd8d 	bl	800e5d0 <udp_sendto>
 8007ab6:	4604      	mov	r4, r0
    pbuf_free(p);
 8007ab8:	4648      	mov	r0, r9
 8007aba:	f001 fb09 	bl	80090d0 <pbuf_free>
 8007abe:	e7a3      	b.n	8007a08 <dns_send+0xbc>
    err = ERR_MEM;
 8007ac0:	f04f 34ff 	mov.w	r4, #4294967295
 8007ac4:	e7a0      	b.n	8007a08 <dns_send+0xbc>
 8007ac6:	bf00      	nop
 8007ac8:	20000da0 	.word	0x20000da0
 8007acc:	20000d98 	.word	0x20000d98
 8007ad0:	080171c0 	.word	0x080171c0
 8007ad4:	080171e8 	.word	0x080171e8
 8007ad8:	08016a38 	.word	0x08016a38
 8007adc:	20000d64 	.word	0x20000d64

08007ae0 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	4604      	mov	r4, r0
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8007ae4:	2802      	cmp	r0, #2
 8007ae6:	d80c      	bhi.n	8007b02 <dns_check_entry+0x22>

  switch (entry->state) {
 8007ae8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8007aec:	4a4d      	ldr	r2, [pc, #308]	; (8007c24 <dns_check_entry+0x144>)
 8007aee:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007af2:	7a9b      	ldrb	r3, [r3, #10]
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	f200 808c 	bhi.w	8007c12 <dns_check_entry+0x132>
 8007afa:	e8df f003 	tbb	[pc, r3]
 8007afe:	132e      	.short	0x132e
 8007b00:	742f      	.short	0x742f
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8007b02:	4b49      	ldr	r3, [pc, #292]	; (8007c28 <dns_check_entry+0x148>)
 8007b04:	f240 421c 	movw	r2, #1052	; 0x41c
 8007b08:	4948      	ldr	r1, [pc, #288]	; (8007c2c <dns_check_entry+0x14c>)
 8007b0a:	4849      	ldr	r0, [pc, #292]	; (8007c30 <dns_check_entry+0x150>)
 8007b0c:	f00c fbd4 	bl	80142b8 <app_debug_rtt_raw>
 8007b10:	e7ea      	b.n	8007ae8 <dns_check_entry+0x8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8007b12:	3390      	adds	r3, #144	; 0x90
 8007b14:	4299      	cmp	r1, r3
 8007b16:	d00c      	beq.n	8007b32 <dns_check_entry+0x52>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8007b18:	7a9a      	ldrb	r2, [r3, #10]
 8007b1a:	2a02      	cmp	r2, #2
 8007b1c:	d1f9      	bne.n	8007b12 <dns_check_entry+0x32>
 8007b1e:	891a      	ldrh	r2, [r3, #8]
 8007b20:	4282      	cmp	r2, r0
 8007b22:	d1f6      	bne.n	8007b12 <dns_check_entry+0x32>
  txid = (u16_t)DNS_RAND_TXID();
 8007b24:	f00c fbf0 	bl	8014308 <sys_rand>
 8007b28:	b280      	uxth	r0, r0
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8007b2a:	4b3e      	ldr	r3, [pc, #248]	; (8007c24 <dns_check_entry+0x144>)
 8007b2c:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 8007b30:	e7f2      	b.n	8007b18 <dns_check_entry+0x38>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8007b32:	4a3c      	ldr	r2, [pc, #240]	; (8007c24 <dns_check_entry+0x144>)
 8007b34:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8007b38:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007b3c:	8118      	strh	r0, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8007b3e:	2102      	movs	r1, #2
 8007b40:	7299      	strb	r1, [r3, #10]
      entry->server_idx = 0;
 8007b42:	2100      	movs	r1, #0
 8007b44:	72d9      	strb	r1, [r3, #11]
      entry->tmr = 1;
 8007b46:	2001      	movs	r0, #1
 8007b48:	7318      	strb	r0, [r3, #12]
      entry->retries = 0;
 8007b4a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8007b4e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007b52:	7351      	strb	r1, [r2, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8007b54:	4620      	mov	r0, r4
 8007b56:	f7ff fef9 	bl	800794c <dns_send>
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8007b5a:	bd10      	pop	{r4, pc}
      if (--entry->tmr == 0) {
 8007b5c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8007b60:	4b30      	ldr	r3, [pc, #192]	; (8007c24 <dns_check_entry+0x144>)
 8007b62:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007b66:	7b13      	ldrb	r3, [r2, #12]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	7313      	strb	r3, [r2, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1f3      	bne.n	8007b5a <dns_check_entry+0x7a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8007b72:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8007b76:	4b2b      	ldr	r3, [pc, #172]	; (8007c24 <dns_check_entry+0x144>)
 8007b78:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007b7c:	7b53      	ldrb	r3, [r2, #13]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	7353      	strb	r3, [r2, #13]
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d009      	beq.n	8007b9c <dns_check_entry+0xbc>
          entry->tmr = entry->retries;
 8007b88:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8007b8c:	4925      	ldr	r1, [pc, #148]	; (8007c24 <dns_check_entry+0x144>)
 8007b8e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8007b92:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7ff fed9 	bl	800794c <dns_send>
        if (err != ERR_OK) {
 8007b9a:	e7de      	b.n	8007b5a <dns_check_entry+0x7a>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8007b9c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8007ba0:	4a20      	ldr	r2, [pc, #128]	; (8007c24 <dns_check_entry+0x144>)
 8007ba2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007ba6:	7adb      	ldrb	r3, [r3, #11]
 8007ba8:	b98b      	cbnz	r3, 8007bce <dns_check_entry+0xee>
 8007baa:	4b22      	ldr	r3, [pc, #136]	; (8007c34 <dns_check_entry+0x154>)
          if (dns_backupserver_available(entry)
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	b173      	cbz	r3, 8007bce <dns_check_entry+0xee>
            entry->server_idx++;
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8007bb6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007bba:	2101      	movs	r1, #1
 8007bbc:	72d1      	strb	r1, [r2, #11]
            entry->tmr = 1;
 8007bbe:	7311      	strb	r1, [r2, #12]
            entry->retries = 0;
 8007bc0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8007bc4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007bc8:	2200      	movs	r2, #0
 8007bca:	735a      	strb	r2, [r3, #13]
 8007bcc:	e7e2      	b.n	8007b94 <dns_check_entry+0xb4>
            dns_call_found(i, NULL);
 8007bce:	2100      	movs	r1, #0
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f7ff fe57 	bl	8007884 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 8007bd6:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <dns_check_entry+0x144>)
 8007bdc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007be0:	2200      	movs	r2, #0
 8007be2:	729a      	strb	r2, [r3, #10]
            break;
 8007be4:	e7b9      	b.n	8007b5a <dns_check_entry+0x7a>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8007be6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	4a0d      	ldr	r2, [pc, #52]	; (8007c24 <dns_check_entry+0x144>)
 8007bee:	58d3      	ldr	r3, [r2, r3]
 8007bf0:	b13b      	cbz	r3, 8007c02 <dns_check_entry+0x122>
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8007bf8:	0112      	lsls	r2, r2, #4
 8007bfa:	490a      	ldr	r1, [pc, #40]	; (8007c24 <dns_check_entry+0x144>)
 8007bfc:	508b      	str	r3, [r1, r2]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1ab      	bne.n	8007b5a <dns_check_entry+0x7a>
        entry->state = DNS_STATE_UNUSED;
 8007c02:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8007c06:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <dns_check_entry+0x144>)
 8007c08:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	72a3      	strb	r3, [r4, #10]
 8007c10:	e7a3      	b.n	8007b5a <dns_check_entry+0x7a>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <dns_check_entry+0x148>)
 8007c14:	f240 425b 	movw	r2, #1115	; 0x45b
 8007c18:	4907      	ldr	r1, [pc, #28]	; (8007c38 <dns_check_entry+0x158>)
 8007c1a:	4805      	ldr	r0, [pc, #20]	; (8007c30 <dns_check_entry+0x150>)
 8007c1c:	f00c fb4c 	bl	80142b8 <app_debug_rtt_raw>
}
 8007c20:	e79b      	b.n	8007b5a <dns_check_entry+0x7a>
 8007c22:	bf00      	nop
 8007c24:	20000da0 	.word	0x20000da0
 8007c28:	080171c0 	.word	0x080171c0
 8007c2c:	08017200 	.word	0x08017200
 8007c30:	08016a38 	.word	0x08016a38
 8007c34:	20000d98 	.word	0x20000d98
 8007c38:	0801721c 	.word	0x0801721c

08007c3c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8007c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c40:	b08d      	sub	sp, #52	; 0x34
 8007c42:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8007c44:	8912      	ldrh	r2, [r2, #8]
 8007c46:	2a0f      	cmp	r2, #15
 8007c48:	d805      	bhi.n	8007c56 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f001 fa40 	bl	80090d0 <pbuf_free>
  return;
}
 8007c50:	b00d      	add	sp, #52	; 0x34
 8007c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c56:	4698      	mov	r8, r3
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8007c58:	2300      	movs	r3, #0
 8007c5a:	220c      	movs	r2, #12
 8007c5c:	a909      	add	r1, sp, #36	; 0x24
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f001 fcd8 	bl	8009614 <pbuf_copy_partial>
 8007c64:	4605      	mov	r5, r0
 8007c66:	280c      	cmp	r0, #12
 8007c68:	d1ef      	bne.n	8007c4a <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 8007c6a:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8007c6e:	f7ff fdd7 	bl	8007820 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8007c72:	4bc2      	ldr	r3, [pc, #776]	; (8007f7c <dns_recv+0x340>)
    txid = lwip_htons(hdr.id);
 8007c74:	f04f 0900 	mov.w	r9, #0
 8007c78:	e0cc      	b.n	8007e14 <dns_recv+0x1d8>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8007c7a:	4ac0      	ldr	r2, [pc, #768]	; (8007f7c <dns_recv+0x340>)
 8007c7c:	2390      	movs	r3, #144	; 0x90
 8007c7e:	fb03 2306 	mla	r3, r3, r6, r2
 8007c82:	7adb      	ldrb	r3, [r3, #11]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f040 80b0 	bne.w	8007dea <dns_recv+0x1ae>
 8007c8a:	4bbd      	ldr	r3, [pc, #756]	; (8007f80 <dns_recv+0x344>)
          if (dns_backupserver_available(entry)) {
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 80ab 	beq.w	8007dea <dns_recv+0x1ae>
            entry->retries = DNS_MAX_RETRIES-1;
 8007c94:	2390      	movs	r3, #144	; 0x90
 8007c96:	fb03 2606 	mla	r6, r3, r6, r2
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	7373      	strb	r3, [r6, #13]
            entry->tmr     = 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	7333      	strb	r3, [r6, #12]
            dns_check_entry(i);
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	f7ff ff1c 	bl	8007ae0 <dns_check_entry>
            goto ignore_packet;
 8007ca8:	e7cf      	b.n	8007c4a <dns_recv+0xe>
  if (offset == 0xFFFF) {
 8007caa:	45c8      	cmp	r8, r9
 8007cac:	d0cd      	beq.n	8007c4a <dns_recv+0xe>
  return (u16_t)(offset + 1);
 8007cae:	f108 0501 	add.w	r5, r8, #1
 8007cb2:	b2ad      	uxth	r5, r5
            if (res_idx == 0xFFFF) {
 8007cb4:	454d      	cmp	r5, r9
 8007cb6:	d0c8      	beq.n	8007c4a <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8007cb8:	462b      	mov	r3, r5
 8007cba:	4652      	mov	r2, sl
 8007cbc:	a906      	add	r1, sp, #24
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f001 fca8 	bl	8009614 <pbuf_copy_partial>
 8007cc4:	280a      	cmp	r0, #10
 8007cc6:	d1c0      	bne.n	8007c4a <dns_recv+0xe>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8007cc8:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8007ccc:	429d      	cmp	r5, r3
 8007cce:	d8bc      	bhi.n	8007c4a <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8007cd0:	f108 050b 	add.w	r5, r8, #11
 8007cd4:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8007cd6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8007cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cde:	d104      	bne.n	8007cea <dns_recv+0xae>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8007ce0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8007ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce8:	d039      	beq.n	8007d5e <dns_recv+0x122>
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8007cea:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8007cee:	f7ff fd97 	bl	8007820 <lwip_htons>
 8007cf2:	182b      	adds	r3, r5, r0
 8007cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf8:	daa7      	bge.n	8007c4a <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8007cfa:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8007cfe:	f7ff fd8f 	bl	8007820 <lwip_htons>
 8007d02:	4405      	add	r5, r0
 8007d04:	b2ad      	uxth	r5, r5
            --nanswers;
 8007d06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d0a:	fa1f fb8b 	uxth.w	fp, fp
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8007d0e:	f1bb 0f00 	cmp.w	fp, #0
 8007d12:	d06a      	beq.n	8007dea <dns_recv+0x1ae>
 8007d14:	8923      	ldrh	r3, [r4, #8]
 8007d16:	42ab      	cmp	r3, r5
 8007d18:	d967      	bls.n	8007dea <dns_recv+0x1ae>
    n = pbuf_try_get_at(p, offset++);
 8007d1a:	f105 0801 	add.w	r8, r5, #1
 8007d1e:	fa1f f888 	uxth.w	r8, r8
 8007d22:	4629      	mov	r1, r5
 8007d24:	4620      	mov	r0, r4
 8007d26:	f001 fda7 	bl	8009878 <pbuf_try_get_at>
    if ((n < 0) || (offset == 0)) {
 8007d2a:	1e03      	subs	r3, r0, #0
 8007d2c:	db8d      	blt.n	8007c4a <dns_recv+0xe>
 8007d2e:	f1b8 0f00 	cmp.w	r8, #0
 8007d32:	d08a      	beq.n	8007c4a <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 8007d34:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8007d38:	2ac0      	cmp	r2, #192	; 0xc0
 8007d3a:	d0b6      	beq.n	8007caa <dns_recv+0x6e>
      if (offset + n >= p->tot_len) {
 8007d3c:	eb08 0203 	add.w	r2, r8, r3
 8007d40:	8921      	ldrh	r1, [r4, #8]
 8007d42:	428a      	cmp	r2, r1
 8007d44:	da81      	bge.n	8007c4a <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 8007d46:	b295      	uxth	r5, r2
    n = pbuf_try_get_at(p, offset);
 8007d48:	4629      	mov	r1, r5
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f001 fd94 	bl	8009878 <pbuf_try_get_at>
    if (n < 0) {
 8007d50:	2800      	cmp	r0, #0
 8007d52:	f6ff af7a 	blt.w	8007c4a <dns_recv+0xe>
  } while (n != 0);
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d1df      	bne.n	8007d1a <dns_recv+0xde>
      offset = (u16_t)(offset + n);
 8007d5a:	46a8      	mov	r8, r5
 8007d5c:	e7a5      	b.n	8007caa <dns_recv+0x6e>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8007d5e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d66:	d1c0      	bne.n	8007cea <dns_recv+0xae>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8007d68:	462b      	mov	r3, r5
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	a904      	add	r1, sp, #16
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f001 fc50 	bl	8009614 <pbuf_copy_partial>
 8007d74:	2804      	cmp	r0, #4
 8007d76:	f47f af68 	bne.w	8007c4a <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8007d7a:	4b80      	ldr	r3, [pc, #512]	; (8007f7c <dns_recv+0x340>)
 8007d7c:	2590      	movs	r5, #144	; 0x90
 8007d7e:	fb05 3506 	mla	r5, r5, r6, r3
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	606b      	str	r3, [r5, #4]
                  pbuf_free(p);
 8007d86:	4620      	mov	r0, r4
 8007d88:	f001 f9a2 	bl	80090d0 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8007d8c:	9807      	ldr	r0, [sp, #28]
 8007d8e:	f7ff fd4c 	bl	800782a <lwip_htonl>
  entry->state = DNS_STATE_DONE;
 8007d92:	2203      	movs	r2, #3
 8007d94:	72aa      	strb	r2, [r5, #10]
  if (entry->ttl > DNS_MAX_TTL) {
 8007d96:	4a7b      	ldr	r2, [pc, #492]	; (8007f84 <dns_recv+0x348>)
 8007d98:	4290      	cmp	r0, r2
 8007d9a:	d81f      	bhi.n	8007ddc <dns_recv+0x1a0>
  entry->ttl = ttl;
 8007d9c:	2290      	movs	r2, #144	; 0x90
 8007d9e:	fb02 f206 	mul.w	r2, r2, r6
 8007da2:	4976      	ldr	r1, [pc, #472]	; (8007f7c <dns_recv+0x340>)
 8007da4:	5088      	str	r0, [r1, r2]
  dns_call_found(idx, &entry->ipaddr);
 8007da6:	4c75      	ldr	r4, [pc, #468]	; (8007f7c <dns_recv+0x340>)
 8007da8:	9903      	ldr	r1, [sp, #12]
 8007daa:	3104      	adds	r1, #4
 8007dac:	4421      	add	r1, r4
 8007dae:	4638      	mov	r0, r7
 8007db0:	f7ff fd68 	bl	8007884 <dns_call_found>
  if (entry->ttl == 0) {
 8007db4:	2390      	movs	r3, #144	; 0x90
 8007db6:	fb03 f306 	mul.w	r3, r3, r6
 8007dba:	58e3      	ldr	r3, [r4, r3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f47f af47 	bne.w	8007c50 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 8007dc2:	2390      	movs	r3, #144	; 0x90
 8007dc4:	fb03 4306 	mla	r3, r3, r6, r4
 8007dc8:	7a9b      	ldrb	r3, [r3, #10]
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	f47f af40 	bne.w	8007c50 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 8007dd0:	2390      	movs	r3, #144	; 0x90
 8007dd2:	fb03 4606 	mla	r6, r3, r6, r4
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	72b3      	strb	r3, [r6, #10]
                  return;
 8007dda:	e739      	b.n	8007c50 <dns_recv+0x14>
    entry->ttl = DNS_MAX_TTL;
 8007ddc:	2390      	movs	r3, #144	; 0x90
 8007dde:	fb03 f306 	mul.w	r3, r3, r6
 8007de2:	4a66      	ldr	r2, [pc, #408]	; (8007f7c <dns_recv+0x340>)
 8007de4:	4967      	ldr	r1, [pc, #412]	; (8007f84 <dns_recv+0x348>)
 8007de6:	50d1      	str	r1, [r2, r3]
 8007de8:	e7dd      	b.n	8007da6 <dns_recv+0x16a>
        pbuf_free(p);
 8007dea:	4620      	mov	r0, r4
 8007dec:	f001 f970 	bl	80090d0 <pbuf_free>
        dns_call_found(i, NULL);
 8007df0:	2100      	movs	r1, #0
 8007df2:	4638      	mov	r0, r7
 8007df4:	f7ff fd46 	bl	8007884 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8007df8:	4b60      	ldr	r3, [pc, #384]	; (8007f7c <dns_recv+0x340>)
 8007dfa:	2290      	movs	r2, #144	; 0x90
 8007dfc:	fb02 3606 	mla	r6, r2, r6, r3
 8007e00:	2300      	movs	r3, #0
 8007e02:	72b3      	strb	r3, [r6, #10]
        return;
 8007e04:	e724      	b.n	8007c50 <dns_recv+0x14>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8007e06:	f109 0901 	add.w	r9, r9, #1
 8007e0a:	3390      	adds	r3, #144	; 0x90
 8007e0c:	f1b9 0f03 	cmp.w	r9, #3
 8007e10:	f43f af1b 	beq.w	8007c4a <dns_recv+0xe>
 8007e14:	fa5f f789 	uxtb.w	r7, r9
      struct dns_table_entry *entry = &dns_table[i];
 8007e18:	464e      	mov	r6, r9
      if ((entry->state == DNS_STATE_ASKING) &&
 8007e1a:	7a9a      	ldrb	r2, [r3, #10]
 8007e1c:	2a02      	cmp	r2, #2
 8007e1e:	d1f2      	bne.n	8007e06 <dns_recv+0x1ca>
 8007e20:	891a      	ldrh	r2, [r3, #8]
 8007e22:	4282      	cmp	r2, r0
 8007e24:	d1ef      	bne.n	8007e06 <dns_recv+0x1ca>
        nquestions = lwip_htons(hdr.numquestions);
 8007e26:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8007e2a:	f7ff fcf9 	bl	8007820 <lwip_htons>
 8007e2e:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8007e30:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 8007e34:	f7ff fcf4 	bl	8007820 <lwip_htons>
 8007e38:	9002      	str	r0, [sp, #8]
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8007e3a:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f6bf af03 	bge.w	8007c4a <dns_recv+0xe>
        if (nquestions != 1) {
 8007e44:	f1ba 0f01 	cmp.w	sl, #1
 8007e48:	f47f aeff 	bne.w	8007c4a <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8007e4c:	eb09 02c9 	add.w	r2, r9, r9, lsl #3
 8007e50:	4b4a      	ldr	r3, [pc, #296]	; (8007f7c <dns_recv+0x340>)
 8007e52:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007e56:	7ad9      	ldrb	r1, [r3, #11]
 8007e58:	f8d8 2000 	ldr.w	r2, [r8]
 8007e5c:	4b48      	ldr	r3, [pc, #288]	; (8007f80 <dns_recv+0x344>)
 8007e5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	f47f aef1 	bne.w	8007c4a <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8007e68:	2390      	movs	r3, #144	; 0x90
 8007e6a:	fb03 f309 	mul.w	r3, r3, r9
 8007e6e:	461a      	mov	r2, r3
 8007e70:	9303      	str	r3, [sp, #12]
 8007e72:	4b45      	ldr	r3, [pc, #276]	; (8007f88 <dns_recv+0x34c>)
 8007e74:	18d3      	adds	r3, r2, r3
 8007e76:	9301      	str	r3, [sp, #4]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8007e78:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8007e7c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8007f8c <dns_recv+0x350>
    n = pbuf_try_get_at(p, response_offset);
 8007e80:	4629      	mov	r1, r5
 8007e82:	4620      	mov	r0, r4
 8007e84:	f001 fcf8 	bl	8009878 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8007e88:	f1b0 0900 	subs.w	r9, r0, #0
 8007e8c:	f6ff aedd 	blt.w	8007c4a <dns_recv+0xe>
 8007e90:	455d      	cmp	r5, fp
 8007e92:	f43f aeda 	beq.w	8007c4a <dns_recv+0xe>
    response_offset++;
 8007e96:	3501      	adds	r5, #1
 8007e98:	b2ad      	uxth	r5, r5
    if ((n & 0xc0) == 0xc0) {
 8007e9a:	f009 03c0 	and.w	r3, r9, #192	; 0xc0
 8007e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8007ea0:	f43f aed3 	beq.w	8007c4a <dns_recv+0xe>
      while (n > 0) {
 8007ea4:	f1b9 0f00 	cmp.w	r9, #0
 8007ea8:	dd27      	ble.n	8007efa <dns_recv+0x2be>
 8007eaa:	9b01      	ldr	r3, [sp, #4]
 8007eac:	4698      	mov	r8, r3
 8007eae:	444b      	add	r3, r9
 8007eb0:	4699      	mov	r9, r3
        int c = pbuf_try_get_at(p, response_offset);
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f001 fcdf 	bl	8009878 <pbuf_try_get_at>
        if (c < 0) {
 8007eba:	1e03      	subs	r3, r0, #0
 8007ebc:	f6ff aec5 	blt.w	8007c4a <dns_recv+0xe>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8007ec0:	f818 2b01 	ldrb.w	r2, [r8], #1
 8007ec4:	f812 100a 	ldrb.w	r1, [r2, sl]
 8007ec8:	f001 0103 	and.w	r1, r1, #3
 8007ecc:	2901      	cmp	r1, #1
 8007ece:	bf08      	it	eq
 8007ed0:	3220      	addeq	r2, #32
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f813 100a 	ldrb.w	r1, [r3, sl]
 8007ed8:	f001 0103 	and.w	r1, r1, #3
 8007edc:	2901      	cmp	r1, #1
 8007ede:	bf08      	it	eq
 8007ee0:	3320      	addeq	r3, #32
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	f47f aeb1 	bne.w	8007c4a <dns_recv+0xe>
        if (response_offset == 0xFFFF) {
 8007ee8:	455d      	cmp	r5, fp
 8007eea:	f43f aeae 	beq.w	8007c4a <dns_recv+0xe>
        response_offset++;
 8007eee:	3501      	adds	r5, #1
 8007ef0:	b2ad      	uxth	r5, r5
        ++query;
 8007ef2:	f8cd 8004 	str.w	r8, [sp, #4]
      while (n > 0) {
 8007ef6:	45c8      	cmp	r8, r9
 8007ef8:	d1db      	bne.n	8007eb2 <dns_recv+0x276>
      ++query;
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	3301      	adds	r3, #1
 8007efe:	9301      	str	r3, [sp, #4]
    n = pbuf_try_get_at(p, response_offset);
 8007f00:	4629      	mov	r1, r5
 8007f02:	4620      	mov	r0, r4
 8007f04:	f001 fcb8 	bl	8009878 <pbuf_try_get_at>
    if (n < 0) {
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f6ff ae9e 	blt.w	8007c4a <dns_recv+0xe>
  } while (n != 0);
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d1b6      	bne.n	8007e80 <dns_recv+0x244>
  if (response_offset == 0xFFFF) {
 8007f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f16:	429d      	cmp	r5, r3
 8007f18:	f43f ae97 	beq.w	8007c4a <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 8007f1c:	f105 0801 	add.w	r8, r5, #1
 8007f20:	fa1f f888 	uxth.w	r8, r8
        if (res_idx == 0xFFFF) {
 8007f24:	4598      	cmp	r8, r3
 8007f26:	f43f ae90 	beq.w	8007c4a <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8007f2a:	4643      	mov	r3, r8
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	a905      	add	r1, sp, #20
 8007f30:	4620      	mov	r0, r4
 8007f32:	f001 fb6f 	bl	8009614 <pbuf_copy_partial>
 8007f36:	2804      	cmp	r0, #4
 8007f38:	f47f ae87 	bne.w	8007c4a <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8007f3c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8007f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f44:	f47f ae81 	bne.w	8007c4a <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8007f48:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8007f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f50:	f47f ae7b 	bne.w	8007c4a <dns_recv+0xe>
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8007f54:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8007f58:	4598      	cmp	r8, r3
 8007f5a:	f63f ae76 	bhi.w	8007c4a <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8007f5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007f62:	f013 0f0f 	tst.w	r3, #15
 8007f66:	f47f ae88 	bne.w	8007c7a <dns_recv+0x3e>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8007f6a:	3505      	adds	r5, #5
 8007f6c:	b2ad      	uxth	r5, r5
  if (offset == 0xFFFF) {
 8007f6e:	f64f 79ff 	movw	r9, #65535	; 0xffff
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8007f72:	f04f 0a0a 	mov.w	sl, #10
 8007f76:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007f7a:	e6c8      	b.n	8007d0e <dns_recv+0xd2>
 8007f7c:	20000da0 	.word	0x20000da0
 8007f80:	20000d98 	.word	0x20000d98
 8007f84:	00093a80 	.word	0x00093a80
 8007f88:	20000db0 	.word	0x20000db0
 8007f8c:	08019b6c 	.word	0x08019b6c

08007f90 <dns_init>:
}
 8007f90:	4770      	bx	lr
	...

08007f94 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8007f94:	2801      	cmp	r0, #1
 8007f96:	d900      	bls.n	8007f9a <dns_setserver+0x6>
}
 8007f98:	4770      	bx	lr
    if (dnsserver != NULL) {
 8007f9a:	b121      	cbz	r1, 8007fa6 <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 8007f9c:	680a      	ldr	r2, [r1, #0]
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <dns_setserver+0x20>)
 8007fa0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8007fa4:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 8007fa6:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <dns_setserver+0x24>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <dns_setserver+0x20>)
 8007fac:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8007fb0:	e7f2      	b.n	8007f98 <dns_setserver+0x4>
 8007fb2:	bf00      	nop
 8007fb4:	20000d98 	.word	0x20000d98
 8007fb8:	08019224 	.word	0x08019224

08007fbc <dns_getserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8007fbc:	2801      	cmp	r0, #1
    return &dns_servers[numdns];
 8007fbe:	bf9a      	itte	ls
 8007fc0:	4b02      	ldrls	r3, [pc, #8]	; (8007fcc <dns_getserver+0x10>)
 8007fc2:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
    return IP_ADDR_ANY;
 8007fc6:	4802      	ldrhi	r0, [pc, #8]	; (8007fd0 <dns_getserver+0x14>)
}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	20000d98 	.word	0x20000d98
 8007fd0:	08019224 	.word	0x08019224

08007fd4 <dns_tmr>:
{
 8007fd4:	b508      	push	{r3, lr}
    dns_check_entry(i);
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	f7ff fd82 	bl	8007ae0 <dns_check_entry>
 8007fdc:	2001      	movs	r0, #1
 8007fde:	f7ff fd7f 	bl	8007ae0 <dns_check_entry>
 8007fe2:	2002      	movs	r0, #2
 8007fe4:	f7ff fd7c 	bl	8007ae0 <dns_check_entry>
}
 8007fe8:	bd08      	pop	{r3, pc}
	...

08007fec <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 8007fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	9201      	str	r2, [sp, #4]
 8007ff4:	9302      	str	r3, [sp, #8]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	f000 8141 	beq.w	800827e <dns_gethostbyname_addrtype+0x292>
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	468a      	mov	sl, r1
 8008000:	2800      	cmp	r0, #0
 8008002:	f000 813f 	beq.w	8008284 <dns_gethostbyname_addrtype+0x298>
      (!hostname) || (!hostname[0])) {
 8008006:	7803      	ldrb	r3, [r0, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 813e 	beq.w	800828a <dns_gethostbyname_addrtype+0x29e>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 800800e:	f7f8 f915 	bl	800023c <strlen>
 8008012:	4605      	mov	r5, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8008014:	287f      	cmp	r0, #127	; 0x7f
 8008016:	f200 813b 	bhi.w	8008290 <dns_gethostbyname_addrtype+0x2a4>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 800801a:	4651      	mov	r1, sl
 800801c:	4620      	mov	r0, r4
 800801e:	f006 fe55 	bl	800eccc <ip4addr_aton>
 8008022:	4681      	mov	r9, r0
 8008024:	b118      	cbz	r0, 800802e <dns_gethostbyname_addrtype+0x42>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8008026:	2000      	movs	r0, #0
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8008028:	b005      	add	sp, #20
 800802a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802e:	4e9e      	ldr	r6, [pc, #632]	; (80082a8 <dns_gethostbyname_addrtype+0x2bc>)
  if (ipaddr_aton(hostname, addr)) {
 8008030:	46b0      	mov	r8, r6
 8008032:	2700      	movs	r7, #0
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8008034:	f04f 0b80 	mov.w	fp, #128	; 0x80
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8008038:	9703      	str	r7, [sp, #12]
 800803a:	f898 300a 	ldrb.w	r3, [r8, #10]
 800803e:	2b03      	cmp	r3, #3
 8008040:	d01f      	beq.n	8008082 <dns_gethostbyname_addrtype+0x96>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8008042:	3701      	adds	r7, #1
 8008044:	f108 0890 	add.w	r8, r8, #144	; 0x90
 8008048:	2f03      	cmp	r7, #3
 800804a:	d1f5      	bne.n	8008038 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 800804c:	4b97      	ldr	r3, [pc, #604]	; (80082ac <dns_gethostbyname_addrtype+0x2c0>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 8126 	beq.w	80082a2 <dns_gethostbyname_addrtype+0x2b6>
 8008056:	46b0      	mov	r8, r6
 8008058:	2700      	movs	r7, #0
        if (dns_requests[r].found == 0) {
 800805a:	f8df b258 	ldr.w	fp, [pc, #600]	; 80082b4 <dns_gethostbyname_addrtype+0x2c8>
 800805e:	fa5f fa87 	uxtb.w	sl, r7
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8008062:	f898 300a 	ldrb.w	r3, [r8, #10]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d01d      	beq.n	80080a6 <dns_gethostbyname_addrtype+0xba>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800806a:	3701      	adds	r7, #1
 800806c:	f108 0890 	add.w	r8, r8, #144	; 0x90
 8008070:	2f03      	cmp	r7, #3
 8008072:	d1f4      	bne.n	800805e <dns_gethostbyname_addrtype+0x72>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8008074:	4b8e      	ldr	r3, [pc, #568]	; (80082b0 <dns_gethostbyname_addrtype+0x2c4>)
 8008076:	7818      	ldrb	r0, [r3, #0]
 8008078:	2300      	movs	r3, #0
  lseqi = DNS_TABLE_SIZE;
 800807a:	f04f 0c03 	mov.w	ip, #3
  lseq = 0;
 800807e:	469e      	mov	lr, r3
 8008080:	e03c      	b.n	80080fc <dns_gethostbyname_addrtype+0x110>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8008082:	465a      	mov	r2, fp
 8008084:	f108 0110 	add.w	r1, r8, #16
 8008088:	4620      	mov	r0, r4
 800808a:	f7ff fbda 	bl	8007842 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800808e:	2800      	cmp	r0, #0
 8008090:	d1d7      	bne.n	8008042 <dns_gethostbyname_addrtype+0x56>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8008092:	9b03      	ldr	r3, [sp, #12]
 8008094:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8008098:	4a83      	ldr	r2, [pc, #524]	; (80082a8 <dns_gethostbyname_addrtype+0x2bc>)
 800809a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f8ca 3000 	str.w	r3, [sl]
      return ERR_OK;
 80080a4:	e7c0      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 80080a6:	2280      	movs	r2, #128	; 0x80
 80080a8:	f108 0110 	add.w	r1, r8, #16
 80080ac:	4620      	mov	r0, r4
 80080ae:	f7ff fbc8 	bl	8007842 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80080b2:	4603      	mov	r3, r0
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d1d8      	bne.n	800806a <dns_gethostbyname_addrtype+0x7e>
        if (dns_requests[r].found == 0) {
 80080b8:	f8db 2000 	ldr.w	r2, [fp]
 80080bc:	b14a      	cbz	r2, 80080d2 <dns_gethostbyname_addrtype+0xe6>
 80080be:	f8db 300c 	ldr.w	r3, [fp, #12]
 80080c2:	b12b      	cbz	r3, 80080d0 <dns_gethostbyname_addrtype+0xe4>
 80080c4:	f8db 3018 	ldr.w	r3, [fp, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1ce      	bne.n	800806a <dns_gethostbyname_addrtype+0x7e>
 80080cc:	2302      	movs	r3, #2
 80080ce:	e000      	b.n	80080d2 <dns_gethostbyname_addrtype+0xe6>
 80080d0:	2301      	movs	r3, #1
          dns_requests[r].found = found;
 80080d2:	4a78      	ldr	r2, [pc, #480]	; (80082b4 <dns_gethostbyname_addrtype+0x2c8>)
 80080d4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80080d8:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80080dc:	9c01      	ldr	r4, [sp, #4]
 80080de:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
          dns_requests[r].arg = callback_arg;
 80080e2:	9902      	ldr	r1, [sp, #8]
 80080e4:	6041      	str	r1, [r0, #4]
          dns_requests[r].dns_table_idx = i;
 80080e6:	f880 a008 	strb.w	sl, [r0, #8]
          return ERR_INPROGRESS;
 80080ea:	f06f 0004 	mvn.w	r0, #4
 80080ee:	e79b      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80080f0:	3701      	adds	r7, #1
 80080f2:	b2ff      	uxtb	r7, r7
 80080f4:	3301      	adds	r3, #1
 80080f6:	3690      	adds	r6, #144	; 0x90
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d00d      	beq.n	8008118 <dns_gethostbyname_addrtype+0x12c>
 80080fc:	b2df      	uxtb	r7, r3
    entry = &dns_table[i];
 80080fe:	4619      	mov	r1, r3
    if (entry->state == DNS_STATE_UNUSED) {
 8008100:	7ab2      	ldrb	r2, [r6, #10]
 8008102:	b152      	cbz	r2, 800811a <dns_gethostbyname_addrtype+0x12e>
    if (entry->state == DNS_STATE_DONE) {
 8008104:	2a03      	cmp	r2, #3
 8008106:	d1f3      	bne.n	80080f0 <dns_gethostbyname_addrtype+0x104>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8008108:	7bb2      	ldrb	r2, [r6, #14]
 800810a:	1a82      	subs	r2, r0, r2
 800810c:	b2d2      	uxtb	r2, r2
      if (age > lseq) {
 800810e:	4572      	cmp	r2, lr
 8008110:	bf84      	itt	hi
 8008112:	46bc      	movhi	ip, r7
        lseq = age;
 8008114:	4696      	movhi	lr, r2
 8008116:	e7eb      	b.n	80080f0 <dns_gethostbyname_addrtype+0x104>
    entry = &dns_table[i];
 8008118:	2102      	movs	r1, #2
  if (i == DNS_TABLE_SIZE) {
 800811a:	2f03      	cmp	r7, #3
 800811c:	d012      	beq.n	8008144 <dns_gethostbyname_addrtype+0x158>
    entry = &dns_table[i];
 800811e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8008122:	4e61      	ldr	r6, [pc, #388]	; (80082a8 <dns_gethostbyname_addrtype+0x2bc>)
 8008124:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    if (dns_requests[r].found == NULL) {
 8008128:	4b62      	ldr	r3, [pc, #392]	; (80082b4 <dns_gethostbyname_addrtype+0x2c8>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	b1fb      	cbz	r3, 800816e <dns_gethostbyname_addrtype+0x182>
 800812e:	4b61      	ldr	r3, [pc, #388]	; (80082b4 <dns_gethostbyname_addrtype+0x2c8>)
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	b1d3      	cbz	r3, 800816a <dns_gethostbyname_addrtype+0x17e>
 8008134:	4b5f      	ldr	r3, [pc, #380]	; (80082b4 <dns_gethostbyname_addrtype+0x2c8>)
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	f04f 0902 	mov.w	r9, #2
 800813c:	b1bb      	cbz	r3, 800816e <dns_gethostbyname_addrtype+0x182>
    return ERR_MEM;
 800813e:	f04f 30ff 	mov.w	r0, #4294967295
 8008142:	e771      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8008144:	f1bc 0f02 	cmp.w	ip, #2
 8008148:	f200 80a5 	bhi.w	8008296 <dns_gethostbyname_addrtype+0x2aa>
 800814c:	eb0c 03cc 	add.w	r3, ip, ip, lsl #3
 8008150:	4a55      	ldr	r2, [pc, #340]	; (80082a8 <dns_gethostbyname_addrtype+0x2bc>)
 8008152:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8008156:	7a9b      	ldrb	r3, [r3, #10]
 8008158:	2b03      	cmp	r3, #3
 800815a:	f040 809f 	bne.w	800829c <dns_gethostbyname_addrtype+0x2b0>
      entry = &dns_table[i];
 800815e:	eb0c 03cc 	add.w	r3, ip, ip, lsl #3
 8008162:	eb02 1603 	add.w	r6, r2, r3, lsl #4
 8008166:	4667      	mov	r7, ip
 8008168:	e7de      	b.n	8008128 <dns_gethostbyname_addrtype+0x13c>
    if (dns_requests[r].found == NULL) {
 800816a:	f04f 0901 	mov.w	r9, #1
  req->dns_table_idx = i;
 800816e:	4a51      	ldr	r2, [pc, #324]	; (80082b4 <dns_gethostbyname_addrtype+0x2c8>)
 8008170:	eb09 0149 	add.w	r1, r9, r9, lsl #1
 8008174:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8008178:	721f      	strb	r7, [r3, #8]
  entry->state = DNS_STATE_NEW;
 800817a:	f04f 0c01 	mov.w	ip, #1
 800817e:	f886 c00a 	strb.w	ip, [r6, #10]
  entry->seqno = dns_seqno;
 8008182:	73b0      	strb	r0, [r6, #14]
  req->found = found;
 8008184:	9801      	ldr	r0, [sp, #4]
 8008186:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  req->arg   = callback_arg;
 800818a:	9a02      	ldr	r2, [sp, #8]
 800818c:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 800818e:	2d7f      	cmp	r5, #127	; 0x7f
 8008190:	bf28      	it	cs
 8008192:	257f      	movcs	r5, #127	; 0x7f
  MEMCPY(entry->name, name, namelen);
 8008194:	462a      	mov	r2, r5
 8008196:	4621      	mov	r1, r4
 8008198:	f106 0010 	add.w	r0, r6, #16
 800819c:	f00c f8f8 	bl	8014390 <memcpy>
  entry->name[namelen] = 0;
 80081a0:	4435      	add	r5, r6
 80081a2:	2300      	movs	r3, #0
 80081a4:	742b      	strb	r3, [r5, #16]
    if (dns_pcbs[i] == NULL) {
 80081a6:	4b44      	ldr	r3, [pc, #272]	; (80082b8 <dns_gethostbyname_addrtype+0x2cc>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	b34b      	cbz	r3, 8008200 <dns_gethostbyname_addrtype+0x214>
 80081ac:	4b42      	ldr	r3, [pc, #264]	; (80082b8 <dns_gethostbyname_addrtype+0x2cc>)
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d04a      	beq.n	800824a <dns_gethostbyname_addrtype+0x25e>
 80081b4:	4b40      	ldr	r3, [pc, #256]	; (80082b8 <dns_gethostbyname_addrtype+0x2cc>)
 80081b6:	689b      	ldr	r3, [r3, #8]
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 80081b8:	f04f 0802 	mov.w	r8, #2
    if (dns_pcbs[i] == NULL) {
 80081bc:	b313      	cbz	r3, 8008204 <dns_gethostbyname_addrtype+0x218>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80081be:	4b3f      	ldr	r3, [pc, #252]	; (80082bc <dns_gethostbyname_addrtype+0x2d0>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2203      	movs	r2, #3
    if (dns_pcbs[idx] != NULL) {
 80081c8:	483b      	ldr	r0, [pc, #236]	; (80082b8 <dns_gethostbyname_addrtype+0x2cc>)
      idx = 0;
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	bf28      	it	cs
 80081ce:	2300      	movcs	r3, #0
    if (dns_pcbs[idx] != NULL) {
 80081d0:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80081d4:	2900      	cmp	r1, #0
 80081d6:	d143      	bne.n	8008260 <dns_gethostbyname_addrtype+0x274>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80081d8:	3301      	adds	r3, #1
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	3a01      	subs	r2, #1
 80081de:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80081e2:	d1f2      	bne.n	80081ca <dns_gethostbyname_addrtype+0x1de>
  entry->pcb_idx = dns_alloc_pcb();
 80081e4:	2303      	movs	r3, #3
 80081e6:	73f3      	strb	r3, [r6, #15]
    entry->state = DNS_STATE_UNUSED;
 80081e8:	2300      	movs	r3, #0
 80081ea:	72b3      	strb	r3, [r6, #10]
    req->found = NULL;
 80081ec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80081f0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80081f4:	4a2f      	ldr	r2, [pc, #188]	; (80082b4 <dns_gethostbyname_addrtype+0x2c8>)
 80081f6:	f842 3009 	str.w	r3, [r2, r9]
    return ERR_MEM;
 80081fa:	f04f 30ff 	mov.w	r0, #4294967295
 80081fe:	e713      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8008200:	f04f 0800 	mov.w	r8, #0
    dns_pcbs[i] = dns_alloc_random_port();
 8008204:	46c2      	mov	sl, r8
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8008206:	202e      	movs	r0, #46	; 0x2e
 8008208:	f006 fa36 	bl	800e678 <udp_new_ip_type>
  if (pcb == NULL) {
 800820c:	4604      	mov	r4, r0
 800820e:	b310      	cbz	r0, 8008256 <dns_gethostbyname_addrtype+0x26a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8008210:	4d2b      	ldr	r5, [pc, #172]	; (80082c0 <dns_gethostbyname_addrtype+0x2d4>)
    u16_t port = (u16_t)DNS_RAND_TXID();
 8008212:	f00c f879 	bl	8014308 <sys_rand>
 8008216:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 8008218:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800821c:	d3f9      	bcc.n	8008212 <dns_gethostbyname_addrtype+0x226>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 800821e:	4629      	mov	r1, r5
 8008220:	4620      	mov	r0, r4
 8008222:	f005 ffb1 	bl	800e188 <udp_bind>
  } while (err == ERR_USE);
 8008226:	f110 0f08 	cmn.w	r0, #8
 800822a:	d0f2      	beq.n	8008212 <dns_gethostbyname_addrtype+0x226>
  if (err != ERR_OK) {
 800822c:	b980      	cbnz	r0, 8008250 <dns_gethostbyname_addrtype+0x264>
  udp_recv(pcb, dns_recv, NULL);
 800822e:	2200      	movs	r2, #0
 8008230:	4924      	ldr	r1, [pc, #144]	; (80082c4 <dns_gethostbyname_addrtype+0x2d8>)
 8008232:	4620      	mov	r0, r4
 8008234:	f006 f9d6 	bl	800e5e4 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 8008238:	4b1f      	ldr	r3, [pc, #124]	; (80082b8 <dns_gethostbyname_addrtype+0x2cc>)
 800823a:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
      dns_last_pcb_idx = i;
 800823e:	4b1f      	ldr	r3, [pc, #124]	; (80082bc <dns_gethostbyname_addrtype+0x2d0>)
 8008240:	f883 8000 	strb.w	r8, [r3]
  entry->pcb_idx = dns_alloc_pcb();
 8008244:	f886 800f 	strb.w	r8, [r6, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 8008248:	e00f      	b.n	800826a <dns_gethostbyname_addrtype+0x27e>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800824a:	f04f 0801 	mov.w	r8, #1
 800824e:	e7d9      	b.n	8008204 <dns_gethostbyname_addrtype+0x218>
    udp_remove(pcb);
 8008250:	4620      	mov	r0, r4
 8008252:	f006 f9db 	bl	800e60c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8008256:	4b18      	ldr	r3, [pc, #96]	; (80082b8 <dns_gethostbyname_addrtype+0x2cc>)
 8008258:	2200      	movs	r2, #0
 800825a:	f843 202a 	str.w	r2, [r3, sl, lsl #2]
    if (dns_pcbs[i] != NULL) {
 800825e:	e7ae      	b.n	80081be <dns_gethostbyname_addrtype+0x1d2>
      dns_last_pcb_idx = idx;
 8008260:	4a16      	ldr	r2, [pc, #88]	; (80082bc <dns_gethostbyname_addrtype+0x2d0>)
 8008262:	7013      	strb	r3, [r2, #0]
  entry->pcb_idx = dns_alloc_pcb();
 8008264:	73f3      	strb	r3, [r6, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 8008266:	2b02      	cmp	r3, #2
 8008268:	d8be      	bhi.n	80081e8 <dns_gethostbyname_addrtype+0x1fc>
  dns_seqno++;
 800826a:	4a11      	ldr	r2, [pc, #68]	; (80082b0 <dns_gethostbyname_addrtype+0x2c4>)
 800826c:	7813      	ldrb	r3, [r2, #0]
 800826e:	3301      	adds	r3, #1
 8008270:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8008272:	4638      	mov	r0, r7
 8008274:	f7ff fc34 	bl	8007ae0 <dns_check_entry>
  return ERR_INPROGRESS;
 8008278:	f06f 0004 	mvn.w	r0, #4
 800827c:	e6d4      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
    return ERR_ARG;
 800827e:	f06f 000f 	mvn.w	r0, #15
 8008282:	e6d1      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
 8008284:	f06f 000f 	mvn.w	r0, #15
 8008288:	e6ce      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
 800828a:	f06f 000f 	mvn.w	r0, #15
 800828e:	e6cb      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
    return ERR_ARG;
 8008290:	f06f 000f 	mvn.w	r0, #15
 8008294:	e6c8      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
      return ERR_MEM;
 8008296:	f04f 30ff 	mov.w	r0, #4294967295
 800829a:	e6c5      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	e6c2      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
      return ERR_VAL;
 80082a2:	f06f 0005 	mvn.w	r0, #5
 80082a6:	e6bf      	b.n	8008028 <dns_gethostbyname_addrtype+0x3c>
 80082a8:	20000da0 	.word	0x20000da0
 80082ac:	20000d98 	.word	0x20000d98
 80082b0:	20000d94 	.word	0x20000d94
 80082b4:	20000d70 	.word	0x20000d70
 80082b8:	20000d64 	.word	0x20000d64
 80082bc:	20000d60 	.word	0x20000d60
 80082c0:	08019224 	.word	0x08019224
 80082c4:	08007c3d 	.word	0x08007c3d

080082c8 <dns_gethostbyname>:
{
 80082c8:	b510      	push	{r4, lr}
 80082ca:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 80082cc:	2400      	movs	r4, #0
 80082ce:	9400      	str	r4, [sp, #0]
 80082d0:	f7ff fe8c 	bl	8007fec <dns_gethostbyname_addrtype>
}
 80082d4:	b002      	add	sp, #8
 80082d6:	bd10      	pop	{r4, pc}

080082d8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80082d8:	b4f0      	push	{r4, r5, r6, r7}
 80082da:	b082      	sub	sp, #8
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80082e2:	f010 0701 	ands.w	r7, r0, #1
 80082e6:	d006      	beq.n	80082f6 <lwip_standard_chksum+0x1e>
 80082e8:	4299      	cmp	r1, r3
 80082ea:	dd3b      	ble.n	8008364 <lwip_standard_chksum+0x8c>
    ((u8_t *)&t)[1] = *pb++;
 80082ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082f0:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
 80082f4:	3901      	subs	r1, #1
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80082f6:	2901      	cmp	r1, #1
 80082f8:	dd32      	ble.n	8008360 <lwip_standard_chksum+0x88>
 80082fa:	4603      	mov	r3, r0
  u32_t sum = 0;
 80082fc:	2200      	movs	r2, #0
 80082fe:	460d      	mov	r5, r1
  while (len > 1) {
 8008300:	1846      	adds	r6, r0, r1
    sum += *ps++;
 8008302:	f833 4b02 	ldrh.w	r4, [r3], #2
 8008306:	4422      	add	r2, r4
  while (len > 1) {
 8008308:	1af4      	subs	r4, r6, r3
 800830a:	2c01      	cmp	r4, #1
 800830c:	dcf9      	bgt.n	8008302 <lwip_standard_chksum+0x2a>
 800830e:	1eab      	subs	r3, r5, #2
 8008310:	085b      	lsrs	r3, r3, #1
 8008312:	1c5c      	adds	r4, r3, #1
 8008314:	0064      	lsls	r4, r4, #1
 8008316:	2901      	cmp	r1, #1
 8008318:	bfd8      	it	le
 800831a:	2402      	movle	r4, #2
 800831c:	4420      	add	r0, r4
 800831e:	f1a1 0102 	sub.w	r1, r1, #2
 8008322:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 8008326:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800832a:	bfd8      	it	le
 800832c:	2300      	movle	r3, #0
 800832e:	4419      	add	r1, r3
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8008330:	2900      	cmp	r1, #0
 8008332:	dd02      	ble.n	800833a <lwip_standard_chksum+0x62>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008334:	7803      	ldrb	r3, [r0, #0]
 8008336:	f88d 3006 	strb.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800833a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800833e:	4402      	add	r2, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008340:	b290      	uxth	r0, r2
 8008342:	eb00 4212 	add.w	r2, r0, r2, lsr #16
  sum = FOLD_U32T(sum);
 8008346:	b290      	uxth	r0, r2
 8008348:	eb00 4012 	add.w	r0, r0, r2, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800834c:	b127      	cbz	r7, 8008358 <lwip_standard_chksum+0x80>
    sum = SWAP_BYTES_IN_WORD(sum);
 800834e:	0203      	lsls	r3, r0, #8
 8008350:	b29b      	uxth	r3, r3
 8008352:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8008356:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8008358:	b280      	uxth	r0, r0
 800835a:	b002      	add	sp, #8
 800835c:	bcf0      	pop	{r4, r5, r6, r7}
 800835e:	4770      	bx	lr
  u32_t sum = 0;
 8008360:	2200      	movs	r2, #0
 8008362:	e7e5      	b.n	8008330 <lwip_standard_chksum+0x58>
 8008364:	2200      	movs	r2, #0
 8008366:	e7e8      	b.n	800833a <lwip_standard_chksum+0x62>

08008368 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8008368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800836c:	460f      	mov	r7, r1
 800836e:	4616      	mov	r6, r2
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8008370:	681c      	ldr	r4, [r3, #0]
  acc = (addr & 0xffffUL);
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
  addr = ip4_addr_get_u32(dest);
 8008372:	9b06      	ldr	r3, [sp, #24]
 8008374:	681a      	ldr	r2, [r3, #0]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8008376:	b293      	uxth	r3, r2
 8008378:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  acc = (addr & 0xffffUL);
 800837c:	b2a2      	uxth	r2, r4
 800837e:	4413      	add	r3, r2
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8008380:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8008384:	b29c      	uxth	r4, r3
 8008386:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 800838a:	b29c      	uxth	r4, r3
 800838c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  for (q = p; q != NULL; q = q->next) {
 8008390:	b308      	cbz	r0, 80083d6 <inet_chksum_pseudo+0x6e>
 8008392:	4605      	mov	r5, r0
  int swapped = 0;
 8008394:	f04f 0800 	mov.w	r8, #0
 8008398:	e001      	b.n	800839e <inet_chksum_pseudo+0x36>
  for (q = p; q != NULL; q = q->next) {
 800839a:	682d      	ldr	r5, [r5, #0]
 800839c:	b19d      	cbz	r5, 80083c6 <inet_chksum_pseudo+0x5e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800839e:	8969      	ldrh	r1, [r5, #10]
 80083a0:	6868      	ldr	r0, [r5, #4]
 80083a2:	f7ff ff99 	bl	80082d8 <lwip_standard_chksum>
 80083a6:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 80083a8:	b2a0      	uxth	r0, r4
 80083aa:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 80083ae:	896b      	ldrh	r3, [r5, #10]
 80083b0:	f013 0f01 	tst.w	r3, #1
 80083b4:	d0f1      	beq.n	800839a <inet_chksum_pseudo+0x32>
      swapped = !swapped;
 80083b6:	f088 0801 	eor.w	r8, r8, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 80083ba:	0223      	lsls	r3, r4, #8
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80083c2:	431c      	orrs	r4, r3
 80083c4:	e7e9      	b.n	800839a <inet_chksum_pseudo+0x32>
  if (swapped) {
 80083c6:	f1b8 0f00 	cmp.w	r8, #0
 80083ca:	d004      	beq.n	80083d6 <inet_chksum_pseudo+0x6e>
    acc = SWAP_BYTES_IN_WORD(acc);
 80083cc:	0223      	lsls	r3, r4, #8
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80083d4:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
 80083d6:	4638      	mov	r0, r7
 80083d8:	f7ff fa22 	bl	8007820 <lwip_htons>
 80083dc:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 80083de:	4630      	mov	r0, r6
 80083e0:	f7ff fa1e 	bl	8007820 <lwip_htons>
 80083e4:	4405      	add	r5, r0
 80083e6:	442c      	add	r4, r5
  acc = FOLD_U32T(acc);
 80083e8:	b2a0      	uxth	r0, r4
 80083ea:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 80083ee:	b2a0      	uxth	r0, r4
 80083f0:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
 80083f4:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
 80083f6:	b280      	uxth	r0, r0
 80083f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083fc <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80083fc:	b510      	push	{r4, lr}
 80083fe:	b082      	sub	sp, #8
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8008400:	9c04      	ldr	r4, [sp, #16]
 8008402:	9400      	str	r4, [sp, #0]
 8008404:	f7ff ffb0 	bl	8008368 <inet_chksum_pseudo>
  }
#endif /* LWIP_IPV4 */
}
 8008408:	b002      	add	sp, #8
 800840a:	bd10      	pop	{r4, pc}

0800840c <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
                           u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008410:	b083      	sub	sp, #12
 8008412:	9100      	str	r1, [sp, #0]
 8008414:	9201      	str	r2, [sp, #4]
 8008416:	461d      	mov	r5, r3
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8008418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800841a:	681c      	ldr	r4, [r3, #0]
  acc = (addr & 0xffffUL);
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
  addr = ip4_addr_get_u32(dest);
 800841c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800841e:	681a      	ldr	r2, [r3, #0]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8008420:	b293      	uxth	r3, r2
 8008422:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  acc = (addr & 0xffffUL);
 8008426:	b2a2      	uxth	r2, r4
 8008428:	4413      	add	r3, r2
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800842a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800842e:	b29c      	uxth	r4, r3
 8008430:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8008434:	b29c      	uxth	r4, r3
 8008436:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
 800843a:	2800      	cmp	r0, #0
 800843c:	d03c      	beq.n	80084b8 <inet_chksum_pseudo_partial+0xac>
 800843e:	4607      	mov	r7, r0
 8008440:	2d00      	cmp	r5, #0
 8008442:	d039      	beq.n	80084b8 <inet_chksum_pseudo_partial+0xac>
  int swapped = 0;
 8008444:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
 8008448:	f8df b094 	ldr.w	fp, [pc, #148]	; 80084e0 <inet_chksum_pseudo_partial+0xd4>
 800844c:	f8df a094 	ldr.w	sl, [pc, #148]	; 80084e4 <inet_chksum_pseudo_partial+0xd8>
 8008450:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80084e8 <inet_chksum_pseudo_partial+0xdc>
 8008454:	e00a      	b.n	800846c <inet_chksum_pseudo_partial+0x60>
 8008456:	465b      	mov	r3, fp
 8008458:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800845c:	4651      	mov	r1, sl
 800845e:	4640      	mov	r0, r8
 8008460:	f00b ff2a 	bl	80142b8 <app_debug_rtt_raw>
 8008464:	e011      	b.n	800848a <inet_chksum_pseudo_partial+0x7e>
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
 8008466:	683f      	ldr	r7, [r7, #0]
 8008468:	b1f7      	cbz	r7, 80084a8 <inet_chksum_pseudo_partial+0x9c>
 800846a:	b1ed      	cbz	r5, 80084a8 <inet_chksum_pseudo_partial+0x9c>
    chklen = q->len;
 800846c:	897e      	ldrh	r6, [r7, #10]
    if (chklen > chksum_len) {
 800846e:	42ae      	cmp	r6, r5
 8008470:	bf28      	it	cs
 8008472:	462e      	movcs	r6, r5
    acc += LWIP_CHKSUM(q->payload, chklen);
 8008474:	4631      	mov	r1, r6
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff ff2e 	bl	80082d8 <lwip_standard_chksum>
 800847c:	4404      	add	r4, r0
    chksum_len = (u16_t)(chksum_len - chklen);
 800847e:	1bad      	subs	r5, r5, r6
 8008480:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
 8008482:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8008486:	429d      	cmp	r5, r3
 8008488:	d8e5      	bhi.n	8008456 <inet_chksum_pseudo_partial+0x4a>
    acc = FOLD_U32T(acc);
 800848a:	b2a0      	uxth	r0, r4
 800848c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8008490:	897b      	ldrh	r3, [r7, #10]
 8008492:	f013 0f01 	tst.w	r3, #1
 8008496:	d0e6      	beq.n	8008466 <inet_chksum_pseudo_partial+0x5a>
      swapped = !swapped;
 8008498:	f089 0901 	eor.w	r9, r9, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 800849c:	0223      	lsls	r3, r4, #8
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80084a4:	431c      	orrs	r4, r3
 80084a6:	e7de      	b.n	8008466 <inet_chksum_pseudo_partial+0x5a>
  if (swapped) {
 80084a8:	f1b9 0f00 	cmp.w	r9, #0
 80084ac:	d004      	beq.n	80084b8 <inet_chksum_pseudo_partial+0xac>
    acc = SWAP_BYTES_IN_WORD(acc);
 80084ae:	0223      	lsls	r3, r4, #8
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80084b6:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
 80084b8:	9800      	ldr	r0, [sp, #0]
 80084ba:	f7ff f9b1 	bl	8007820 <lwip_htons>
 80084be:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 80084c0:	9801      	ldr	r0, [sp, #4]
 80084c2:	f7ff f9ad 	bl	8007820 <lwip_htons>
 80084c6:	4405      	add	r5, r0
 80084c8:	442c      	add	r4, r5
  acc = FOLD_U32T(acc);
 80084ca:	b2a0      	uxth	r0, r4
 80084cc:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 80084d0:	b2a0      	uxth	r0, r4
 80084d2:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
 80084d6:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
}
 80084d8:	b280      	uxth	r0, r0
 80084da:	b003      	add	sp, #12
 80084dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e0:	0801723c 	.word	0x0801723c
 80084e4:	0801726c 	.word	0x0801726c
 80084e8:	08016a38 	.word	0x08016a38

080084ec <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
                         u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
 80084ec:	b510      	push	{r4, lr}
 80084ee:	b082      	sub	sp, #8
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
 80084f0:	9c05      	ldr	r4, [sp, #20]
 80084f2:	9401      	str	r4, [sp, #4]
 80084f4:	9c04      	ldr	r4, [sp, #16]
 80084f6:	9400      	str	r4, [sp, #0]
 80084f8:	f7ff ff88 	bl	800840c <inet_chksum_pseudo_partial>
  }
#endif /* LWIP_IPV4 */
}
 80084fc:	b002      	add	sp, #8
 80084fe:	bd10      	pop	{r4, pc}

08008500 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8008500:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8008502:	f7ff fee9 	bl	80082d8 <lwip_standard_chksum>
 8008506:	43c0      	mvns	r0, r0
}
 8008508:	b280      	uxth	r0, r0
 800850a:	bd08      	pop	{r3, pc}

0800850c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800850c:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 800850e:	b310      	cbz	r0, 8008556 <inet_chksum_pbuf+0x4a>
 8008510:	4605      	mov	r5, r0
  int swapped = 0;
 8008512:	2600      	movs	r6, #0
  acc = 0;
 8008514:	4634      	mov	r4, r6
 8008516:	e001      	b.n	800851c <inet_chksum_pbuf+0x10>
  for (q = p; q != NULL; q = q->next) {
 8008518:	682d      	ldr	r5, [r5, #0]
 800851a:	b19d      	cbz	r5, 8008544 <inet_chksum_pbuf+0x38>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800851c:	8969      	ldrh	r1, [r5, #10]
 800851e:	6868      	ldr	r0, [r5, #4]
 8008520:	f7ff feda 	bl	80082d8 <lwip_standard_chksum>
 8008524:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 8008526:	b2a0      	uxth	r0, r4
 8008528:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 800852c:	896b      	ldrh	r3, [r5, #10]
 800852e:	f013 0f01 	tst.w	r3, #1
 8008532:	d0f1      	beq.n	8008518 <inet_chksum_pbuf+0xc>
      swapped = !swapped;
 8008534:	f086 0601 	eor.w	r6, r6, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 8008538:	0223      	lsls	r3, r4, #8
 800853a:	b29b      	uxth	r3, r3
 800853c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008540:	431c      	orrs	r4, r3
 8008542:	e7e9      	b.n	8008518 <inet_chksum_pbuf+0xc>
    }
  }

  if (swapped) {
 8008544:	b126      	cbz	r6, 8008550 <inet_chksum_pbuf+0x44>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008546:	0223      	lsls	r3, r4, #8
 8008548:	b29b      	uxth	r3, r3
 800854a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800854e:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 8008550:	43e0      	mvns	r0, r4
}
 8008552:	b280      	uxth	r0, r0
 8008554:	bd70      	pop	{r4, r5, r6, pc}
  acc = 0;
 8008556:	2400      	movs	r4, #0
 8008558:	e7fa      	b.n	8008550 <inet_chksum_pbuf+0x44>

0800855a <lwip_chksum_copy>:
 * For architectures with big caches, data might still be in cache when
 * generating the checksum after copying.
 */
u16_t
lwip_chksum_copy(void *dst, const void *src, u16_t len)
{
 800855a:	b538      	push	{r3, r4, r5, lr}
 800855c:	4604      	mov	r4, r0
 800855e:	4615      	mov	r5, r2
  MEMCPY(dst, src, len);
 8008560:	f00b ff16 	bl	8014390 <memcpy>
  return LWIP_CHKSUM(dst, len);
 8008564:	4629      	mov	r1, r5
 8008566:	4620      	mov	r0, r4
 8008568:	f7ff feb6 	bl	80082d8 <lwip_standard_chksum>
}
 800856c:	bd38      	pop	{r3, r4, r5, pc}

0800856e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800856e:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008570:	f000 f810 	bl	8008594 <mem_init>
  memp_init();
 8008574:	f000 faa6 	bl	8008ac4 <memp_init>
  pbuf_init();
  netif_init();
 8008578:	f000 fb62 	bl	8008c40 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800857c:	f005 fcf2 	bl	800df64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008580:	f001 fa12 	bl	80099a8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8008584:	f7ff fd04 	bl	8007f90 <dns_init>
#endif /* LWIP_DNS */
#if PPP_SUPPORT
  ppp_init();
 8008588:	f00a f82e 	bl	80125e8 <ppp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800858c:	f005 fc90 	bl	800deb0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008590:	bd08      	pop	{r3, pc}
	...

08008594 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008594:	4b0b      	ldr	r3, [pc, #44]	; (80085c4 <mem_init+0x30>)
 8008596:	f023 0303 	bic.w	r3, r3, #3
 800859a:	4a0b      	ldr	r2, [pc, #44]	; (80085c8 <mem_init+0x34>)
 800859c:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800859e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085a2:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80085a4:	2100      	movs	r1, #0
 80085a6:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
 80085a8:	7119      	strb	r1, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 80085aa:	1898      	adds	r0, r3, r2
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80085ac:	4907      	ldr	r1, [pc, #28]	; (80085cc <mem_init+0x38>)
 80085ae:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 80085b0:	2101      	movs	r1, #1
 80085b2:	f883 1404 	strb.w	r1, [r3, #1028]	; 0x404
  ram_end->next = MEM_SIZE_ALIGNED;
 80085b6:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ram_end->prev = MEM_SIZE_ALIGNED;
 80085ba:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80085be:	4a04      	ldr	r2, [pc, #16]	; (80085d0 <mem_init+0x3c>)
 80085c0:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80085c2:	4770      	bx	lr
 80085c4:	20002d1b 	.word	0x20002d1b
 80085c8:	20000f54 	.word	0x20000f54
 80085cc:	20000f58 	.word	0x20000f58
 80085d0:	20000f50 	.word	0x20000f50

080085d4 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80085d4:	2800      	cmp	r0, #0
 80085d6:	f000 80ac 	beq.w	8008732 <mem_free+0x15e>
{
 80085da:	b570      	push	{r4, r5, r6, lr}
 80085dc:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80085de:	f010 0f03 	tst.w	r0, #3
 80085e2:	d168      	bne.n	80086b6 <mem_free+0xe2>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80085e4:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80085e8:	4b52      	ldr	r3, [pc, #328]	; (8008734 <mem_free+0x160>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	42ab      	cmp	r3, r5
 80085ee:	d86a      	bhi.n	80086c6 <mem_free+0xf2>
 80085f0:	4a51      	ldr	r2, [pc, #324]	; (8008738 <mem_free+0x164>)
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	f100 010c 	add.w	r1, r0, #12
 80085f8:	428a      	cmp	r2, r1
 80085fa:	d364      	bcc.n	80086c6 <mem_free+0xf2>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80085fc:	f810 1c04 	ldrb.w	r1, [r0, #-4]
 8008600:	2900      	cmp	r1, #0
 8008602:	d068      	beq.n	80086d6 <mem_free+0x102>
  nmem = ptr_to_mem(mem->next);
 8008604:	f830 1c08 	ldrh.w	r1, [r0, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008608:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800860c:	f200 8089 	bhi.w	8008722 <mem_free+0x14e>
  pmem = ptr_to_mem(mem->prev);
 8008610:	f830 6c06 	ldrh.w	r6, [r0, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008614:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008618:	f200 8083 	bhi.w	8008722 <mem_free+0x14e>
  return (mem_size_t)((u8_t *)mem - ram);
 800861c:	1ae8      	subs	r0, r5, r3
 800861e:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008620:	4286      	cmp	r6, r0
 8008622:	d002      	beq.n	800862a <mem_free+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008624:	5b9e      	ldrh	r6, [r3, r6]
 8008626:	4286      	cmp	r6, r0
 8008628:	d17b      	bne.n	8008722 <mem_free+0x14e>
  return (struct mem *)(void *)&ram[ptr];
 800862a:	440b      	add	r3, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800862c:	429a      	cmp	r2, r3
 800862e:	d002      	beq.n	8008636 <mem_free+0x62>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008630:	885b      	ldrh	r3, [r3, #2]
 8008632:	4283      	cmp	r3, r0
 8008634:	d175      	bne.n	8008722 <mem_free+0x14e>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 800863c:	4b3f      	ldr	r3, [pc, #252]	; (800873c <mem_free+0x168>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	42ab      	cmp	r3, r5
 8008642:	d901      	bls.n	8008648 <mem_free+0x74>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008644:	4b3d      	ldr	r3, [pc, #244]	; (800873c <mem_free+0x168>)
 8008646:	601d      	str	r5, [r3, #0]
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008648:	42aa      	cmp	r2, r5
 800864a:	d94c      	bls.n	80086e6 <mem_free+0x112>
  return (struct mem *)(void *)&ram[ptr];
 800864c:	4b39      	ldr	r3, [pc, #228]	; (8008734 <mem_free+0x160>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008654:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008656:	4295      	cmp	r5, r2
 8008658:	d015      	beq.n	8008686 <mem_free+0xb2>
 800865a:	7910      	ldrb	r0, [r2, #4]
 800865c:	b998      	cbnz	r0, 8008686 <mem_free+0xb2>
 800865e:	4836      	ldr	r0, [pc, #216]	; (8008738 <mem_free+0x164>)
 8008660:	6800      	ldr	r0, [r0, #0]
 8008662:	4290      	cmp	r0, r2
 8008664:	d00f      	beq.n	8008686 <mem_free+0xb2>
    if (lfree == nmem) {
 8008666:	4835      	ldr	r0, [pc, #212]	; (800873c <mem_free+0x168>)
 8008668:	6800      	ldr	r0, [r0, #0]
 800866a:	4290      	cmp	r0, r2
      lfree = mem;
 800866c:	bf04      	itt	eq
 800866e:	4a33      	ldreq	r2, [pc, #204]	; (800873c <mem_free+0x168>)
 8008670:	6015      	streq	r5, [r2, #0]
    mem->next = nmem->next;
 8008672:	5a5a      	ldrh	r2, [r3, r1]
 8008674:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008678:	5a5a      	ldrh	r2, [r3, r1]
 800867a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800867e:	d002      	beq.n	8008686 <mem_free+0xb2>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008680:	441a      	add	r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8008682:	1ae9      	subs	r1, r5, r3
 8008684:	8051      	strh	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8008686:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800868a:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 800868c:	4295      	cmp	r5, r2
 800868e:	d021      	beq.n	80086d4 <mem_free+0x100>
 8008690:	7910      	ldrb	r0, [r2, #4]
 8008692:	b9f8      	cbnz	r0, 80086d4 <mem_free+0x100>
    if (lfree == mem) {
 8008694:	4829      	ldr	r0, [pc, #164]	; (800873c <mem_free+0x168>)
 8008696:	6800      	ldr	r0, [r0, #0]
 8008698:	4285      	cmp	r5, r0
      lfree = pmem;
 800869a:	bf04      	itt	eq
 800869c:	4827      	ldreq	r0, [pc, #156]	; (800873c <mem_free+0x168>)
 800869e:	6002      	streq	r2, [r0, #0]
    pmem->next = mem->next;
 80086a0:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 80086a4:	525a      	strh	r2, [r3, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80086a6:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 80086aa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80086ae:	d011      	beq.n	80086d4 <mem_free+0x100>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80086b0:	4413      	add	r3, r2
 80086b2:	8059      	strh	r1, [r3, #2]
  plug_holes(mem);
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80086b4:	e00e      	b.n	80086d4 <mem_free+0x100>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80086b6:	4b22      	ldr	r3, [pc, #136]	; (8008740 <mem_free+0x16c>)
 80086b8:	f240 2273 	movw	r2, #627	; 0x273
 80086bc:	4921      	ldr	r1, [pc, #132]	; (8008744 <mem_free+0x170>)
 80086be:	4822      	ldr	r0, [pc, #136]	; (8008748 <mem_free+0x174>)
 80086c0:	f00b fdfa 	bl	80142b8 <app_debug_rtt_raw>
    return;
 80086c4:	e006      	b.n	80086d4 <mem_free+0x100>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80086c6:	4b1e      	ldr	r3, [pc, #120]	; (8008740 <mem_free+0x16c>)
 80086c8:	f240 227f 	movw	r2, #639	; 0x27f
 80086cc:	491f      	ldr	r1, [pc, #124]	; (800874c <mem_free+0x178>)
 80086ce:	481e      	ldr	r0, [pc, #120]	; (8008748 <mem_free+0x174>)
 80086d0:	f00b fdf2 	bl	80142b8 <app_debug_rtt_raw>
}
 80086d4:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80086d6:	4b1a      	ldr	r3, [pc, #104]	; (8008740 <mem_free+0x16c>)
 80086d8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80086dc:	491c      	ldr	r1, [pc, #112]	; (8008750 <mem_free+0x17c>)
 80086de:	481a      	ldr	r0, [pc, #104]	; (8008748 <mem_free+0x174>)
 80086e0:	f00b fdea 	bl	80142b8 <app_debug_rtt_raw>
    return;
 80086e4:	e7f6      	b.n	80086d4 <mem_free+0x100>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80086e6:	4b16      	ldr	r3, [pc, #88]	; (8008740 <mem_free+0x16c>)
 80086e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80086ec:	4919      	ldr	r1, [pc, #100]	; (8008754 <mem_free+0x180>)
 80086ee:	4816      	ldr	r0, [pc, #88]	; (8008748 <mem_free+0x174>)
 80086f0:	f00b fde2 	bl	80142b8 <app_debug_rtt_raw>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80086f4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80086f8:	b133      	cbz	r3, 8008708 <mem_free+0x134>
 80086fa:	4b11      	ldr	r3, [pc, #68]	; (8008740 <mem_free+0x16c>)
 80086fc:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008700:	4915      	ldr	r1, [pc, #84]	; (8008758 <mem_free+0x184>)
 8008702:	4811      	ldr	r0, [pc, #68]	; (8008748 <mem_free+0x174>)
 8008704:	f00b fdd8 	bl	80142b8 <app_debug_rtt_raw>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008708:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800870c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008710:	d99c      	bls.n	800864c <mem_free+0x78>
 8008712:	4b0b      	ldr	r3, [pc, #44]	; (8008740 <mem_free+0x16c>)
 8008714:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008718:	4910      	ldr	r1, [pc, #64]	; (800875c <mem_free+0x188>)
 800871a:	480b      	ldr	r0, [pc, #44]	; (8008748 <mem_free+0x174>)
 800871c:	f00b fdcc 	bl	80142b8 <app_debug_rtt_raw>
 8008720:	e794      	b.n	800864c <mem_free+0x78>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008722:	4b07      	ldr	r3, [pc, #28]	; (8008740 <mem_free+0x16c>)
 8008724:	f240 2295 	movw	r2, #661	; 0x295
 8008728:	490d      	ldr	r1, [pc, #52]	; (8008760 <mem_free+0x18c>)
 800872a:	4807      	ldr	r0, [pc, #28]	; (8008748 <mem_free+0x174>)
 800872c:	f00b fdc4 	bl	80142b8 <app_debug_rtt_raw>
    return;
 8008730:	e7d0      	b.n	80086d4 <mem_free+0x100>
 8008732:	4770      	bx	lr
 8008734:	20000f54 	.word	0x20000f54
 8008738:	20000f58 	.word	0x20000f58
 800873c:	20000f50 	.word	0x20000f50
 8008740:	08017278 	.word	0x08017278
 8008744:	080172a0 	.word	0x080172a0
 8008748:	08016a38 	.word	0x08016a38
 800874c:	080172c4 	.word	0x080172c4
 8008750:	080172e0 	.word	0x080172e0
 8008754:	08017308 	.word	0x08017308
 8008758:	08017324 	.word	0x08017324
 800875c:	08017340 	.word	0x08017340
 8008760:	0801736c 	.word	0x0801736c

08008764 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008768:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800876a:	1ccc      	adds	r4, r1, #3
 800876c:	f024 0403 	bic.w	r4, r4, #3
 8008770:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8008772:	2c0b      	cmp	r4, #11
 8008774:	d904      	bls.n	8008780 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008776:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800877a:	d902      	bls.n	8008782 <mem_trim+0x1e>
    return NULL;
 800877c:	2500      	movs	r5, #0
 800877e:	e016      	b.n	80087ae <mem_trim+0x4a>
    newsize = MIN_SIZE_ALIGNED;
 8008780:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008782:	42a1      	cmp	r1, r4
 8008784:	f200 808e 	bhi.w	80088a4 <mem_trim+0x140>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008788:	4b47      	ldr	r3, [pc, #284]	; (80088a8 <mem_trim+0x144>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	42ab      	cmp	r3, r5
 800878e:	d803      	bhi.n	8008798 <mem_trim+0x34>
 8008790:	4a46      	ldr	r2, [pc, #280]	; (80088ac <mem_trim+0x148>)
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	42aa      	cmp	r2, r5
 8008796:	d811      	bhi.n	80087bc <mem_trim+0x58>
 8008798:	4b45      	ldr	r3, [pc, #276]	; (80088b0 <mem_trim+0x14c>)
 800879a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800879e:	4945      	ldr	r1, [pc, #276]	; (80088b4 <mem_trim+0x150>)
 80087a0:	4845      	ldr	r0, [pc, #276]	; (80088b8 <mem_trim+0x154>)
 80087a2:	f00b fd89 	bl	80142b8 <app_debug_rtt_raw>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80087a6:	4b40      	ldr	r3, [pc, #256]	; (80088a8 <mem_trim+0x144>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	42ab      	cmp	r3, r5
 80087ac:	d902      	bls.n	80087b4 <mem_trim+0x50>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80087ae:	4628      	mov	r0, r5
 80087b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80087b4:	4a3d      	ldr	r2, [pc, #244]	; (80088ac <mem_trim+0x148>)
 80087b6:	6812      	ldr	r2, [r2, #0]
 80087b8:	42aa      	cmp	r2, r5
 80087ba:	d9f8      	bls.n	80087ae <mem_trim+0x4a>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80087bc:	f1a5 0608 	sub.w	r6, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 80087c0:	1af3      	subs	r3, r6, r3
 80087c2:	b29e      	uxth	r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80087c4:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 80087c8:	f1a7 0308 	sub.w	r3, r7, #8
 80087cc:	1b9b      	subs	r3, r3, r6
 80087ce:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	d326      	bcc.n	8008822 <mem_trim+0xbe>
  if (newsize == size) {
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	d0ea      	beq.n	80087ae <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 80087d8:	4a33      	ldr	r2, [pc, #204]	; (80088a8 <mem_trim+0x144>)
 80087da:	f8d2 9000 	ldr.w	r9, [r2]
 80087de:	eb09 0807 	add.w	r8, r9, r7
  if (mem2->used == 0) {
 80087e2:	f898 2004 	ldrb.w	r2, [r8, #4]
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	d132      	bne.n	8008850 <mem_trim+0xec>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80087ea:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80087ee:	d021      	beq.n	8008834 <mem_trim+0xd0>
    next = mem2->next;
 80087f0:	f839 0007 	ldrh.w	r0, [r9, r7]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80087f4:	3408      	adds	r4, #8
 80087f6:	4434      	add	r4, r6
 80087f8:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 80087fa:	4b30      	ldr	r3, [pc, #192]	; (80088bc <mem_trim+0x158>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4543      	cmp	r3, r8
 8008800:	d020      	beq.n	8008844 <mem_trim+0xe0>
  return (struct mem *)(void *)&ram[ptr];
 8008802:	4b29      	ldr	r3, [pc, #164]	; (80088a8 <mem_trim+0x144>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	191a      	adds	r2, r3, r4
    mem2->used = 0;
 8008808:	2100      	movs	r1, #0
 800880a:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 800880c:	5318      	strh	r0, [r3, r4]
    mem2->prev = ptr;
 800880e:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8008810:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008814:	5b1a      	ldrh	r2, [r3, r4]
 8008816:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800881a:	d0c8      	beq.n	80087ae <mem_trim+0x4a>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800881c:	4413      	add	r3, r2
 800881e:	805c      	strh	r4, [r3, #2]
 8008820:	e7c5      	b.n	80087ae <mem_trim+0x4a>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008822:	4b23      	ldr	r3, [pc, #140]	; (80088b0 <mem_trim+0x14c>)
 8008824:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008828:	4925      	ldr	r1, [pc, #148]	; (80088c0 <mem_trim+0x15c>)
 800882a:	4823      	ldr	r0, [pc, #140]	; (80088b8 <mem_trim+0x154>)
 800882c:	f00b fd44 	bl	80142b8 <app_debug_rtt_raw>
    return NULL;
 8008830:	2500      	movs	r5, #0
 8008832:	e7bc      	b.n	80087ae <mem_trim+0x4a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008834:	4b1e      	ldr	r3, [pc, #120]	; (80088b0 <mem_trim+0x14c>)
 8008836:	f240 22f5 	movw	r2, #757	; 0x2f5
 800883a:	4922      	ldr	r1, [pc, #136]	; (80088c4 <mem_trim+0x160>)
 800883c:	481e      	ldr	r0, [pc, #120]	; (80088b8 <mem_trim+0x154>)
 800883e:	f00b fd3b 	bl	80142b8 <app_debug_rtt_raw>
 8008842:	e7d5      	b.n	80087f0 <mem_trim+0x8c>
  return (struct mem *)(void *)&ram[ptr];
 8008844:	4b18      	ldr	r3, [pc, #96]	; (80088a8 <mem_trim+0x144>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4423      	add	r3, r4
      lfree = ptr_to_mem(ptr2);
 800884a:	4a1c      	ldr	r2, [pc, #112]	; (80088bc <mem_trim+0x158>)
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	e7d8      	b.n	8008802 <mem_trim+0x9e>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008850:	f104 0214 	add.w	r2, r4, #20
 8008854:	429a      	cmp	r2, r3
 8008856:	d8aa      	bhi.n	80087ae <mem_trim+0x4a>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008858:	3408      	adds	r4, #8
 800885a:	4434      	add	r4, r6
 800885c:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800885e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8008862:	d017      	beq.n	8008894 <mem_trim+0x130>
  return (struct mem *)(void *)&ram[ptr];
 8008864:	4b10      	ldr	r3, [pc, #64]	; (80088a8 <mem_trim+0x144>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 800886a:	4914      	ldr	r1, [pc, #80]	; (80088bc <mem_trim+0x158>)
 800886c:	6809      	ldr	r1, [r1, #0]
 800886e:	4291      	cmp	r1, r2
      lfree = mem2;
 8008870:	bf84      	itt	hi
 8008872:	4912      	ldrhi	r1, [pc, #72]	; (80088bc <mem_trim+0x158>)
 8008874:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 8008876:	2100      	movs	r1, #0
 8008878:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800887a:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 800887e:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8008880:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8008882:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008886:	5b1a      	ldrh	r2, [r3, r4]
 8008888:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800888c:	d08f      	beq.n	80087ae <mem_trim+0x4a>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800888e:	4413      	add	r3, r2
 8008890:	805c      	strh	r4, [r3, #2]
 8008892:	e78c      	b.n	80087ae <mem_trim+0x4a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008894:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <mem_trim+0x14c>)
 8008896:	f240 3216 	movw	r2, #790	; 0x316
 800889a:	490a      	ldr	r1, [pc, #40]	; (80088c4 <mem_trim+0x160>)
 800889c:	4806      	ldr	r0, [pc, #24]	; (80088b8 <mem_trim+0x154>)
 800889e:	f00b fd0b 	bl	80142b8 <app_debug_rtt_raw>
 80088a2:	e7df      	b.n	8008864 <mem_trim+0x100>
    return NULL;
 80088a4:	2500      	movs	r5, #0
 80088a6:	e782      	b.n	80087ae <mem_trim+0x4a>
 80088a8:	20000f54 	.word	0x20000f54
 80088ac:	20000f58 	.word	0x20000f58
 80088b0:	08017278 	.word	0x08017278
 80088b4:	080173a0 	.word	0x080173a0
 80088b8:	08016a38 	.word	0x08016a38
 80088bc:	20000f50 	.word	0x20000f50
 80088c0:	080173b8 	.word	0x080173b8
 80088c4:	080173d8 	.word	0x080173d8

080088c8 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f000 8094 	beq.w	80089f6 <mem_malloc+0x12e>
{
 80088ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d0:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80088d2:	3003      	adds	r0, #3
 80088d4:	f020 0003 	bic.w	r0, r0, #3
 80088d8:	b280      	uxth	r0, r0
  if (size < MIN_SIZE_ALIGNED) {
 80088da:	280b      	cmp	r0, #11
 80088dc:	d904      	bls.n	80088e8 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80088de:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80088e2:	d902      	bls.n	80088ea <mem_malloc+0x22>
    return NULL;
 80088e4:	2000      	movs	r0, #0
 80088e6:	e085      	b.n	80089f4 <mem_malloc+0x12c>
    size = MIN_SIZE_ALIGNED;
 80088e8:	200c      	movs	r0, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80088ea:	4283      	cmp	r3, r0
 80088ec:	f200 8085 	bhi.w	80089fa <mem_malloc+0x132>
  return (mem_size_t)((u8_t *)mem - ram);
 80088f0:	4b46      	ldr	r3, [pc, #280]	; (8008a0c <mem_malloc+0x144>)
 80088f2:	6819      	ldr	r1, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80088f4:	4b46      	ldr	r3, [pc, #280]	; (8008a10 <mem_malloc+0x148>)
  return (mem_size_t)((u8_t *)mem - ram);
 80088f6:	681c      	ldr	r4, [r3, #0]
 80088f8:	1a64      	subs	r4, r4, r1
 80088fa:	b2a4      	uxth	r4, r4
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80088fc:	4623      	mov	r3, r4
 80088fe:	4606      	mov	r6, r0
 8008900:	f5c0 6780 	rsb	r7, r0, #1024	; 0x400
 8008904:	42bc      	cmp	r4, r7
 8008906:	d27a      	bcs.n	80089fe <mem_malloc+0x136>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008908:	f06f 0c07 	mvn.w	ip, #7
 800890c:	e036      	b.n	800897c <mem_malloc+0xb4>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800890e:	4b41      	ldr	r3, [pc, #260]	; (8008a14 <mem_malloc+0x14c>)
 8008910:	f240 3287 	movw	r2, #903	; 0x387
 8008914:	4940      	ldr	r1, [pc, #256]	; (8008a18 <mem_malloc+0x150>)
 8008916:	4841      	ldr	r0, [pc, #260]	; (8008a1c <mem_malloc+0x154>)
 8008918:	f00b fcce 	bl	80142b8 <app_debug_rtt_raw>
 800891c:	e043      	b.n	80089a6 <mem_malloc+0xde>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800891e:	2301      	movs	r3, #1
 8008920:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008922:	4b3b      	ldr	r3, [pc, #236]	; (8008a10 <mem_malloc+0x148>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	42ab      	cmp	r3, r5
 8008928:	d054      	beq.n	80089d4 <mem_malloc+0x10c>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800892a:	3608      	adds	r6, #8
 800892c:	442e      	add	r6, r5
 800892e:	4b3c      	ldr	r3, [pc, #240]	; (8008a20 <mem_malloc+0x158>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	42b3      	cmp	r3, r6
 8008934:	d305      	bcc.n	8008942 <mem_malloc+0x7a>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008936:	f015 0f03 	tst.w	r5, #3
 800893a:	d10a      	bne.n	8008952 <mem_malloc+0x8a>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800893c:	f105 0008 	add.w	r0, r5, #8
 8008940:	e058      	b.n	80089f4 <mem_malloc+0x12c>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008942:	4b34      	ldr	r3, [pc, #208]	; (8008a14 <mem_malloc+0x14c>)
 8008944:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008948:	4936      	ldr	r1, [pc, #216]	; (8008a24 <mem_malloc+0x15c>)
 800894a:	4834      	ldr	r0, [pc, #208]	; (8008a1c <mem_malloc+0x154>)
 800894c:	f00b fcb4 	bl	80142b8 <app_debug_rtt_raw>
 8008950:	e7f1      	b.n	8008936 <mem_malloc+0x6e>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008952:	4e30      	ldr	r6, [pc, #192]	; (8008a14 <mem_malloc+0x14c>)
 8008954:	4c31      	ldr	r4, [pc, #196]	; (8008a1c <mem_malloc+0x154>)
 8008956:	4633      	mov	r3, r6
 8008958:	f240 32bb 	movw	r2, #955	; 0x3bb
 800895c:	4932      	ldr	r1, [pc, #200]	; (8008a28 <mem_malloc+0x160>)
 800895e:	4620      	mov	r0, r4
 8008960:	f00b fcaa 	bl	80142b8 <app_debug_rtt_raw>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008964:	4633      	mov	r3, r6
 8008966:	f240 32bd 	movw	r2, #957	; 0x3bd
 800896a:	4930      	ldr	r1, [pc, #192]	; (8008a2c <mem_malloc+0x164>)
 800896c:	4620      	mov	r0, r4
 800896e:	f00b fca3 	bl	80142b8 <app_debug_rtt_raw>
 8008972:	e7e3      	b.n	800893c <mem_malloc+0x74>
         ptr = ptr_to_mem(ptr)->next) {
 8008974:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008976:	4623      	mov	r3, r4
 8008978:	42bc      	cmp	r4, r7
 800897a:	d23a      	bcs.n	80089f2 <mem_malloc+0x12a>
  return (struct mem *)(void *)&ram[ptr];
 800897c:	18cd      	adds	r5, r1, r3
      if ((!mem->used) &&
 800897e:	792a      	ldrb	r2, [r5, #4]
 8008980:	2a00      	cmp	r2, #0
 8008982:	d1f7      	bne.n	8008974 <mem_malloc+0xac>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008984:	5aca      	ldrh	r2, [r1, r3]
 8008986:	ebac 0303 	sub.w	r3, ip, r3
 800898a:	4413      	add	r3, r2
      if ((!mem->used) &&
 800898c:	42b3      	cmp	r3, r6
 800898e:	d3f1      	bcc.n	8008974 <mem_malloc+0xac>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008990:	f106 0214 	add.w	r2, r6, #20
 8008994:	4293      	cmp	r3, r2
 8008996:	d3c2      	bcc.n	800891e <mem_malloc+0x56>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008998:	f100 0708 	add.w	r7, r0, #8
 800899c:	4427      	add	r7, r4
 800899e:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80089a0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80089a4:	d0b3      	beq.n	800890e <mem_malloc+0x46>
  return (struct mem *)(void *)&ram[ptr];
 80089a6:	4b19      	ldr	r3, [pc, #100]	; (8008a0c <mem_malloc+0x144>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 80089ac:	2100      	movs	r1, #0
 80089ae:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 80089b0:	8829      	ldrh	r1, [r5, #0]
 80089b2:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 80089b4:	8054      	strh	r4, [r2, #2]
          mem->next = ptr2;
 80089b6:	802f      	strh	r7, [r5, #0]
          mem->used = 1;
 80089b8:	2201      	movs	r2, #1
 80089ba:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80089bc:	5bda      	ldrh	r2, [r3, r7]
 80089be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80089c2:	d0ae      	beq.n	8008922 <mem_malloc+0x5a>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80089c4:	4413      	add	r3, r2
 80089c6:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 80089c8:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <mem_malloc+0x148>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	42ab      	cmp	r3, r5
 80089ce:	d1ac      	bne.n	800892a <mem_malloc+0x62>
          while (cur->used && cur != ram_end) {
 80089d0:	792b      	ldrb	r3, [r5, #4]
 80089d2:	b1cb      	cbz	r3, 8008a08 <mem_malloc+0x140>
 80089d4:	4b12      	ldr	r3, [pc, #72]	; (8008a20 <mem_malloc+0x158>)
 80089d6:	6819      	ldr	r1, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <mem_malloc+0x144>)
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 80089de:	4299      	cmp	r1, r3
 80089e0:	d00f      	beq.n	8008a02 <mem_malloc+0x13a>
  return (struct mem *)(void *)&ram[ptr];
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 80089e6:	791a      	ldrb	r2, [r3, #4]
 80089e8:	2a00      	cmp	r2, #0
 80089ea:	d1f8      	bne.n	80089de <mem_malloc+0x116>
          lfree = cur;
 80089ec:	4a08      	ldr	r2, [pc, #32]	; (8008a10 <mem_malloc+0x148>)
 80089ee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80089f0:	e79b      	b.n	800892a <mem_malloc+0x62>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80089f2:	2000      	movs	r0, #0
}
 80089f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 80089f6:	2000      	movs	r0, #0
}
 80089f8:	4770      	bx	lr
    return NULL;
 80089fa:	2000      	movs	r0, #0
 80089fc:	e7fa      	b.n	80089f4 <mem_malloc+0x12c>
  return NULL;
 80089fe:	2000      	movs	r0, #0
 8008a00:	e7f8      	b.n	80089f4 <mem_malloc+0x12c>
          lfree = cur;
 8008a02:	4a03      	ldr	r2, [pc, #12]	; (8008a10 <mem_malloc+0x148>)
 8008a04:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008a06:	e790      	b.n	800892a <mem_malloc+0x62>
  return (struct mem *)(void *)&ram[ptr];
 8008a08:	462b      	mov	r3, r5
 8008a0a:	e7ef      	b.n	80089ec <mem_malloc+0x124>
 8008a0c:	20000f54 	.word	0x20000f54
 8008a10:	20000f50 	.word	0x20000f50
 8008a14:	08017278 	.word	0x08017278
 8008a18:	080173d8 	.word	0x080173d8
 8008a1c:	08016a38 	.word	0x08016a38
 8008a20:	20000f58 	.word	0x20000f58
 8008a24:	080173ec 	.word	0x080173ec
 8008a28:	0801741c 	.word	0x0801741c
 8008a2c:	0801744c 	.word	0x0801744c

08008a30 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008a30:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008a32:	68c3      	ldr	r3, [r0, #12]
 8008a34:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008a36:	b124      	cbz	r4, 8008a42 <do_memp_malloc_pool+0x12>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008a38:	6822      	ldr	r2, [r4, #0]
 8008a3a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008a3c:	f014 0f03 	tst.w	r4, #3
 8008a40:	d101      	bne.n	8008a46 <do_memp_malloc_pool+0x16>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8008a42:	4620      	mov	r0, r4
 8008a44:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008a46:	4b04      	ldr	r3, [pc, #16]	; (8008a58 <do_memp_malloc_pool+0x28>)
 8008a48:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008a4c:	4903      	ldr	r1, [pc, #12]	; (8008a5c <do_memp_malloc_pool+0x2c>)
 8008a4e:	4804      	ldr	r0, [pc, #16]	; (8008a60 <do_memp_malloc_pool+0x30>)
 8008a50:	f00b fc32 	bl	80142b8 <app_debug_rtt_raw>
 8008a54:	e7f5      	b.n	8008a42 <do_memp_malloc_pool+0x12>
 8008a56:	bf00      	nop
 8008a58:	08017470 	.word	0x08017470
 8008a5c:	08017498 	.word	0x08017498
 8008a60:	08016a38 	.word	0x08016a38

08008a64 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4605      	mov	r5, r0
 8008a68:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008a6a:	f011 0f03 	tst.w	r1, #3
 8008a6e:	d105      	bne.n	8008a7c <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008a70:	68eb      	ldr	r3, [r5, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8008a76:	68eb      	ldr	r3, [r5, #12]
 8008a78:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8008a7c:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <do_memp_free_pool+0x28>)
 8008a7e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008a82:	4903      	ldr	r1, [pc, #12]	; (8008a90 <do_memp_free_pool+0x2c>)
 8008a84:	4803      	ldr	r0, [pc, #12]	; (8008a94 <do_memp_free_pool+0x30>)
 8008a86:	f00b fc17 	bl	80142b8 <app_debug_rtt_raw>
 8008a8a:	e7f1      	b.n	8008a70 <do_memp_free_pool+0xc>
 8008a8c:	08017470 	.word	0x08017470
 8008a90:	080174bc 	.word	0x080174bc
 8008a94:	08016a38 	.word	0x08016a38

08008a98 <memp_init_pool>:
  *desc->tab = NULL;
 8008a98:	68c3      	ldr	r3, [r0, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008a9e:	6883      	ldr	r3, [r0, #8]
 8008aa0:	3303      	adds	r3, #3
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8008aa6:	88c2      	ldrh	r2, [r0, #6]
 8008aa8:	b15a      	cbz	r2, 8008ac2 <memp_init_pool+0x2a>
 8008aaa:	2200      	movs	r2, #0
    memp->next = *desc->tab;
 8008aac:	68c1      	ldr	r1, [r0, #12]
 8008aae:	6809      	ldr	r1, [r1, #0]
 8008ab0:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8008ab2:	68c1      	ldr	r1, [r0, #12]
 8008ab4:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008ab6:	8881      	ldrh	r1, [r0, #4]
 8008ab8:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8008aba:	3201      	adds	r2, #1
 8008abc:	88c1      	ldrh	r1, [r0, #6]
 8008abe:	4291      	cmp	r1, r2
 8008ac0:	dcf4      	bgt.n	8008aac <memp_init_pool+0x14>
}
 8008ac2:	4770      	bx	lr

08008ac4 <memp_init>:
{
 8008ac4:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008ac6:	4d05      	ldr	r5, [pc, #20]	; (8008adc <memp_init+0x18>)
 8008ac8:	1f2c      	subs	r4, r5, #4
 8008aca:	3518      	adds	r5, #24
    memp_init_pool(memp_pools[i]);
 8008acc:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8008ad0:	f7ff ffe2 	bl	8008a98 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008ad4:	42ac      	cmp	r4, r5
 8008ad6:	d1f9      	bne.n	8008acc <memp_init+0x8>
}
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	bf00      	nop
 8008adc:	080175ec 	.word	0x080175ec

08008ae0 <memp_malloc_pool>:
{
 8008ae0:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	b110      	cbz	r0, 8008aec <memp_malloc_pool+0xc>
  return do_memp_malloc_pool(desc);
 8008ae6:	f7ff ffa3 	bl	8008a30 <do_memp_malloc_pool>
}
 8008aea:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008aec:	4b04      	ldr	r3, [pc, #16]	; (8008b00 <memp_malloc_pool+0x20>)
 8008aee:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008af2:	4904      	ldr	r1, [pc, #16]	; (8008b04 <memp_malloc_pool+0x24>)
 8008af4:	4804      	ldr	r0, [pc, #16]	; (8008b08 <memp_malloc_pool+0x28>)
 8008af6:	f00b fbdf 	bl	80142b8 <app_debug_rtt_raw>
    return NULL;
 8008afa:	4620      	mov	r0, r4
 8008afc:	e7f5      	b.n	8008aea <memp_malloc_pool+0xa>
 8008afe:	bf00      	nop
 8008b00:	08017470 	.word	0x08017470
 8008b04:	080174dc 	.word	0x080174dc
 8008b08:	08016a38 	.word	0x08016a38

08008b0c <memp_malloc>:
{
 8008b0c:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008b0e:	2806      	cmp	r0, #6
 8008b10:	d805      	bhi.n	8008b1e <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008b12:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <memp_malloc+0x24>)
 8008b14:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008b18:	f7ff ff8a 	bl	8008a30 <do_memp_malloc_pool>
}
 8008b1c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008b1e:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <memp_malloc+0x28>)
 8008b20:	f240 1257 	movw	r2, #343	; 0x157
 8008b24:	4904      	ldr	r1, [pc, #16]	; (8008b38 <memp_malloc+0x2c>)
 8008b26:	4805      	ldr	r0, [pc, #20]	; (8008b3c <memp_malloc+0x30>)
 8008b28:	f00b fbc6 	bl	80142b8 <app_debug_rtt_raw>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e7f5      	b.n	8008b1c <memp_malloc+0x10>
 8008b30:	080175ec 	.word	0x080175ec
 8008b34:	08017470 	.word	0x08017470
 8008b38:	080174f0 	.word	0x080174f0
 8008b3c:	08016a38 	.word	0x08016a38

08008b40 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008b40:	b508      	push	{r3, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008b42:	b128      	cbz	r0, 8008b50 <memp_free_pool+0x10>
 8008b44:	4603      	mov	r3, r0
  if ((desc == NULL) || (mem == NULL)) {
 8008b46:	b111      	cbz	r1, 8008b4e <memp_free_pool+0xe>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff ff8b 	bl	8008a64 <do_memp_free_pool>
}
 8008b4e:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008b50:	4b03      	ldr	r3, [pc, #12]	; (8008b60 <memp_free_pool+0x20>)
 8008b52:	f240 1295 	movw	r2, #405	; 0x195
 8008b56:	4903      	ldr	r1, [pc, #12]	; (8008b64 <memp_free_pool+0x24>)
 8008b58:	4803      	ldr	r0, [pc, #12]	; (8008b68 <memp_free_pool+0x28>)
 8008b5a:	f00b fbad 	bl	80142b8 <app_debug_rtt_raw>
  if ((desc == NULL) || (mem == NULL)) {
 8008b5e:	e7f6      	b.n	8008b4e <memp_free_pool+0xe>
 8008b60:	08017470 	.word	0x08017470
 8008b64:	080174dc 	.word	0x080174dc
 8008b68:	08016a38 	.word	0x08016a38

08008b6c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008b6c:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008b6e:	2806      	cmp	r0, #6
 8008b70:	d806      	bhi.n	8008b80 <memp_free+0x14>

  if (mem == NULL) {
 8008b72:	b121      	cbz	r1, 8008b7e <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008b74:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <memp_free+0x24>)
 8008b76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008b7a:	f7ff ff73 	bl	8008a64 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008b7e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008b80:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <memp_free+0x28>)
 8008b82:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008b86:	4904      	ldr	r1, [pc, #16]	; (8008b98 <memp_free+0x2c>)
 8008b88:	4804      	ldr	r0, [pc, #16]	; (8008b9c <memp_free+0x30>)
 8008b8a:	f00b fb95 	bl	80142b8 <app_debug_rtt_raw>
 8008b8e:	e7f6      	b.n	8008b7e <memp_free+0x12>
 8008b90:	080175ec 	.word	0x080175ec
 8008b94:	08017470 	.word	0x08017470
 8008b98:	08017510 	.word	0x08017510
 8008b9c:	08016a38 	.word	0x08016a38

08008ba0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8008ba0:	f06f 000b 	mvn.w	r0, #11
 8008ba4:	4770      	bx	lr
	...

08008ba8 <netif_issue_reports>:
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008ba8:	b100      	cbz	r0, 8008bac <netif_issue_reports+0x4>
 8008baa:	4770      	bx	lr
{
 8008bac:	b508      	push	{r3, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008bae:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <netif_issue_reports+0x18>)
 8008bb0:	f240 326d 	movw	r2, #877	; 0x36d
 8008bb4:	4903      	ldr	r1, [pc, #12]	; (8008bc4 <netif_issue_reports+0x1c>)
 8008bb6:	4804      	ldr	r0, [pc, #16]	; (8008bc8 <netif_issue_reports+0x20>)
 8008bb8:	f00b fb7e 	bl	80142b8 <app_debug_rtt_raw>
}
 8008bbc:	bd08      	pop	{r3, pc}
 8008bbe:	bf00      	nop
 8008bc0:	08017608 	.word	0x08017608
 8008bc4:	08017630 	.word	0x08017630
 8008bc8:	08016a38 	.word	0x08016a38

08008bcc <netif_do_set_ipaddr>:
{
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008bd4:	460e      	mov	r6, r1
 8008bd6:	b139      	cbz	r1, 8008be8 <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008bd8:	b175      	cbz	r5, 8008bf8 <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008bda:	6863      	ldr	r3, [r4, #4]
 8008bdc:	6832      	ldr	r2, [r6, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d112      	bne.n	8008c08 <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 8008be2:	2000      	movs	r0, #0
}
 8008be4:	b002      	add	sp, #8
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008be8:	4b12      	ldr	r3, [pc, #72]	; (8008c34 <netif_do_set_ipaddr+0x68>)
 8008bea:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008bee:	4912      	ldr	r1, [pc, #72]	; (8008c38 <netif_do_set_ipaddr+0x6c>)
 8008bf0:	4812      	ldr	r0, [pc, #72]	; (8008c3c <netif_do_set_ipaddr+0x70>)
 8008bf2:	f00b fb61 	bl	80142b8 <app_debug_rtt_raw>
 8008bf6:	e7ef      	b.n	8008bd8 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008bf8:	4b0e      	ldr	r3, [pc, #56]	; (8008c34 <netif_do_set_ipaddr+0x68>)
 8008bfa:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008bfe:	490e      	ldr	r1, [pc, #56]	; (8008c38 <netif_do_set_ipaddr+0x6c>)
 8008c00:	480e      	ldr	r0, [pc, #56]	; (8008c3c <netif_do_set_ipaddr+0x70>)
 8008c02:	f00b fb59 	bl	80142b8 <app_debug_rtt_raw>
 8008c06:	e7e8      	b.n	8008bda <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008c08:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008c0a:	602b      	str	r3, [r5, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008c0c:	a901      	add	r1, sp, #4
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f001 faf8 	bl	800a204 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008c14:	a901      	add	r1, sp, #4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f005 fd32 	bl	800e680 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008c1c:	6833      	ldr	r3, [r6, #0]
 8008c1e:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008c20:	2101      	movs	r1, #1
 8008c22:	4620      	mov	r0, r4
 8008c24:	f7ff ffc0 	bl	8008ba8 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 8008c28:	69e3      	ldr	r3, [r4, #28]
 8008c2a:	b10b      	cbz	r3, 8008c30 <netif_do_set_ipaddr+0x64>
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	4798      	blx	r3
    return 1; /* address changed */
 8008c30:	2001      	movs	r0, #1
 8008c32:	e7d7      	b.n	8008be4 <netif_do_set_ipaddr+0x18>
 8008c34:	08017608 	.word	0x08017608
 8008c38:	08017654 	.word	0x08017654
 8008c3c:	08016a38 	.word	0x08016a38

08008c40 <netif_init>:
}
 8008c40:	4770      	bx	lr
	...

08008c44 <netif_set_addr>:
{
 8008c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c46:	b083      	sub	sp, #12
 8008c48:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8008c4a:	4d15      	ldr	r5, [pc, #84]	; (8008ca0 <netif_set_addr+0x5c>)
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bf18      	it	ne
 8008c50:	460d      	movne	r5, r1
    netmask = IP4_ADDR_ANY4;
 8008c52:	4f13      	ldr	r7, [pc, #76]	; (8008ca0 <netif_set_addr+0x5c>)
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	bf18      	it	ne
 8008c58:	4617      	movne	r7, r2
    gw = IP4_ADDR_ANY4;
 8008c5a:	4e11      	ldr	r6, [pc, #68]	; (8008ca0 <netif_set_addr+0x5c>)
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	bf18      	it	ne
 8008c60:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 8008c62:	b10d      	cbz	r5, 8008c68 <netif_set_addr+0x24>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b993      	cbnz	r3, 8008c8e <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008c68:	aa01      	add	r2, sp, #4
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f7ff ffad 	bl	8008bcc <netif_do_set_ipaddr>
 8008c72:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	68a2      	ldr	r2, [r4, #8]
 8008c78:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008c7a:	bf18      	it	ne
 8008c7c:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008c7e:	6833      	ldr	r3, [r6, #0]
 8008c80:	68e2      	ldr	r2, [r4, #12]
 8008c82:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008c84:	bf18      	it	ne
 8008c86:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8008c88:	b119      	cbz	r1, 8008c92 <netif_set_addr+0x4e>
}
 8008c8a:	b003      	add	sp, #12
 8008c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8008c8e:	2100      	movs	r1, #0
 8008c90:	e7f0      	b.n	8008c74 <netif_set_addr+0x30>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008c92:	aa01      	add	r2, sp, #4
 8008c94:	4629      	mov	r1, r5
 8008c96:	4620      	mov	r0, r4
 8008c98:	f7ff ff98 	bl	8008bcc <netif_do_set_ipaddr>
}
 8008c9c:	e7f5      	b.n	8008c8a <netif_set_addr+0x46>
 8008c9e:	bf00      	nop
 8008ca0:	08019224 	.word	0x08019224

08008ca4 <netif_add>:
{
 8008ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008caa:	4606      	mov	r6, r0
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d02e      	beq.n	8008d0e <netif_add+0x6a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008cb0:	2c00      	cmp	r4, #0
 8008cb2:	d035      	beq.n	8008d20 <netif_add+0x7c>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008cb8:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008cba:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 8008cbc:	4d3c      	ldr	r5, [pc, #240]	; (8008db0 <netif_add+0x10c>)
 8008cbe:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 8008cc0:	8530      	strh	r0, [r6, #40]	; 0x28
  netif->flags = 0;
 8008cc2:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
  netif->status_callback = NULL;
 8008cc6:	61f0      	str	r0, [r6, #28]
  netif->link_callback = NULL;
 8008cc8:	6230      	str	r0, [r6, #32]
  netif->state = state;
 8008cca:	9d08      	ldr	r5, [sp, #32]
 8008ccc:	6275      	str	r5, [r6, #36]	; 0x24
  netif->num = netif_num;
 8008cce:	4d39      	ldr	r5, [pc, #228]	; (8008db4 <netif_add+0x110>)
 8008cd0:	782d      	ldrb	r5, [r5, #0]
 8008cd2:	f886 5034 	strb.w	r5, [r6, #52]	; 0x34
  netif->input = input;
 8008cd6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008cd8:	6135      	str	r5, [r6, #16]
  NETIF_RESET_HINTS(netif);
 8008cda:	63b0      	str	r0, [r6, #56]	; 0x38
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008cdc:	4836      	ldr	r0, [pc, #216]	; (8008db8 <netif_add+0x114>)
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bf08      	it	eq
 8008ce2:	4603      	moveq	r3, r0
 8008ce4:	2a00      	cmp	r2, #0
 8008ce6:	bf08      	it	eq
 8008ce8:	4602      	moveq	r2, r0
 8008cea:	2900      	cmp	r1, #0
 8008cec:	bf08      	it	eq
 8008cee:	4601      	moveq	r1, r0
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff ffa7 	bl	8008c44 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	47a0      	blx	r4
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d147      	bne.n	8008d8e <netif_add+0xea>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008cfe:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8008dd0 <netif_add+0x12c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008d02:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008dc4 <netif_add+0x120>
 8008d06:	4f2d      	ldr	r7, [pc, #180]	; (8008dbc <netif_add+0x118>)
 8008d08:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8008dd4 <netif_add+0x130>
 8008d0c:	e031      	b.n	8008d72 <netif_add+0xce>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008d0e:	4b2b      	ldr	r3, [pc, #172]	; (8008dbc <netif_add+0x118>)
 8008d10:	f240 1227 	movw	r2, #295	; 0x127
 8008d14:	492a      	ldr	r1, [pc, #168]	; (8008dc0 <netif_add+0x11c>)
 8008d16:	482b      	ldr	r0, [pc, #172]	; (8008dc4 <netif_add+0x120>)
 8008d18:	f00b face 	bl	80142b8 <app_debug_rtt_raw>
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	e045      	b.n	8008dac <netif_add+0x108>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008d20:	4b26      	ldr	r3, [pc, #152]	; (8008dbc <netif_add+0x118>)
 8008d22:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008d26:	4928      	ldr	r1, [pc, #160]	; (8008dc8 <netif_add+0x124>)
 8008d28:	4826      	ldr	r0, [pc, #152]	; (8008dc4 <netif_add+0x120>)
 8008d2a:	f00b fac5 	bl	80142b8 <app_debug_rtt_raw>
 8008d2e:	2000      	movs	r0, #0
 8008d30:	e03c      	b.n	8008dac <netif_add+0x108>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008d32:	463b      	mov	r3, r7
 8008d34:	f240 128b 	movw	r2, #395	; 0x18b
 8008d38:	4649      	mov	r1, r9
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	f00b fabc 	bl	80142b8 <app_debug_rtt_raw>
 8008d40:	e010      	b.n	8008d64 <netif_add+0xc0>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008d42:	463b      	mov	r3, r7
 8008d44:	f240 128d 	movw	r2, #397	; 0x18d
 8008d48:	4920      	ldr	r1, [pc, #128]	; (8008dcc <netif_add+0x128>)
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f00b fab4 	bl	80142b8 <app_debug_rtt_raw>
        if (netif2->num == netif->num) {
 8008d50:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8008d54:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d007      	beq.n	8008d6c <netif_add+0xc8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008d5c:	6824      	ldr	r4, [r4, #0]
 8008d5e:	b1c4      	cbz	r4, 8008d92 <netif_add+0xee>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008d60:	42a6      	cmp	r6, r4
 8008d62:	d0e6      	beq.n	8008d32 <netif_add+0x8e>
        num_netifs++;
 8008d64:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008d66:	2dff      	cmp	r5, #255	; 0xff
 8008d68:	ddf2      	ble.n	8008d50 <netif_add+0xac>
 8008d6a:	e7ea      	b.n	8008d42 <netif_add+0x9e>
          netif->num++;
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if (netif->num == 255) {
 8008d72:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8008d76:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 8008d78:	bf04      	itt	eq
 8008d7a:	2300      	moveq	r3, #0
 8008d7c:	f886 3034 	strbeq.w	r3, [r6, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008d80:	f8da 4000 	ldr.w	r4, [sl]
 8008d84:	b12c      	cbz	r4, 8008d92 <netif_add+0xee>
      num_netifs = 0;
 8008d86:	2500      	movs	r5, #0
 8008d88:	e7ea      	b.n	8008d60 <netif_add+0xbc>
    netif_num = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	e007      	b.n	8008d9e <netif_add+0xfa>
    return NULL;
 8008d8e:	2000      	movs	r0, #0
 8008d90:	e00c      	b.n	8008dac <netif_add+0x108>
  if (netif->num == 254) {
 8008d92:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8008d96:	2bfe      	cmp	r3, #254	; 0xfe
 8008d98:	d0f7      	beq.n	8008d8a <netif_add+0xe6>
    netif_num = (u8_t)(netif->num + 1);
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	4a05      	ldr	r2, [pc, #20]	; (8008db4 <netif_add+0x110>)
 8008da0:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 8008da2:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <netif_add+0x12c>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 8008da8:	601e      	str	r6, [r3, #0]
  return netif;
 8008daa:	4630      	mov	r0, r6
}
 8008dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db0:	08008ba1 	.word	0x08008ba1
 8008db4:	20000f78 	.word	0x20000f78
 8008db8:	08019224 	.word	0x08019224
 8008dbc:	08017608 	.word	0x08017608
 8008dc0:	08017664 	.word	0x08017664
 8008dc4:	08016a38 	.word	0x08016a38
 8008dc8:	08017680 	.word	0x08017680
 8008dcc:	080176b8 	.word	0x080176b8
 8008dd0:	20004344 	.word	0x20004344
 8008dd4:	080176a4 	.word	0x080176a4

08008dd8 <netif_set_default>:
  netif_default = netif;
 8008dd8:	4b01      	ldr	r3, [pc, #4]	; (8008de0 <netif_set_default+0x8>)
 8008dda:	6018      	str	r0, [r3, #0]
}
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20004348 	.word	0x20004348

08008de4 <netif_set_down>:
{
 8008de4:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008de6:	b160      	cbz	r0, 8008e02 <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 8008de8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008dec:	f013 0f01 	tst.w	r3, #1
 8008df0:	d006      	beq.n	8008e00 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008df2:	f023 0301 	bic.w	r3, r3, #1
 8008df6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    NETIF_STATUS_CALLBACK(netif);
 8008dfa:	69c3      	ldr	r3, [r0, #28]
 8008dfc:	b103      	cbz	r3, 8008e00 <netif_set_down+0x1c>
 8008dfe:	4798      	blx	r3
}
 8008e00:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008e02:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <netif_set_down+0x30>)
 8008e04:	f240 329b 	movw	r2, #923	; 0x39b
 8008e08:	4903      	ldr	r1, [pc, #12]	; (8008e18 <netif_set_down+0x34>)
 8008e0a:	4804      	ldr	r0, [pc, #16]	; (8008e1c <netif_set_down+0x38>)
 8008e0c:	f00b fa54 	bl	80142b8 <app_debug_rtt_raw>
 8008e10:	e7f6      	b.n	8008e00 <netif_set_down+0x1c>
 8008e12:	bf00      	nop
 8008e14:	08017608 	.word	0x08017608
 8008e18:	080176e8 	.word	0x080176e8
 8008e1c:	08016a38 	.word	0x08016a38

08008e20 <netif_remove>:
  if (netif == NULL) {
 8008e20:	b378      	cbz	r0, 8008e82 <netif_remove+0x62>
{
 8008e22:	b538      	push	{r3, r4, r5, lr}
 8008e24:	4604      	mov	r4, r0
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008e26:	6843      	ldr	r3, [r0, #4]
 8008e28:	b993      	cbnz	r3, 8008e50 <netif_remove+0x30>
  if (netif_is_up(netif)) {
 8008e2a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8008e2e:	f013 0f01 	tst.w	r3, #1
 8008e32:	d117      	bne.n	8008e64 <netif_remove+0x44>
  if (netif_default == netif) {
 8008e34:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <netif_remove+0x64>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d017      	beq.n	8008e6c <netif_remove+0x4c>
  if (netif_list == netif) {
 8008e3c:	4b12      	ldr	r3, [pc, #72]	; (8008e88 <netif_remove+0x68>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	d017      	beq.n	8008e74 <netif_remove+0x54>
    NETIF_FOREACH(tmp_netif) {
 8008e44:	b1e3      	cbz	r3, 8008e80 <netif_remove+0x60>
      if (tmp_netif->next == netif) {
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	42a2      	cmp	r2, r4
 8008e4a:	d017      	beq.n	8008e7c <netif_remove+0x5c>
    NETIF_FOREACH(tmp_netif) {
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	e7f9      	b.n	8008e44 <netif_remove+0x24>
    netif_do_ip_addr_changed(netif_ip_addr4(netif), NULL);
 8008e50:	1d05      	adds	r5, r0, #4
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008e52:	2100      	movs	r1, #0
 8008e54:	4628      	mov	r0, r5
 8008e56:	f001 f9d5 	bl	800a204 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f005 fc0f 	bl	800e680 <udp_netif_ip_addr_changed>
}
 8008e62:	e7e2      	b.n	8008e2a <netif_remove+0xa>
    netif_set_down(netif);
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7ff ffbd 	bl	8008de4 <netif_set_down>
 8008e6a:	e7e3      	b.n	8008e34 <netif_remove+0x14>
  netif_default = netif;
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <netif_remove+0x64>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
}
 8008e72:	e7e3      	b.n	8008e3c <netif_remove+0x1c>
    netif_list = netif->next;
 8008e74:	6822      	ldr	r2, [r4, #0]
 8008e76:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <netif_remove+0x68>)
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	e001      	b.n	8008e80 <netif_remove+0x60>
        tmp_netif->next = netif->next;
 8008e7c:	6822      	ldr	r2, [r4, #0]
 8008e7e:	601a      	str	r2, [r3, #0]
}
 8008e80:	bd38      	pop	{r3, r4, r5, pc}
 8008e82:	4770      	bx	lr
 8008e84:	20004348 	.word	0x20004348
 8008e88:	20004344 	.word	0x20004344

08008e8c <netif_set_link_up>:
{
 8008e8c:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008e8e:	b130      	cbz	r0, 8008e9e <netif_set_link_up+0x12>
 8008e90:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008e92:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008e96:	f013 0f04 	tst.w	r3, #4
 8008e9a:	d008      	beq.n	8008eae <netif_set_link_up+0x22>
}
 8008e9c:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008e9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <netif_set_link_up+0x3c>)
 8008ea0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008ea4:	4909      	ldr	r1, [pc, #36]	; (8008ecc <netif_set_link_up+0x40>)
 8008ea6:	480a      	ldr	r0, [pc, #40]	; (8008ed0 <netif_set_link_up+0x44>)
 8008ea8:	f00b fa06 	bl	80142b8 <app_debug_rtt_raw>
 8008eac:	e7f6      	b.n	8008e9c <netif_set_link_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008eae:	f043 0304 	orr.w	r3, r3, #4
 8008eb2:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008eb6:	2103      	movs	r1, #3
 8008eb8:	f7ff fe76 	bl	8008ba8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8008ebc:	6a23      	ldr	r3, [r4, #32]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0ec      	beq.n	8008e9c <netif_set_link_up+0x10>
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	4798      	blx	r3
 8008ec6:	e7e9      	b.n	8008e9c <netif_set_link_up+0x10>
 8008ec8:	08017608 	.word	0x08017608
 8008ecc:	08017708 	.word	0x08017708
 8008ed0:	08016a38 	.word	0x08016a38

08008ed4 <netif_set_link_down>:
{
 8008ed4:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008ed6:	b160      	cbz	r0, 8008ef2 <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008ed8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008edc:	f013 0f04 	tst.w	r3, #4
 8008ee0:	d006      	beq.n	8008ef0 <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008ee2:	f023 0304 	bic.w	r3, r3, #4
 8008ee6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008eea:	6a03      	ldr	r3, [r0, #32]
 8008eec:	b103      	cbz	r3, 8008ef0 <netif_set_link_down+0x1c>
 8008eee:	4798      	blx	r3
}
 8008ef0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008ef2:	4b04      	ldr	r3, [pc, #16]	; (8008f04 <netif_set_link_down+0x30>)
 8008ef4:	f240 4206 	movw	r2, #1030	; 0x406
 8008ef8:	4903      	ldr	r1, [pc, #12]	; (8008f08 <netif_set_link_down+0x34>)
 8008efa:	4804      	ldr	r0, [pc, #16]	; (8008f0c <netif_set_link_down+0x38>)
 8008efc:	f00b f9dc 	bl	80142b8 <app_debug_rtt_raw>
 8008f00:	e7f6      	b.n	8008ef0 <netif_set_link_down+0x1c>
 8008f02:	bf00      	nop
 8008f04:	08017608 	.word	0x08017608
 8008f08:	0801772c 	.word	0x0801772c
 8008f0c:	08016a38 	.word	0x08016a38

08008f10 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008f10:	4602      	mov	r2, r0
 8008f12:	b160      	cbz	r0, 8008f2e <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8008f14:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <netif_get_by_index+0x24>)
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	b150      	cbz	r0, 8008f30 <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 8008f1a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8008f1e:	3301      	adds	r3, #1
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d004      	beq.n	8008f30 <netif_get_by_index+0x20>
    NETIF_FOREACH(netif) {
 8008f26:	6800      	ldr	r0, [r0, #0]
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d1f6      	bne.n	8008f1a <netif_get_by_index+0xa>
 8008f2c:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8008f2e:	2000      	movs	r0, #0
}
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20004344 	.word	0x20004344

08008f38 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8008f38:	4603      	mov	r3, r0
 8008f3a:	b150      	cbz	r0, 8008f52 <pbuf_skip_const+0x1a>
 8008f3c:	8958      	ldrh	r0, [r3, #10]
 8008f3e:	4288      	cmp	r0, r1
 8008f40:	d806      	bhi.n	8008f50 <pbuf_skip_const+0x18>
    offset_left = (u16_t)(offset_left - q->len);
 8008f42:	1a09      	subs	r1, r1, r0
 8008f44:	b289      	uxth	r1, r1
    q = q->next;
 8008f46:	681b      	ldr	r3, [r3, #0]
  while ((q != NULL) && (q->len <= offset_left)) {
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1f7      	bne.n	8008f3c <pbuf_skip_const+0x4>
    q = q->next;
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	e000      	b.n	8008f52 <pbuf_skip_const+0x1a>
 8008f50:	4618      	mov	r0, r3
  }
  if (out_offset != NULL) {
 8008f52:	b102      	cbz	r2, 8008f56 <pbuf_skip_const+0x1e>
    *out_offset = offset_left;
 8008f54:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 8008f56:	4770      	bx	lr

08008f58 <pbuf_add_header_impl>:
{
 8008f58:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8008f5a:	b1c0      	cbz	r0, 8008f8e <pbuf_add_header_impl+0x36>
 8008f5c:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008f5e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008f62:	d22b      	bcs.n	8008fbc <pbuf_add_header_impl+0x64>
  if (header_size_increment == 0) {
 8008f64:	b321      	cbz	r1, 8008fb0 <pbuf_add_header_impl+0x58>
  increment_magnitude = (u16_t)header_size_increment;
 8008f66:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008f68:	8918      	ldrh	r0, [r3, #8]
 8008f6a:	4420      	add	r0, r4
 8008f6c:	b280      	uxth	r0, r0
 8008f6e:	42a0      	cmp	r0, r4
 8008f70:	d320      	bcc.n	8008fb4 <pbuf_add_header_impl+0x5c>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008f72:	f993 500c 	ldrsb.w	r5, [r3, #12]
 8008f76:	2d00      	cmp	r5, #0
 8008f78:	db12      	blt.n	8008fa0 <pbuf_add_header_impl+0x48>
    if (force) {
 8008f7a:	b1ea      	cbz	r2, 8008fb8 <pbuf_add_header_impl+0x60>
      payload = (u8_t *)p->payload - header_size_increment;
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	1a51      	subs	r1, r2, r1
  p->payload = payload;
 8008f80:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008f82:	895a      	ldrh	r2, [r3, #10]
 8008f84:	4414      	add	r4, r2
 8008f86:	815c      	strh	r4, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008f88:	8118      	strh	r0, [r3, #8]
  return 0;
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e017      	b.n	8008fbe <pbuf_add_header_impl+0x66>
  LWIP_ASSERT("p != NULL", p != NULL);
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <pbuf_add_header_impl+0x68>)
 8008f90:	f240 12df 	movw	r2, #479	; 0x1df
 8008f94:	490b      	ldr	r1, [pc, #44]	; (8008fc4 <pbuf_add_header_impl+0x6c>)
 8008f96:	480c      	ldr	r0, [pc, #48]	; (8008fc8 <pbuf_add_header_impl+0x70>)
 8008f98:	f00b f98e 	bl	80142b8 <app_debug_rtt_raw>
    return 1;
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	e00e      	b.n	8008fbe <pbuf_add_header_impl+0x66>
    payload = (u8_t *)p->payload - header_size_increment;
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008fa4:	f103 0210 	add.w	r2, r3, #16
 8008fa8:	4291      	cmp	r1, r2
 8008faa:	d2e9      	bcs.n	8008f80 <pbuf_add_header_impl+0x28>
      return 1;
 8008fac:	2001      	movs	r0, #1
 8008fae:	e006      	b.n	8008fbe <pbuf_add_header_impl+0x66>
    return 0;
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e004      	b.n	8008fbe <pbuf_add_header_impl+0x66>
    return 1;
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	e002      	b.n	8008fbe <pbuf_add_header_impl+0x66>
      return 1;
 8008fb8:	2001      	movs	r0, #1
 8008fba:	e000      	b.n	8008fbe <pbuf_add_header_impl+0x66>
    return 1;
 8008fbc:	2001      	movs	r0, #1
}
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	08017750 	.word	0x08017750
 8008fc4:	08017778 	.word	0x08017778
 8008fc8:	08016a38 	.word	0x08016a38

08008fcc <pbuf_free_ooseq>:
{
 8008fcc:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008fce:	4b07      	ldr	r3, [pc, #28]	; (8008fec <pbuf_free_ooseq+0x20>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008fd4:	4b06      	ldr	r3, [pc, #24]	; (8008ff0 <pbuf_free_ooseq+0x24>)
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	b138      	cbz	r0, 8008fea <pbuf_free_ooseq+0x1e>
    if (pcb->ooseq != NULL) {
 8008fda:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8008fdc:	b91b      	cbnz	r3, 8008fe6 <pbuf_free_ooseq+0x1a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008fde:	6900      	ldr	r0, [r0, #16]
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d1fa      	bne.n	8008fda <pbuf_free_ooseq+0xe>
 8008fe4:	e001      	b.n	8008fea <pbuf_free_ooseq+0x1e>
      tcp_free_ooseq(pcb);
 8008fe6:	f000 ffbd 	bl	8009f64 <tcp_free_ooseq>
}
 8008fea:	bd08      	pop	{r3, pc}
 8008fec:	2000434c 	.word	0x2000434c
 8008ff0:	20004354 	.word	0x20004354

08008ff4 <pbuf_alloc_reference>:
{
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008ffc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b01      	cmp	r3, #1
 8009004:	d110      	bne.n	8009028 <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009006:	2005      	movs	r0, #5
 8009008:	f7ff fd80 	bl	8008b0c <memp_malloc>
  if (p == NULL) {
 800900c:	4603      	mov	r3, r0
 800900e:	b148      	cbz	r0, 8009024 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8009010:	2200      	movs	r2, #0
 8009012:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8009014:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8009016:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8009018:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800901a:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800901c:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 800901e:	2101      	movs	r1, #1
 8009020:	7381      	strb	r1, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009022:	73c2      	strb	r2, [r0, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009028:	4b03      	ldr	r3, [pc, #12]	; (8009038 <pbuf_alloc_reference+0x44>)
 800902a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800902e:	4903      	ldr	r1, [pc, #12]	; (800903c <pbuf_alloc_reference+0x48>)
 8009030:	4803      	ldr	r0, [pc, #12]	; (8009040 <pbuf_alloc_reference+0x4c>)
 8009032:	f00b f941 	bl	80142b8 <app_debug_rtt_raw>
 8009036:	e7e6      	b.n	8009006 <pbuf_alloc_reference+0x12>
 8009038:	08017750 	.word	0x08017750
 800903c:	08017784 	.word	0x08017784
 8009040:	08016a38 	.word	0x08016a38

08009044 <pbuf_add_header>:
{
 8009044:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009046:	2200      	movs	r2, #0
 8009048:	f7ff ff86 	bl	8008f58 <pbuf_add_header_impl>
}
 800904c:	bd08      	pop	{r3, pc}
	...

08009050 <pbuf_remove_header>:
{
 8009050:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009052:	b190      	cbz	r0, 800907a <pbuf_remove_header+0x2a>
 8009054:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009056:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800905a:	d222      	bcs.n	80090a2 <pbuf_remove_header+0x52>
  if (header_size_decrement == 0) {
 800905c:	b1f9      	cbz	r1, 800909e <pbuf_remove_header+0x4e>
  increment_magnitude = (u16_t)header_size_decrement;
 800905e:	b288      	uxth	r0, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009060:	895a      	ldrh	r2, [r3, #10]
 8009062:	4282      	cmp	r2, r0
 8009064:	d312      	bcc.n	800908c <pbuf_remove_header+0x3c>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009066:	685c      	ldr	r4, [r3, #4]
 8009068:	4421      	add	r1, r4
 800906a:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800906c:	1a12      	subs	r2, r2, r0
 800906e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009070:	891a      	ldrh	r2, [r3, #8]
 8009072:	1a10      	subs	r0, r2, r0
 8009074:	8118      	strh	r0, [r3, #8]
  return 0;
 8009076:	2000      	movs	r0, #0
}
 8009078:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800907a:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <pbuf_remove_header+0x58>)
 800907c:	f240 224b 	movw	r2, #587	; 0x24b
 8009080:	490a      	ldr	r1, [pc, #40]	; (80090ac <pbuf_remove_header+0x5c>)
 8009082:	480b      	ldr	r0, [pc, #44]	; (80090b0 <pbuf_remove_header+0x60>)
 8009084:	f00b f918 	bl	80142b8 <app_debug_rtt_raw>
    return 1;
 8009088:	2001      	movs	r0, #1
 800908a:	e7f5      	b.n	8009078 <pbuf_remove_header+0x28>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800908c:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <pbuf_remove_header+0x58>)
 800908e:	f240 2255 	movw	r2, #597	; 0x255
 8009092:	4908      	ldr	r1, [pc, #32]	; (80090b4 <pbuf_remove_header+0x64>)
 8009094:	4806      	ldr	r0, [pc, #24]	; (80090b0 <pbuf_remove_header+0x60>)
 8009096:	f00b f90f 	bl	80142b8 <app_debug_rtt_raw>
 800909a:	2001      	movs	r0, #1
 800909c:	e7ec      	b.n	8009078 <pbuf_remove_header+0x28>
    return 0;
 800909e:	2000      	movs	r0, #0
 80090a0:	e7ea      	b.n	8009078 <pbuf_remove_header+0x28>
    return 1;
 80090a2:	2001      	movs	r0, #1
 80090a4:	e7e8      	b.n	8009078 <pbuf_remove_header+0x28>
 80090a6:	bf00      	nop
 80090a8:	08017750 	.word	0x08017750
 80090ac:	08017778 	.word	0x08017778
 80090b0:	08016a38 	.word	0x08016a38
 80090b4:	08017798 	.word	0x08017798

080090b8 <pbuf_header_force>:
{
 80090b8:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 80090ba:	2900      	cmp	r1, #0
 80090bc:	db03      	blt.n	80090c6 <pbuf_header_force+0xe>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80090be:	2201      	movs	r2, #1
 80090c0:	f7ff ff4a 	bl	8008f58 <pbuf_add_header_impl>
}
 80090c4:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80090c6:	4249      	negs	r1, r1
 80090c8:	f7ff ffc2 	bl	8009050 <pbuf_remove_header>
 80090cc:	e7fa      	b.n	80090c4 <pbuf_header_force+0xc>
	...

080090d0 <pbuf_free>:
{
 80090d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (p == NULL) {
 80090d4:	b130      	cbz	r0, 80090e4 <pbuf_free+0x14>
 80090d6:	4604      	mov	r4, r0
  count = 0;
 80090d8:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80090da:	4f2c      	ldr	r7, [pc, #176]	; (800918c <pbuf_free+0xbc>)
 80090dc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80091a0 <pbuf_free+0xd0>
 80090e0:	4e2b      	ldr	r6, [pc, #172]	; (8009190 <pbuf_free+0xc0>)
 80090e2:	e01b      	b.n	800911c <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
 80090e4:	4b29      	ldr	r3, [pc, #164]	; (800918c <pbuf_free+0xbc>)
 80090e6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80090ea:	492a      	ldr	r1, [pc, #168]	; (8009194 <pbuf_free+0xc4>)
 80090ec:	4828      	ldr	r0, [pc, #160]	; (8009190 <pbuf_free+0xc0>)
 80090ee:	f00b f8e3 	bl	80142b8 <app_debug_rtt_raw>
    return 0;
 80090f2:	2500      	movs	r5, #0
}
 80090f4:	4628      	mov	r0, r5
 80090f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80090fa:	463b      	mov	r3, r7
 80090fc:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009100:	4641      	mov	r1, r8
 8009102:	4630      	mov	r0, r6
 8009104:	f00b f8d8 	bl	80142b8 <app_debug_rtt_raw>
 8009108:	e00b      	b.n	8009122 <pbuf_free+0x52>
        pc->custom_free_function(p);
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	4620      	mov	r0, r4
 800910e:	4798      	blx	r3
      count++;
 8009110:	3501      	adds	r5, #1
 8009112:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8009114:	f1b9 0f00 	cmp.w	r9, #0
 8009118:	d0ec      	beq.n	80090f4 <pbuf_free+0x24>
      p = q;
 800911a:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800911c:	7ba3      	ldrb	r3, [r4, #14]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0eb      	beq.n	80090fa <pbuf_free+0x2a>
    ref = --(p->ref);
 8009122:	7ba3      	ldrb	r3, [r4, #14]
 8009124:	3b01      	subs	r3, #1
 8009126:	b2db      	uxtb	r3, r3
 8009128:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e2      	bne.n	80090f4 <pbuf_free+0x24>
      q = p->next;
 800912e:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009132:	7b63      	ldrb	r3, [r4, #13]
 8009134:	f013 0f02 	tst.w	r3, #2
 8009138:	d00a      	beq.n	8009150 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e4      	bne.n	800910a <pbuf_free+0x3a>
 8009140:	463b      	mov	r3, r7
 8009142:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009146:	4914      	ldr	r1, [pc, #80]	; (8009198 <pbuf_free+0xc8>)
 8009148:	4630      	mov	r0, r6
 800914a:	f00b f8b5 	bl	80142b8 <app_debug_rtt_raw>
 800914e:	e7dc      	b.n	800910a <pbuf_free+0x3a>
      alloc_src = pbuf_get_allocsrc(p);
 8009150:	7b23      	ldrb	r3, [r4, #12]
 8009152:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009156:	2b02      	cmp	r3, #2
 8009158:	d006      	beq.n	8009168 <pbuf_free+0x98>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800915a:	2b01      	cmp	r3, #1
 800915c:	d009      	beq.n	8009172 <pbuf_free+0xa2>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800915e:	b96b      	cbnz	r3, 800917c <pbuf_free+0xac>
          mem_free(p);
 8009160:	4620      	mov	r0, r4
 8009162:	f7ff fa37 	bl	80085d4 <mem_free>
 8009166:	e7d3      	b.n	8009110 <pbuf_free+0x40>
          memp_free(MEMP_PBUF_POOL, p);
 8009168:	4621      	mov	r1, r4
 800916a:	2006      	movs	r0, #6
 800916c:	f7ff fcfe 	bl	8008b6c <memp_free>
 8009170:	e7ce      	b.n	8009110 <pbuf_free+0x40>
          memp_free(MEMP_PBUF, p);
 8009172:	4621      	mov	r1, r4
 8009174:	2005      	movs	r0, #5
 8009176:	f7ff fcf9 	bl	8008b6c <memp_free>
 800917a:	e7c9      	b.n	8009110 <pbuf_free+0x40>
          LWIP_ASSERT("invalid pbuf type", 0);
 800917c:	463b      	mov	r3, r7
 800917e:	f240 320f 	movw	r2, #783	; 0x30f
 8009182:	4906      	ldr	r1, [pc, #24]	; (800919c <pbuf_free+0xcc>)
 8009184:	4630      	mov	r0, r6
 8009186:	f00b f897 	bl	80142b8 <app_debug_rtt_raw>
 800918a:	e7c1      	b.n	8009110 <pbuf_free+0x40>
 800918c:	08017750 	.word	0x08017750
 8009190:	08016a38 	.word	0x08016a38
 8009194:	08017778 	.word	0x08017778
 8009198:	080177d0 	.word	0x080177d0
 800919c:	080177f4 	.word	0x080177f4
 80091a0:	080177b8 	.word	0x080177b8

080091a4 <pbuf_alloc>:
{
 80091a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a8:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 80091aa:	b285      	uxth	r5, r0
  switch (type) {
 80091ac:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 80091b0:	d03d      	beq.n	800922e <pbuf_alloc+0x8a>
 80091b2:	4604      	mov	r4, r0
 80091b4:	d80e      	bhi.n	80091d4 <pbuf_alloc+0x30>
 80091b6:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d02f      	beq.n	8009220 <pbuf_alloc+0x7c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80091c0:	4b3c      	ldr	r3, [pc, #240]	; (80092b4 <pbuf_alloc+0x110>)
 80091c2:	f240 1227 	movw	r2, #295	; 0x127
 80091c6:	493c      	ldr	r1, [pc, #240]	; (80092b8 <pbuf_alloc+0x114>)
 80091c8:	483c      	ldr	r0, [pc, #240]	; (80092bc <pbuf_alloc+0x118>)
 80091ca:	f00b f875 	bl	80142b8 <app_debug_rtt_raw>
      return NULL;
 80091ce:	f04f 0800 	mov.w	r8, #0
 80091d2:	e029      	b.n	8009228 <pbuf_alloc+0x84>
  switch (type) {
 80091d4:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80091d8:	d1f2      	bne.n	80091c0 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80091da:	1ceb      	adds	r3, r5, #3
 80091dc:	f023 0303 	bic.w	r3, r3, #3
 80091e0:	1cca      	adds	r2, r1, #3
 80091e2:	f022 0503 	bic.w	r5, r2, #3
 80091e6:	442b      	add	r3, r5
 80091e8:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80091ea:	f103 0010 	add.w	r0, r3, #16
 80091ee:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80091f0:	42ab      	cmp	r3, r5
 80091f2:	d359      	bcc.n	80092a8 <pbuf_alloc+0x104>
 80091f4:	4285      	cmp	r5, r0
 80091f6:	d85a      	bhi.n	80092ae <pbuf_alloc+0x10a>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80091f8:	f7ff fb66 	bl	80088c8 <mem_malloc>
      if (p == NULL) {
 80091fc:	4680      	mov	r8, r0
 80091fe:	b198      	cbz	r0, 8009228 <pbuf_alloc+0x84>
  p->next = NULL;
 8009200:	2200      	movs	r2, #0
 8009202:	6002      	str	r2, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009204:	1903      	adds	r3, r0, r4
 8009206:	3313      	adds	r3, #19
 8009208:	f023 0303 	bic.w	r3, r3, #3
  p->payload = payload;
 800920c:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 800920e:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8009210:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 8009212:	2380      	movs	r3, #128	; 0x80
 8009214:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 8009216:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8009218:	2301      	movs	r3, #1
 800921a:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800921c:	73c2      	strb	r2, [r0, #15]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800921e:	e003      	b.n	8009228 <pbuf_alloc+0x84>
      p = pbuf_alloc_reference(NULL, length, type);
 8009220:	2000      	movs	r0, #0
 8009222:	f7ff fee7 	bl	8008ff4 <pbuf_alloc_reference>
 8009226:	4680      	mov	r8, r0
}
 8009228:	4640      	mov	r0, r8
 800922a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (type) {
 800922e:	2400      	movs	r4, #0
 8009230:	46a0      	mov	r8, r4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009232:	f04f 0a06 	mov.w	sl, #6
  p->next = NULL;
 8009236:	4627      	mov	r7, r4
  p->type_internal = (u8_t)type;
 8009238:	f04f 0b82 	mov.w	fp, #130	; 0x82
 800923c:	e010      	b.n	8009260 <pbuf_alloc+0xbc>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800923e:	4b20      	ldr	r3, [pc, #128]	; (80092c0 <pbuf_alloc+0x11c>)
 8009240:	2201      	movs	r2, #1
 8009242:	701a      	strb	r2, [r3, #0]
          if (p) {
 8009244:	f1b8 0f00 	cmp.w	r8, #0
 8009248:	d0ee      	beq.n	8009228 <pbuf_alloc+0x84>
            pbuf_free(p);
 800924a:	4640      	mov	r0, r8
 800924c:	f7ff ff40 	bl	80090d0 <pbuf_free>
          return NULL;
 8009250:	46a0      	mov	r8, r4
 8009252:	e7e9      	b.n	8009228 <pbuf_alloc+0x84>
          p = q;
 8009254:	4680      	mov	r8, r0
        rem_len = (u16_t)(rem_len - qlen);
 8009256:	1a76      	subs	r6, r6, r1
 8009258:	b2b6      	uxth	r6, r6
        offset = 0;
 800925a:	463d      	mov	r5, r7
      } while (rem_len > 0);
 800925c:	2e00      	cmp	r6, #0
 800925e:	d0e3      	beq.n	8009228 <pbuf_alloc+0x84>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009260:	46a1      	mov	r9, r4
 8009262:	4650      	mov	r0, sl
 8009264:	f7ff fc52 	bl	8008b0c <memp_malloc>
        if (q == NULL) {
 8009268:	4604      	mov	r4, r0
 800926a:	2800      	cmp	r0, #0
 800926c:	d0e7      	beq.n	800923e <pbuf_alloc+0x9a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800926e:	1ce9      	adds	r1, r5, #3
 8009270:	f021 0103 	bic.w	r1, r1, #3
 8009274:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
 8009278:	b289      	uxth	r1, r1
 800927a:	42b1      	cmp	r1, r6
 800927c:	bf28      	it	cs
 800927e:	4631      	movcs	r1, r6
  p->next = NULL;
 8009280:	6007      	str	r7, [r0, #0]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009282:	4405      	add	r5, r0
 8009284:	3513      	adds	r5, #19
 8009286:	f025 0503 	bic.w	r5, r5, #3
  p->payload = payload;
 800928a:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 800928c:	8106      	strh	r6, [r0, #8]
  p->len = len;
 800928e:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8009290:	f880 b00c 	strb.w	fp, [r0, #12]
  p->flags = flags;
 8009294:	7347      	strb	r7, [r0, #13]
  p->ref = 1;
 8009296:	2301      	movs	r3, #1
 8009298:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800929a:	73c7      	strb	r7, [r0, #15]
        if (p == NULL) {
 800929c:	f1b8 0f00 	cmp.w	r8, #0
 80092a0:	d0d8      	beq.n	8009254 <pbuf_alloc+0xb0>
          last->next = q;
 80092a2:	f8c9 0000 	str.w	r0, [r9]
 80092a6:	e7d6      	b.n	8009256 <pbuf_alloc+0xb2>
        return NULL;
 80092a8:	f04f 0800 	mov.w	r8, #0
 80092ac:	e7bc      	b.n	8009228 <pbuf_alloc+0x84>
 80092ae:	f04f 0800 	mov.w	r8, #0
 80092b2:	e7b9      	b.n	8009228 <pbuf_alloc+0x84>
 80092b4:	08017750 	.word	0x08017750
 80092b8:	08017808 	.word	0x08017808
 80092bc:	08016a38 	.word	0x08016a38
 80092c0:	2000434c 	.word	0x2000434c

080092c4 <pbuf_realloc>:
{
 80092c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c8:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80092ca:	4604      	mov	r4, r0
 80092cc:	b168      	cbz	r0, 80092ea <pbuf_realloc+0x26>
  if (new_len >= p->tot_len) {
 80092ce:	8927      	ldrh	r7, [r4, #8]
 80092d0:	42b7      	cmp	r7, r6
 80092d2:	d939      	bls.n	8009348 <pbuf_realloc+0x84>
  while (rem_len > q->len) {
 80092d4:	8963      	ldrh	r3, [r4, #10]
 80092d6:	429e      	cmp	r6, r3
 80092d8:	d923      	bls.n	8009322 <pbuf_realloc+0x5e>
  rem_len = new_len;
 80092da:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80092dc:	f8df a090 	ldr.w	sl, [pc, #144]	; 8009370 <pbuf_realloc+0xac>
 80092e0:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8009380 <pbuf_realloc+0xbc>
 80092e4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8009378 <pbuf_realloc+0xb4>
 80092e8:	e00a      	b.n	8009300 <pbuf_realloc+0x3c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80092ea:	4b21      	ldr	r3, [pc, #132]	; (8009370 <pbuf_realloc+0xac>)
 80092ec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80092f0:	4920      	ldr	r1, [pc, #128]	; (8009374 <pbuf_realloc+0xb0>)
 80092f2:	4821      	ldr	r0, [pc, #132]	; (8009378 <pbuf_realloc+0xb4>)
 80092f4:	f00a ffe0 	bl	80142b8 <app_debug_rtt_raw>
 80092f8:	e7e9      	b.n	80092ce <pbuf_realloc+0xa>
  while (rem_len > q->len) {
 80092fa:	8963      	ldrh	r3, [r4, #10]
 80092fc:	42ab      	cmp	r3, r5
 80092fe:	d211      	bcs.n	8009324 <pbuf_realloc+0x60>
    rem_len = (u16_t)(rem_len - q->len);
 8009300:	1aed      	subs	r5, r5, r3
 8009302:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009304:	1bf3      	subs	r3, r6, r7
 8009306:	8922      	ldrh	r2, [r4, #8]
 8009308:	4413      	add	r3, r2
 800930a:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800930c:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800930e:	2c00      	cmp	r4, #0
 8009310:	d1f3      	bne.n	80092fa <pbuf_realloc+0x36>
 8009312:	4653      	mov	r3, sl
 8009314:	f240 12af 	movw	r2, #431	; 0x1af
 8009318:	4649      	mov	r1, r9
 800931a:	4640      	mov	r0, r8
 800931c:	f00a ffcc 	bl	80142b8 <app_debug_rtt_raw>
 8009320:	e7eb      	b.n	80092fa <pbuf_realloc+0x36>
  rem_len = new_len;
 8009322:	4635      	mov	r5, r6
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009324:	7b22      	ldrb	r2, [r4, #12]
 8009326:	f012 0f0f 	tst.w	r2, #15
 800932a:	d105      	bne.n	8009338 <pbuf_realloc+0x74>
 800932c:	42ab      	cmp	r3, r5
 800932e:	d003      	beq.n	8009338 <pbuf_realloc+0x74>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009330:	7b63      	ldrb	r3, [r4, #13]
 8009332:	f013 0f02 	tst.w	r3, #2
 8009336:	d009      	beq.n	800934c <pbuf_realloc+0x88>
  q->len = rem_len;
 8009338:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800933a:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800933c:	6820      	ldr	r0, [r4, #0]
 800933e:	b108      	cbz	r0, 8009344 <pbuf_realloc+0x80>
    pbuf_free(q->next);
 8009340:	f7ff fec6 	bl	80090d0 <pbuf_free>
  q->next = NULL;
 8009344:	2300      	movs	r3, #0
 8009346:	6023      	str	r3, [r4, #0]
}
 8009348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800934c:	6863      	ldr	r3, [r4, #4]
 800934e:	1b1b      	subs	r3, r3, r4
 8009350:	18e9      	adds	r1, r5, r3
 8009352:	b289      	uxth	r1, r1
 8009354:	4620      	mov	r0, r4
 8009356:	f7ff fa05 	bl	8008764 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800935a:	4604      	mov	r4, r0
 800935c:	2800      	cmp	r0, #0
 800935e:	d1eb      	bne.n	8009338 <pbuf_realloc+0x74>
 8009360:	4b03      	ldr	r3, [pc, #12]	; (8009370 <pbuf_realloc+0xac>)
 8009362:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009366:	4905      	ldr	r1, [pc, #20]	; (800937c <pbuf_realloc+0xb8>)
 8009368:	4803      	ldr	r0, [pc, #12]	; (8009378 <pbuf_realloc+0xb4>)
 800936a:	f00a ffa5 	bl	80142b8 <app_debug_rtt_raw>
 800936e:	e7e3      	b.n	8009338 <pbuf_realloc+0x74>
 8009370:	08017750 	.word	0x08017750
 8009374:	08017824 	.word	0x08017824
 8009378:	08016a38 	.word	0x08016a38
 800937c:	08017854 	.word	0x08017854
 8009380:	0801783c 	.word	0x0801783c

08009384 <pbuf_clen>:
  while (p != NULL) {
 8009384:	4603      	mov	r3, r0
 8009386:	b130      	cbz	r0, 8009396 <pbuf_clen+0x12>
  len = 0;
 8009388:	2000      	movs	r0, #0
    ++len;
 800938a:	3001      	adds	r0, #1
 800938c:	b280      	uxth	r0, r0
    p = p->next;
 800938e:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1fa      	bne.n	800938a <pbuf_clen+0x6>
 8009394:	4770      	bx	lr
  len = 0;
 8009396:	2000      	movs	r0, #0
}
 8009398:	4770      	bx	lr
	...

0800939c <pbuf_ref>:
  if (p != NULL) {
 800939c:	b170      	cbz	r0, 80093bc <pbuf_ref+0x20>
{
 800939e:	b508      	push	{r3, lr}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80093a0:	7b83      	ldrb	r3, [r0, #14]
 80093a2:	3301      	adds	r3, #1
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80093a8:	b103      	cbz	r3, 80093ac <pbuf_ref+0x10>
}
 80093aa:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80093ac:	4b04      	ldr	r3, [pc, #16]	; (80093c0 <pbuf_ref+0x24>)
 80093ae:	f240 3242 	movw	r2, #834	; 0x342
 80093b2:	4904      	ldr	r1, [pc, #16]	; (80093c4 <pbuf_ref+0x28>)
 80093b4:	4804      	ldr	r0, [pc, #16]	; (80093c8 <pbuf_ref+0x2c>)
 80093b6:	f00a ff7f 	bl	80142b8 <app_debug_rtt_raw>
}
 80093ba:	e7f6      	b.n	80093aa <pbuf_ref+0xe>
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	08017750 	.word	0x08017750
 80093c4:	08017870 	.word	0x08017870
 80093c8:	08016a38 	.word	0x08016a38

080093cc <pbuf_cat>:
{
 80093cc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80093ce:	b130      	cbz	r0, 80093de <pbuf_cat+0x12>
 80093d0:	460d      	mov	r5, r1
 80093d2:	4602      	mov	r2, r0
 80093d4:	b119      	cbz	r1, 80093de <pbuf_cat+0x12>
  for (p = h; p->next != NULL; p = p->next) {
 80093d6:	6804      	ldr	r4, [r0, #0]
 80093d8:	b954      	cbnz	r4, 80093f0 <pbuf_cat+0x24>
 80093da:	4604      	mov	r4, r0
 80093dc:	e010      	b.n	8009400 <pbuf_cat+0x34>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80093de:	4b15      	ldr	r3, [pc, #84]	; (8009434 <pbuf_cat+0x68>)
 80093e0:	f240 3259 	movw	r2, #857	; 0x359
 80093e4:	4914      	ldr	r1, [pc, #80]	; (8009438 <pbuf_cat+0x6c>)
 80093e6:	4815      	ldr	r0, [pc, #84]	; (800943c <pbuf_cat+0x70>)
 80093e8:	f00a ff66 	bl	80142b8 <app_debug_rtt_raw>
 80093ec:	e021      	b.n	8009432 <pbuf_cat+0x66>
  for (p = h; p->next != NULL; p = p->next) {
 80093ee:	461c      	mov	r4, r3
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80093f0:	8913      	ldrh	r3, [r2, #8]
 80093f2:	8928      	ldrh	r0, [r5, #8]
 80093f4:	4403      	add	r3, r0
 80093f6:	8113      	strh	r3, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	4622      	mov	r2, r4
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1f6      	bne.n	80093ee <pbuf_cat+0x22>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009400:	8922      	ldrh	r2, [r4, #8]
 8009402:	8963      	ldrh	r3, [r4, #10]
 8009404:	429a      	cmp	r2, r3
 8009406:	d00f      	beq.n	8009428 <pbuf_cat+0x5c>
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <pbuf_cat+0x68>)
 800940a:	f240 3262 	movw	r2, #866	; 0x362
 800940e:	490c      	ldr	r1, [pc, #48]	; (8009440 <pbuf_cat+0x74>)
 8009410:	480a      	ldr	r0, [pc, #40]	; (800943c <pbuf_cat+0x70>)
 8009412:	f00a ff51 	bl	80142b8 <app_debug_rtt_raw>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	b133      	cbz	r3, 8009428 <pbuf_cat+0x5c>
 800941a:	4b06      	ldr	r3, [pc, #24]	; (8009434 <pbuf_cat+0x68>)
 800941c:	f240 3263 	movw	r2, #867	; 0x363
 8009420:	4908      	ldr	r1, [pc, #32]	; (8009444 <pbuf_cat+0x78>)
 8009422:	4806      	ldr	r0, [pc, #24]	; (800943c <pbuf_cat+0x70>)
 8009424:	f00a ff48 	bl	80142b8 <app_debug_rtt_raw>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009428:	8923      	ldrh	r3, [r4, #8]
 800942a:	892a      	ldrh	r2, [r5, #8]
 800942c:	4413      	add	r3, r2
 800942e:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8009430:	6025      	str	r5, [r4, #0]
}
 8009432:	bd38      	pop	{r3, r4, r5, pc}
 8009434:	08017750 	.word	0x08017750
 8009438:	08017884 	.word	0x08017884
 800943c:	08016a38 	.word	0x08016a38
 8009440:	080178bc 	.word	0x080178bc
 8009444:	080178ec 	.word	0x080178ec

08009448 <pbuf_chain>:
{
 8009448:	b510      	push	{r4, lr}
 800944a:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800944c:	f7ff ffbe 	bl	80093cc <pbuf_cat>
  pbuf_ref(t);
 8009450:	4620      	mov	r0, r4
 8009452:	f7ff ffa3 	bl	800939c <pbuf_ref>
}
 8009456:	bd10      	pop	{r4, pc}

08009458 <pbuf_dechain>:
{
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	4604      	mov	r4, r0
  q = p->next;
 800945c:	6806      	ldr	r6, [r0, #0]
  if (q != NULL) {
 800945e:	b34e      	cbz	r6, 80094b4 <pbuf_dechain+0x5c>
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
 8009460:	8932      	ldrh	r2, [r6, #8]
 8009462:	8903      	ldrh	r3, [r0, #8]
 8009464:	8941      	ldrh	r1, [r0, #10]
 8009466:	1a5b      	subs	r3, r3, r1
 8009468:	429a      	cmp	r2, r3
 800946a:	d11b      	bne.n	80094a4 <pbuf_dechain+0x4c>
    q->tot_len = (u16_t)(p->tot_len - p->len);
 800946c:	8923      	ldrh	r3, [r4, #8]
 800946e:	8962      	ldrh	r2, [r4, #10]
 8009470:	1a9b      	subs	r3, r3, r2
 8009472:	8133      	strh	r3, [r6, #8]
    p->next = NULL;
 8009474:	2300      	movs	r3, #0
 8009476:	6023      	str	r3, [r4, #0]
    p->tot_len = p->len;
 8009478:	8963      	ldrh	r3, [r4, #10]
 800947a:	8123      	strh	r3, [r4, #8]
    tail_gone = pbuf_free(q);
 800947c:	4630      	mov	r0, r6
 800947e:	f7ff fe27 	bl	80090d0 <pbuf_free>
 8009482:	4605      	mov	r5, r0
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
 8009484:	8922      	ldrh	r2, [r4, #8]
 8009486:	8963      	ldrh	r3, [r4, #10]
 8009488:	429a      	cmp	r2, r3
 800948a:	d006      	beq.n	800949a <pbuf_dechain+0x42>
 800948c:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <pbuf_dechain+0x68>)
 800948e:	f240 32aa 	movw	r2, #938	; 0x3aa
 8009492:	490c      	ldr	r1, [pc, #48]	; (80094c4 <pbuf_dechain+0x6c>)
 8009494:	480c      	ldr	r0, [pc, #48]	; (80094c8 <pbuf_dechain+0x70>)
 8009496:	f00a ff0f 	bl	80142b8 <app_debug_rtt_raw>
  return ((tail_gone > 0) ? NULL : q);
 800949a:	2d00      	cmp	r5, #0
 800949c:	bf18      	it	ne
 800949e:	2600      	movne	r6, #0
}
 80094a0:	4630      	mov	r0, r6
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
 80094a4:	4b06      	ldr	r3, [pc, #24]	; (80094c0 <pbuf_dechain+0x68>)
 80094a6:	f240 3299 	movw	r2, #921	; 0x399
 80094aa:	4908      	ldr	r1, [pc, #32]	; (80094cc <pbuf_dechain+0x74>)
 80094ac:	4806      	ldr	r0, [pc, #24]	; (80094c8 <pbuf_dechain+0x70>)
 80094ae:	f00a ff03 	bl	80142b8 <app_debug_rtt_raw>
 80094b2:	e7db      	b.n	800946c <pbuf_dechain+0x14>
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
 80094b4:	8902      	ldrh	r2, [r0, #8]
 80094b6:	8943      	ldrh	r3, [r0, #10]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d0f1      	beq.n	80094a0 <pbuf_dechain+0x48>
  u8_t tail_gone = 1;
 80094bc:	2501      	movs	r5, #1
 80094be:	e7e5      	b.n	800948c <pbuf_dechain+0x34>
 80094c0:	08017750 	.word	0x08017750
 80094c4:	08017920 	.word	0x08017920
 80094c8:	08016a38 	.word	0x08016a38
 80094cc:	080178fc 	.word	0x080178fc

080094d0 <pbuf_copy>:
{
 80094d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80094d4:	b178      	cbz	r0, 80094f6 <pbuf_copy+0x26>
 80094d6:	460c      	mov	r4, r1
 80094d8:	4606      	mov	r6, r0
 80094da:	b161      	cbz	r1, 80094f6 <pbuf_copy+0x26>
 80094dc:	8902      	ldrh	r2, [r0, #8]
 80094de:	890b      	ldrh	r3, [r1, #8]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d308      	bcc.n	80094f6 <pbuf_copy+0x26>
  size_t offset_to = 0, offset_from = 0, len;
 80094e4:	2700      	movs	r7, #0
 80094e6:	46b8      	mov	r8, r7
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80094e8:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80095f8 <pbuf_copy+0x128>
 80094ec:	f8df b120 	ldr.w	fp, [pc, #288]	; 8009610 <pbuf_copy+0x140>
 80094f0:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009600 <pbuf_copy+0x130>
 80094f4:	e050      	b.n	8009598 <pbuf_copy+0xc8>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80094f6:	4b40      	ldr	r3, [pc, #256]	; (80095f8 <pbuf_copy+0x128>)
 80094f8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80094fc:	493f      	ldr	r1, [pc, #252]	; (80095fc <pbuf_copy+0x12c>)
 80094fe:	4840      	ldr	r0, [pc, #256]	; (8009600 <pbuf_copy+0x130>)
 8009500:	f00a feda 	bl	80142b8 <app_debug_rtt_raw>
 8009504:	f06f 000f 	mvn.w	r0, #15
 8009508:	e016      	b.n	8009538 <pbuf_copy+0x68>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800950a:	4653      	mov	r3, sl
 800950c:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009510:	4659      	mov	r1, fp
 8009512:	4648      	mov	r0, r9
 8009514:	f00a fed0 	bl	80142b8 <app_debug_rtt_raw>
 8009518:	e052      	b.n	80095c0 <pbuf_copy+0xf0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800951a:	4653      	mov	r3, sl
 800951c:	f240 32da 	movw	r2, #986	; 0x3da
 8009520:	4938      	ldr	r1, [pc, #224]	; (8009604 <pbuf_copy+0x134>)
 8009522:	4648      	mov	r0, r9
 8009524:	f00a fec8 	bl	80142b8 <app_debug_rtt_raw>
 8009528:	e04d      	b.n	80095c6 <pbuf_copy+0xf6>
      p_to = p_to->next;
 800952a:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800952c:	b116      	cbz	r6, 8009534 <pbuf_copy+0x64>
      offset_to = 0;
 800952e:	f04f 0800 	mov.w	r8, #0
 8009532:	e050      	b.n	80095d6 <pbuf_copy+0x106>
  return ERR_OK;
 8009534:	2000      	movs	r0, #0
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009536:	b90c      	cbnz	r4, 800953c <pbuf_copy+0x6c>
}
 8009538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800953c:	4b2e      	ldr	r3, [pc, #184]	; (80095f8 <pbuf_copy+0x128>)
 800953e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009542:	4931      	ldr	r1, [pc, #196]	; (8009608 <pbuf_copy+0x138>)
 8009544:	482e      	ldr	r0, [pc, #184]	; (8009600 <pbuf_copy+0x130>)
 8009546:	f00a feb7 	bl	80142b8 <app_debug_rtt_raw>
 800954a:	f06f 000f 	mvn.w	r0, #15
 800954e:	e7f3      	b.n	8009538 <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d045      	beq.n	80095e2 <pbuf_copy+0x112>
 8009556:	4b28      	ldr	r3, [pc, #160]	; (80095f8 <pbuf_copy+0x128>)
 8009558:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800955c:	492b      	ldr	r1, [pc, #172]	; (800960c <pbuf_copy+0x13c>)
 800955e:	4828      	ldr	r0, [pc, #160]	; (8009600 <pbuf_copy+0x130>)
 8009560:	f00a feaa 	bl	80142b8 <app_debug_rtt_raw>
 8009564:	f06f 0005 	mvn.w	r0, #5
 8009568:	e7e6      	b.n	8009538 <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800956a:	4b23      	ldr	r3, [pc, #140]	; (80095f8 <pbuf_copy+0x128>)
 800956c:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009570:	4926      	ldr	r1, [pc, #152]	; (800960c <pbuf_copy+0x13c>)
 8009572:	4823      	ldr	r0, [pc, #140]	; (8009600 <pbuf_copy+0x130>)
 8009574:	f00a fea0 	bl	80142b8 <app_debug_rtt_raw>
 8009578:	f06f 0005 	mvn.w	r0, #5
 800957c:	e7dc      	b.n	8009538 <pbuf_copy+0x68>
  return ERR_OK;
 800957e:	2000      	movs	r0, #0
 8009580:	e7da      	b.n	8009538 <pbuf_copy+0x68>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009582:	2e00      	cmp	r6, #0
 8009584:	d034      	beq.n	80095f0 <pbuf_copy+0x120>
 8009586:	8972      	ldrh	r2, [r6, #10]
 8009588:	8933      	ldrh	r3, [r6, #8]
 800958a:	429a      	cmp	r2, r3
 800958c:	d132      	bne.n	80095f4 <pbuf_copy+0x124>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800958e:	6833      	ldr	r3, [r6, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1ea      	bne.n	800956a <pbuf_copy+0x9a>
  } while (p_from);
 8009594:	2c00      	cmp	r4, #0
 8009596:	d0f2      	beq.n	800957e <pbuf_copy+0xae>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009598:	8975      	ldrh	r5, [r6, #10]
 800959a:	eba5 0508 	sub.w	r5, r5, r8
 800959e:	8963      	ldrh	r3, [r4, #10]
 80095a0:	1bdb      	subs	r3, r3, r7
 80095a2:	429d      	cmp	r5, r3
 80095a4:	bf28      	it	cs
 80095a6:	461d      	movcs	r5, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80095a8:	6870      	ldr	r0, [r6, #4]
 80095aa:	6861      	ldr	r1, [r4, #4]
 80095ac:	462a      	mov	r2, r5
 80095ae:	4439      	add	r1, r7
 80095b0:	4440      	add	r0, r8
 80095b2:	f00a feed 	bl	8014390 <memcpy>
    offset_to += len;
 80095b6:	44a8      	add	r8, r5
    offset_from += len;
 80095b8:	442f      	add	r7, r5
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095ba:	8973      	ldrh	r3, [r6, #10]
 80095bc:	4543      	cmp	r3, r8
 80095be:	d3a4      	bcc.n	800950a <pbuf_copy+0x3a>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80095c0:	8963      	ldrh	r3, [r4, #10]
 80095c2:	42bb      	cmp	r3, r7
 80095c4:	d3a9      	bcc.n	800951a <pbuf_copy+0x4a>
    if (offset_from >= p_from->len) {
 80095c6:	8963      	ldrh	r3, [r4, #10]
 80095c8:	42bb      	cmp	r3, r7
      p_from = p_from->next;
 80095ca:	bf9c      	itt	ls
 80095cc:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 80095ce:	2700      	movls	r7, #0
    if (offset_to == p_to->len) {
 80095d0:	8973      	ldrh	r3, [r6, #10]
 80095d2:	4543      	cmp	r3, r8
 80095d4:	d0a9      	beq.n	800952a <pbuf_copy+0x5a>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80095d6:	2c00      	cmp	r4, #0
 80095d8:	d0d3      	beq.n	8009582 <pbuf_copy+0xb2>
 80095da:	8962      	ldrh	r2, [r4, #10]
 80095dc:	8923      	ldrh	r3, [r4, #8]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d0b6      	beq.n	8009550 <pbuf_copy+0x80>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80095e2:	2e00      	cmp	r6, #0
 80095e4:	d0d8      	beq.n	8009598 <pbuf_copy+0xc8>
 80095e6:	8972      	ldrh	r2, [r6, #10]
 80095e8:	8933      	ldrh	r3, [r6, #8]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d1d4      	bne.n	8009598 <pbuf_copy+0xc8>
 80095ee:	e7ce      	b.n	800958e <pbuf_copy+0xbe>
  return ERR_OK;
 80095f0:	2000      	movs	r0, #0
 80095f2:	e7a1      	b.n	8009538 <pbuf_copy+0x68>
 80095f4:	2000      	movs	r0, #0
 80095f6:	e79f      	b.n	8009538 <pbuf_copy+0x68>
 80095f8:	08017750 	.word	0x08017750
 80095fc:	08017938 	.word	0x08017938
 8009600:	08016a38 	.word	0x08016a38
 8009604:	08017980 	.word	0x08017980
 8009608:	0801799c 	.word	0x0801799c
 800960c:	080179ac 	.word	0x080179ac
 8009610:	08017968 	.word	0x08017968

08009614 <pbuf_copy_partial>:
{
 8009614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009618:	b148      	cbz	r0, 800962e <pbuf_copy_partial+0x1a>
 800961a:	4688      	mov	r8, r1
 800961c:	4692      	mov	sl, r2
 800961e:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009620:	b181      	cbz	r1, 8009644 <pbuf_copy_partial+0x30>
  u16_t copied_total = 0;
 8009622:	4617      	mov	r7, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009624:	b15a      	cbz	r2, 800963e <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 8009626:	2700      	movs	r7, #0
  u16_t left = 0;
 8009628:	463e      	mov	r6, r7
      offset = 0;
 800962a:	46b9      	mov	r9, r7
 800962c:	e02f      	b.n	800968e <pbuf_copy_partial+0x7a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800962e:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <pbuf_copy_partial+0x8c>)
 8009630:	f240 420a 	movw	r2, #1034	; 0x40a
 8009634:	491b      	ldr	r1, [pc, #108]	; (80096a4 <pbuf_copy_partial+0x90>)
 8009636:	481c      	ldr	r0, [pc, #112]	; (80096a8 <pbuf_copy_partial+0x94>)
 8009638:	f00a fe3e 	bl	80142b8 <app_debug_rtt_raw>
 800963c:	2700      	movs	r7, #0
}
 800963e:	4638      	mov	r0, r7
 8009640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009644:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <pbuf_copy_partial+0x8c>)
 8009646:	f240 420b 	movw	r2, #1035	; 0x40b
 800964a:	4918      	ldr	r1, [pc, #96]	; (80096ac <pbuf_copy_partial+0x98>)
 800964c:	4816      	ldr	r0, [pc, #88]	; (80096a8 <pbuf_copy_partial+0x94>)
 800964e:	f00a fe33 	bl	80142b8 <app_debug_rtt_raw>
 8009652:	2700      	movs	r7, #0
 8009654:	e7f3      	b.n	800963e <pbuf_copy_partial+0x2a>
      buf_copy_len = (u16_t)(p->len - offset);
 8009656:	896c      	ldrh	r4, [r5, #10]
 8009658:	1ae4      	subs	r4, r4, r3
 800965a:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 800965c:	4554      	cmp	r4, sl
 800965e:	bf28      	it	cs
 8009660:	4654      	movcs	r4, sl
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009662:	6869      	ldr	r1, [r5, #4]
 8009664:	4622      	mov	r2, r4
 8009666:	4419      	add	r1, r3
 8009668:	eb08 0006 	add.w	r0, r8, r6
 800966c:	f00a fe90 	bl	8014390 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009670:	4427      	add	r7, r4
 8009672:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 8009674:	4426      	add	r6, r4
 8009676:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8009678:	ebaa 0404 	sub.w	r4, sl, r4
 800967c:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
 8009680:	464b      	mov	r3, r9
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009682:	682d      	ldr	r5, [r5, #0]
 8009684:	f1ba 0f00 	cmp.w	sl, #0
 8009688:	d0d9      	beq.n	800963e <pbuf_copy_partial+0x2a>
 800968a:	2d00      	cmp	r5, #0
 800968c:	d0d7      	beq.n	800963e <pbuf_copy_partial+0x2a>
    if ((offset != 0) && (offset >= p->len)) {
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0e1      	beq.n	8009656 <pbuf_copy_partial+0x42>
 8009692:	8969      	ldrh	r1, [r5, #10]
 8009694:	4299      	cmp	r1, r3
 8009696:	d8de      	bhi.n	8009656 <pbuf_copy_partial+0x42>
      offset = (u16_t)(offset - p->len);
 8009698:	1a5b      	subs	r3, r3, r1
 800969a:	b29b      	uxth	r3, r3
 800969c:	e7f1      	b.n	8009682 <pbuf_copy_partial+0x6e>
 800969e:	bf00      	nop
 80096a0:	08017750 	.word	0x08017750
 80096a4:	080179d8 	.word	0x080179d8
 80096a8:	08016a38 	.word	0x08016a38
 80096ac:	080179f8 	.word	0x080179f8

080096b0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80096b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80096b4:	b338      	cbz	r0, 8009706 <pbuf_take+0x56>
 80096b6:	4688      	mov	r8, r1
 80096b8:	4691      	mov	r9, r2
 80096ba:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80096bc:	b369      	cbz	r1, 800971a <pbuf_take+0x6a>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80096be:	8903      	ldrh	r3, [r0, #8]
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d334      	bcc.n	800972e <pbuf_take+0x7e>
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
 80096c4:	2000      	movs	r0, #0
  for (p = buf; total_copy_len != 0; p = p->next) {
 80096c6:	2a00      	cmp	r2, #0
 80096c8:	d045      	beq.n	8009756 <pbuf_take+0xa6>
  size_t total_copy_len = len;
 80096ca:	4616      	mov	r6, r2
  size_t copied_total = 0;
 80096cc:	2700      	movs	r7, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80096ce:	f8df b094 	ldr.w	fp, [pc, #148]	; 8009764 <pbuf_take+0xb4>
 80096d2:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8009778 <pbuf_take+0xc8>
    if (buf_copy_len > p->len) {
 80096d6:	896c      	ldrh	r4, [r5, #10]
 80096d8:	42b4      	cmp	r4, r6
 80096da:	bf28      	it	cs
 80096dc:	4634      	movcs	r4, r6
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80096de:	4622      	mov	r2, r4
 80096e0:	eb08 0107 	add.w	r1, r8, r7
 80096e4:	6868      	ldr	r0, [r5, #4]
 80096e6:	f00a fe53 	bl	8014390 <memcpy>
    copied_total += buf_copy_len;
 80096ea:	4427      	add	r7, r4
  for (p = buf; total_copy_len != 0; p = p->next) {
 80096ec:	682d      	ldr	r5, [r5, #0]
 80096ee:	1b36      	subs	r6, r6, r4
 80096f0:	d027      	beq.n	8009742 <pbuf_take+0x92>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80096f2:	2d00      	cmp	r5, #0
 80096f4:	d1ef      	bne.n	80096d6 <pbuf_take+0x26>
 80096f6:	465b      	mov	r3, fp
 80096f8:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80096fc:	4651      	mov	r1, sl
 80096fe:	4818      	ldr	r0, [pc, #96]	; (8009760 <pbuf_take+0xb0>)
 8009700:	f00a fdda 	bl	80142b8 <app_debug_rtt_raw>
 8009704:	e7e7      	b.n	80096d6 <pbuf_take+0x26>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8009706:	4b17      	ldr	r3, [pc, #92]	; (8009764 <pbuf_take+0xb4>)
 8009708:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800970c:	4916      	ldr	r1, [pc, #88]	; (8009768 <pbuf_take+0xb8>)
 800970e:	4814      	ldr	r0, [pc, #80]	; (8009760 <pbuf_take+0xb0>)
 8009710:	f00a fdd2 	bl	80142b8 <app_debug_rtt_raw>
 8009714:	f06f 000f 	mvn.w	r0, #15
 8009718:	e01d      	b.n	8009756 <pbuf_take+0xa6>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800971a:	4b12      	ldr	r3, [pc, #72]	; (8009764 <pbuf_take+0xb4>)
 800971c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8009720:	4912      	ldr	r1, [pc, #72]	; (800976c <pbuf_take+0xbc>)
 8009722:	480f      	ldr	r0, [pc, #60]	; (8009760 <pbuf_take+0xb0>)
 8009724:	f00a fdc8 	bl	80142b8 <app_debug_rtt_raw>
 8009728:	f06f 000f 	mvn.w	r0, #15
 800972c:	e013      	b.n	8009756 <pbuf_take+0xa6>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800972e:	4b0d      	ldr	r3, [pc, #52]	; (8009764 <pbuf_take+0xb4>)
 8009730:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8009734:	490e      	ldr	r1, [pc, #56]	; (8009770 <pbuf_take+0xc0>)
 8009736:	480a      	ldr	r0, [pc, #40]	; (8009760 <pbuf_take+0xb0>)
 8009738:	f00a fdbe 	bl	80142b8 <app_debug_rtt_raw>
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	e009      	b.n	8009756 <pbuf_take+0xa6>
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8009742:	45b9      	cmp	r9, r7
 8009744:	d009      	beq.n	800975a <pbuf_take+0xaa>
 8009746:	4b07      	ldr	r3, [pc, #28]	; (8009764 <pbuf_take+0xb4>)
 8009748:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800974c:	4909      	ldr	r1, [pc, #36]	; (8009774 <pbuf_take+0xc4>)
 800974e:	4804      	ldr	r0, [pc, #16]	; (8009760 <pbuf_take+0xb0>)
 8009750:	f00a fdb2 	bl	80142b8 <app_debug_rtt_raw>
  return ERR_OK;
 8009754:	2000      	movs	r0, #0
}
 8009756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 800975a:	2000      	movs	r0, #0
 800975c:	e7fb      	b.n	8009756 <pbuf_take+0xa6>
 800975e:	bf00      	nop
 8009760:	08016a38 	.word	0x08016a38
 8009764:	08017750 	.word	0x08017750
 8009768:	08017a1c 	.word	0x08017a1c
 800976c:	08017a34 	.word	0x08017a34
 8009770:	08017a50 	.word	0x08017a50
 8009774:	08017a88 	.word	0x08017a88
 8009778:	08017a70 	.word	0x08017a70

0800977c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800977c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009780:	b083      	sub	sp, #12
 8009782:	460f      	mov	r7, r1
 8009784:	4615      	mov	r5, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8009786:	f10d 0206 	add.w	r2, sp, #6
 800978a:	4619      	mov	r1, r3
 800978c:	f7ff fbd4 	bl	8008f38 <pbuf_skip_const>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8009790:	b360      	cbz	r0, 80097ec <pbuf_take_at+0x70>
 8009792:	4606      	mov	r6, r0
 8009794:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009798:	8901      	ldrh	r1, [r0, #8]
 800979a:	195a      	adds	r2, r3, r5
 800979c:	4291      	cmp	r1, r2
 800979e:	db28      	blt.n	80097f2 <pbuf_take_at+0x76>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80097a0:	8942      	ldrh	r2, [r0, #10]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d91a      	bls.n	80097dc <pbuf_take_at+0x60>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80097a6:	f8b6 900a 	ldrh.w	r9, [r6, #10]
 80097aa:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 80097ae:	eba9 0304 	sub.w	r3, r9, r4
 80097b2:	429d      	cmp	r5, r3
 80097b4:	dd22      	ble.n	80097fc <pbuf_take_at+0x80>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80097b6:	fa1f f883 	uxth.w	r8, r3
 80097ba:	6870      	ldr	r0, [r6, #4]
 80097bc:	4642      	mov	r2, r8
 80097be:	4639      	mov	r1, r7
 80097c0:	4420      	add	r0, r4
 80097c2:	f00a fde5 	bl	8014390 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 80097c6:	1962      	adds	r2, r4, r5
 80097c8:	eba2 0209 	sub.w	r2, r2, r9
 80097cc:	b292      	uxth	r2, r2
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
 80097ce:	b19a      	cbz	r2, 80097f8 <pbuf_take_at+0x7c>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80097d0:	eb07 0108 	add.w	r1, r7, r8
 80097d4:	6830      	ldr	r0, [r6, #0]
 80097d6:	f7ff ff6b 	bl	80096b0 <pbuf_take>
 80097da:	e016      	b.n	800980a <pbuf_take_at+0x8e>
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80097dc:	4b0c      	ldr	r3, [pc, #48]	; (8009810 <pbuf_take_at+0x94>)
 80097de:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80097e2:	490c      	ldr	r1, [pc, #48]	; (8009814 <pbuf_take_at+0x98>)
 80097e4:	480c      	ldr	r0, [pc, #48]	; (8009818 <pbuf_take_at+0x9c>)
 80097e6:	f00a fd67 	bl	80142b8 <app_debug_rtt_raw>
 80097ea:	e7dc      	b.n	80097a6 <pbuf_take_at+0x2a>
    }
    return ERR_OK;
  }
  return ERR_MEM;
 80097ec:	f04f 30ff 	mov.w	r0, #4294967295
 80097f0:	e00b      	b.n	800980a <pbuf_take_at+0x8e>
 80097f2:	f04f 30ff 	mov.w	r0, #4294967295
 80097f6:	e008      	b.n	800980a <pbuf_take_at+0x8e>
    return ERR_OK;
 80097f8:	2000      	movs	r0, #0
 80097fa:	e006      	b.n	800980a <pbuf_take_at+0x8e>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80097fc:	6870      	ldr	r0, [r6, #4]
 80097fe:	462a      	mov	r2, r5
 8009800:	4639      	mov	r1, r7
 8009802:	4420      	add	r0, r4
 8009804:	f00a fdc4 	bl	8014390 <memcpy>
    return ERR_OK;
 8009808:	2000      	movs	r0, #0
}
 800980a:	b003      	add	sp, #12
 800980c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009810:	08017750 	.word	0x08017750
 8009814:	08017aa0 	.word	0x08017aa0
 8009818:	08016a38 	.word	0x08016a38

0800981c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009820:	460a      	mov	r2, r1
 8009822:	8921      	ldrh	r1, [r4, #8]
 8009824:	f7ff fcbe 	bl	80091a4 <pbuf_alloc>
  if (q == NULL) {
 8009828:	4605      	mov	r5, r0
 800982a:	b118      	cbz	r0, 8009834 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800982c:	4621      	mov	r1, r4
 800982e:	f7ff fe4f 	bl	80094d0 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009832:	b908      	cbnz	r0, 8009838 <pbuf_clone+0x1c>
  return q;
}
 8009834:	4628      	mov	r0, r5
 8009836:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009838:	4b03      	ldr	r3, [pc, #12]	; (8009848 <pbuf_clone+0x2c>)
 800983a:	f240 5224 	movw	r2, #1316	; 0x524
 800983e:	4903      	ldr	r1, [pc, #12]	; (800984c <pbuf_clone+0x30>)
 8009840:	4803      	ldr	r0, [pc, #12]	; (8009850 <pbuf_clone+0x34>)
 8009842:	f00a fd39 	bl	80142b8 <app_debug_rtt_raw>
 8009846:	e7f5      	b.n	8009834 <pbuf_clone+0x18>
 8009848:	08017750 	.word	0x08017750
 800984c:	08017ab8 	.word	0x08017ab8
 8009850:	08016a38 	.word	0x08016a38

08009854 <pbuf_coalesce>:
{
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4604      	mov	r4, r0
  if (p->next == NULL) {
 8009858:	6803      	ldr	r3, [r0, #0]
 800985a:	b15b      	cbz	r3, 8009874 <pbuf_coalesce+0x20>
 800985c:	4608      	mov	r0, r1
  q = pbuf_clone(layer, PBUF_RAM, p);
 800985e:	4622      	mov	r2, r4
 8009860:	f44f 7120 	mov.w	r1, #640	; 0x280
 8009864:	f7ff ffda 	bl	800981c <pbuf_clone>
  if (q == NULL) {
 8009868:	4605      	mov	r5, r0
 800986a:	b118      	cbz	r0, 8009874 <pbuf_coalesce+0x20>
  pbuf_free(p);
 800986c:	4620      	mov	r0, r4
 800986e:	f7ff fc2f 	bl	80090d0 <pbuf_free>
  return q;
 8009872:	462c      	mov	r4, r5
}
 8009874:	4620      	mov	r0, r4
 8009876:	bd38      	pop	{r3, r4, r5, pc}

08009878 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8009878:	b500      	push	{lr}
 800987a:	b083      	sub	sp, #12
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800987c:	f10d 0206 	add.w	r2, sp, #6
 8009880:	f7ff fb5a 	bl	8008f38 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8009884:	b148      	cbz	r0, 800989a <pbuf_try_get_at+0x22>
 8009886:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800988a:	8941      	ldrh	r1, [r0, #10]
 800988c:	4291      	cmp	r1, r2
 800988e:	d907      	bls.n	80098a0 <pbuf_try_get_at+0x28>
    return ((u8_t *)q->payload)[q_idx];
 8009890:	6843      	ldr	r3, [r0, #4]
 8009892:	5c98      	ldrb	r0, [r3, r2]
  }
  return -1;
}
 8009894:	b003      	add	sp, #12
 8009896:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 800989a:	f04f 30ff 	mov.w	r0, #4294967295
 800989e:	e7f9      	b.n	8009894 <pbuf_try_get_at+0x1c>
 80098a0:	f04f 30ff 	mov.w	r0, #4294967295
 80098a4:	e7f6      	b.n	8009894 <pbuf_try_get_at+0x1c>

080098a6 <pbuf_get_at>:
{
 80098a6:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 80098a8:	f7ff ffe6 	bl	8009878 <pbuf_try_get_at>
  if (ret >= 0) {
 80098ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80098b0:	b2c0      	uxtb	r0, r0
 80098b2:	bd08      	pop	{r3, pc}

080098b4 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80098b4:	b510      	push	{r4, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	4614      	mov	r4, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80098ba:	f10d 0206 	add.w	r2, sp, #6
 80098be:	f7ff fb3b 	bl	8008f38 <pbuf_skip_const>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80098c2:	b138      	cbz	r0, 80098d4 <pbuf_put_at+0x20>
 80098c4:	4603      	mov	r3, r0
 80098c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80098ca:	8941      	ldrh	r1, [r0, #10]
 80098cc:	4291      	cmp	r1, r2
    ((u8_t *)q->payload)[q_idx] = data;
 80098ce:	bf84      	itt	hi
 80098d0:	6843      	ldrhi	r3, [r0, #4]
 80098d2:	549c      	strbhi	r4, [r3, r2]
  }
}
 80098d4:	b002      	add	sp, #8
 80098d6:	bd10      	pop	{r4, pc}

080098d8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80098d8:	b470      	push	{r4, r5, r6}
  u8_t i;
  u16_t n = 0;
 80098da:	4b13      	ldr	r3, [pc, #76]	; (8009928 <tcp_new_port+0x50>)
 80098dc:	8818      	ldrh	r0, [r3, #0]
{
 80098de:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80098e2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80098e6:	e002      	b.n	80098ee <tcp_new_port+0x16>
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80098e8:	3c01      	subs	r4, #1
 80098ea:	b2a4      	uxth	r4, r4
 80098ec:	b1c4      	cbz	r4, 8009920 <tcp_new_port+0x48>
  tcp_port++;
 80098ee:	3001      	adds	r0, #1
 80098f0:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80098f2:	42b0      	cmp	r0, r6
 80098f4:	bf08      	it	eq
 80098f6:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80098fa:	490c      	ldr	r1, [pc, #48]	; (800992c <tcp_new_port+0x54>)
 80098fc:	f101 0510 	add.w	r5, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009900:	f851 3b04 	ldr.w	r3, [r1], #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	b12b      	cbz	r3, 8009914 <tcp_new_port+0x3c>
      if (pcb->local_port == tcp_port) {
 8009908:	8b5a      	ldrh	r2, [r3, #26]
 800990a:	4282      	cmp	r2, r0
 800990c:	d0ec      	beq.n	80098e8 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1f9      	bne.n	8009908 <tcp_new_port+0x30>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009914:	42a9      	cmp	r1, r5
 8009916:	d1f3      	bne.n	8009900 <tcp_new_port+0x28>
 8009918:	4b03      	ldr	r3, [pc, #12]	; (8009928 <tcp_new_port+0x50>)
 800991a:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800991c:	bc70      	pop	{r4, r5, r6}
 800991e:	4770      	bx	lr
 8009920:	4b01      	ldr	r3, [pc, #4]	; (8009928 <tcp_new_port+0x50>)
 8009922:	8018      	strh	r0, [r3, #0]
          return 0;
 8009924:	4620      	mov	r0, r4
 8009926:	e7f9      	b.n	800991c <tcp_new_port+0x44>
 8009928:	20000018 	.word	0x20000018
 800992c:	08018114 	.word	0x08018114

08009930 <tcp_close_shutdown_fin>:
{
 8009930:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009932:	4604      	mov	r4, r0
 8009934:	b140      	cbz	r0, 8009948 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8009936:	7e23      	ldrb	r3, [r4, #24]
 8009938:	2b04      	cmp	r3, #4
 800993a:	d018      	beq.n	800996e <tcp_close_shutdown_fin+0x3e>
 800993c:	2b07      	cmp	r3, #7
 800993e:	d01d      	beq.n	800997c <tcp_close_shutdown_fin+0x4c>
 8009940:	2b03      	cmp	r3, #3
 8009942:	d009      	beq.n	8009958 <tcp_close_shutdown_fin+0x28>
 8009944:	2000      	movs	r0, #0
}
 8009946:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009948:	4b14      	ldr	r3, [pc, #80]	; (800999c <tcp_close_shutdown_fin+0x6c>)
 800994a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800994e:	4914      	ldr	r1, [pc, #80]	; (80099a0 <tcp_close_shutdown_fin+0x70>)
 8009950:	4814      	ldr	r0, [pc, #80]	; (80099a4 <tcp_close_shutdown_fin+0x74>)
 8009952:	f00a fcb1 	bl	80142b8 <app_debug_rtt_raw>
 8009956:	e7ee      	b.n	8009936 <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 8009958:	4620      	mov	r0, r4
 800995a:	f003 fd8b 	bl	800d474 <tcp_send_fin>
      if (err == ERR_OK) {
 800995e:	b9a0      	cbnz	r0, 800998a <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 8009960:	2305      	movs	r3, #5
 8009962:	7623      	strb	r3, [r4, #24]
    tcp_output(pcb);
 8009964:	4620      	mov	r0, r4
 8009966:	f003 ff11 	bl	800d78c <tcp_output>
  return err;
 800996a:	2000      	movs	r0, #0
 800996c:	e7eb      	b.n	8009946 <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 800996e:	4620      	mov	r0, r4
 8009970:	f003 fd80 	bl	800d474 <tcp_send_fin>
      if (err == ERR_OK) {
 8009974:	b948      	cbnz	r0, 800998a <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 8009976:	2305      	movs	r3, #5
 8009978:	7623      	strb	r3, [r4, #24]
 800997a:	e7f3      	b.n	8009964 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800997c:	4620      	mov	r0, r4
 800997e:	f003 fd79 	bl	800d474 <tcp_send_fin>
      if (err == ERR_OK) {
 8009982:	b910      	cbnz	r0, 800998a <tcp_close_shutdown_fin+0x5a>
        pcb->state = LAST_ACK;
 8009984:	2309      	movs	r3, #9
 8009986:	7623      	strb	r3, [r4, #24]
 8009988:	e7ec      	b.n	8009964 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800998a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800998e:	d1da      	bne.n	8009946 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009990:	8be3      	ldrh	r3, [r4, #30]
 8009992:	f043 0308 	orr.w	r3, r3, #8
 8009996:	83e3      	strh	r3, [r4, #30]
    return ERR_OK;
 8009998:	2000      	movs	r0, #0
 800999a:	e7d4      	b.n	8009946 <tcp_close_shutdown_fin+0x16>
 800999c:	08017acc 	.word	0x08017acc
 80099a0:	08017af4 	.word	0x08017af4
 80099a4:	08016a38 	.word	0x08016a38

080099a8 <tcp_init>:
{
 80099a8:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80099aa:	f00a fcad 	bl	8014308 <sys_rand>
 80099ae:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 80099b2:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 80099b6:	4b01      	ldr	r3, [pc, #4]	; (80099bc <tcp_init+0x14>)
 80099b8:	8018      	strh	r0, [r3, #0]
}
 80099ba:	bd08      	pop	{r3, pc}
 80099bc:	20000018 	.word	0x20000018

080099c0 <tcp_free>:
{
 80099c0:	b510      	push	{r4, lr}
 80099c2:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80099c4:	7e03      	ldrb	r3, [r0, #24]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d004      	beq.n	80099d4 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 80099ca:	4621      	mov	r1, r4
 80099cc:	2001      	movs	r0, #1
 80099ce:	f7ff f8cd 	bl	8008b6c <memp_free>
}
 80099d2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80099d4:	4b03      	ldr	r3, [pc, #12]	; (80099e4 <tcp_free+0x24>)
 80099d6:	22d4      	movs	r2, #212	; 0xd4
 80099d8:	4903      	ldr	r1, [pc, #12]	; (80099e8 <tcp_free+0x28>)
 80099da:	4804      	ldr	r0, [pc, #16]	; (80099ec <tcp_free+0x2c>)
 80099dc:	f00a fc6c 	bl	80142b8 <app_debug_rtt_raw>
 80099e0:	e7f3      	b.n	80099ca <tcp_free+0xa>
 80099e2:	bf00      	nop
 80099e4:	08017acc 	.word	0x08017acc
 80099e8:	08017b00 	.word	0x08017b00
 80099ec:	08016a38 	.word	0x08016a38

080099f0 <tcp_bind>:
{
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 80099f2:	4d31      	ldr	r5, [pc, #196]	; (8009ab8 <tcp_bind+0xc8>)
 80099f4:	2900      	cmp	r1, #0
 80099f6:	bf18      	it	ne
 80099f8:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80099fa:	b1a0      	cbz	r0, 8009a26 <tcp_bind+0x36>
 80099fc:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80099fe:	7e03      	ldrb	r3, [r0, #24]
 8009a00:	b9db      	cbnz	r3, 8009a3a <tcp_bind+0x4a>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 8009a02:	7a41      	ldrb	r1, [r0, #9]
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 8009a04:	f011 0104 	ands.w	r1, r1, #4
 8009a08:	bf0c      	ite	eq
 8009a0a:	2304      	moveq	r3, #4
 8009a0c:	2303      	movne	r3, #3
  if (port == 0) {
 8009a0e:	b1f2      	cbz	r2, 8009a4e <tcp_bind+0x5e>
 8009a10:	4f2a      	ldr	r7, [pc, #168]	; (8009abc <tcp_bind+0xcc>)
 8009a12:	eb07 0c83 	add.w	ip, r7, r3, lsl #2
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009a16:	f857 3b04 	ldr.w	r3, [r7], #4
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d131      	bne.n	8009a84 <tcp_bind+0x94>
    for (i = 0; i < max_pcb_list; i++) {
 8009a20:	4567      	cmp	r7, ip
 8009a22:	d1f8      	bne.n	8009a16 <tcp_bind+0x26>
 8009a24:	e017      	b.n	8009a56 <tcp_bind+0x66>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a26:	4b26      	ldr	r3, [pc, #152]	; (8009ac0 <tcp_bind+0xd0>)
 8009a28:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009a2c:	4925      	ldr	r1, [pc, #148]	; (8009ac4 <tcp_bind+0xd4>)
 8009a2e:	4826      	ldr	r0, [pc, #152]	; (8009ac8 <tcp_bind+0xd8>)
 8009a30:	f00a fc42 	bl	80142b8 <app_debug_rtt_raw>
 8009a34:	f06f 000f 	mvn.w	r0, #15
 8009a38:	e019      	b.n	8009a6e <tcp_bind+0x7e>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009a3a:	4b21      	ldr	r3, [pc, #132]	; (8009ac0 <tcp_bind+0xd0>)
 8009a3c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009a40:	4922      	ldr	r1, [pc, #136]	; (8009acc <tcp_bind+0xdc>)
 8009a42:	4821      	ldr	r0, [pc, #132]	; (8009ac8 <tcp_bind+0xd8>)
 8009a44:	f00a fc38 	bl	80142b8 <app_debug_rtt_raw>
 8009a48:	f06f 0005 	mvn.w	r0, #5
 8009a4c:	e00f      	b.n	8009a6e <tcp_bind+0x7e>
    port = tcp_new_port();
 8009a4e:	f7ff ff43 	bl	80098d8 <tcp_new_port>
    if (port == 0) {
 8009a52:	4602      	mov	r2, r0
 8009a54:	b300      	cbz	r0, 8009a98 <tcp_bind+0xa8>
  if (!ip_addr_isany(ipaddr)
 8009a56:	b115      	cbz	r5, 8009a5e <tcp_bind+0x6e>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <tcp_bind+0x6e>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009a5c:	6033      	str	r3, [r6, #0]
  pcb->local_port = port;
 8009a5e:	8372      	strh	r2, [r6, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009a60:	4b1b      	ldr	r3, [pc, #108]	; (8009ad0 <tcp_bind+0xe0>)
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	6132      	str	r2, [r6, #16]
 8009a66:	601e      	str	r6, [r3, #0]
 8009a68:	f004 f9e6 	bl	800de38 <tcp_timer_needed>
  return ERR_OK;
 8009a6c:	2000      	movs	r0, #0
}
 8009a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                (ip_addr_isany(&cpcb->local_ip) ||
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	b1a0      	cbz	r0, 8009a9e <tcp_bind+0xae>
 8009a74:	b1b5      	cbz	r5, 8009aa4 <tcp_bind+0xb4>
                 ip_addr_isany(ipaddr) ||
 8009a76:	682c      	ldr	r4, [r5, #0]
 8009a78:	b1bc      	cbz	r4, 8009aaa <tcp_bind+0xba>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009a7a:	42a0      	cmp	r0, r4
 8009a7c:	d018      	beq.n	8009ab0 <tcp_bind+0xc0>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d0cd      	beq.n	8009a20 <tcp_bind+0x30>
        if (cpcb->local_port == port) {
 8009a84:	8b58      	ldrh	r0, [r3, #26]
 8009a86:	4290      	cmp	r0, r2
 8009a88:	d1f9      	bne.n	8009a7e <tcp_bind+0x8e>
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8009a8a:	2900      	cmp	r1, #0
 8009a8c:	d0f0      	beq.n	8009a70 <tcp_bind+0x80>
 8009a8e:	7a58      	ldrb	r0, [r3, #9]
 8009a90:	f010 0f04 	tst.w	r0, #4
 8009a94:	d1f3      	bne.n	8009a7e <tcp_bind+0x8e>
 8009a96:	e7eb      	b.n	8009a70 <tcp_bind+0x80>
      return ERR_BUF;
 8009a98:	f06f 0001 	mvn.w	r0, #1
 8009a9c:	e7e7      	b.n	8009a6e <tcp_bind+0x7e>
              return ERR_USE;
 8009a9e:	f06f 0007 	mvn.w	r0, #7
 8009aa2:	e7e4      	b.n	8009a6e <tcp_bind+0x7e>
 8009aa4:	f06f 0007 	mvn.w	r0, #7
 8009aa8:	e7e1      	b.n	8009a6e <tcp_bind+0x7e>
 8009aaa:	f06f 0007 	mvn.w	r0, #7
 8009aae:	e7de      	b.n	8009a6e <tcp_bind+0x7e>
 8009ab0:	f06f 0007 	mvn.w	r0, #7
 8009ab4:	e7db      	b.n	8009a6e <tcp_bind+0x7e>
 8009ab6:	bf00      	nop
 8009ab8:	08019224 	.word	0x08019224
 8009abc:	08018114 	.word	0x08018114
 8009ac0:	08017acc 	.word	0x08017acc
 8009ac4:	08017b14 	.word	0x08017b14
 8009ac8:	08016a38 	.word	0x08016a38
 8009acc:	08017b2c 	.word	0x08017b2c
 8009ad0:	20004360 	.word	0x20004360

08009ad4 <tcp_update_rcv_ann_wnd>:
{
 8009ad4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	b178      	cbz	r0, 8009afa <tcp_update_rcv_ann_wnd+0x26>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009ada:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009adc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009ade:	6b22      	ldr	r2, [r4, #48]	; 0x30
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009ae0:	1948      	adds	r0, r1, r5
 8009ae2:	1a80      	subs	r0, r0, r2
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009ae4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009ae6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009aea:	bf94      	ite	ls
 8009aec:	1ac3      	subls	r3, r0, r3
 8009aee:	f5a0 7306 	subhi.w	r3, r0, #536	; 0x218
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	db09      	blt.n	8009b0a <tcp_update_rcv_ann_wnd+0x36>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009af6:	85e1      	strh	r1, [r4, #46]	; 0x2e
}
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009afa:	4b0e      	ldr	r3, [pc, #56]	; (8009b34 <tcp_update_rcv_ann_wnd+0x60>)
 8009afc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009b00:	490d      	ldr	r1, [pc, #52]	; (8009b38 <tcp_update_rcv_ann_wnd+0x64>)
 8009b02:	480e      	ldr	r0, [pc, #56]	; (8009b3c <tcp_update_rcv_ann_wnd+0x68>)
 8009b04:	f00a fbd8 	bl	80142b8 <app_debug_rtt_raw>
 8009b08:	e7e7      	b.n	8009ada <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009b0a:	1aab      	subs	r3, r5, r2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dd02      	ble.n	8009b16 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = 0;
 8009b10:	2000      	movs	r0, #0
 8009b12:	85e0      	strh	r0, [r4, #46]	; 0x2e
 8009b14:	e7f0      	b.n	8009af8 <tcp_update_rcv_ann_wnd+0x24>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009b16:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009b18:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8009b1c:	d202      	bcs.n	8009b24 <tcp_update_rcv_ann_wnd+0x50>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009b1e:	85e5      	strh	r5, [r4, #46]	; 0x2e
    return 0;
 8009b20:	2000      	movs	r0, #0
 8009b22:	e7e9      	b.n	8009af8 <tcp_update_rcv_ann_wnd+0x24>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009b24:	4b03      	ldr	r3, [pc, #12]	; (8009b34 <tcp_update_rcv_ann_wnd+0x60>)
 8009b26:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009b2a:	4905      	ldr	r1, [pc, #20]	; (8009b40 <tcp_update_rcv_ann_wnd+0x6c>)
 8009b2c:	4803      	ldr	r0, [pc, #12]	; (8009b3c <tcp_update_rcv_ann_wnd+0x68>)
 8009b2e:	f00a fbc3 	bl	80142b8 <app_debug_rtt_raw>
 8009b32:	e7f4      	b.n	8009b1e <tcp_update_rcv_ann_wnd+0x4a>
 8009b34:	08017acc 	.word	0x08017acc
 8009b38:	08017b54 	.word	0x08017b54
 8009b3c:	08016a38 	.word	0x08016a38
 8009b40:	08017b78 	.word	0x08017b78

08009b44 <tcp_recved>:
{
 8009b44:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009b46:	b1b0      	cbz	r0, 8009b76 <tcp_recved+0x32>
 8009b48:	460c      	mov	r4, r1
 8009b4a:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009b4c:	7e03      	ldrb	r3, [r0, #24]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d019      	beq.n	8009b86 <tcp_recved+0x42>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009b52:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8009b54:	1919      	adds	r1, r3, r4
 8009b56:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009b58:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8009b5c:	d81b      	bhi.n	8009b96 <tcp_recved+0x52>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009b5e:	428b      	cmp	r3, r1
 8009b60:	bf88      	it	hi
 8009b62:	f44f 6186 	movhi.w	r1, #1072	; 0x430
 8009b66:	85a9      	strh	r1, [r5, #44]	; 0x2c
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009b68:	4628      	mov	r0, r5
 8009b6a:	f7ff ffb3 	bl	8009ad4 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009b6e:	f5b0 7f86 	cmp.w	r0, #268	; 0x10c
 8009b72:	d213      	bcs.n	8009b9c <tcp_recved+0x58>
}
 8009b74:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009b76:	4b0d      	ldr	r3, [pc, #52]	; (8009bac <tcp_recved+0x68>)
 8009b78:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009b7c:	490c      	ldr	r1, [pc, #48]	; (8009bb0 <tcp_recved+0x6c>)
 8009b7e:	480d      	ldr	r0, [pc, #52]	; (8009bb4 <tcp_recved+0x70>)
 8009b80:	f00a fb9a 	bl	80142b8 <app_debug_rtt_raw>
 8009b84:	e7f6      	b.n	8009b74 <tcp_recved+0x30>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009b86:	4b09      	ldr	r3, [pc, #36]	; (8009bac <tcp_recved+0x68>)
 8009b88:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009b8c:	490a      	ldr	r1, [pc, #40]	; (8009bb8 <tcp_recved+0x74>)
 8009b8e:	4809      	ldr	r0, [pc, #36]	; (8009bb4 <tcp_recved+0x70>)
 8009b90:	f00a fb92 	bl	80142b8 <app_debug_rtt_raw>
 8009b94:	e7dd      	b.n	8009b52 <tcp_recved+0xe>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009b96:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8009b9a:	e7e4      	b.n	8009b66 <tcp_recved+0x22>
    tcp_ack_now(pcb);
 8009b9c:	8beb      	ldrh	r3, [r5, #30]
 8009b9e:	f043 0302 	orr.w	r3, r3, #2
 8009ba2:	83eb      	strh	r3, [r5, #30]
    tcp_output(pcb);
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f003 fdf1 	bl	800d78c <tcp_output>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
 8009baa:	e7e3      	b.n	8009b74 <tcp_recved+0x30>
 8009bac:	08017acc 	.word	0x08017acc
 8009bb0:	08017b94 	.word	0x08017b94
 8009bb4:	08016a38 	.word	0x08016a38
 8009bb8:	08017bac 	.word	0x08017bac

08009bbc <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8009bbc:	b150      	cbz	r0, 8009bd4 <tcp_seg_free+0x18>
{
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8009bc2:	6840      	ldr	r0, [r0, #4]
 8009bc4:	b108      	cbz	r0, 8009bca <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8009bc6:	f7ff fa83 	bl	80090d0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009bca:	4621      	mov	r1, r4
 8009bcc:	2003      	movs	r0, #3
 8009bce:	f7fe ffcd 	bl	8008b6c <memp_free>
  }
}
 8009bd2:	bd10      	pop	{r4, pc}
 8009bd4:	4770      	bx	lr

08009bd6 <tcp_segs_free>:
{
 8009bd6:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8009bd8:	4604      	mov	r4, r0
 8009bda:	b128      	cbz	r0, 8009be8 <tcp_segs_free+0x12>
    struct tcp_seg *next = seg->next;
 8009bdc:	4620      	mov	r0, r4
 8009bde:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8009be0:	f7ff ffec 	bl	8009bbc <tcp_seg_free>
  while (seg != NULL) {
 8009be4:	2c00      	cmp	r4, #0
 8009be6:	d1f9      	bne.n	8009bdc <tcp_segs_free+0x6>
}
 8009be8:	bd10      	pop	{r4, pc}
	...

08009bec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009bec:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009bee:	4605      	mov	r5, r0
 8009bf0:	b198      	cbz	r0, 8009c1a <tcp_seg_copy+0x2e>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009bf2:	2003      	movs	r0, #3
 8009bf4:	f7fe ff8a 	bl	8008b0c <memp_malloc>
  if (cseg == NULL) {
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	b160      	cbz	r0, 8009c16 <tcp_seg_copy+0x2a>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	6868      	ldr	r0, [r5, #4]
 8009c00:	68a9      	ldr	r1, [r5, #8]
 8009c02:	68ea      	ldr	r2, [r5, #12]
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	6060      	str	r0, [r4, #4]
 8009c08:	60a1      	str	r1, [r4, #8]
 8009c0a:	60e2      	str	r2, [r4, #12]
 8009c0c:	692b      	ldr	r3, [r5, #16]
 8009c0e:	6123      	str	r3, [r4, #16]
  pbuf_ref(cseg->p);
 8009c10:	6860      	ldr	r0, [r4, #4]
 8009c12:	f7ff fbc3 	bl	800939c <pbuf_ref>
  return cseg;
}
 8009c16:	4620      	mov	r0, r4
 8009c18:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009c1a:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <tcp_seg_copy+0x40>)
 8009c1c:	f240 6282 	movw	r2, #1666	; 0x682
 8009c20:	4903      	ldr	r1, [pc, #12]	; (8009c30 <tcp_seg_copy+0x44>)
 8009c22:	4804      	ldr	r0, [pc, #16]	; (8009c34 <tcp_seg_copy+0x48>)
 8009c24:	f00a fb48 	bl	80142b8 <app_debug_rtt_raw>
 8009c28:	e7e3      	b.n	8009bf2 <tcp_seg_copy+0x6>
 8009c2a:	bf00      	nop
 8009c2c:	08017acc 	.word	0x08017acc
 8009c30:	08017bd4 	.word	0x08017bd4
 8009c34:	08016a38 	.word	0x08016a38

08009c38 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009c38:	b100      	cbz	r0, 8009c3c <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8009c3a:	6141      	str	r1, [r0, #20]
  }
}
 8009c3c:	4770      	bx	lr
	...

08009c40 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009c40:	b180      	cbz	r0, 8009c64 <tcp_recv+0x24>
{
 8009c42:	b538      	push	{r3, r4, r5, lr}
 8009c44:	460c      	mov	r4, r1
 8009c46:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009c48:	7e03      	ldrb	r3, [r0, #24]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d002      	beq.n	8009c54 <tcp_recv+0x14>
    pcb->recv = recv;
 8009c4e:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
  }
}
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009c54:	4b04      	ldr	r3, [pc, #16]	; (8009c68 <tcp_recv+0x28>)
 8009c56:	f240 72df 	movw	r2, #2015	; 0x7df
 8009c5a:	4904      	ldr	r1, [pc, #16]	; (8009c6c <tcp_recv+0x2c>)
 8009c5c:	4804      	ldr	r0, [pc, #16]	; (8009c70 <tcp_recv+0x30>)
 8009c5e:	f00a fb2b 	bl	80142b8 <app_debug_rtt_raw>
 8009c62:	e7f4      	b.n	8009c4e <tcp_recv+0xe>
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	08017acc 	.word	0x08017acc
 8009c6c:	08017bf0 	.word	0x08017bf0
 8009c70:	08016a38 	.word	0x08016a38

08009c74 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009c74:	b180      	cbz	r0, 8009c98 <tcp_sent+0x24>
{
 8009c76:	b538      	push	{r3, r4, r5, lr}
 8009c78:	460c      	mov	r4, r1
 8009c7a:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009c7c:	7e03      	ldrb	r3, [r0, #24]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d002      	beq.n	8009c88 <tcp_sent+0x14>
    pcb->sent = sent;
 8009c82:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009c88:	4b04      	ldr	r3, [pc, #16]	; (8009c9c <tcp_sent+0x28>)
 8009c8a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009c8e:	4904      	ldr	r1, [pc, #16]	; (8009ca0 <tcp_sent+0x2c>)
 8009c90:	4804      	ldr	r0, [pc, #16]	; (8009ca4 <tcp_sent+0x30>)
 8009c92:	f00a fb11 	bl	80142b8 <app_debug_rtt_raw>
 8009c96:	e7f4      	b.n	8009c82 <tcp_sent+0xe>
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	08017acc 	.word	0x08017acc
 8009ca0:	08017c18 	.word	0x08017c18
 8009ca4:	08016a38 	.word	0x08016a38

08009ca8 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009ca8:	b180      	cbz	r0, 8009ccc <tcp_err+0x24>
{
 8009caa:	b538      	push	{r3, r4, r5, lr}
 8009cac:	460c      	mov	r4, r1
 8009cae:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009cb0:	7e03      	ldrb	r3, [r0, #24]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d002      	beq.n	8009cbc <tcp_err+0x14>
    pcb->errf = err;
 8009cb6:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
  }
}
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009cbc:	4b04      	ldr	r3, [pc, #16]	; (8009cd0 <tcp_err+0x28>)
 8009cbe:	f640 020d 	movw	r2, #2061	; 0x80d
 8009cc2:	4904      	ldr	r1, [pc, #16]	; (8009cd4 <tcp_err+0x2c>)
 8009cc4:	4804      	ldr	r0, [pc, #16]	; (8009cd8 <tcp_err+0x30>)
 8009cc6:	f00a faf7 	bl	80142b8 <app_debug_rtt_raw>
 8009cca:	e7f4      	b.n	8009cb6 <tcp_err+0xe>
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	08017acc 	.word	0x08017acc
 8009cd4:	08017c40 	.word	0x08017c40
 8009cd8:	08016a38 	.word	0x08016a38

08009cdc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009cdc:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009cde:	b150      	cbz	r0, 8009cf6 <tcp_poll+0x1a>
 8009ce0:	460d      	mov	r5, r1
 8009ce2:	4614      	mov	r4, r2
 8009ce4:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009ce6:	7e03      	ldrb	r3, [r0, #24]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d00c      	beq.n	8009d06 <tcp_poll+0x2a>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009cec:	f8c6 5090 	str.w	r5, [r6, #144]	; 0x90
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009cf0:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
}
 8009cf4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009cf6:	4b08      	ldr	r3, [pc, #32]	; (8009d18 <tcp_poll+0x3c>)
 8009cf8:	f640 023d 	movw	r2, #2109	; 0x83d
 8009cfc:	4907      	ldr	r1, [pc, #28]	; (8009d1c <tcp_poll+0x40>)
 8009cfe:	4808      	ldr	r0, [pc, #32]	; (8009d20 <tcp_poll+0x44>)
 8009d00:	f00a fada 	bl	80142b8 <app_debug_rtt_raw>
 8009d04:	e7f6      	b.n	8009cf4 <tcp_poll+0x18>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009d06:	4b04      	ldr	r3, [pc, #16]	; (8009d18 <tcp_poll+0x3c>)
 8009d08:	f640 023e 	movw	r2, #2110	; 0x83e
 8009d0c:	4905      	ldr	r1, [pc, #20]	; (8009d24 <tcp_poll+0x48>)
 8009d0e:	4804      	ldr	r0, [pc, #16]	; (8009d20 <tcp_poll+0x44>)
 8009d10:	f00a fad2 	bl	80142b8 <app_debug_rtt_raw>
 8009d14:	e7ea      	b.n	8009cec <tcp_poll+0x10>
 8009d16:	bf00      	nop
 8009d18:	08017acc 	.word	0x08017acc
 8009d1c:	08017c68 	.word	0x08017c68
 8009d20:	08016a38 	.word	0x08016a38
 8009d24:	08017c80 	.word	0x08017c80

08009d28 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009d28:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009d2a:	b130      	cbz	r0, 8009d3a <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <tcp_next_iss+0x24>)
 8009d2e:	6818      	ldr	r0, [r3, #0]
 8009d30:	4a07      	ldr	r2, [pc, #28]	; (8009d50 <tcp_next_iss+0x28>)
 8009d32:	6812      	ldr	r2, [r2, #0]
 8009d34:	4410      	add	r0, r2
 8009d36:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009d38:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009d3a:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <tcp_next_iss+0x2c>)
 8009d3c:	f640 02af 	movw	r2, #2223	; 0x8af
 8009d40:	4905      	ldr	r1, [pc, #20]	; (8009d58 <tcp_next_iss+0x30>)
 8009d42:	4806      	ldr	r0, [pc, #24]	; (8009d5c <tcp_next_iss+0x34>)
 8009d44:	f00a fab8 	bl	80142b8 <app_debug_rtt_raw>
 8009d48:	e7f0      	b.n	8009d2c <tcp_next_iss+0x4>
 8009d4a:	bf00      	nop
 8009d4c:	20000014 	.word	0x20000014
 8009d50:	20004358 	.word	0x20004358
 8009d54:	08017acc 	.word	0x08017acc
 8009d58:	08017ca0 	.word	0x08017ca0
 8009d5c:	08016a38 	.word	0x08016a38

08009d60 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4605      	mov	r5, r0
 8009d64:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009d66:	b162      	cbz	r2, 8009d82 <tcp_eff_send_mss_netif+0x22>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009d68:	b14c      	cbz	r4, 8009d7e <tcp_eff_send_mss_netif+0x1e>
      return sendmss;
    }
    mtu = outif->mtu;
 8009d6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009d6c:	b13b      	cbz	r3, 8009d7e <tcp_eff_send_mss_netif+0x1e>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009d6e:	2b28      	cmp	r3, #40	; 0x28
 8009d70:	bf86      	itte	hi
 8009d72:	3b28      	subhi	r3, #40	; 0x28
 8009d74:	b29b      	uxthhi	r3, r3
 8009d76:	2300      	movls	r3, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009d78:	429d      	cmp	r5, r3
 8009d7a:	bf28      	it	cs
 8009d7c:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 8009d7e:	4628      	mov	r0, r5
 8009d80:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009d82:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <tcp_eff_send_mss_netif+0x34>)
 8009d84:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009d88:	4903      	ldr	r1, [pc, #12]	; (8009d98 <tcp_eff_send_mss_netif+0x38>)
 8009d8a:	4804      	ldr	r0, [pc, #16]	; (8009d9c <tcp_eff_send_mss_netif+0x3c>)
 8009d8c:	f00a fa94 	bl	80142b8 <app_debug_rtt_raw>
 8009d90:	e7ea      	b.n	8009d68 <tcp_eff_send_mss_netif+0x8>
 8009d92:	bf00      	nop
 8009d94:	08017acc 	.word	0x08017acc
 8009d98:	08017cbc 	.word	0x08017cbc
 8009d9c:	08016a38 	.word	0x08016a38

08009da0 <tcp_connect>:
{
 8009da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d02a      	beq.n	8009dfe <tcp_connect+0x5e>
 8009da8:	4689      	mov	r9, r1
 8009daa:	4617      	mov	r7, r2
 8009dac:	469a      	mov	sl, r3
 8009dae:	4604      	mov	r4, r0
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009db0:	2900      	cmp	r1, #0
 8009db2:	d02e      	beq.n	8009e12 <tcp_connect+0x72>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8009db4:	7e03      	ldrb	r3, [r0, #24]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d135      	bne.n	8009e26 <tcp_connect+0x86>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8009dba:	680b      	ldr	r3, [r1, #0]
 8009dbc:	6043      	str	r3, [r0, #4]
  pcb->remote_port = port;
 8009dbe:	8382      	strh	r2, [r0, #28]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8009dc0:	7a00      	ldrb	r0, [r0, #8]
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d039      	beq.n	8009e3a <tcp_connect+0x9a>
    netif = netif_get_by_index(pcb->netif_idx);
 8009dc6:	f7ff f8a3 	bl	8008f10 <netif_get_by_index>
 8009dca:	4680      	mov	r8, r0
  if (netif == NULL) {
 8009dcc:	f1b8 0f00 	cmp.w	r8, #0
 8009dd0:	f000 80b0 	beq.w	8009f34 <tcp_connect+0x194>
  if (ip_addr_isany(&pcb->local_ip)) {
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	b913      	cbnz	r3, 8009dde <tcp_connect+0x3e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009dd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ddc:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8009dde:	8b66      	ldrh	r6, [r4, #26]
  if (pcb->local_port == 0) {
 8009de0:	2e00      	cmp	r6, #0
 8009de2:	d02f      	beq.n	8009e44 <tcp_connect+0xa4>
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
 8009de4:	7a63      	ldrb	r3, [r4, #9]
 8009de6:	f013 0f04 	tst.w	r3, #4
 8009dea:	d030      	beq.n	8009e4e <tcp_connect+0xae>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009dec:	4b54      	ldr	r3, [pc, #336]	; (8009f40 <tcp_connect+0x1a0>)
 8009dee:	681d      	ldr	r5, [r3, #0]
 8009df0:	2d00      	cmp	r5, #0
 8009df2:	d163      	bne.n	8009ebc <tcp_connect+0x11c>
 8009df4:	4b53      	ldr	r3, [pc, #332]	; (8009f44 <tcp_connect+0x1a4>)
 8009df6:	681d      	ldr	r5, [r3, #0]
 8009df8:	2d00      	cmp	r5, #0
 8009dfa:	d174      	bne.n	8009ee6 <tcp_connect+0x146>
 8009dfc:	e027      	b.n	8009e4e <tcp_connect+0xae>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8009dfe:	4b52      	ldr	r3, [pc, #328]	; (8009f48 <tcp_connect+0x1a8>)
 8009e00:	f240 4235 	movw	r2, #1077	; 0x435
 8009e04:	4951      	ldr	r1, [pc, #324]	; (8009f4c <tcp_connect+0x1ac>)
 8009e06:	4852      	ldr	r0, [pc, #328]	; (8009f50 <tcp_connect+0x1b0>)
 8009e08:	f00a fa56 	bl	80142b8 <app_debug_rtt_raw>
 8009e0c:	f06f 050f 	mvn.w	r5, #15
 8009e10:	e08d      	b.n	8009f2e <tcp_connect+0x18e>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009e12:	4b4d      	ldr	r3, [pc, #308]	; (8009f48 <tcp_connect+0x1a8>)
 8009e14:	f240 4236 	movw	r2, #1078	; 0x436
 8009e18:	494e      	ldr	r1, [pc, #312]	; (8009f54 <tcp_connect+0x1b4>)
 8009e1a:	484d      	ldr	r0, [pc, #308]	; (8009f50 <tcp_connect+0x1b0>)
 8009e1c:	f00a fa4c 	bl	80142b8 <app_debug_rtt_raw>
 8009e20:	f06f 050f 	mvn.w	r5, #15
 8009e24:	e083      	b.n	8009f2e <tcp_connect+0x18e>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8009e26:	4b48      	ldr	r3, [pc, #288]	; (8009f48 <tcp_connect+0x1a8>)
 8009e28:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8009e2c:	494a      	ldr	r1, [pc, #296]	; (8009f58 <tcp_connect+0x1b8>)
 8009e2e:	4848      	ldr	r0, [pc, #288]	; (8009f50 <tcp_connect+0x1b0>)
 8009e30:	f00a fa42 	bl	80142b8 <app_debug_rtt_raw>
 8009e34:	f06f 0509 	mvn.w	r5, #9
 8009e38:	e079      	b.n	8009f2e <tcp_connect+0x18e>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009e3a:	1d20      	adds	r0, r4, #4
 8009e3c:	f004 fd76 	bl	800e92c <ip4_route>
 8009e40:	4680      	mov	r8, r0
 8009e42:	e7c3      	b.n	8009dcc <tcp_connect+0x2c>
    pcb->local_port = tcp_new_port();
 8009e44:	f7ff fd48 	bl	80098d8 <tcp_new_port>
 8009e48:	8360      	strh	r0, [r4, #26]
    if (pcb->local_port == 0) {
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d075      	beq.n	8009f3a <tcp_connect+0x19a>
  iss = tcp_next_iss(pcb);
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f7ff ff6a 	bl	8009d28 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 8009e54:	2200      	movs	r2, #0
 8009e56:	62a2      	str	r2, [r4, #40]	; 0x28
  pcb->snd_nxt = iss;
 8009e58:	6560      	str	r0, [r4, #84]	; 0x54
  pcb->lastack = iss - 1;
 8009e5a:	3801      	subs	r0, #1
 8009e5c:	64a0      	str	r0, [r4, #72]	; 0x48
  pcb->snd_wl2 = iss - 1;
 8009e5e:	65e0      	str	r0, [r4, #92]	; 0x5c
  pcb->snd_lbb = iss - 1;
 8009e60:	6620      	str	r0, [r4, #96]	; 0x60
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009e62:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8009e66:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8009e68:	85a3      	strh	r3, [r4, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009e6a:	6322      	str	r2, [r4, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
 8009e6c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->mss = INITIAL_MSS;
 8009e70:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009e74:	86e0      	strh	r0, [r4, #54]	; 0x36
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8009e76:	1d22      	adds	r2, r4, #4
 8009e78:	4641      	mov	r1, r8
 8009e7a:	f7ff ff71 	bl	8009d60 <tcp_eff_send_mss_netif>
 8009e7e:	86e0      	strh	r0, [r4, #54]	; 0x36
  pcb->cwnd = 1;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  pcb->connected = connected;
 8009e86:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8009e8a:	2102      	movs	r1, #2
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f003 fa47 	bl	800d320 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8009e92:	4605      	mov	r5, r0
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d14a      	bne.n	8009f2e <tcp_connect+0x18e>
    pcb->state = SYN_SENT;
 8009e98:	2302      	movs	r3, #2
 8009e9a:	7623      	strb	r3, [r4, #24]
    if (old_local_port != 0) {
 8009e9c:	2e00      	cmp	r6, #0
 8009e9e:	d03a      	beq.n	8009f16 <tcp_connect+0x176>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009ea0:	4b2e      	ldr	r3, [pc, #184]	; (8009f5c <tcp_connect+0x1bc>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	d030      	beq.n	8009f0a <tcp_connect+0x16a>
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d034      	beq.n	8009f16 <tcp_connect+0x176>
 8009eac:	691a      	ldr	r2, [r3, #16]
 8009eae:	42a2      	cmp	r2, r4
 8009eb0:	d02f      	beq.n	8009f12 <tcp_connect+0x172>
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	e7f8      	b.n	8009ea8 <tcp_connect+0x108>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009eb6:	692d      	ldr	r5, [r5, #16]
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	d09b      	beq.n	8009df4 <tcp_connect+0x54>
          if ((cpcb->local_port == pcb->local_port) &&
 8009ebc:	8b6b      	ldrh	r3, [r5, #26]
 8009ebe:	42b3      	cmp	r3, r6
 8009ec0:	d1f9      	bne.n	8009eb6 <tcp_connect+0x116>
 8009ec2:	8bab      	ldrh	r3, [r5, #28]
 8009ec4:	42bb      	cmp	r3, r7
 8009ec6:	d1f6      	bne.n	8009eb6 <tcp_connect+0x116>
              (cpcb->remote_port == port) &&
 8009ec8:	682a      	ldr	r2, [r5, #0]
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d1f2      	bne.n	8009eb6 <tcp_connect+0x116>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
 8009ed0:	686a      	ldr	r2, [r5, #4]
 8009ed2:	f8d9 3000 	ldr.w	r3, [r9]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d1ed      	bne.n	8009eb6 <tcp_connect+0x116>
            return ERR_USE;
 8009eda:	f06f 0507 	mvn.w	r5, #7
 8009ede:	e026      	b.n	8009f2e <tcp_connect+0x18e>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009ee0:	692d      	ldr	r5, [r5, #16]
 8009ee2:	2d00      	cmp	r5, #0
 8009ee4:	d0b3      	beq.n	8009e4e <tcp_connect+0xae>
          if ((cpcb->local_port == pcb->local_port) &&
 8009ee6:	8b6b      	ldrh	r3, [r5, #26]
 8009ee8:	42b3      	cmp	r3, r6
 8009eea:	d1f9      	bne.n	8009ee0 <tcp_connect+0x140>
 8009eec:	8bab      	ldrh	r3, [r5, #28]
 8009eee:	42bb      	cmp	r3, r7
 8009ef0:	d1f6      	bne.n	8009ee0 <tcp_connect+0x140>
              (cpcb->remote_port == port) &&
 8009ef2:	682a      	ldr	r2, [r5, #0]
 8009ef4:	6823      	ldr	r3, [r4, #0]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d1f2      	bne.n	8009ee0 <tcp_connect+0x140>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
 8009efa:	686a      	ldr	r2, [r5, #4]
 8009efc:	f8d9 3000 	ldr.w	r3, [r9]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d1ed      	bne.n	8009ee0 <tcp_connect+0x140>
            return ERR_USE;
 8009f04:	f06f 0507 	mvn.w	r5, #7
 8009f08:	e011      	b.n	8009f2e <tcp_connect+0x18e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009f0a:	6922      	ldr	r2, [r4, #16]
 8009f0c:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <tcp_connect+0x1bc>)
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	e001      	b.n	8009f16 <tcp_connect+0x176>
 8009f12:	6922      	ldr	r2, [r4, #16]
 8009f14:	611a      	str	r2, [r3, #16]
    TCP_REG_ACTIVE(pcb);
 8009f16:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <tcp_connect+0x1a0>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	6122      	str	r2, [r4, #16]
 8009f1c:	601c      	str	r4, [r3, #0]
 8009f1e:	f003 ff8b 	bl	800de38 <tcp_timer_needed>
 8009f22:	4b0f      	ldr	r3, [pc, #60]	; (8009f60 <tcp_connect+0x1c0>)
 8009f24:	2201      	movs	r2, #1
 8009f26:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f003 fc2f 	bl	800d78c <tcp_output>
}
 8009f2e:	4628      	mov	r0, r5
 8009f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_RTE;
 8009f34:	f06f 0503 	mvn.w	r5, #3
 8009f38:	e7f9      	b.n	8009f2e <tcp_connect+0x18e>
      return ERR_BUF;
 8009f3a:	f06f 0501 	mvn.w	r5, #1
 8009f3e:	e7f6      	b.n	8009f2e <tcp_connect+0x18e>
 8009f40:	20004354 	.word	0x20004354
 8009f44:	20004364 	.word	0x20004364
 8009f48:	08017acc 	.word	0x08017acc
 8009f4c:	08017ce4 	.word	0x08017ce4
 8009f50:	08016a38 	.word	0x08016a38
 8009f54:	08017d00 	.word	0x08017d00
 8009f58:	08017d1c 	.word	0x08017d1c
 8009f5c:	20004360 	.word	0x20004360
 8009f60:	20004350 	.word	0x20004350

08009f64 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009f64:	b510      	push	{r4, lr}
 8009f66:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8009f68:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8009f6a:	b118      	cbz	r0, 8009f74 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 8009f6c:	f7ff fe33 	bl	8009bd6 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009f70:	2300      	movs	r3, #0
 8009f72:	67a3      	str	r3, [r4, #120]	; 0x78
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009f74:	bd10      	pop	{r4, pc}
	...

08009f78 <tcp_pcb_purge>:
{
 8009f78:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009f7a:	b1f8      	cbz	r0, 8009fbc <tcp_pcb_purge+0x44>
 8009f7c:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8009f7e:	7e03      	ldrb	r3, [r0, #24]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d91a      	bls.n	8009fba <tcp_pcb_purge+0x42>
 8009f84:	2b0a      	cmp	r3, #10
 8009f86:	d018      	beq.n	8009fba <tcp_pcb_purge+0x42>
    if (pcb->refused_data != NULL) {
 8009f88:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8009f8a:	b118      	cbz	r0, 8009f94 <tcp_pcb_purge+0x1c>
      pbuf_free(pcb->refused_data);
 8009f8c:	f7ff f8a0 	bl	80090d0 <pbuf_free>
      pcb->refused_data = NULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (pcb->ooseq != NULL) {
 8009f94:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009f96:	b113      	cbz	r3, 8009f9e <tcp_pcb_purge+0x26>
      tcp_free_ooseq(pcb);
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7ff ffe3 	bl	8009f64 <tcp_free_ooseq>
    pcb->rtime = -1;
 8009f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fa2:	86a3      	strh	r3, [r4, #52]	; 0x34
    tcp_segs_free(pcb->unsent);
 8009fa4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009fa6:	f7ff fe16 	bl	8009bd6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009faa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009fac:	f7ff fe13 	bl	8009bd6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	6723      	str	r3, [r4, #112]	; 0x70
 8009fb4:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->unsent_oversize = 0;
 8009fb6:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
}
 8009fba:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009fbc:	4b03      	ldr	r3, [pc, #12]	; (8009fcc <tcp_pcb_purge+0x54>)
 8009fbe:	f640 0251 	movw	r2, #2129	; 0x851
 8009fc2:	4903      	ldr	r1, [pc, #12]	; (8009fd0 <tcp_pcb_purge+0x58>)
 8009fc4:	4803      	ldr	r0, [pc, #12]	; (8009fd4 <tcp_pcb_purge+0x5c>)
 8009fc6:	f00a f977 	bl	80142b8 <app_debug_rtt_raw>
 8009fca:	e7f6      	b.n	8009fba <tcp_pcb_purge+0x42>
 8009fcc:	08017acc 	.word	0x08017acc
 8009fd0:	08017d4c 	.word	0x08017d4c
 8009fd4:	08016a38 	.word	0x08016a38

08009fd8 <tcp_pcb_remove>:
{
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009fdc:	460c      	mov	r4, r1
 8009fde:	b149      	cbz	r1, 8009ff4 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009fe0:	b185      	cbz	r5, 800a004 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 8009fe2:	682b      	ldr	r3, [r5, #0]
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	d015      	beq.n	800a014 <tcp_pcb_remove+0x3c>
 8009fe8:	b1cb      	cbz	r3, 800a01e <tcp_pcb_remove+0x46>
 8009fea:	691a      	ldr	r2, [r3, #16]
 8009fec:	42a2      	cmp	r2, r4
 8009fee:	d014      	beq.n	800a01a <tcp_pcb_remove+0x42>
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	e7f9      	b.n	8009fe8 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009ff4:	4b25      	ldr	r3, [pc, #148]	; (800a08c <tcp_pcb_remove+0xb4>)
 8009ff6:	f640 0283 	movw	r2, #2179	; 0x883
 8009ffa:	4925      	ldr	r1, [pc, #148]	; (800a090 <tcp_pcb_remove+0xb8>)
 8009ffc:	4825      	ldr	r0, [pc, #148]	; (800a094 <tcp_pcb_remove+0xbc>)
 8009ffe:	f00a f95b 	bl	80142b8 <app_debug_rtt_raw>
 800a002:	e7ed      	b.n	8009fe0 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a004:	4b21      	ldr	r3, [pc, #132]	; (800a08c <tcp_pcb_remove+0xb4>)
 800a006:	f640 0284 	movw	r2, #2180	; 0x884
 800a00a:	4923      	ldr	r1, [pc, #140]	; (800a098 <tcp_pcb_remove+0xc0>)
 800a00c:	4821      	ldr	r0, [pc, #132]	; (800a094 <tcp_pcb_remove+0xbc>)
 800a00e:	f00a f953 	bl	80142b8 <app_debug_rtt_raw>
 800a012:	e7e6      	b.n	8009fe2 <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 800a014:	6923      	ldr	r3, [r4, #16]
 800a016:	602b      	str	r3, [r5, #0]
 800a018:	e001      	b.n	800a01e <tcp_pcb_remove+0x46>
 800a01a:	6922      	ldr	r2, [r4, #16]
 800a01c:	611a      	str	r2, [r3, #16]
 800a01e:	2300      	movs	r3, #0
 800a020:	6123      	str	r3, [r4, #16]
  tcp_pcb_purge(pcb);
 800a022:	4620      	mov	r0, r4
 800a024:	f7ff ffa8 	bl	8009f78 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800a028:	7e23      	ldrb	r3, [r4, #24]
 800a02a:	2b0a      	cmp	r3, #10
 800a02c:	d005      	beq.n	800a03a <tcp_pcb_remove+0x62>
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d01e      	beq.n	800a070 <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 800a032:	8be3      	ldrh	r3, [r4, #30]
      (pcb->state != LISTEN) &&
 800a034:	f013 0f01 	tst.w	r3, #1
 800a038:	d11e      	bne.n	800a078 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a03a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a03c:	b133      	cbz	r3, 800a04c <tcp_pcb_remove+0x74>
 800a03e:	4b13      	ldr	r3, [pc, #76]	; (800a08c <tcp_pcb_remove+0xb4>)
 800a040:	f640 0293 	movw	r2, #2195	; 0x893
 800a044:	4915      	ldr	r1, [pc, #84]	; (800a09c <tcp_pcb_remove+0xc4>)
 800a046:	4813      	ldr	r0, [pc, #76]	; (800a094 <tcp_pcb_remove+0xbc>)
 800a048:	f00a f936 	bl	80142b8 <app_debug_rtt_raw>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a04c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a04e:	b133      	cbz	r3, 800a05e <tcp_pcb_remove+0x86>
 800a050:	4b0e      	ldr	r3, [pc, #56]	; (800a08c <tcp_pcb_remove+0xb4>)
 800a052:	f640 0294 	movw	r2, #2196	; 0x894
 800a056:	4912      	ldr	r1, [pc, #72]	; (800a0a0 <tcp_pcb_remove+0xc8>)
 800a058:	480e      	ldr	r0, [pc, #56]	; (800a094 <tcp_pcb_remove+0xbc>)
 800a05a:	f00a f92d 	bl	80142b8 <app_debug_rtt_raw>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a05e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a060:	b133      	cbz	r3, 800a070 <tcp_pcb_remove+0x98>
 800a062:	4b0a      	ldr	r3, [pc, #40]	; (800a08c <tcp_pcb_remove+0xb4>)
 800a064:	f640 0296 	movw	r2, #2198	; 0x896
 800a068:	490e      	ldr	r1, [pc, #56]	; (800a0a4 <tcp_pcb_remove+0xcc>)
 800a06a:	480a      	ldr	r0, [pc, #40]	; (800a094 <tcp_pcb_remove+0xbc>)
 800a06c:	f00a f924 	bl	80142b8 <app_debug_rtt_raw>
  pcb->state = CLOSED;
 800a070:	2300      	movs	r3, #0
 800a072:	7623      	strb	r3, [r4, #24]
  pcb->local_port = 0;
 800a074:	8363      	strh	r3, [r4, #26]
}
 800a076:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 800a078:	f043 0302 	orr.w	r3, r3, #2
 800a07c:	83e3      	strh	r3, [r4, #30]
    tcp_output(pcb);
 800a07e:	4620      	mov	r0, r4
 800a080:	f003 fb84 	bl	800d78c <tcp_output>
  if (pcb->state != LISTEN) {
 800a084:	7e23      	ldrb	r3, [r4, #24]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d0f2      	beq.n	800a070 <tcp_pcb_remove+0x98>
 800a08a:	e7d6      	b.n	800a03a <tcp_pcb_remove+0x62>
 800a08c:	08017acc 	.word	0x08017acc
 800a090:	08017d68 	.word	0x08017d68
 800a094:	08016a38 	.word	0x08016a38
 800a098:	08017d84 	.word	0x08017d84
 800a09c:	08017da4 	.word	0x08017da4
 800a0a0:	08017dbc 	.word	0x08017dbc
 800a0a4:	08017dd8 	.word	0x08017dd8

0800a0a8 <tcp_abandon>:
{
 800a0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ac:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a0ae:	b1f8      	cbz	r0, 800a0f0 <tcp_abandon+0x48>
 800a0b0:	460d      	mov	r5, r1
 800a0b2:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a0b4:	7e03      	ldrb	r3, [r0, #24]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d022      	beq.n	800a100 <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 800a0ba:	7e23      	ldrb	r3, [r4, #24]
 800a0bc:	2b0a      	cmp	r3, #10
 800a0be:	d027      	beq.n	800a110 <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 800a0c0:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
    ackno = pcb->rcv_nxt;
 800a0c4:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
    errf = pcb->errf;
 800a0c8:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
    errf_arg = pcb->callback_arg;
 800a0cc:	6967      	ldr	r7, [r4, #20]
    if (pcb->state == CLOSED) {
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d147      	bne.n	800a162 <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 800a0d2:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
 800a0d6:	f1ba 0f00 	cmp.w	sl, #0
 800a0da:	d04c      	beq.n	800a176 <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a0dc:	4b2d      	ldr	r3, [pc, #180]	; (800a194 <tcp_abandon+0xec>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	42a3      	cmp	r3, r4
 800a0e2:	d01d      	beq.n	800a120 <tcp_abandon+0x78>
 800a0e4:	b313      	cbz	r3, 800a12c <tcp_abandon+0x84>
 800a0e6:	691a      	ldr	r2, [r3, #16]
 800a0e8:	42a2      	cmp	r2, r4
 800a0ea:	d01d      	beq.n	800a128 <tcp_abandon+0x80>
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	e7f9      	b.n	800a0e4 <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a0f0:	4b29      	ldr	r3, [pc, #164]	; (800a198 <tcp_abandon+0xf0>)
 800a0f2:	f240 223d 	movw	r2, #573	; 0x23d
 800a0f6:	4929      	ldr	r1, [pc, #164]	; (800a19c <tcp_abandon+0xf4>)
 800a0f8:	4829      	ldr	r0, [pc, #164]	; (800a1a0 <tcp_abandon+0xf8>)
 800a0fa:	f00a f8dd 	bl	80142b8 <app_debug_rtt_raw>
 800a0fe:	e02d      	b.n	800a15c <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a100:	4b25      	ldr	r3, [pc, #148]	; (800a198 <tcp_abandon+0xf0>)
 800a102:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a106:	4927      	ldr	r1, [pc, #156]	; (800a1a4 <tcp_abandon+0xfc>)
 800a108:	4825      	ldr	r0, [pc, #148]	; (800a1a0 <tcp_abandon+0xf8>)
 800a10a:	f00a f8d5 	bl	80142b8 <app_debug_rtt_raw>
 800a10e:	e7d4      	b.n	800a0ba <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a110:	4621      	mov	r1, r4
 800a112:	4825      	ldr	r0, [pc, #148]	; (800a1a8 <tcp_abandon+0x100>)
 800a114:	f7ff ff60 	bl	8009fd8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a118:	4620      	mov	r0, r4
 800a11a:	f7ff fc51 	bl	80099c0 <tcp_free>
 800a11e:	e01d      	b.n	800a15c <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a120:	6922      	ldr	r2, [r4, #16]
 800a122:	4b1c      	ldr	r3, [pc, #112]	; (800a194 <tcp_abandon+0xec>)
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	e001      	b.n	800a12c <tcp_abandon+0x84>
 800a128:	6922      	ldr	r2, [r4, #16]
 800a12a:	611a      	str	r2, [r3, #16]
 800a12c:	2500      	movs	r5, #0
 800a12e:	6125      	str	r5, [r4, #16]
    u16_t local_port = 0;
 800a130:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 800a132:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a134:	b108      	cbz	r0, 800a13a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 800a136:	f7ff fd4e 	bl	8009bd6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800a13a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a13c:	b108      	cbz	r0, 800a142 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 800a13e:	f7ff fd4a 	bl	8009bd6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800a142:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a144:	b108      	cbz	r0, 800a14a <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 800a146:	f7ff fd46 	bl	8009bd6 <tcp_segs_free>
    if (send_rst) {
 800a14a:	b9b5      	cbnz	r5, 800a17a <tcp_abandon+0xd2>
    tcp_free(pcb);
 800a14c:	4620      	mov	r0, r4
 800a14e:	f7ff fc37 	bl	80099c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a152:	b11e      	cbz	r6, 800a15c <tcp_abandon+0xb4>
 800a154:	f06f 010c 	mvn.w	r1, #12
 800a158:	4638      	mov	r0, r7
 800a15a:	47b0      	blx	r6
}
 800a15c:	b004      	add	sp, #16
 800a15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 800a162:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a166:	4621      	mov	r1, r4
 800a168:	4810      	ldr	r0, [pc, #64]	; (800a1ac <tcp_abandon+0x104>)
 800a16a:	f7ff ff35 	bl	8009fd8 <tcp_pcb_remove>
 800a16e:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <tcp_abandon+0x108>)
 800a170:	2201      	movs	r2, #1
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	e7dd      	b.n	800a132 <tcp_abandon+0x8a>
    int send_rst = 0;
 800a176:	2500      	movs	r5, #0
 800a178:	e7db      	b.n	800a132 <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a17a:	8ba3      	ldrh	r3, [r4, #28]
 800a17c:	9302      	str	r3, [sp, #8]
 800a17e:	f8cd a004 	str.w	sl, [sp, #4]
 800a182:	1d23      	adds	r3, r4, #4
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	4623      	mov	r3, r4
 800a188:	464a      	mov	r2, r9
 800a18a:	4641      	mov	r1, r8
 800a18c:	4620      	mov	r0, r4
 800a18e:	f003 fa7b 	bl	800d688 <tcp_rst>
 800a192:	e7db      	b.n	800a14c <tcp_abandon+0xa4>
 800a194:	20004360 	.word	0x20004360
 800a198:	08017acc 	.word	0x08017acc
 800a19c:	08017df0 	.word	0x08017df0
 800a1a0:	08016a38 	.word	0x08016a38
 800a1a4:	08017e0c 	.word	0x08017e0c
 800a1a8:	20004364 	.word	0x20004364
 800a1ac:	20004354 	.word	0x20004354
 800a1b0:	20004350 	.word	0x20004350

0800a1b4 <tcp_abort>:
{
 800a1b4:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	f7ff ff76 	bl	800a0a8 <tcp_abandon>
}
 800a1bc:	bd08      	pop	{r3, pc}
	...

0800a1c0 <tcp_netif_ip_addr_changed_pcblist>:
{
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	b108      	cbz	r0, 800a1cc <tcp_netif_ip_addr_changed_pcblist+0xc>
  while (pcb != NULL) {
 800a1c8:	b97c      	cbnz	r4, 800a1ea <tcp_netif_ip_addr_changed_pcblist+0x2a>
}
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	; (800a1f8 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800a1ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a1d2:	490a      	ldr	r1, [pc, #40]	; (800a1fc <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800a1d4:	480a      	ldr	r0, [pc, #40]	; (800a200 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 800a1d6:	f00a f86f 	bl	80142b8 <app_debug_rtt_raw>
 800a1da:	e7f5      	b.n	800a1c8 <tcp_netif_ip_addr_changed_pcblist+0x8>
      struct tcp_pcb *next = pcb->next;
 800a1dc:	6926      	ldr	r6, [r4, #16]
      tcp_abort(pcb);
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f7ff ffe8 	bl	800a1b4 <tcp_abort>
      pcb = next;
 800a1e4:	4634      	mov	r4, r6
  while (pcb != NULL) {
 800a1e6:	2c00      	cmp	r4, #0
 800a1e8:	d0ef      	beq.n	800a1ca <tcp_netif_ip_addr_changed_pcblist+0xa>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a1ea:	6822      	ldr	r2, [r4, #0]
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d0f4      	beq.n	800a1dc <tcp_netif_ip_addr_changed_pcblist+0x1c>
      pcb = pcb->next;
 800a1f2:	6924      	ldr	r4, [r4, #16]
 800a1f4:	e7f7      	b.n	800a1e6 <tcp_netif_ip_addr_changed_pcblist+0x26>
 800a1f6:	bf00      	nop
 800a1f8:	08017acc 	.word	0x08017acc
 800a1fc:	08017e40 	.word	0x08017e40
 800a200:	08016a38 	.word	0x08016a38

0800a204 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800a204:	b308      	cbz	r0, 800a24a <tcp_netif_ip_addr_changed+0x46>
{
 800a206:	b538      	push	{r3, r4, r5, lr}
 800a208:	460d      	mov	r5, r1
 800a20a:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 800a20c:	6803      	ldr	r3, [r0, #0]
 800a20e:	b903      	cbnz	r3, 800a212 <tcp_netif_ip_addr_changed+0xe>
}
 800a210:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a212:	4b0e      	ldr	r3, [pc, #56]	; (800a24c <tcp_netif_ip_addr_changed+0x48>)
 800a214:	6819      	ldr	r1, [r3, #0]
 800a216:	f7ff ffd3 	bl	800a1c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a21a:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <tcp_netif_ip_addr_changed+0x4c>)
 800a21c:	6819      	ldr	r1, [r3, #0]
 800a21e:	4620      	mov	r0, r4
 800a220:	f7ff ffce 	bl	800a1c0 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800a224:	2d00      	cmp	r5, #0
 800a226:	d0f3      	beq.n	800a210 <tcp_netif_ip_addr_changed+0xc>
 800a228:	682b      	ldr	r3, [r5, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f0      	beq.n	800a210 <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <tcp_netif_ip_addr_changed+0x50>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0ec      	beq.n	800a210 <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a236:	6819      	ldr	r1, [r3, #0]
 800a238:	6822      	ldr	r2, [r4, #0]
 800a23a:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a23c:	bf04      	itt	eq
 800a23e:	682a      	ldreq	r2, [r5, #0]
 800a240:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1f6      	bne.n	800a236 <tcp_netif_ip_addr_changed+0x32>
 800a248:	e7e2      	b.n	800a210 <tcp_netif_ip_addr_changed+0xc>
 800a24a:	4770      	bx	lr
 800a24c:	20004354 	.word	0x20004354
 800a250:	20004360 	.word	0x20004360
 800a254:	2000435c 	.word	0x2000435c

0800a258 <tcp_kill_state>:
{
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a25c:	f1a0 0308 	sub.w	r3, r0, #8
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b01      	cmp	r3, #1
 800a264:	d807      	bhi.n	800a276 <tcp_kill_state+0x1e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a266:	4b10      	ldr	r3, [pc, #64]	; (800a2a8 <tcp_kill_state+0x50>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	b1e3      	cbz	r3, 800a2a6 <tcp_kill_state+0x4e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a26c:	4a0f      	ldr	r2, [pc, #60]	; (800a2ac <tcp_kill_state+0x54>)
 800a26e:	6815      	ldr	r5, [r2, #0]
  inactivity = 0;
 800a270:	2100      	movs	r1, #0
  inactive = NULL;
 800a272:	4608      	mov	r0, r1
 800a274:	e009      	b.n	800a28a <tcp_kill_state+0x32>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a276:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <tcp_kill_state+0x58>)
 800a278:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a27c:	490d      	ldr	r1, [pc, #52]	; (800a2b4 <tcp_kill_state+0x5c>)
 800a27e:	480e      	ldr	r0, [pc, #56]	; (800a2b8 <tcp_kill_state+0x60>)
 800a280:	f00a f81a 	bl	80142b8 <app_debug_rtt_raw>
 800a284:	e7ef      	b.n	800a266 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	b14b      	cbz	r3, 800a29e <tcp_kill_state+0x46>
    if (pcb->state == state) {
 800a28a:	7e1a      	ldrb	r2, [r3, #24]
 800a28c:	42a2      	cmp	r2, r4
 800a28e:	d1fa      	bne.n	800a286 <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a292:	1aaa      	subs	r2, r5, r2
 800a294:	428a      	cmp	r2, r1
        inactivity = tcp_ticks - pcb->tmr;
 800a296:	bf24      	itt	cs
 800a298:	4611      	movcs	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a29a:	4618      	movcs	r0, r3
 800a29c:	e7f3      	b.n	800a286 <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 800a29e:	b110      	cbz	r0, 800a2a6 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	f7ff ff01 	bl	800a0a8 <tcp_abandon>
}
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	20004354 	.word	0x20004354
 800a2ac:	20004358 	.word	0x20004358
 800a2b0:	08017acc 	.word	0x08017acc
 800a2b4:	08017e74 	.word	0x08017e74
 800a2b8:	08016a38 	.word	0x08016a38

0800a2bc <tcp_alloc>:
{
 800a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2be:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	f7fe fc23 	bl	8008b0c <memp_malloc>
  if (pcb == NULL) {
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	b3a0      	cbz	r0, 800a334 <tcp_alloc+0x78>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a2ca:	22a8      	movs	r2, #168	; 0xa8
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f00a f886 	bl	80143e0 <memset>
    pcb->prio = prio;
 800a2d4:	7666      	strb	r6, [r4, #25]
    pcb->snd_buf = TCP_SND_BUF;
 800a2d6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800a2da:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a2de:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800a2e0:	85a3      	strh	r3, [r4, #44]	; 0x2c
    pcb->ttl = TCP_TTL;
 800a2e2:	22ff      	movs	r2, #255	; 0xff
 800a2e4:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 800a2e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a2ea:	86e2      	strh	r2, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a2ec:	2203      	movs	r2, #3
 800a2ee:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a2f2:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    pcb->rtime = -1;
 800a2f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2fa:	86a2      	strh	r2, [r4, #52]	; 0x34
    pcb->cwnd = 1;
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
    pcb->tmr = tcp_ticks;
 800a302:	4a40      	ldr	r2, [pc, #256]	; (800a404 <tcp_alloc+0x148>)
 800a304:	6812      	ldr	r2, [r2, #0]
 800a306:	6262      	str	r2, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
 800a308:	4a3f      	ldr	r2, [pc, #252]	; (800a408 <tcp_alloc+0x14c>)
 800a30a:	7812      	ldrb	r2, [r2, #0]
 800a30c:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
    pcb->ssthresh = TCP_SND_BUF;
 800a310:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    pcb->recv = tcp_recv_null;
 800a314:	4b3d      	ldr	r3, [pc, #244]	; (800a40c <tcp_alloc+0x150>)
 800a316:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a31a:	f242 7310 	movw	r3, #10000	; 0x2710
 800a31e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 800a322:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a326:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 800a32a:	2309      	movs	r3, #9
 800a32c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
}
 800a330:	4620      	mov	r0, r4
 800a332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a334:	4b36      	ldr	r3, [pc, #216]	; (800a410 <tcp_alloc+0x154>)
 800a336:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 800a338:	2d00      	cmp	r5, #0
 800a33a:	d137      	bne.n	800a3ac <tcp_alloc+0xf0>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a33c:	4b35      	ldr	r3, [pc, #212]	; (800a414 <tcp_alloc+0x158>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	b17b      	cbz	r3, 800a362 <tcp_alloc+0xa6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a342:	4a30      	ldr	r2, [pc, #192]	; (800a404 <tcp_alloc+0x148>)
 800a344:	6810      	ldr	r0, [r2, #0]
  inactivity = 0;
 800a346:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a34a:	1a82      	subs	r2, r0, r2
 800a34c:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800a34e:	bf24      	itt	cs
 800a350:	4611      	movcs	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a352:	461c      	movcs	r4, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1f6      	bne.n	800a348 <tcp_alloc+0x8c>
  if (inactive != NULL) {
 800a35a:	b114      	cbz	r4, 800a362 <tcp_alloc+0xa6>
    tcp_abort(inactive);
 800a35c:	4620      	mov	r0, r4
 800a35e:	f7ff ff29 	bl	800a1b4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a362:	2001      	movs	r0, #1
 800a364:	f7fe fbd2 	bl	8008b0c <memp_malloc>
    if (pcb == NULL) {
 800a368:	4604      	mov	r4, r0
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d1ad      	bne.n	800a2ca <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800a36e:	2009      	movs	r0, #9
 800a370:	f7ff ff72 	bl	800a258 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a374:	2001      	movs	r0, #1
 800a376:	f7fe fbc9 	bl	8008b0c <memp_malloc>
      if (pcb == NULL) {
 800a37a:	4604      	mov	r4, r0
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d1a4      	bne.n	800a2ca <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 800a380:	2008      	movs	r0, #8
 800a382:	f7ff ff69 	bl	800a258 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a386:	2001      	movs	r0, #1
 800a388:	f7fe fbc0 	bl	8008b0c <memp_malloc>
        if (pcb == NULL) {
 800a38c:	4604      	mov	r4, r0
 800a38e:	2800      	cmp	r0, #0
 800a390:	d19b      	bne.n	800a2ca <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a392:	f016 0f80 	tst.w	r6, #128	; 0x80
 800a396:	d110      	bne.n	800a3ba <tcp_alloc+0xfe>
  if (mprio == 0) {
 800a398:	b366      	cbz	r6, 800a3f4 <tcp_alloc+0x138>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a39a:	4633      	mov	r3, r6
 800a39c:	e00e      	b.n	800a3bc <tcp_alloc+0x100>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a39e:	f023 0308 	bic.w	r3, r3, #8
 800a3a2:	83c3      	strh	r3, [r0, #30]
      tcp_close_shutdown_fin(pcb);
 800a3a4:	f7ff fac4 	bl	8009930 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800a3a8:	2d00      	cmp	r5, #0
 800a3aa:	d0c7      	beq.n	800a33c <tcp_alloc+0x80>
    struct tcp_pcb *next = pcb->next;
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	692d      	ldr	r5, [r5, #16]
    if (pcb->flags & TF_CLOSEPEND) {
 800a3b0:	8bc3      	ldrh	r3, [r0, #30]
 800a3b2:	f013 0f08 	tst.w	r3, #8
 800a3b6:	d0f7      	beq.n	800a3a8 <tcp_alloc+0xec>
 800a3b8:	e7f1      	b.n	800a39e <tcp_alloc+0xe2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a3ba:	237f      	movs	r3, #127	; 0x7f
  mprio--;
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	b2da      	uxtb	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3c0:	4b13      	ldr	r3, [pc, #76]	; (800a410 <tcp_alloc+0x154>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	b1b3      	cbz	r3, 800a3f4 <tcp_alloc+0x138>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a3c6:	490f      	ldr	r1, [pc, #60]	; (800a404 <tcp_alloc+0x148>)
 800a3c8:	680d      	ldr	r5, [r1, #0]
  inactivity = 0;
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	e005      	b.n	800a3da <tcp_alloc+0x11e>
      inactivity = tcp_ticks - pcb->tmr;
 800a3ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3d0:	1aa8      	subs	r0, r5, r2
      mprio      = pcb->prio;
 800a3d2:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800a3d4:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	b143      	cbz	r3, 800a3ec <tcp_alloc+0x130>
    if ((pcb->prio < mprio) ||
 800a3da:	7e59      	ldrb	r1, [r3, #25]
 800a3dc:	4291      	cmp	r1, r2
 800a3de:	d3f6      	bcc.n	800a3ce <tcp_alloc+0x112>
 800a3e0:	d1f9      	bne.n	800a3d6 <tcp_alloc+0x11a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a3e2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 800a3e4:	1bef      	subs	r7, r5, r7
 800a3e6:	4287      	cmp	r7, r0
 800a3e8:	d3f5      	bcc.n	800a3d6 <tcp_alloc+0x11a>
 800a3ea:	e7f0      	b.n	800a3ce <tcp_alloc+0x112>
  if (inactive != NULL) {
 800a3ec:	b114      	cbz	r4, 800a3f4 <tcp_alloc+0x138>
    tcp_abort(inactive);
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f7ff fee0 	bl	800a1b4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a3f4:	2001      	movs	r0, #1
 800a3f6:	f7fe fb89 	bl	8008b0c <memp_malloc>
  if (pcb != NULL) {
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d097      	beq.n	800a330 <tcp_alloc+0x74>
 800a400:	e763      	b.n	800a2ca <tcp_alloc+0xe>
 800a402:	bf00      	nop
 800a404:	20004358 	.word	0x20004358
 800a408:	20000f7a 	.word	0x20000f7a
 800a40c:	0800a5f1 	.word	0x0800a5f1
 800a410:	20004354 	.word	0x20004354
 800a414:	20004364 	.word	0x20004364

0800a418 <tcp_new_ip_type>:
{
 800a418:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800a41a:	2040      	movs	r0, #64	; 0x40
 800a41c:	f7ff ff4e 	bl	800a2bc <tcp_alloc>
}
 800a420:	bd08      	pop	{r3, pc}
	...

0800a424 <tcp_close_shutdown>:
{
 800a424:	b530      	push	{r4, r5, lr}
 800a426:	b085      	sub	sp, #20
 800a428:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a42a:	4604      	mov	r4, r0
 800a42c:	b188      	cbz	r0, 800a452 <tcp_close_shutdown+0x2e>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a42e:	b125      	cbz	r5, 800a43a <tcp_close_shutdown+0x16>
 800a430:	7e23      	ldrb	r3, [r4, #24]
 800a432:	2b04      	cmp	r3, #4
 800a434:	d015      	beq.n	800a462 <tcp_close_shutdown+0x3e>
 800a436:	2b07      	cmp	r3, #7
 800a438:	d013      	beq.n	800a462 <tcp_close_shutdown+0x3e>
  switch (pcb->state) {
 800a43a:	7e23      	ldrb	r3, [r4, #24]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d06e      	beq.n	800a51e <tcp_close_shutdown+0xfa>
 800a440:	2b02      	cmp	r3, #2
 800a442:	f000 8093 	beq.w	800a56c <tcp_close_shutdown+0x148>
 800a446:	2b00      	cmp	r3, #0
 800a448:	d04f      	beq.n	800a4ea <tcp_close_shutdown+0xc6>
      return tcp_close_shutdown_fin(pcb);
 800a44a:	4620      	mov	r0, r4
 800a44c:	f7ff fa70 	bl	8009930 <tcp_close_shutdown_fin>
 800a450:	e063      	b.n	800a51a <tcp_close_shutdown+0xf6>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a452:	4b4c      	ldr	r3, [pc, #304]	; (800a584 <tcp_close_shutdown+0x160>)
 800a454:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a458:	494b      	ldr	r1, [pc, #300]	; (800a588 <tcp_close_shutdown+0x164>)
 800a45a:	484c      	ldr	r0, [pc, #304]	; (800a58c <tcp_close_shutdown+0x168>)
 800a45c:	f009 ff2c 	bl	80142b8 <app_debug_rtt_raw>
 800a460:	e7e5      	b.n	800a42e <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a462:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a464:	b1e3      	cbz	r3, 800a4a0 <tcp_close_shutdown+0x7c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a466:	8be3      	ldrh	r3, [r4, #30]
 800a468:	f013 0f10 	tst.w	r3, #16
 800a46c:	d01d      	beq.n	800a4aa <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a46e:	8ba3      	ldrh	r3, [r4, #28]
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	8b63      	ldrh	r3, [r4, #26]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	1d23      	adds	r3, r4, #4
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	4623      	mov	r3, r4
 800a47c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a47e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a480:	4620      	mov	r0, r4
 800a482:	f003 f901 	bl	800d688 <tcp_rst>
      tcp_pcb_purge(pcb);
 800a486:	4620      	mov	r0, r4
 800a488:	f7ff fd76 	bl	8009f78 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a48c:	4b40      	ldr	r3, [pc, #256]	; (800a590 <tcp_close_shutdown+0x16c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	42a3      	cmp	r3, r4
 800a492:	d012      	beq.n	800a4ba <tcp_close_shutdown+0x96>
 800a494:	b1bb      	cbz	r3, 800a4c6 <tcp_close_shutdown+0xa2>
 800a496:	691a      	ldr	r2, [r3, #16]
 800a498:	42a2      	cmp	r2, r4
 800a49a:	d012      	beq.n	800a4c2 <tcp_close_shutdown+0x9e>
 800a49c:	4613      	mov	r3, r2
 800a49e:	e7f9      	b.n	800a494 <tcp_close_shutdown+0x70>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a4a0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800a4a2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a4a6:	d0c8      	beq.n	800a43a <tcp_close_shutdown+0x16>
 800a4a8:	e7dd      	b.n	800a466 <tcp_close_shutdown+0x42>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a4aa:	4b36      	ldr	r3, [pc, #216]	; (800a584 <tcp_close_shutdown+0x160>)
 800a4ac:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a4b0:	4938      	ldr	r1, [pc, #224]	; (800a594 <tcp_close_shutdown+0x170>)
 800a4b2:	4836      	ldr	r0, [pc, #216]	; (800a58c <tcp_close_shutdown+0x168>)
 800a4b4:	f009 ff00 	bl	80142b8 <app_debug_rtt_raw>
 800a4b8:	e7d9      	b.n	800a46e <tcp_close_shutdown+0x4a>
      TCP_RMV_ACTIVE(pcb);
 800a4ba:	6922      	ldr	r2, [r4, #16]
 800a4bc:	4b34      	ldr	r3, [pc, #208]	; (800a590 <tcp_close_shutdown+0x16c>)
 800a4be:	601a      	str	r2, [r3, #0]
 800a4c0:	e001      	b.n	800a4c6 <tcp_close_shutdown+0xa2>
 800a4c2:	6922      	ldr	r2, [r4, #16]
 800a4c4:	611a      	str	r2, [r3, #16]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	4b33      	ldr	r3, [pc, #204]	; (800a598 <tcp_close_shutdown+0x174>)
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800a4d0:	4b32      	ldr	r3, [pc, #200]	; (800a59c <tcp_close_shutdown+0x178>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	d004      	beq.n	800a4e2 <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f7ff fa71 	bl	80099c0 <tcp_free>
      return ERR_OK;
 800a4de:	2000      	movs	r0, #0
 800a4e0:	e01b      	b.n	800a51a <tcp_close_shutdown+0xf6>
        tcp_trigger_input_pcb_close();
 800a4e2:	f001 ffef 	bl	800c4c4 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	e017      	b.n	800a51a <tcp_close_shutdown+0xf6>
      if (pcb->local_port != 0) {
 800a4ea:	8b63      	ldrh	r3, [r4, #26]
 800a4ec:	b18b      	cbz	r3, 800a512 <tcp_close_shutdown+0xee>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a4ee:	4b2c      	ldr	r3, [pc, #176]	; (800a5a0 <tcp_close_shutdown+0x17c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	42a3      	cmp	r3, r4
 800a4f4:	d005      	beq.n	800a502 <tcp_close_shutdown+0xde>
 800a4f6:	b153      	cbz	r3, 800a50e <tcp_close_shutdown+0xea>
 800a4f8:	691a      	ldr	r2, [r3, #16]
 800a4fa:	42a2      	cmp	r2, r4
 800a4fc:	d005      	beq.n	800a50a <tcp_close_shutdown+0xe6>
 800a4fe:	4613      	mov	r3, r2
 800a500:	e7f9      	b.n	800a4f6 <tcp_close_shutdown+0xd2>
 800a502:	6922      	ldr	r2, [r4, #16]
 800a504:	4b26      	ldr	r3, [pc, #152]	; (800a5a0 <tcp_close_shutdown+0x17c>)
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	e001      	b.n	800a50e <tcp_close_shutdown+0xea>
 800a50a:	6922      	ldr	r2, [r4, #16]
 800a50c:	611a      	str	r2, [r3, #16]
 800a50e:	2300      	movs	r3, #0
 800a510:	6123      	str	r3, [r4, #16]
      tcp_free(pcb);
 800a512:	4620      	mov	r0, r4
 800a514:	f7ff fa54 	bl	80099c0 <tcp_free>
  return ERR_OK;
 800a518:	2000      	movs	r0, #0
}
 800a51a:	b005      	add	sp, #20
 800a51c:	bd30      	pop	{r4, r5, pc}
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a51e:	4d21      	ldr	r5, [pc, #132]	; (800a5a4 <tcp_close_shutdown+0x180>)
 800a520:	1d29      	adds	r1, r5, #4
 800a522:	3510      	adds	r5, #16
      pcb->listener = NULL;
 800a524:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a526:	f851 3b04 	ldr.w	r3, [r1], #4
 800a52a:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a52c:	b143      	cbz	r3, 800a540 <tcp_close_shutdown+0x11c>
    if (pcb->listener == lpcb) {
 800a52e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a532:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800a534:	bf08      	it	eq
 800a536:	f8c3 0080 	streq.w	r0, [r3, #128]	; 0x80
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1f6      	bne.n	800a52e <tcp_close_shutdown+0x10a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a540:	428d      	cmp	r5, r1
 800a542:	d1f0      	bne.n	800a526 <tcp_close_shutdown+0x102>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a544:	4621      	mov	r1, r4
 800a546:	4818      	ldr	r0, [pc, #96]	; (800a5a8 <tcp_close_shutdown+0x184>)
 800a548:	f7ff fd46 	bl	8009fd8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a54c:	7e23      	ldrb	r3, [r4, #24]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d005      	beq.n	800a55e <tcp_close_shutdown+0x13a>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a552:	4621      	mov	r1, r4
 800a554:	2002      	movs	r0, #2
 800a556:	f7fe fb09 	bl	8008b6c <memp_free>
  return ERR_OK;
 800a55a:	2000      	movs	r0, #0
}
 800a55c:	e7dd      	b.n	800a51a <tcp_close_shutdown+0xf6>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a55e:	4b09      	ldr	r3, [pc, #36]	; (800a584 <tcp_close_shutdown+0x160>)
 800a560:	22df      	movs	r2, #223	; 0xdf
 800a562:	4912      	ldr	r1, [pc, #72]	; (800a5ac <tcp_close_shutdown+0x188>)
 800a564:	4809      	ldr	r0, [pc, #36]	; (800a58c <tcp_close_shutdown+0x168>)
 800a566:	f009 fea7 	bl	80142b8 <app_debug_rtt_raw>
 800a56a:	e7f2      	b.n	800a552 <tcp_close_shutdown+0x12e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a56c:	4621      	mov	r1, r4
 800a56e:	4808      	ldr	r0, [pc, #32]	; (800a590 <tcp_close_shutdown+0x16c>)
 800a570:	f7ff fd32 	bl	8009fd8 <tcp_pcb_remove>
 800a574:	4b08      	ldr	r3, [pc, #32]	; (800a598 <tcp_close_shutdown+0x174>)
 800a576:	2201      	movs	r2, #1
 800a578:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a57a:	4620      	mov	r0, r4
 800a57c:	f7ff fa20 	bl	80099c0 <tcp_free>
  return ERR_OK;
 800a580:	2000      	movs	r0, #0
      break;
 800a582:	e7ca      	b.n	800a51a <tcp_close_shutdown+0xf6>
 800a584:	08017acc 	.word	0x08017acc
 800a588:	08017e84 	.word	0x08017e84
 800a58c:	08016a38 	.word	0x08016a38
 800a590:	20004354 	.word	0x20004354
 800a594:	08017ea4 	.word	0x08017ea4
 800a598:	20004350 	.word	0x20004350
 800a59c:	20004368 	.word	0x20004368
 800a5a0:	20004360 	.word	0x20004360
 800a5a4:	08018114 	.word	0x08018114
 800a5a8:	2000435c 	.word	0x2000435c
 800a5ac:	08017ec0 	.word	0x08017ec0

0800a5b0 <tcp_close>:
{
 800a5b0:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5b2:	b160      	cbz	r0, 800a5ce <tcp_close+0x1e>
 800a5b4:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 800a5b6:	7e02      	ldrb	r2, [r0, #24]
 800a5b8:	2a01      	cmp	r2, #1
 800a5ba:	d003      	beq.n	800a5c4 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a5bc:	8bc2      	ldrh	r2, [r0, #30]
 800a5be:	f042 0210 	orr.w	r2, r2, #16
 800a5c2:	83c2      	strh	r2, [r0, #30]
  return tcp_close_shutdown(pcb, 1);
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7ff ff2c 	bl	800a424 <tcp_close_shutdown>
}
 800a5cc:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5ce:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <tcp_close+0x34>)
 800a5d0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a5d4:	4904      	ldr	r1, [pc, #16]	; (800a5e8 <tcp_close+0x38>)
 800a5d6:	4805      	ldr	r0, [pc, #20]	; (800a5ec <tcp_close+0x3c>)
 800a5d8:	f009 fe6e 	bl	80142b8 <app_debug_rtt_raw>
 800a5dc:	f06f 000f 	mvn.w	r0, #15
 800a5e0:	e7f4      	b.n	800a5cc <tcp_close+0x1c>
 800a5e2:	bf00      	nop
 800a5e4:	08017acc 	.word	0x08017acc
 800a5e8:	08017edc 	.word	0x08017edc
 800a5ec:	08016a38 	.word	0x08016a38

0800a5f0 <tcp_recv_null>:
{
 800a5f0:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5f2:	b151      	cbz	r1, 800a60a <tcp_recv_null+0x1a>
 800a5f4:	4614      	mov	r4, r2
 800a5f6:	4608      	mov	r0, r1
  if (p != NULL) {
 800a5f8:	b18a      	cbz	r2, 800a61e <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800a5fa:	8911      	ldrh	r1, [r2, #8]
 800a5fc:	f7ff faa2 	bl	8009b44 <tcp_recved>
    pbuf_free(p);
 800a600:	4620      	mov	r0, r4
 800a602:	f7fe fd65 	bl	80090d0 <pbuf_free>
  return ERR_OK;
 800a606:	2000      	movs	r0, #0
}
 800a608:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a60a:	4b08      	ldr	r3, [pc, #32]	; (800a62c <tcp_recv_null+0x3c>)
 800a60c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a610:	4907      	ldr	r1, [pc, #28]	; (800a630 <tcp_recv_null+0x40>)
 800a612:	4808      	ldr	r0, [pc, #32]	; (800a634 <tcp_recv_null+0x44>)
 800a614:	f009 fe50 	bl	80142b8 <app_debug_rtt_raw>
 800a618:	f06f 000f 	mvn.w	r0, #15
 800a61c:	e7f4      	b.n	800a608 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 800a61e:	b10b      	cbz	r3, 800a624 <tcp_recv_null+0x34>
  return ERR_OK;
 800a620:	2000      	movs	r0, #0
 800a622:	e7f1      	b.n	800a608 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 800a624:	f7ff ffc4 	bl	800a5b0 <tcp_close>
 800a628:	e7ee      	b.n	800a608 <tcp_recv_null+0x18>
 800a62a:	bf00      	nop
 800a62c:	08017acc 	.word	0x08017acc
 800a630:	08017ef4 	.word	0x08017ef4
 800a634:	08016a38 	.word	0x08016a38

0800a638 <tcp_process_refused_data>:
{
 800a638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a63a:	b318      	cbz	r0, 800a684 <tcp_process_refused_data+0x4c>
 800a63c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800a63e:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
 800a640:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800a642:	2300      	movs	r3, #0
 800a644:	67c3      	str	r3, [r0, #124]	; 0x7c
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a646:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 800a64a:	b32d      	cbz	r5, 800a698 <tcp_process_refused_data+0x60>
 800a64c:	4632      	mov	r2, r6
 800a64e:	4601      	mov	r1, r0
 800a650:	6940      	ldr	r0, [r0, #20]
 800a652:	47a8      	blx	r5
 800a654:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800a656:	bb3d      	cbnz	r5, 800a6a8 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a658:	f017 0f20 	tst.w	r7, #32
 800a65c:	d02a      	beq.n	800a6b4 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a65e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800a660:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
          pcb->rcv_wnd++;
 800a664:	bf1c      	itt	ne
 800a666:	3301      	addne	r3, #1
 800a668:	85a3      	strhne	r3, [r4, #44]	; 0x2c
        TCP_EVENT_CLOSED(pcb, err);
 800a66a:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 800a66e:	b30e      	cbz	r6, 800a6b4 <tcp_process_refused_data+0x7c>
 800a670:	2300      	movs	r3, #0
 800a672:	461a      	mov	r2, r3
 800a674:	4621      	mov	r1, r4
 800a676:	6960      	ldr	r0, [r4, #20]
 800a678:	47b0      	blx	r6
          return ERR_ABRT;
 800a67a:	f110 0f0d 	cmn.w	r0, #13
 800a67e:	bf08      	it	eq
 800a680:	4605      	moveq	r5, r0
 800a682:	e017      	b.n	800a6b4 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a684:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <tcp_process_refused_data+0x80>)
 800a686:	f240 6209 	movw	r2, #1545	; 0x609
 800a68a:	490c      	ldr	r1, [pc, #48]	; (800a6bc <tcp_process_refused_data+0x84>)
 800a68c:	480c      	ldr	r0, [pc, #48]	; (800a6c0 <tcp_process_refused_data+0x88>)
 800a68e:	f009 fe13 	bl	80142b8 <app_debug_rtt_raw>
 800a692:	f06f 050f 	mvn.w	r5, #15
 800a696:	e00d      	b.n	800a6b4 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a698:	2300      	movs	r3, #0
 800a69a:	4632      	mov	r2, r6
 800a69c:	4601      	mov	r1, r0
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7ff ffa6 	bl	800a5f0 <tcp_recv_null>
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	e7d6      	b.n	800a656 <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 800a6a8:	f115 0f0d 	cmn.w	r5, #13
      pcb->refused_data = refused_data;
 800a6ac:	bf1c      	itt	ne
 800a6ae:	67e6      	strne	r6, [r4, #124]	; 0x7c
      return ERR_INPROGRESS;
 800a6b0:	f06f 0504 	mvnne.w	r5, #4
}
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b8:	08017acc 	.word	0x08017acc
 800a6bc:	08017f10 	.word	0x08017f10
 800a6c0:	08016a38 	.word	0x08016a38

0800a6c4 <tcp_fasttmr>:
{
 800a6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800a6c8:	4a20      	ldr	r2, [pc, #128]	; (800a74c <tcp_fasttmr+0x88>)
 800a6ca:	7813      	ldrb	r3, [r2, #0]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800a6d0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800a754 <tcp_fasttmr+0x90>
        tcp_active_pcbs_changed = 0;
 800a6d4:	4e1e      	ldr	r6, [pc, #120]	; (800a750 <tcp_fasttmr+0x8c>)
  pcb = tcp_active_pcbs;
 800a6d6:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800a6da:	2c00      	cmp	r4, #0
 800a6dc:	d034      	beq.n	800a748 <tcp_fasttmr+0x84>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a6de:	4d1b      	ldr	r5, [pc, #108]	; (800a74c <tcp_fasttmr+0x88>)
        tcp_active_pcbs_changed = 0;
 800a6e0:	2700      	movs	r7, #0
 800a6e2:	e013      	b.n	800a70c <tcp_fasttmr+0x48>
        tcp_ack_now(pcb);
 800a6e4:	f043 0302 	orr.w	r3, r3, #2
 800a6e8:	83e3      	strh	r3, [r4, #30]
        tcp_output(pcb);
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f003 f84e 	bl	800d78c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a6f0:	8be3      	ldrh	r3, [r4, #30]
 800a6f2:	f023 0303 	bic.w	r3, r3, #3
 800a6f6:	83e3      	strh	r3, [r4, #30]
 800a6f8:	e013      	b.n	800a722 <tcp_fasttmr+0x5e>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a6fa:	f023 0308 	bic.w	r3, r3, #8
 800a6fe:	83e3      	strh	r3, [r4, #30]
        tcp_close_shutdown_fin(pcb);
 800a700:	4620      	mov	r0, r4
 800a702:	f7ff f915 	bl	8009930 <tcp_close_shutdown_fin>
 800a706:	e010      	b.n	800a72a <tcp_fasttmr+0x66>
      pcb = pcb->next;
 800a708:	6924      	ldr	r4, [r4, #16]
  while (pcb != NULL) {
 800a70a:	b1ec      	cbz	r4, 800a748 <tcp_fasttmr+0x84>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a70c:	782b      	ldrb	r3, [r5, #0]
 800a70e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800a712:	429a      	cmp	r2, r3
 800a714:	d0f8      	beq.n	800a708 <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
 800a716:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
      if (pcb->flags & TF_ACK_DELAY) {
 800a71a:	8be3      	ldrh	r3, [r4, #30]
 800a71c:	f013 0f01 	tst.w	r3, #1
 800a720:	d1e0      	bne.n	800a6e4 <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
 800a722:	8be3      	ldrh	r3, [r4, #30]
 800a724:	f013 0f08 	tst.w	r3, #8
 800a728:	d1e7      	bne.n	800a6fa <tcp_fasttmr+0x36>
      next = pcb->next;
 800a72a:	f8d4 9010 	ldr.w	r9, [r4, #16]
      if (pcb->refused_data != NULL) {
 800a72e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a730:	b143      	cbz	r3, 800a744 <tcp_fasttmr+0x80>
        tcp_active_pcbs_changed = 0;
 800a732:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800a734:	4620      	mov	r0, r4
 800a736:	f7ff ff7f 	bl	800a638 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a73a:	7833      	ldrb	r3, [r6, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1ca      	bne.n	800a6d6 <tcp_fasttmr+0x12>
      pcb = next;
 800a740:	464c      	mov	r4, r9
 800a742:	e7e2      	b.n	800a70a <tcp_fasttmr+0x46>
 800a744:	464c      	mov	r4, r9
 800a746:	e7e0      	b.n	800a70a <tcp_fasttmr+0x46>
}
 800a748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a74c:	20000f7a 	.word	0x20000f7a
 800a750:	20004350 	.word	0x20004350
 800a754:	20004354 	.word	0x20004354

0800a758 <tcp_slowtmr>:
{
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	b085      	sub	sp, #20
  ++tcp_ticks;
 800a75e:	4aba      	ldr	r2, [pc, #744]	; (800aa48 <tcp_slowtmr+0x2f0>)
 800a760:	6813      	ldr	r3, [r2, #0]
 800a762:	3301      	adds	r3, #1
 800a764:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a766:	4ab9      	ldr	r2, [pc, #740]	; (800aa4c <tcp_slowtmr+0x2f4>)
 800a768:	7813      	ldrb	r3, [r2, #0]
 800a76a:	3301      	adds	r3, #1
 800a76c:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800a76e:	f8df a304 	ldr.w	sl, [pc, #772]	; 800aa74 <tcp_slowtmr+0x31c>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a772:	f8df b304 	ldr.w	fp, [pc, #772]	; 800aa78 <tcp_slowtmr+0x320>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a776:	4eb6      	ldr	r6, [pc, #728]	; (800aa50 <tcp_slowtmr+0x2f8>)
  pcb = tcp_active_pcbs;
 800a778:	f8da 4000 	ldr.w	r4, [sl]
  while (pcb != NULL) {
 800a77c:	2c00      	cmp	r4, #0
 800a77e:	f000 81fa 	beq.w	800ab76 <tcp_slowtmr+0x41e>
  prev = NULL;
 800a782:	2500      	movs	r5, #0
 800a784:	e1a2      	b.n	800aacc <tcp_slowtmr+0x374>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a786:	4633      	mov	r3, r6
 800a788:	f240 42be 	movw	r2, #1214	; 0x4be
 800a78c:	49b1      	ldr	r1, [pc, #708]	; (800aa54 <tcp_slowtmr+0x2fc>)
 800a78e:	48b2      	ldr	r0, [pc, #712]	; (800aa58 <tcp_slowtmr+0x300>)
 800a790:	f009 fd92 	bl	80142b8 <app_debug_rtt_raw>
 800a794:	e19e      	b.n	800aad4 <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a796:	4633      	mov	r3, r6
 800a798:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a79c:	49af      	ldr	r1, [pc, #700]	; (800aa5c <tcp_slowtmr+0x304>)
 800a79e:	48ae      	ldr	r0, [pc, #696]	; (800aa58 <tcp_slowtmr+0x300>)
 800a7a0:	f009 fd8a 	bl	80142b8 <app_debug_rtt_raw>
 800a7a4:	e19a      	b.n	800aadc <tcp_slowtmr+0x384>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a7a6:	4633      	mov	r3, r6
 800a7a8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a7ac:	49ac      	ldr	r1, [pc, #688]	; (800aa60 <tcp_slowtmr+0x308>)
 800a7ae:	48aa      	ldr	r0, [pc, #680]	; (800aa58 <tcp_slowtmr+0x300>)
 800a7b0:	f009 fd82 	bl	80142b8 <app_debug_rtt_raw>
 800a7b4:	e196      	b.n	800aae4 <tcp_slowtmr+0x38c>
      continue;
 800a7b6:	4625      	mov	r5, r4
      pcb = pcb->next;
 800a7b8:	6924      	ldr	r4, [r4, #16]
      continue;
 800a7ba:	e185      	b.n	800aac8 <tcp_slowtmr+0x370>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a7bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a7c0:	2b05      	cmp	r3, #5
 800a7c2:	f240 81a1 	bls.w	800ab08 <tcp_slowtmr+0x3b0>
    pcb_reset = 0;
 800a7c6:	f04f 0800 	mov.w	r8, #0
      ++pcb_remove;
 800a7ca:	2701      	movs	r7, #1
    if (pcb->ooseq != NULL &&
 800a7cc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a7ce:	b15b      	cbz	r3, 800a7e8 <tcp_slowtmr+0x90>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a7d0:	4b9d      	ldr	r3, [pc, #628]	; (800aa48 <tcp_slowtmr+0x2f0>)
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7d6:	1ad2      	subs	r2, r2, r3
 800a7d8:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 800a7dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800a7e0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800a7e4:	f080 80f9 	bcs.w	800a9da <tcp_slowtmr+0x282>
    if (pcb->state == SYN_RCVD) {
 800a7e8:	7e23      	ldrb	r3, [r4, #24]
 800a7ea:	2b03      	cmp	r3, #3
 800a7ec:	f000 80f9 	beq.w	800a9e2 <tcp_slowtmr+0x28a>
    if (pcb->state == LAST_ACK) {
 800a7f0:	2b09      	cmp	r3, #9
 800a7f2:	f040 80fd 	bne.w	800a9f0 <tcp_slowtmr+0x298>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a7f6:	4b94      	ldr	r3, [pc, #592]	; (800aa48 <tcp_slowtmr+0x2f0>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a7fc:	1a9b      	subs	r3, r3, r2
 800a7fe:	2b78      	cmp	r3, #120	; 0x78
 800a800:	f240 80f6 	bls.w	800a9f0 <tcp_slowtmr+0x298>
      tcp_err_fn err_fn = pcb->errf;
 800a804:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
      tcp_pcb_purge(pcb);
 800a808:	4620      	mov	r0, r4
 800a80a:	f7ff fbb5 	bl	8009f78 <tcp_pcb_purge>
      if (prev != NULL) {
 800a80e:	2d00      	cmp	r5, #0
 800a810:	f000 8134 	beq.w	800aa7c <tcp_slowtmr+0x324>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a814:	f8da 3000 	ldr.w	r3, [sl]
 800a818:	42a3      	cmp	r3, r4
 800a81a:	f000 810d 	beq.w	800aa38 <tcp_slowtmr+0x2e0>
        prev->next = pcb->next;
 800a81e:	6923      	ldr	r3, [r4, #16]
 800a820:	612b      	str	r3, [r5, #16]
      if (pcb_reset) {
 800a822:	f1b8 0f00 	cmp.w	r8, #0
 800a826:	f040 8138 	bne.w	800aa9a <tcp_slowtmr+0x342>
      err_arg = pcb->callback_arg;
 800a82a:	f8d4 9014 	ldr.w	r9, [r4, #20]
      pcb = pcb->next;
 800a82e:	f8d4 8010 	ldr.w	r8, [r4, #16]
      tcp_free(pcb2);
 800a832:	4620      	mov	r0, r4
 800a834:	f7ff f8c4 	bl	80099c0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800a838:	4b8a      	ldr	r3, [pc, #552]	; (800aa64 <tcp_slowtmr+0x30c>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a83e:	2f00      	cmp	r7, #0
 800a840:	f000 813e 	beq.w	800aac0 <tcp_slowtmr+0x368>
 800a844:	f06f 010c 	mvn.w	r1, #12
 800a848:	4648      	mov	r0, r9
 800a84a:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 800a84c:	4b85      	ldr	r3, [pc, #532]	; (800aa64 <tcp_slowtmr+0x30c>)
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d191      	bne.n	800a778 <tcp_slowtmr+0x20>
      pcb = pcb->next;
 800a854:	4644      	mov	r4, r8
 800a856:	e137      	b.n	800aac8 <tcp_slowtmr+0x370>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a858:	4633      	mov	r3, r6
 800a85a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a85e:	4982      	ldr	r1, [pc, #520]	; (800aa68 <tcp_slowtmr+0x310>)
 800a860:	487d      	ldr	r0, [pc, #500]	; (800aa58 <tcp_slowtmr+0x300>)
 800a862:	f009 fd29 	bl	80142b8 <app_debug_rtt_raw>
 800a866:	e161      	b.n	800ab2c <tcp_slowtmr+0x3d4>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a868:	4620      	mov	r0, r4
 800a86a:	f002 fc2b 	bl	800d0c4 <tcp_split_unsent_seg>
 800a86e:	b158      	cbz	r0, 800a888 <tcp_slowtmr+0x130>
              pcb->persist_cnt = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a876:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800a87a:	2b06      	cmp	r3, #6
 800a87c:	d878      	bhi.n	800a970 <tcp_slowtmr+0x218>
                pcb->persist_backoff++;
 800a87e:	3301      	adds	r3, #1
 800a880:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    pcb_remove = 0;
 800a884:	2700      	movs	r7, #0
 800a886:	e050      	b.n	800a92a <tcp_slowtmr+0x1d2>
                if (tcp_output(pcb) == ERR_OK) {
 800a888:	4620      	mov	r0, r4
 800a88a:	f002 ff7f 	bl	800d78c <tcp_output>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d1ee      	bne.n	800a870 <tcp_slowtmr+0x118>
    pcb_remove = 0;
 800a892:	2700      	movs	r7, #0
 800a894:	e049      	b.n	800a92a <tcp_slowtmr+0x1d2>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a896:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800a898:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a89c:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800a89e:	bf9c      	itt	ls
 800a8a0:	3301      	addls	r3, #1
 800a8a2:	86a3      	strhls	r3, [r4, #52]	; 0x34
        if (pcb->rtime >= pcb->rto) {
 800a8a4:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800a8a8:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	db3c      	blt.n	800a92a <tcp_slowtmr+0x1d2>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f002 fe11 	bl	800d4d8 <tcp_rexmit_rto_prepare>
 800a8b6:	b118      	cbz	r0, 800a8c0 <tcp_slowtmr+0x168>
 800a8b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a8ba:	bbb3      	cbnz	r3, 800a92a <tcp_slowtmr+0x1d2>
 800a8bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a8be:	b3a3      	cbz	r3, 800a92a <tcp_slowtmr+0x1d2>
            if (pcb->state != SYN_SENT) {
 800a8c0:	7e23      	ldrb	r3, [r4, #24]
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d014      	beq.n	800a8f0 <tcp_slowtmr+0x198>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a8c6:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
 800a8ca:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800a8ce:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a8d2:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a8d6:	2a0c      	cmp	r2, #12
 800a8d8:	bf28      	it	cs
 800a8da:	220c      	movcs	r2, #12
 800a8dc:	4963      	ldr	r1, [pc, #396]	; (800aa6c <tcp_slowtmr+0x314>)
 800a8de:	5c8a      	ldrb	r2, [r1, r2]
 800a8e0:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a8e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	bfa8      	it	ge
 800a8ea:	4613      	movge	r3, r2
 800a8ec:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
            pcb->rtime = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	86a3      	strh	r3, [r4, #52]	; 0x34
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a8f4:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800a8f8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
            pcb->ssthresh = eff_wnd >> 1;
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	bf28      	it	cs
 800a900:	461a      	movcs	r2, r3
 800a902:	0851      	lsrs	r1, r2, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a904:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 800a906:	0043      	lsls	r3, r0, #1
 800a908:	b29b      	uxth	r3, r3
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a90a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800a90e:	bf98      	it	ls
 800a910:	460b      	movls	r3, r1
 800a912:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
            pcb->cwnd = pcb->mss;
 800a916:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
            pcb->bytes_acked = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
            tcp_rexmit_rto_commit(pcb);
 800a920:	4620      	mov	r0, r4
 800a922:	f003 f94b 	bl	800dbbc <tcp_rexmit_rto_commit>
 800a926:	e000      	b.n	800a92a <tcp_slowtmr+0x1d2>
      ++pcb_remove;
 800a928:	2701      	movs	r7, #1
    if (pcb->state == FIN_WAIT_2) {
 800a92a:	7e23      	ldrb	r3, [r4, #24]
 800a92c:	2b06      	cmp	r3, #6
 800a92e:	d021      	beq.n	800a974 <tcp_slowtmr+0x21c>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a930:	f894 8009 	ldrb.w	r8, [r4, #9]
 800a934:	f018 0808 	ands.w	r8, r8, #8
 800a938:	f43f af48 	beq.w	800a7cc <tcp_slowtmr+0x74>
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d12c      	bne.n	800a99a <tcp_slowtmr+0x242>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a940:	4b41      	ldr	r3, [pc, #260]	; (800aa48 <tcp_slowtmr+0x2f0>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a946:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a948:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a94c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800a950:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a954:	fb03 1300 	mla	r3, r3, r0, r1
 800a958:	fbab c303 	umull	ip, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a95c:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
 800a960:	d920      	bls.n	800a9a4 <tcp_slowtmr+0x24c>
        ++pcb_remove;
 800a962:	3701      	adds	r7, #1
 800a964:	b2ff      	uxtb	r7, r7
        ++pcb_reset;
 800a966:	f04f 0801 	mov.w	r8, #1
 800a96a:	e72f      	b.n	800a7cc <tcp_slowtmr+0x74>
          ++pcb_remove; /* max probes reached */
 800a96c:	2701      	movs	r7, #1
 800a96e:	e7dc      	b.n	800a92a <tcp_slowtmr+0x1d2>
    pcb_remove = 0;
 800a970:	2700      	movs	r7, #0
 800a972:	e7da      	b.n	800a92a <tcp_slowtmr+0x1d2>
      if (pcb->flags & TF_RXCLOSED) {
 800a974:	8be3      	ldrh	r3, [r4, #30]
 800a976:	f013 0f10 	tst.w	r3, #16
 800a97a:	d007      	beq.n	800a98c <tcp_slowtmr+0x234>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a97c:	4b32      	ldr	r3, [pc, #200]	; (800aa48 <tcp_slowtmr+0x2f0>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	2b14      	cmp	r3, #20
 800a986:	d901      	bls.n	800a98c <tcp_slowtmr+0x234>
          ++pcb_remove;
 800a988:	3701      	adds	r7, #1
 800a98a:	b2ff      	uxtb	r7, r7
    if (pcb->ooseq != NULL &&
 800a98c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 8137 	beq.w	800ac02 <tcp_slowtmr+0x4aa>
    pcb_reset = 0;
 800a994:	f04f 0800 	mov.w	r8, #0
 800a998:	e71a      	b.n	800a7d0 <tcp_slowtmr+0x78>
        ((pcb->state == ESTABLISHED) ||
 800a99a:	2b07      	cmp	r3, #7
 800a99c:	d0d0      	beq.n	800a940 <tcp_slowtmr+0x1e8>
    pcb_reset = 0;
 800a99e:	f04f 0800 	mov.w	r8, #0
 800a9a2:	e713      	b.n	800a7cc <tcp_slowtmr+0x74>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a9a4:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 800a9a8:	fb00 1303 	mla	r3, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a9ac:	fbab 1303 	umull	r1, r3, fp, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a9b0:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
 800a9b4:	d802      	bhi.n	800a9bc <tcp_slowtmr+0x264>
    pcb_reset = 0;
 800a9b6:	f04f 0800 	mov.w	r8, #0
 800a9ba:	e707      	b.n	800a7cc <tcp_slowtmr+0x74>
        err = tcp_keepalive(pcb);
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f003 f933 	bl	800dc28 <tcp_keepalive>
        if (err == ERR_OK) {
 800a9c2:	b938      	cbnz	r0, 800a9d4 <tcp_slowtmr+0x27c>
          pcb->keep_cnt_sent++;
 800a9c4:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
    pcb_reset = 0;
 800a9ce:	f04f 0800 	mov.w	r8, #0
 800a9d2:	e6fb      	b.n	800a7cc <tcp_slowtmr+0x74>
 800a9d4:	f04f 0800 	mov.w	r8, #0
 800a9d8:	e6f8      	b.n	800a7cc <tcp_slowtmr+0x74>
      tcp_free_ooseq(pcb);
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f7ff fac2 	bl	8009f64 <tcp_free_ooseq>
 800a9e0:	e702      	b.n	800a7e8 <tcp_slowtmr+0x90>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a9e2:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <tcp_slowtmr+0x2f0>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a9e8:	1a9b      	subs	r3, r3, r2
 800a9ea:	2b14      	cmp	r3, #20
 800a9ec:	f63f af0a 	bhi.w	800a804 <tcp_slowtmr+0xac>
    if (pcb_remove) {
 800a9f0:	2f00      	cmp	r7, #0
 800a9f2:	f47f af07 	bne.w	800a804 <tcp_slowtmr+0xac>
      pcb = pcb->next;
 800a9f6:	6927      	ldr	r7, [r4, #16]
      ++prev->polltmr;
 800a9f8:	f894 3020 	ldrb.w	r3, [r4, #32]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	f884 3020 	strb.w	r3, [r4, #32]
      if (prev->polltmr >= prev->pollinterval) {
 800aa04:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d85b      	bhi.n	800aac4 <tcp_slowtmr+0x36c>
        prev->polltmr = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f884 3020 	strb.w	r3, [r4, #32]
        tcp_active_pcbs_changed = 0;
 800aa12:	4a14      	ldr	r2, [pc, #80]	; (800aa64 <tcp_slowtmr+0x30c>)
 800aa14:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 800aa16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d04a      	beq.n	800aab4 <tcp_slowtmr+0x35c>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	6960      	ldr	r0, [r4, #20]
 800aa22:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800aa24:	4b0f      	ldr	r3, [pc, #60]	; (800aa64 <tcp_slowtmr+0x30c>)
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f47f aea5 	bne.w	800a778 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d040      	beq.n	800aab4 <tcp_slowtmr+0x35c>
 800aa32:	4625      	mov	r5, r4
      pcb = pcb->next;
 800aa34:	463c      	mov	r4, r7
 800aa36:	e047      	b.n	800aac8 <tcp_slowtmr+0x370>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800aa38:	4633      	mov	r3, r6
 800aa3a:	f240 526d 	movw	r2, #1389	; 0x56d
 800aa3e:	490c      	ldr	r1, [pc, #48]	; (800aa70 <tcp_slowtmr+0x318>)
 800aa40:	4805      	ldr	r0, [pc, #20]	; (800aa58 <tcp_slowtmr+0x300>)
 800aa42:	f009 fc39 	bl	80142b8 <app_debug_rtt_raw>
 800aa46:	e6ea      	b.n	800a81e <tcp_slowtmr+0xc6>
 800aa48:	20004358 	.word	0x20004358
 800aa4c:	20000f7a 	.word	0x20000f7a
 800aa50:	08017acc 	.word	0x08017acc
 800aa54:	08017f38 	.word	0x08017f38
 800aa58:	08016a38 	.word	0x08016a38
 800aa5c:	08017f64 	.word	0x08017f64
 800aa60:	08017f90 	.word	0x08017f90
 800aa64:	20004350 	.word	0x20004350
 800aa68:	08017ff4 	.word	0x08017ff4
 800aa6c:	08018104 	.word	0x08018104
 800aa70:	0801802c 	.word	0x0801802c
 800aa74:	20004354 	.word	0x20004354
 800aa78:	10624dd3 	.word	0x10624dd3
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800aa7c:	f8da 3000 	ldr.w	r3, [sl]
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	d006      	beq.n	800aa92 <tcp_slowtmr+0x33a>
 800aa84:	4633      	mov	r3, r6
 800aa86:	f240 5271 	movw	r2, #1393	; 0x571
 800aa8a:	4961      	ldr	r1, [pc, #388]	; (800ac10 <tcp_slowtmr+0x4b8>)
 800aa8c:	4861      	ldr	r0, [pc, #388]	; (800ac14 <tcp_slowtmr+0x4bc>)
 800aa8e:	f009 fc13 	bl	80142b8 <app_debug_rtt_raw>
        tcp_active_pcbs = pcb->next;
 800aa92:	6923      	ldr	r3, [r4, #16]
 800aa94:	f8ca 3000 	str.w	r3, [sl]
 800aa98:	e6c3      	b.n	800a822 <tcp_slowtmr+0xca>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aa9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800aa9c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aa9e:	8ba3      	ldrh	r3, [r4, #28]
 800aaa0:	9302      	str	r3, [sp, #8]
 800aaa2:	8b63      	ldrh	r3, [r4, #26]
 800aaa4:	9301      	str	r3, [sp, #4]
 800aaa6:	1d23      	adds	r3, r4, #4
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	4623      	mov	r3, r4
 800aaac:	4620      	mov	r0, r4
 800aaae:	f002 fdeb 	bl	800d688 <tcp_rst>
 800aab2:	e6ba      	b.n	800a82a <tcp_slowtmr+0xd2>
          tcp_output(prev);
 800aab4:	4620      	mov	r0, r4
 800aab6:	f002 fe69 	bl	800d78c <tcp_output>
 800aaba:	4625      	mov	r5, r4
      pcb = pcb->next;
 800aabc:	463c      	mov	r4, r7
 800aabe:	e003      	b.n	800aac8 <tcp_slowtmr+0x370>
      pcb = pcb->next;
 800aac0:	4644      	mov	r4, r8
 800aac2:	e001      	b.n	800aac8 <tcp_slowtmr+0x370>
 800aac4:	4625      	mov	r5, r4
      pcb = pcb->next;
 800aac6:	463c      	mov	r4, r7
  while (pcb != NULL) {
 800aac8:	2c00      	cmp	r4, #0
 800aaca:	d054      	beq.n	800ab76 <tcp_slowtmr+0x41e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800aacc:	7e23      	ldrb	r3, [r4, #24]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f43f ae59 	beq.w	800a786 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800aad4:	7e23      	ldrb	r3, [r4, #24]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	f43f ae5d 	beq.w	800a796 <tcp_slowtmr+0x3e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800aadc:	7e23      	ldrb	r3, [r4, #24]
 800aade:	2b0a      	cmp	r3, #10
 800aae0:	f43f ae61 	beq.w	800a7a6 <tcp_slowtmr+0x4e>
    if (pcb->last_timer == tcp_timer_ctr) {
 800aae4:	4b4c      	ldr	r3, [pc, #304]	; (800ac18 <tcp_slowtmr+0x4c0>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800aaec:	429a      	cmp	r2, r3
 800aaee:	f43f ae62 	beq.w	800a7b6 <tcp_slowtmr+0x5e>
    pcb->last_timer = tcp_timer_ctr;
 800aaf2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800aaf6:	7e23      	ldrb	r3, [r4, #24]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	f43f ae5f 	beq.w	800a7bc <tcp_slowtmr+0x64>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800aafe:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ab02:	2b0b      	cmp	r3, #11
 800ab04:	f63f af10 	bhi.w	800a928 <tcp_slowtmr+0x1d0>
      if (pcb->persist_backoff > 0) {
 800ab08:	f894 70a5 	ldrb.w	r7, [r4, #165]	; 0xa5
 800ab0c:	2f00      	cmp	r7, #0
 800ab0e:	f43f aec2 	beq.w	800a896 <tcp_slowtmr+0x13e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ab12:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ab14:	b133      	cbz	r3, 800ab24 <tcp_slowtmr+0x3cc>
 800ab16:	4633      	mov	r3, r6
 800ab18:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ab1c:	493f      	ldr	r1, [pc, #252]	; (800ac1c <tcp_slowtmr+0x4c4>)
 800ab1e:	483d      	ldr	r0, [pc, #244]	; (800ac14 <tcp_slowtmr+0x4bc>)
 800ab20:	f009 fbca 	bl	80142b8 <app_debug_rtt_raw>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ab24:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f43f ae96 	beq.w	800a858 <tcp_slowtmr+0x100>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ab2c:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 800ab30:	2b0b      	cmp	r3, #11
 800ab32:	f63f af1b 	bhi.w	800a96c <tcp_slowtmr+0x214>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ab36:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 800ab3a:	4b39      	ldr	r3, [pc, #228]	; (800ac20 <tcp_slowtmr+0x4c8>)
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800ab42:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d208      	bcs.n	800ab5c <tcp_slowtmr+0x404>
            pcb->persist_cnt++;
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
          if (pcb->persist_cnt >= backoff_cnt) {
 800ab52:	4293      	cmp	r3, r2
    pcb_remove = 0;
 800ab54:	bf38      	it	cc
 800ab56:	2700      	movcc	r7, #0
          if (pcb->persist_cnt >= backoff_cnt) {
 800ab58:	f4ff aee7 	bcc.w	800a92a <tcp_slowtmr+0x1d2>
            if (pcb->snd_wnd == 0) {
 800ab5c:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 800ab60:	2900      	cmp	r1, #0
 800ab62:	f47f ae81 	bne.w	800a868 <tcp_slowtmr+0x110>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ab66:	4620      	mov	r0, r4
 800ab68:	f003 f88c 	bl	800dc84 <tcp_zero_window_probe>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	f43f ae7f 	beq.w	800a870 <tcp_slowtmr+0x118>
    pcb_remove = 0;
 800ab72:	2700      	movs	r7, #0
 800ab74:	e6d9      	b.n	800a92a <tcp_slowtmr+0x1d2>
  pcb = tcp_tw_pcbs;
 800ab76:	4b2b      	ldr	r3, [pc, #172]	; (800ac24 <tcp_slowtmr+0x4cc>)
 800ab78:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800ab7a:	2c00      	cmp	r4, #0
 800ab7c:	d044      	beq.n	800ac08 <tcp_slowtmr+0x4b0>
  prev = NULL;
 800ab7e:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ab80:	4f29      	ldr	r7, [pc, #164]	; (800ac28 <tcp_slowtmr+0x4d0>)
 800ab82:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800ac38 <tcp_slowtmr+0x4e0>
 800ab86:	4e23      	ldr	r6, [pc, #140]	; (800ac14 <tcp_slowtmr+0x4bc>)
 800ab88:	e00f      	b.n	800abaa <tcp_slowtmr+0x452>
 800ab8a:	463b      	mov	r3, r7
 800ab8c:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ab90:	4641      	mov	r1, r8
 800ab92:	4630      	mov	r0, r6
 800ab94:	f009 fb90 	bl	80142b8 <app_debug_rtt_raw>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ab98:	4b24      	ldr	r3, [pc, #144]	; (800ac2c <tcp_slowtmr+0x4d4>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab9e:	1a9b      	subs	r3, r3, r2
 800aba0:	2b78      	cmp	r3, #120	; 0x78
 800aba2:	d806      	bhi.n	800abb2 <tcp_slowtmr+0x45a>
      pcb = pcb->next;
 800aba4:	4625      	mov	r5, r4
 800aba6:	6924      	ldr	r4, [r4, #16]
  while (pcb != NULL) {
 800aba8:	b374      	cbz	r4, 800ac08 <tcp_slowtmr+0x4b0>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800abaa:	7e23      	ldrb	r3, [r4, #24]
 800abac:	2b0a      	cmp	r3, #10
 800abae:	d0f3      	beq.n	800ab98 <tcp_slowtmr+0x440>
 800abb0:	e7eb      	b.n	800ab8a <tcp_slowtmr+0x432>
      tcp_pcb_purge(pcb);
 800abb2:	4620      	mov	r0, r4
 800abb4:	f7ff f9e0 	bl	8009f78 <tcp_pcb_purge>
      if (prev != NULL) {
 800abb8:	b1a5      	cbz	r5, 800abe4 <tcp_slowtmr+0x48c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800abba:	4b1a      	ldr	r3, [pc, #104]	; (800ac24 <tcp_slowtmr+0x4cc>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	42a3      	cmp	r3, r4
 800abc0:	d008      	beq.n	800abd4 <tcp_slowtmr+0x47c>
        prev->next = pcb->next;
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	612b      	str	r3, [r5, #16]
      pcb = pcb->next;
 800abc6:	f8d4 9010 	ldr.w	r9, [r4, #16]
      tcp_free(pcb2);
 800abca:	4620      	mov	r0, r4
 800abcc:	f7fe fef8 	bl	80099c0 <tcp_free>
      pcb = pcb->next;
 800abd0:	464c      	mov	r4, r9
 800abd2:	e7e9      	b.n	800aba8 <tcp_slowtmr+0x450>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800abd4:	463b      	mov	r3, r7
 800abd6:	f240 52af 	movw	r2, #1455	; 0x5af
 800abda:	4915      	ldr	r1, [pc, #84]	; (800ac30 <tcp_slowtmr+0x4d8>)
 800abdc:	4630      	mov	r0, r6
 800abde:	f009 fb6b 	bl	80142b8 <app_debug_rtt_raw>
 800abe2:	e7ee      	b.n	800abc2 <tcp_slowtmr+0x46a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800abe4:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <tcp_slowtmr+0x4cc>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	42a3      	cmp	r3, r4
 800abea:	d006      	beq.n	800abfa <tcp_slowtmr+0x4a2>
 800abec:	463b      	mov	r3, r7
 800abee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800abf2:	4910      	ldr	r1, [pc, #64]	; (800ac34 <tcp_slowtmr+0x4dc>)
 800abf4:	4630      	mov	r0, r6
 800abf6:	f009 fb5f 	bl	80142b8 <app_debug_rtt_raw>
        tcp_tw_pcbs = pcb->next;
 800abfa:	6922      	ldr	r2, [r4, #16]
 800abfc:	4b09      	ldr	r3, [pc, #36]	; (800ac24 <tcp_slowtmr+0x4cc>)
 800abfe:	601a      	str	r2, [r3, #0]
 800ac00:	e7e1      	b.n	800abc6 <tcp_slowtmr+0x46e>
    pcb_reset = 0;
 800ac02:	f04f 0800 	mov.w	r8, #0
 800ac06:	e6f3      	b.n	800a9f0 <tcp_slowtmr+0x298>
}
 800ac08:	b005      	add	sp, #20
 800ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0e:	bf00      	nop
 800ac10:	08018058 	.word	0x08018058
 800ac14:	08016a38 	.word	0x08016a38
 800ac18:	20000f7a 	.word	0x20000f7a
 800ac1c:	08017fc0 	.word	0x08017fc0
 800ac20:	08018124 	.word	0x08018124
 800ac24:	20004364 	.word	0x20004364
 800ac28:	08017acc 	.word	0x08017acc
 800ac2c:	20004358 	.word	0x20004358
 800ac30:	080180b4 	.word	0x080180b4
 800ac34:	080180dc 	.word	0x080180dc
 800ac38:	08018084 	.word	0x08018084

0800ac3c <tcp_tmr>:
{
 800ac3c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800ac3e:	f7ff fd41 	bl	800a6c4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800ac42:	4a06      	ldr	r2, [pc, #24]	; (800ac5c <tcp_tmr+0x20>)
 800ac44:	7813      	ldrb	r3, [r2, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	7013      	strb	r3, [r2, #0]
 800ac4c:	f013 0f01 	tst.w	r3, #1
 800ac50:	d100      	bne.n	800ac54 <tcp_tmr+0x18>
}
 800ac52:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 800ac54:	f7ff fd80 	bl	800a758 <tcp_slowtmr>
}
 800ac58:	e7fb      	b.n	800ac52 <tcp_tmr+0x16>
 800ac5a:	bf00      	nop
 800ac5c:	20000f79 	.word	0x20000f79

0800ac60 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800ac60:	4a09      	ldr	r2, [pc, #36]	; (800ac88 <tcp_get_next_optbyte+0x28>)
 800ac62:	8813      	ldrh	r3, [r2, #0]
 800ac64:	1c59      	adds	r1, r3, #1
 800ac66:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ac68:	4a08      	ldr	r2, [pc, #32]	; (800ac8c <tcp_get_next_optbyte+0x2c>)
 800ac6a:	6812      	ldr	r2, [r2, #0]
 800ac6c:	b11a      	cbz	r2, 800ac76 <tcp_get_next_optbyte+0x16>
 800ac6e:	4908      	ldr	r1, [pc, #32]	; (800ac90 <tcp_get_next_optbyte+0x30>)
 800ac70:	8809      	ldrh	r1, [r1, #0]
 800ac72:	428b      	cmp	r3, r1
 800ac74:	d204      	bcs.n	800ac80 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ac76:	4a07      	ldr	r2, [pc, #28]	; (800ac94 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 800ac78:	6812      	ldr	r2, [r2, #0]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	7d18      	ldrb	r0, [r3, #20]
 800ac7e:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ac80:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 800ac86:	4770      	bx	lr
 800ac88:	20000fa8 	.word	0x20000fa8
 800ac8c:	20000fb4 	.word	0x20000fb4
 800ac90:	20000fb0 	.word	0x20000fb0
 800ac94:	20000fac 	.word	0x20000fac

0800ac98 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ac9a:	4607      	mov	r7, r0
 800ac9c:	b1d0      	cbz	r0, 800acd4 <tcp_parseopt+0x3c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ac9e:	4b1e      	ldr	r3, [pc, #120]	; (800ad18 <tcp_parseopt+0x80>)
 800aca0:	881d      	ldrh	r5, [r3, #0]
 800aca2:	2d00      	cmp	r5, #0
 800aca4:	d037      	beq.n	800ad16 <tcp_parseopt+0x7e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aca6:	4b1d      	ldr	r3, [pc, #116]	; (800ad1c <tcp_parseopt+0x84>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	801a      	strh	r2, [r3, #0]
 800acac:	461e      	mov	r6, r3
 800acae:	8833      	ldrh	r3, [r6, #0]
 800acb0:	42ab      	cmp	r3, r5
 800acb2:	d230      	bcs.n	800ad16 <tcp_parseopt+0x7e>
      u8_t opt = tcp_get_next_optbyte();
 800acb4:	f7ff ffd4 	bl	800ac60 <tcp_get_next_optbyte>
      switch (opt) {
 800acb8:	2801      	cmp	r0, #1
 800acba:	d0f8      	beq.n	800acae <tcp_parseopt+0x16>
 800acbc:	2802      	cmp	r0, #2
 800acbe:	d011      	beq.n	800ace4 <tcp_parseopt+0x4c>
 800acc0:	b348      	cbz	r0, 800ad16 <tcp_parseopt+0x7e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800acc2:	f7ff ffcd 	bl	800ac60 <tcp_get_next_optbyte>
          if (data < 2) {
 800acc6:	2801      	cmp	r0, #1
 800acc8:	d925      	bls.n	800ad16 <tcp_parseopt+0x7e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800acca:	8833      	ldrh	r3, [r6, #0]
 800accc:	3b02      	subs	r3, #2
 800acce:	4418      	add	r0, r3
 800acd0:	8030      	strh	r0, [r6, #0]
 800acd2:	e7ec      	b.n	800acae <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800acd4:	4b12      	ldr	r3, [pc, #72]	; (800ad20 <tcp_parseopt+0x88>)
 800acd6:	f240 727d 	movw	r2, #1917	; 0x77d
 800acda:	4912      	ldr	r1, [pc, #72]	; (800ad24 <tcp_parseopt+0x8c>)
 800acdc:	4812      	ldr	r0, [pc, #72]	; (800ad28 <tcp_parseopt+0x90>)
 800acde:	f009 faeb 	bl	80142b8 <app_debug_rtt_raw>
 800ace2:	e7dc      	b.n	800ac9e <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ace4:	f7ff ffbc 	bl	800ac60 <tcp_get_next_optbyte>
 800ace8:	2804      	cmp	r0, #4
 800acea:	d114      	bne.n	800ad16 <tcp_parseopt+0x7e>
 800acec:	8833      	ldrh	r3, [r6, #0]
 800acee:	3301      	adds	r3, #1
 800acf0:	42ab      	cmp	r3, r5
 800acf2:	da10      	bge.n	800ad16 <tcp_parseopt+0x7e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800acf4:	f7ff ffb4 	bl	800ac60 <tcp_get_next_optbyte>
 800acf8:	0204      	lsls	r4, r0, #8
 800acfa:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
 800acfc:	f7ff ffb0 	bl	800ac60 <tcp_get_next_optbyte>
 800ad00:	4320      	orrs	r0, r4
 800ad02:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ad04:	1e43      	subs	r3, r0, #1
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ad0c:	bf28      	it	cs
 800ad0e:	f44f 7006 	movcs.w	r0, #536	; 0x218
 800ad12:	86f8      	strh	r0, [r7, #54]	; 0x36
          break;
 800ad14:	e7cb      	b.n	800acae <tcp_parseopt+0x16>
      }
    }
  }
}
 800ad16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad18:	20000fb8 	.word	0x20000fb8
 800ad1c:	20000fa8 	.word	0x20000fa8
 800ad20:	0801812c 	.word	0x0801812c
 800ad24:	08018154 	.word	0x08018154
 800ad28:	08016a38 	.word	0x08016a38

0800ad2c <tcp_input_delayed_close>:
{
 800ad2c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ad2e:	4604      	mov	r4, r0
 800ad30:	b130      	cbz	r0, 800ad40 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 800ad32:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <tcp_input_delayed_close+0x4c>)
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	f013 0f10 	tst.w	r3, #16
 800ad3a:	d109      	bne.n	800ad50 <tcp_input_delayed_close+0x24>
  return 0;
 800ad3c:	2000      	movs	r0, #0
}
 800ad3e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ad40:	4b0e      	ldr	r3, [pc, #56]	; (800ad7c <tcp_input_delayed_close+0x50>)
 800ad42:	f240 225a 	movw	r2, #602	; 0x25a
 800ad46:	490e      	ldr	r1, [pc, #56]	; (800ad80 <tcp_input_delayed_close+0x54>)
 800ad48:	480e      	ldr	r0, [pc, #56]	; (800ad84 <tcp_input_delayed_close+0x58>)
 800ad4a:	f009 fab5 	bl	80142b8 <app_debug_rtt_raw>
 800ad4e:	e7f0      	b.n	800ad32 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ad50:	8be3      	ldrh	r3, [r4, #30]
 800ad52:	f013 0f10 	tst.w	r3, #16
 800ad56:	d106      	bne.n	800ad66 <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ad58:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800ad5c:	b11b      	cbz	r3, 800ad66 <tcp_input_delayed_close+0x3a>
 800ad5e:	f06f 010e 	mvn.w	r1, #14
 800ad62:	6960      	ldr	r0, [r4, #20]
 800ad64:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ad66:	4621      	mov	r1, r4
 800ad68:	4807      	ldr	r0, [pc, #28]	; (800ad88 <tcp_input_delayed_close+0x5c>)
 800ad6a:	f7ff f935 	bl	8009fd8 <tcp_pcb_remove>
    tcp_free(pcb);
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f7fe fe26 	bl	80099c0 <tcp_free>
    return 1;
 800ad74:	2001      	movs	r0, #1
 800ad76:	e7e2      	b.n	800ad3e <tcp_input_delayed_close+0x12>
 800ad78:	20000fa0 	.word	0x20000fa0
 800ad7c:	0801812c 	.word	0x0801812c
 800ad80:	08018170 	.word	0x08018170
 800ad84:	08016a38 	.word	0x08016a38
 800ad88:	20004354 	.word	0x20004354

0800ad8c <tcp_free_acked_segments>:
{
 800ad8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (seg_list != NULL &&
 800ad90:	460d      	mov	r5, r1
 800ad92:	b139      	cbz	r1, 800ada4 <tcp_free_acked_segments+0x18>
 800ad94:	4606      	mov	r6, r0
 800ad96:	4698      	mov	r8, r3
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ad98:	4f2c      	ldr	r7, [pc, #176]	; (800ae4c <tcp_free_acked_segments+0xc0>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ad9a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ae54 <tcp_free_acked_segments+0xc8>
 800ad9e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800ae60 <tcp_free_acked_segments+0xd4>
 800ada2:	e01b      	b.n	800addc <tcp_free_acked_segments+0x50>
  while (seg_list != NULL &&
 800ada4:	468b      	mov	fp, r1
 800ada6:	e00a      	b.n	800adbe <tcp_free_acked_segments+0x32>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ada8:	4653      	mov	r3, sl
 800adaa:	f240 4257 	movw	r2, #1111	; 0x457
 800adae:	4649      	mov	r1, r9
 800adb0:	4827      	ldr	r0, [pc, #156]	; (800ae50 <tcp_free_acked_segments+0xc4>)
 800adb2:	f009 fa81 	bl	80142b8 <app_debug_rtt_raw>
 800adb6:	e030      	b.n	800ae1a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800adb8:	f1b8 0f00 	cmp.w	r8, #0
 800adbc:	d002      	beq.n	800adc4 <tcp_free_acked_segments+0x38>
}
 800adbe:	4658      	mov	r0, fp
 800adc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800adc4:	4b23      	ldr	r3, [pc, #140]	; (800ae54 <tcp_free_acked_segments+0xc8>)
 800adc6:	f240 4261 	movw	r2, #1121	; 0x461
 800adca:	4923      	ldr	r1, [pc, #140]	; (800ae58 <tcp_free_acked_segments+0xcc>)
 800adcc:	4820      	ldr	r0, [pc, #128]	; (800ae50 <tcp_free_acked_segments+0xc4>)
 800adce:	f009 fa73 	bl	80142b8 <app_debug_rtt_raw>
 800add2:	e7f4      	b.n	800adbe <tcp_free_acked_segments+0x32>
  while (seg_list != NULL &&
 800add4:	f1bb 0f00 	cmp.w	fp, #0
 800add8:	d0f1      	beq.n	800adbe <tcp_free_acked_segments+0x32>
 800adda:	465d      	mov	r5, fp
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800addc:	692b      	ldr	r3, [r5, #16]
 800adde:	6858      	ldr	r0, [r3, #4]
 800ade0:	f7fc fd23 	bl	800782a <lwip_htonl>
 800ade4:	4604      	mov	r4, r0
 800ade6:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800adea:	692b      	ldr	r3, [r5, #16]
 800adec:	8998      	ldrh	r0, [r3, #12]
 800adee:	f7fc fd17 	bl	8007820 <lwip_htons>
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	1ae4      	subs	r4, r4, r3
 800adf6:	445c      	add	r4, fp
 800adf8:	f010 0003 	ands.w	r0, r0, #3
 800adfc:	bf18      	it	ne
 800adfe:	2001      	movne	r0, #1
 800ae00:	4404      	add	r4, r0
  while (seg_list != NULL &&
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	dc1f      	bgt.n	800ae46 <tcp_free_acked_segments+0xba>
    seg_list = seg_list->next;
 800ae06:	f8d5 b000 	ldr.w	fp, [r5]
    clen = pbuf_clen(next->p);
 800ae0a:	6868      	ldr	r0, [r5, #4]
 800ae0c:	f7fe faba 	bl	8009384 <pbuf_clen>
 800ae10:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ae12:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
 800ae16:	4283      	cmp	r3, r0
 800ae18:	d3c6      	bcc.n	800ada8 <tcp_free_acked_segments+0x1c>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ae1a:	f8b6 006a 	ldrh.w	r0, [r6, #106]	; 0x6a
 800ae1e:	1b04      	subs	r4, r0, r4
 800ae20:	f8a6 406a 	strh.w	r4, [r6, #106]	; 0x6a
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ae24:	4a0d      	ldr	r2, [pc, #52]	; (800ae5c <tcp_free_acked_segments+0xd0>)
 800ae26:	892b      	ldrh	r3, [r5, #8]
 800ae28:	8811      	ldrh	r1, [r2, #0]
 800ae2a:	440b      	add	r3, r1
 800ae2c:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f7fe fec4 	bl	8009bbc <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800ae34:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0cb      	beq.n	800add4 <tcp_free_acked_segments+0x48>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ae3c:	f1bb 0f00 	cmp.w	fp, #0
 800ae40:	d0ba      	beq.n	800adb8 <tcp_free_acked_segments+0x2c>
 800ae42:	465d      	mov	r5, fp
 800ae44:	e7ca      	b.n	800addc <tcp_free_acked_segments+0x50>
 800ae46:	46ab      	mov	fp, r5
  return seg_list;
 800ae48:	e7b9      	b.n	800adbe <tcp_free_acked_segments+0x32>
 800ae4a:	bf00      	nop
 800ae4c:	20000f7c 	.word	0x20000f7c
 800ae50:	08016a38 	.word	0x08016a38
 800ae54:	0801812c 	.word	0x0801812c
 800ae58:	080181c0 	.word	0x080181c0
 800ae5c:	20000f98 	.word	0x20000f98
 800ae60:	08018198 	.word	0x08018198

0800ae64 <tcp_oos_insert_segment>:
{
 800ae64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae68:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	b160      	cbz	r0, 800ae88 <tcp_oos_insert_segment+0x24>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ae6e:	692b      	ldr	r3, [r5, #16]
 800ae70:	8998      	ldrh	r0, [r3, #12]
 800ae72:	f7fc fcd5 	bl	8007820 <lwip_htons>
 800ae76:	f010 0f01 	tst.w	r0, #1
 800ae7a:	d10d      	bne.n	800ae98 <tcp_oos_insert_segment+0x34>
    while (next &&
 800ae7c:	2c00      	cmp	r4, #0
 800ae7e:	d035      	beq.n	800aeec <tcp_oos_insert_segment+0x88>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ae80:	4e20      	ldr	r6, [pc, #128]	; (800af04 <tcp_oos_insert_segment+0xa0>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ae82:	f04f 0901 	mov.w	r9, #1
 800ae86:	e01f      	b.n	800aec8 <tcp_oos_insert_segment+0x64>
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ae88:	4b1f      	ldr	r3, [pc, #124]	; (800af08 <tcp_oos_insert_segment+0xa4>)
 800ae8a:	f240 421f 	movw	r2, #1055	; 0x41f
 800ae8e:	491f      	ldr	r1, [pc, #124]	; (800af0c <tcp_oos_insert_segment+0xa8>)
 800ae90:	481f      	ldr	r0, [pc, #124]	; (800af10 <tcp_oos_insert_segment+0xac>)
 800ae92:	f009 fa11 	bl	80142b8 <app_debug_rtt_raw>
 800ae96:	e7ea      	b.n	800ae6e <tcp_oos_insert_segment+0xa>
    tcp_segs_free(next);
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f7fe fe9c 	bl	8009bd6 <tcp_segs_free>
    next = NULL;
 800ae9e:	2400      	movs	r4, #0
  cseg->next = next;
 800aea0:	602c      	str	r4, [r5, #0]
}
 800aea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800aea6:	692b      	ldr	r3, [r5, #16]
 800aea8:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800aeac:	4648      	mov	r0, r9
 800aeae:	f7fc fcb7 	bl	8007820 <lwip_htons>
 800aeb2:	692b      	ldr	r3, [r5, #16]
 800aeb4:	ea48 0800 	orr.w	r8, r8, r0
 800aeb8:	f8a3 800c 	strh.w	r8, [r3, #12]
      next = next->next;
 800aebc:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800aebe:	4620      	mov	r0, r4
 800aec0:	f7fe fe7c 	bl	8009bbc <tcp_seg_free>
    while (next &&
 800aec4:	b197      	cbz	r7, 800aeec <tcp_oos_insert_segment+0x88>
      next = next->next;
 800aec6:	463c      	mov	r4, r7
           TCP_SEQ_GEQ((seqno + cseg->len),
 800aec8:	f8d6 c000 	ldr.w	ip, [r6]
 800aecc:	6921      	ldr	r1, [r4, #16]
 800aece:	6848      	ldr	r0, [r1, #4]
 800aed0:	892b      	ldrh	r3, [r5, #8]
 800aed2:	4463      	add	r3, ip
 800aed4:	1a1b      	subs	r3, r3, r0
 800aed6:	8922      	ldrh	r2, [r4, #8]
 800aed8:	1a9a      	subs	r2, r3, r2
    while (next &&
 800aeda:	2a00      	cmp	r2, #0
 800aedc:	db08      	blt.n	800aef0 <tcp_oos_insert_segment+0x8c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aede:	8988      	ldrh	r0, [r1, #12]
 800aee0:	f7fc fc9e 	bl	8007820 <lwip_htons>
 800aee4:	f010 0f01 	tst.w	r0, #1
 800aee8:	d0e8      	beq.n	800aebc <tcp_oos_insert_segment+0x58>
 800aeea:	e7dc      	b.n	800aea6 <tcp_oos_insert_segment+0x42>
    next = NULL;
 800aeec:	2400      	movs	r4, #0
 800aeee:	e7d7      	b.n	800aea0 <tcp_oos_insert_segment+0x3c>
    if (next &&
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	ddd5      	ble.n	800aea0 <tcp_oos_insert_segment+0x3c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800aef4:	eba0 010c 	sub.w	r1, r0, ip
 800aef8:	b289      	uxth	r1, r1
 800aefa:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800aefc:	6868      	ldr	r0, [r5, #4]
 800aefe:	f7fe f9e1 	bl	80092c4 <pbuf_realloc>
 800af02:	e7cd      	b.n	800aea0 <tcp_oos_insert_segment+0x3c>
 800af04:	20000fa4 	.word	0x20000fa4
 800af08:	0801812c 	.word	0x0801812c
 800af0c:	080181e0 	.word	0x080181e0
 800af10:	08016a38 	.word	0x08016a38

0800af14 <tcp_receive>:
{
 800af14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800af18:	4604      	mov	r4, r0
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d066      	beq.n	800afec <tcp_receive+0xd8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800af1e:	7e23      	ldrb	r3, [r4, #24]
 800af20:	2b03      	cmp	r3, #3
 800af22:	d96b      	bls.n	800affc <tcp_receive+0xe8>
  if (flags & TCP_ACK) {
 800af24:	4bac      	ldr	r3, [pc, #688]	; (800b1d8 <tcp_receive+0x2c4>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	f013 0f10 	tst.w	r3, #16
 800af2c:	d03a      	beq.n	800afa4 <tcp_receive+0x90>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800af2e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 800af32:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800af34:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800af36:	4ba9      	ldr	r3, [pc, #676]	; (800b1dc <tcp_receive+0x2c8>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	1ad1      	subs	r1, r2, r3
 800af3c:	2900      	cmp	r1, #0
 800af3e:	db0a      	blt.n	800af56 <tcp_receive+0x42>
 800af40:	429a      	cmp	r2, r3
 800af42:	d063      	beq.n	800b00c <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800af44:	4aa6      	ldr	r2, [pc, #664]	; (800b1e0 <tcp_receive+0x2cc>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800af46:	6812      	ldr	r2, [r2, #0]
 800af48:	4290      	cmp	r0, r2
 800af4a:	d114      	bne.n	800af76 <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800af4c:	4aa5      	ldr	r2, [pc, #660]	; (800b1e4 <tcp_receive+0x2d0>)
 800af4e:	6812      	ldr	r2, [r2, #0]
 800af50:	89d2      	ldrh	r2, [r2, #14]
 800af52:	42aa      	cmp	r2, r5
 800af54:	d90f      	bls.n	800af76 <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800af56:	4aa3      	ldr	r2, [pc, #652]	; (800b1e4 <tcp_receive+0x2d0>)
 800af58:	6812      	ldr	r2, [r2, #0]
 800af5a:	89d2      	ldrh	r2, [r2, #14]
 800af5c:	b291      	uxth	r1, r2
 800af5e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800af62:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
 800af66:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
 800af68:	bf38      	it	cc
 800af6a:	f8a4 2066 	strhcc.w	r2, [r4, #102]	; 0x66
      pcb->snd_wl1 = seqno;
 800af6e:	65a3      	str	r3, [r4, #88]	; 0x58
      pcb->snd_wl2 = ackno;
 800af70:	4b9b      	ldr	r3, [pc, #620]	; (800b1e0 <tcp_receive+0x2cc>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800af76:	4b9a      	ldr	r3, [pc, #616]	; (800b1e0 <tcp_receive+0x2cc>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af7c:	1a5a      	subs	r2, r3, r1
 800af7e:	2a00      	cmp	r2, #0
 800af80:	dd4a      	ble.n	800b018 <tcp_receive+0x104>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af82:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800af84:	1a9a      	subs	r2, r3, r2
 800af86:	2a00      	cmp	r2, #0
 800af88:	f340 808a 	ble.w	800b0a0 <tcp_receive+0x18c>
      tcp_send_empty_ack(pcb);
 800af8c:	4620      	mov	r0, r4
 800af8e:	f002 fbc3 	bl	800d718 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800af92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af94:	b133      	cbz	r3, 800afa4 <tcp_receive+0x90>
 800af96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800af98:	4991      	ldr	r1, [pc, #580]	; (800b1e0 <tcp_receive+0x2cc>)
 800af9a:	6809      	ldr	r1, [r1, #0]
 800af9c:	1a52      	subs	r2, r2, r1
 800af9e:	2a00      	cmp	r2, #0
 800afa0:	f2c0 8132 	blt.w	800b208 <tcp_receive+0x2f4>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800afa4:	4b90      	ldr	r3, [pc, #576]	; (800b1e8 <tcp_receive+0x2d4>)
 800afa6:	881a      	ldrh	r2, [r3, #0]
 800afa8:	2a00      	cmp	r2, #0
 800afaa:	d058      	beq.n	800b05e <tcp_receive+0x14a>
 800afac:	7e23      	ldrb	r3, [r4, #24]
 800afae:	2b06      	cmp	r3, #6
 800afb0:	d855      	bhi.n	800b05e <tcp_receive+0x14a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800afb2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800afb4:	4b89      	ldr	r3, [pc, #548]	; (800b1dc <tcp_receive+0x2c8>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	1ace      	subs	r6, r1, r3
 800afba:	2e01      	cmp	r6, #1
 800afbc:	d406      	bmi.n	800afcc <tcp_receive+0xb8>
 800afbe:	f1c3 0001 	rsb	r0, r3, #1
 800afc2:	1a82      	subs	r2, r0, r2
 800afc4:	440a      	add	r2, r1
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	f340 8141 	ble.w	800b24e <tcp_receive+0x33a>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800afcc:	1a5a      	subs	r2, r3, r1
 800afce:	2a00      	cmp	r2, #0
 800afd0:	f2c0 8187 	blt.w	800b2e2 <tcp_receive+0x3ce>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800afd4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800afd6:	f1c2 0201 	rsb	r2, r2, #1
 800afda:	441a      	add	r2, r3
 800afdc:	1a52      	subs	r2, r2, r1
 800afde:	2a00      	cmp	r2, #0
 800afe0:	f340 8184 	ble.w	800b2ec <tcp_receive+0x3d8>
      tcp_send_empty_ack(pcb);
 800afe4:	4620      	mov	r0, r4
 800afe6:	f002 fb97 	bl	800d718 <tcp_send_empty_ack>
 800afea:	e048      	b.n	800b07e <tcp_receive+0x16a>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800afec:	4b7f      	ldr	r3, [pc, #508]	; (800b1ec <tcp_receive+0x2d8>)
 800afee:	f240 427b 	movw	r2, #1147	; 0x47b
 800aff2:	497f      	ldr	r1, [pc, #508]	; (800b1f0 <tcp_receive+0x2dc>)
 800aff4:	487f      	ldr	r0, [pc, #508]	; (800b1f4 <tcp_receive+0x2e0>)
 800aff6:	f009 f95f 	bl	80142b8 <app_debug_rtt_raw>
 800affa:	e790      	b.n	800af1e <tcp_receive+0xa>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800affc:	4b7b      	ldr	r3, [pc, #492]	; (800b1ec <tcp_receive+0x2d8>)
 800affe:	f240 427c 	movw	r2, #1148	; 0x47c
 800b002:	497d      	ldr	r1, [pc, #500]	; (800b1f8 <tcp_receive+0x2e4>)
 800b004:	487b      	ldr	r0, [pc, #492]	; (800b1f4 <tcp_receive+0x2e0>)
 800b006:	f009 f957 	bl	80142b8 <app_debug_rtt_raw>
 800b00a:	e78b      	b.n	800af24 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b00c:	4a74      	ldr	r2, [pc, #464]	; (800b1e0 <tcp_receive+0x2cc>)
 800b00e:	6812      	ldr	r2, [r2, #0]
 800b010:	1a82      	subs	r2, r0, r2
 800b012:	2a00      	cmp	r2, #0
 800b014:	da96      	bge.n	800af44 <tcp_receive+0x30>
 800b016:	e79e      	b.n	800af56 <tcp_receive+0x42>
      if (tcplen == 0) {
 800b018:	4a73      	ldr	r2, [pc, #460]	; (800b1e8 <tcp_receive+0x2d4>)
 800b01a:	8812      	ldrh	r2, [r2, #0]
 800b01c:	b932      	cbnz	r2, 800b02c <tcp_receive+0x118>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b01e:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800b022:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 800b024:	4432      	add	r2, r6
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b026:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b028:	4282      	cmp	r2, r0
 800b02a:	d003      	beq.n	800b034 <tcp_receive+0x120>
        pcb->dupacks = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800b032:	e7ae      	b.n	800af92 <tcp_receive+0x7e>
          if (pcb->rtime >= 0) {
 800b034:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800b038:	2a00      	cmp	r2, #0
 800b03a:	dbf7      	blt.n	800b02c <tcp_receive+0x118>
            if (pcb->lastack == ackno) {
 800b03c:	428b      	cmp	r3, r1
 800b03e:	d1f5      	bne.n	800b02c <tcp_receive+0x118>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b040:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800b044:	2bff      	cmp	r3, #255	; 0xff
 800b046:	d01c      	beq.n	800b082 <tcp_receive+0x16e>
                ++pcb->dupacks;
 800b048:	3301      	adds	r3, #1
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
              if (pcb->dupacks > 3) {
 800b050:	2b03      	cmp	r3, #3
 800b052:	d816      	bhi.n	800b082 <tcp_receive+0x16e>
              if (pcb->dupacks >= 3) {
 800b054:	2b03      	cmp	r3, #3
 800b056:	d01f      	beq.n	800b098 <tcp_receive+0x184>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d19b      	bne.n	800af96 <tcp_receive+0x82>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b05e:	4b5f      	ldr	r3, [pc, #380]	; (800b1dc <tcp_receive+0x2c8>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b064:	1a99      	subs	r1, r3, r2
 800b066:	2900      	cmp	r1, #0
 800b068:	db05      	blt.n	800b076 <tcp_receive+0x162>
 800b06a:	3301      	adds	r3, #1
 800b06c:	1a9b      	subs	r3, r3, r2
 800b06e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800b070:	1a9b      	subs	r3, r3, r2
 800b072:	2b00      	cmp	r3, #0
 800b074:	dd03      	ble.n	800b07e <tcp_receive+0x16a>
      tcp_ack_now(pcb);
 800b076:	8be3      	ldrh	r3, [r4, #30]
 800b078:	f043 0302 	orr.w	r3, r3, #2
 800b07c:	83e3      	strh	r3, [r4, #30]
}
 800b07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b082:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 800b086:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800b088:	4413      	add	r3, r2
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	429a      	cmp	r2, r3
 800b08e:	bf88      	it	hi
 800b090:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800b094:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
                tcp_rexmit_fast(pcb);
 800b098:	4620      	mov	r0, r4
 800b09a:	f002 fab9 	bl	800d610 <tcp_rexmit_fast>
      if (!found_dupack) {
 800b09e:	e778      	b.n	800af92 <tcp_receive+0x7e>
      if (pcb->flags & TF_INFR) {
 800b0a0:	8be2      	ldrh	r2, [r4, #30]
 800b0a2:	f012 0f04 	tst.w	r2, #4
 800b0a6:	d009      	beq.n	800b0bc <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800b0a8:	f022 0204 	bic.w	r2, r2, #4
 800b0ac:	83e2      	strh	r2, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
 800b0ae:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 800b0b2:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
        pcb->bytes_acked = 0;
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8a4 206e 	strh.w	r2, [r4, #110]	; 0x6e
      pcb->nrtx = 0;
 800b0bc:	2000      	movs	r0, #0
 800b0be:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b0c2:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
 800b0c6:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800b0ca:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 800b0ce:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
      pcb->dupacks = 0;
 800b0d2:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
      pcb->lastack = ackno;
 800b0d6:	64a3      	str	r3, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 800b0d8:	7e22      	ldrb	r2, [r4, #24]
 800b0da:	2a03      	cmp	r2, #3
 800b0dc:	d91c      	bls.n	800b118 <tcp_receive+0x204>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b0de:	1a5b      	subs	r3, r3, r1
 800b0e0:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800b0e2:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 800b0e6:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 800b0ea:	428a      	cmp	r2, r1
 800b0ec:	d947      	bls.n	800b17e <tcp_receive+0x26a>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b0ee:	8be2      	ldrh	r2, [r4, #30]
 800b0f0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800b0f4:	bf14      	ite	ne
 800b0f6:	2201      	movne	r2, #1
 800b0f8:	2202      	moveq	r2, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b0fa:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 800b0fc:	fb02 f200 	mul.w	r2, r2, r0
 800b100:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800b102:	429a      	cmp	r2, r3
 800b104:	bf94      	ite	ls
 800b106:	188b      	addls	r3, r1, r2
 800b108:	18cb      	addhi	r3, r1, r3
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	4299      	cmp	r1, r3
 800b10e:	bf88      	it	hi
 800b110:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800b114:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b118:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b11a:	4a38      	ldr	r2, [pc, #224]	; (800b1fc <tcp_receive+0x2e8>)
 800b11c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800b11e:	4620      	mov	r0, r4
 800b120:	f7ff fe34 	bl	800ad8c <tcp_free_acked_segments>
 800b124:	4603      	mov	r3, r0
 800b126:	6760      	str	r0, [r4, #116]	; 0x74
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b128:	4a35      	ldr	r2, [pc, #212]	; (800b200 <tcp_receive+0x2ec>)
 800b12a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b12c:	4620      	mov	r0, r4
 800b12e:	f7ff fe2d 	bl	800ad8c <tcp_free_acked_segments>
 800b132:	6720      	str	r0, [r4, #112]	; 0x70
      if (pcb->unacked == NULL) {
 800b134:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b136:	fab2 f382 	clz	r3, r2
 800b13a:	095b      	lsrs	r3, r3, #5
 800b13c:	425b      	negs	r3, r3
 800b13e:	86a3      	strh	r3, [r4, #52]	; 0x34
      pcb->polltmr = 0;
 800b140:	2300      	movs	r3, #0
 800b142:	f884 3020 	strb.w	r3, [r4, #32]
      if (pcb->unsent == NULL) {
 800b146:	b3a0      	cbz	r0, 800b1b2 <tcp_receive+0x29e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b148:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800b14c:	492d      	ldr	r1, [pc, #180]	; (800b204 <tcp_receive+0x2f0>)
 800b14e:	8809      	ldrh	r1, [r1, #0]
 800b150:	440b      	add	r3, r1
 800b152:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
      if (pcb->flags & TF_RTO) {
 800b156:	8be3      	ldrh	r3, [r4, #30]
 800b158:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800b15c:	f43f af19 	beq.w	800af92 <tcp_receive+0x7e>
        if (pcb->unacked == NULL) {
 800b160:	b352      	cbz	r2, 800b1b8 <tcp_receive+0x2a4>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b162:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800b164:	6913      	ldr	r3, [r2, #16]
 800b166:	6858      	ldr	r0, [r3, #4]
 800b168:	f7fc fb5f 	bl	800782a <lwip_htonl>
 800b16c:	1a2d      	subs	r5, r5, r0
 800b16e:	2d00      	cmp	r5, #0
 800b170:	f73f af0f 	bgt.w	800af92 <tcp_receive+0x7e>
          tcp_clear_flags(pcb, TF_RTO);
 800b174:	8be3      	ldrh	r3, [r4, #30]
 800b176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b17a:	83e3      	strh	r3, [r4, #30]
 800b17c:	e709      	b.n	800af92 <tcp_receive+0x7e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b17e:	f8b4 206e 	ldrh.w	r2, [r4, #110]	; 0x6e
 800b182:	4413      	add	r3, r2
 800b184:	b29b      	uxth	r3, r3
 800b186:	429a      	cmp	r2, r3
 800b188:	d804      	bhi.n	800b194 <tcp_receive+0x280>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b18a:	4299      	cmp	r1, r3
 800b18c:	d904      	bls.n	800b198 <tcp_receive+0x284>
 800b18e:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800b192:	e7c1      	b.n	800b118 <tcp_receive+0x204>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b194:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b198:	1a5b      	subs	r3, r3, r1
 800b19a:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b19e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800b1a0:	440b      	add	r3, r1
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	4299      	cmp	r1, r3
 800b1a6:	bf88      	it	hi
 800b1a8:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800b1ac:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800b1b0:	e7b2      	b.n	800b118 <tcp_receive+0x204>
        pcb->unsent_oversize = 0;
 800b1b2:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800b1b6:	e7c7      	b.n	800b148 <tcp_receive+0x234>
          if ((pcb->unsent == NULL) ||
 800b1b8:	b140      	cbz	r0, 800b1cc <tcp_receive+0x2b8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b1ba:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800b1bc:	6903      	ldr	r3, [r0, #16]
 800b1be:	6858      	ldr	r0, [r3, #4]
 800b1c0:	f7fc fb33 	bl	800782a <lwip_htonl>
 800b1c4:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 800b1c6:	2d00      	cmp	r5, #0
 800b1c8:	f73f aee3 	bgt.w	800af92 <tcp_receive+0x7e>
            tcp_clear_flags(pcb, TF_RTO);
 800b1cc:	8be3      	ldrh	r3, [r4, #30]
 800b1ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1d2:	83e3      	strh	r3, [r4, #30]
 800b1d4:	e6dd      	b.n	800af92 <tcp_receive+0x7e>
 800b1d6:	bf00      	nop
 800b1d8:	20000f80 	.word	0x20000f80
 800b1dc:	20000fa4 	.word	0x20000fa4
 800b1e0:	20000f7c 	.word	0x20000f7c
 800b1e4:	20000fac 	.word	0x20000fac
 800b1e8:	20000fba 	.word	0x20000fba
 800b1ec:	0801812c 	.word	0x0801812c
 800b1f0:	08018208 	.word	0x08018208
 800b1f4:	08016a38 	.word	0x08016a38
 800b1f8:	08018224 	.word	0x08018224
 800b1fc:	08018240 	.word	0x08018240
 800b200:	08018248 	.word	0x08018248
 800b204:	20000f98 	.word	0x20000f98
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b208:	4a9a      	ldr	r2, [pc, #616]	; (800b474 <tcp_receive+0x560>)
 800b20a:	8816      	ldrh	r6, [r2, #0]
 800b20c:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 800b20e:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
 800b212:	f3c5 02cf 	ubfx	r2, r5, #3, #16
 800b216:	1ab1      	subs	r1, r6, r2
 800b218:	1ac9      	subs	r1, r1, r3
 800b21a:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800b21c:	4429      	add	r1, r5
 800b21e:	b209      	sxth	r1, r1
 800b220:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (m < 0) {
 800b224:	2800      	cmp	r0, #0
 800b226:	db0e      	blt.n	800b246 <tcp_receive+0x332>
      m = (s16_t)(m - (pcb->sv >> 2));
 800b228:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
      pcb->sv = (s16_t)(pcb->sv + m);
 800b22c:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 800b230:	1813      	adds	r3, r2, r0
 800b232:	b29b      	uxth	r3, r3
 800b234:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b238:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b23c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
      pcb->rttest = 0;
 800b240:	2300      	movs	r3, #0
 800b242:	63a3      	str	r3, [r4, #56]	; 0x38
 800b244:	e6ae      	b.n	800afa4 <tcp_receive+0x90>
        m = (s16_t) - m;
 800b246:	1b92      	subs	r2, r2, r6
 800b248:	4413      	add	r3, r2
 800b24a:	b218      	sxth	r0, r3
 800b24c:	e7ec      	b.n	800b228 <tcp_receive+0x314>
      struct pbuf *p = inseg.p;
 800b24e:	4b8a      	ldr	r3, [pc, #552]	; (800b478 <tcp_receive+0x564>)
 800b250:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b252:	2d00      	cmp	r5, #0
 800b254:	d02d      	beq.n	800b2b2 <tcp_receive+0x39e>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b256:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b25a:	429e      	cmp	r6, r3
 800b25c:	d831      	bhi.n	800b2c2 <tcp_receive+0x3ae>
      off = (u16_t)off32;
 800b25e:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b260:	4b85      	ldr	r3, [pc, #532]	; (800b478 <tcp_receive+0x564>)
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	891b      	ldrh	r3, [r3, #8]
 800b266:	42b3      	cmp	r3, r6
 800b268:	d333      	bcc.n	800b2d2 <tcp_receive+0x3be>
      inseg.len -= off;
 800b26a:	4b83      	ldr	r3, [pc, #524]	; (800b478 <tcp_receive+0x564>)
 800b26c:	891a      	ldrh	r2, [r3, #8]
 800b26e:	1b92      	subs	r2, r2, r6
 800b270:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	891b      	ldrh	r3, [r3, #8]
 800b276:	1b9b      	subs	r3, r3, r6
 800b278:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800b27a:	8969      	ldrh	r1, [r5, #10]
 800b27c:	428e      	cmp	r6, r1
 800b27e:	d908      	bls.n	800b292 <tcp_receive+0x37e>
        p->len = 0;
 800b280:	2200      	movs	r2, #0
        off -= p->len;
 800b282:	1a71      	subs	r1, r6, r1
 800b284:	b28e      	uxth	r6, r1
        p->tot_len = new_tot_len;
 800b286:	812b      	strh	r3, [r5, #8]
        p->len = 0;
 800b288:	816a      	strh	r2, [r5, #10]
        p = p->next;
 800b28a:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 800b28c:	8969      	ldrh	r1, [r5, #10]
 800b28e:	42b1      	cmp	r1, r6
 800b290:	d3f7      	bcc.n	800b282 <tcp_receive+0x36e>
      pbuf_remove_header(p, off);
 800b292:	4631      	mov	r1, r6
 800b294:	4628      	mov	r0, r5
 800b296:	f7fd fedb 	bl	8009050 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b29a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b29c:	4a77      	ldr	r2, [pc, #476]	; (800b47c <tcp_receive+0x568>)
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	4a75      	ldr	r2, [pc, #468]	; (800b478 <tcp_receive+0x564>)
 800b2a2:	6912      	ldr	r2, [r2, #16]
 800b2a4:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b2a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b2a8:	1a5a      	subs	r2, r3, r1
 800b2aa:	2a00      	cmp	r2, #0
 800b2ac:	f6bf ae92 	bge.w	800afd4 <tcp_receive+0xc0>
 800b2b0:	e698      	b.n	800afe4 <tcp_receive+0xd0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b2b2:	4b73      	ldr	r3, [pc, #460]	; (800b480 <tcp_receive+0x56c>)
 800b2b4:	f240 5294 	movw	r2, #1428	; 0x594
 800b2b8:	4972      	ldr	r1, [pc, #456]	; (800b484 <tcp_receive+0x570>)
 800b2ba:	4873      	ldr	r0, [pc, #460]	; (800b488 <tcp_receive+0x574>)
 800b2bc:	f008 fffc 	bl	80142b8 <app_debug_rtt_raw>
 800b2c0:	e7c9      	b.n	800b256 <tcp_receive+0x342>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b2c2:	4b6f      	ldr	r3, [pc, #444]	; (800b480 <tcp_receive+0x56c>)
 800b2c4:	f240 5295 	movw	r2, #1429	; 0x595
 800b2c8:	4970      	ldr	r1, [pc, #448]	; (800b48c <tcp_receive+0x578>)
 800b2ca:	486f      	ldr	r0, [pc, #444]	; (800b488 <tcp_receive+0x574>)
 800b2cc:	f008 fff4 	bl	80142b8 <app_debug_rtt_raw>
 800b2d0:	e7c5      	b.n	800b25e <tcp_receive+0x34a>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b2d2:	4b6b      	ldr	r3, [pc, #428]	; (800b480 <tcp_receive+0x56c>)
 800b2d4:	f240 5297 	movw	r2, #1431	; 0x597
 800b2d8:	496d      	ldr	r1, [pc, #436]	; (800b490 <tcp_receive+0x57c>)
 800b2da:	486b      	ldr	r0, [pc, #428]	; (800b488 <tcp_receive+0x574>)
 800b2dc:	f008 ffec 	bl	80142b8 <app_debug_rtt_raw>
 800b2e0:	e7c3      	b.n	800b26a <tcp_receive+0x356>
        tcp_ack_now(pcb);
 800b2e2:	8be3      	ldrh	r3, [r4, #30]
 800b2e4:	f043 0302 	orr.w	r3, r3, #2
 800b2e8:	83e3      	strh	r3, [r4, #30]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b2ea:	e67b      	b.n	800afe4 <tcp_receive+0xd0>
      if (pcb->rcv_nxt == seqno) {
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	d008      	beq.n	800b302 <tcp_receive+0x3ee>
        if (pcb->ooseq == NULL) {
 800b2f0:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 800b2f2:	2d00      	cmp	r5, #0
 800b2f4:	f000 817a 	beq.w	800b5ec <tcp_receive+0x6d8>
          struct tcp_seg *next, *prev = NULL;
 800b2f8:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b2fa:	1e5f      	subs	r7, r3, #1
 800b2fc:	f103 0c01 	add.w	ip, r3, #1
 800b300:	e195      	b.n	800b62e <tcp_receive+0x71a>
        tcplen = TCP_TCPLEN(&inseg);
 800b302:	4b5d      	ldr	r3, [pc, #372]	; (800b478 <tcp_receive+0x564>)
 800b304:	891d      	ldrh	r5, [r3, #8]
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	8998      	ldrh	r0, [r3, #12]
 800b30a:	f7fc fa89 	bl	8007820 <lwip_htons>
 800b30e:	f010 0303 	ands.w	r3, r0, #3
 800b312:	bf18      	it	ne
 800b314:	2301      	movne	r3, #1
 800b316:	442b      	add	r3, r5
 800b318:	b29b      	uxth	r3, r3
 800b31a:	4a5e      	ldr	r2, [pc, #376]	; (800b494 <tcp_receive+0x580>)
 800b31c:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800b31e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800b320:	429a      	cmp	r2, r3
 800b322:	d317      	bcc.n	800b354 <tcp_receive+0x440>
        if (pcb->ooseq != NULL) {
 800b324:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 8240 	beq.w	800b7ac <tcp_receive+0x898>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b32c:	4b52      	ldr	r3, [pc, #328]	; (800b478 <tcp_receive+0x564>)
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	8998      	ldrh	r0, [r3, #12]
 800b332:	f7fc fa75 	bl	8007820 <lwip_htons>
 800b336:	f010 0f01 	tst.w	r0, #1
 800b33a:	d053      	beq.n	800b3e4 <tcp_receive+0x4d0>
            while (pcb->ooseq != NULL) {
 800b33c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b33e:	2800      	cmp	r0, #0
 800b340:	f000 8234 	beq.w	800b7ac <tcp_receive+0x898>
              pcb->ooseq = pcb->ooseq->next;
 800b344:	6803      	ldr	r3, [r0, #0]
 800b346:	67a3      	str	r3, [r4, #120]	; 0x78
              tcp_seg_free(old_ooseq);
 800b348:	f7fe fc38 	bl	8009bbc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b34c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b34e:	2800      	cmp	r0, #0
 800b350:	d1f8      	bne.n	800b344 <tcp_receive+0x430>
 800b352:	e22b      	b.n	800b7ac <tcp_receive+0x898>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b354:	4b48      	ldr	r3, [pc, #288]	; (800b478 <tcp_receive+0x564>)
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	8998      	ldrh	r0, [r3, #12]
 800b35a:	f7fc fa61 	bl	8007820 <lwip_htons>
 800b35e:	f010 0f01 	tst.w	r0, #1
 800b362:	d12f      	bne.n	800b3c4 <tcp_receive+0x4b0>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b364:	4b44      	ldr	r3, [pc, #272]	; (800b478 <tcp_receive+0x564>)
 800b366:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800b368:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	8998      	ldrh	r0, [r3, #12]
 800b36e:	f7fc fa57 	bl	8007820 <lwip_htons>
 800b372:	f010 0f02 	tst.w	r0, #2
 800b376:	d003      	beq.n	800b380 <tcp_receive+0x46c>
            inseg.len -= 1;
 800b378:	4a3f      	ldr	r2, [pc, #252]	; (800b478 <tcp_receive+0x564>)
 800b37a:	8913      	ldrh	r3, [r2, #8]
 800b37c:	3b01      	subs	r3, #1
 800b37e:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800b380:	4e3d      	ldr	r6, [pc, #244]	; (800b478 <tcp_receive+0x564>)
 800b382:	8931      	ldrh	r1, [r6, #8]
 800b384:	6870      	ldr	r0, [r6, #4]
 800b386:	f7fd ff9d 	bl	80092c4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b38a:	8935      	ldrh	r5, [r6, #8]
 800b38c:	6933      	ldr	r3, [r6, #16]
 800b38e:	8998      	ldrh	r0, [r3, #12]
 800b390:	f7fc fa46 	bl	8007820 <lwip_htons>
 800b394:	f010 0303 	ands.w	r3, r0, #3
 800b398:	bf18      	it	ne
 800b39a:	2301      	movne	r3, #1
 800b39c:	442b      	add	r3, r5
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	4a3c      	ldr	r2, [pc, #240]	; (800b494 <tcp_receive+0x580>)
 800b3a2:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b3a4:	4a35      	ldr	r2, [pc, #212]	; (800b47c <tcp_receive+0x568>)
 800b3a6:	6812      	ldr	r2, [r2, #0]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800b3ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b3ae:	440a      	add	r2, r1
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d0b7      	beq.n	800b324 <tcp_receive+0x410>
 800b3b4:	4b32      	ldr	r3, [pc, #200]	; (800b480 <tcp_receive+0x56c>)
 800b3b6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b3ba:	4937      	ldr	r1, [pc, #220]	; (800b498 <tcp_receive+0x584>)
 800b3bc:	4832      	ldr	r0, [pc, #200]	; (800b488 <tcp_receive+0x574>)
 800b3be:	f008 ff7b 	bl	80142b8 <app_debug_rtt_raw>
 800b3c2:	e7af      	b.n	800b324 <tcp_receive+0x410>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b3c4:	4e2c      	ldr	r6, [pc, #176]	; (800b478 <tcp_receive+0x564>)
 800b3c6:	6933      	ldr	r3, [r6, #16]
 800b3c8:	899d      	ldrh	r5, [r3, #12]
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	f7fc fa28 	bl	8007820 <lwip_htons>
 800b3d0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800b3d4:	f7fc fa24 	bl	8007820 <lwip_htons>
 800b3d8:	6933      	ldr	r3, [r6, #16]
 800b3da:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800b3de:	4305      	orrs	r5, r0
 800b3e0:	819d      	strh	r5, [r3, #12]
 800b3e2:	e7bf      	b.n	800b364 <tcp_receive+0x450>
            struct tcp_seg *next = pcb->ooseq;
 800b3e4:	6fa5      	ldr	r5, [r4, #120]	; 0x78
            while (next &&
 800b3e6:	2d00      	cmp	r5, #0
 800b3e8:	f000 81da 	beq.w	800b7a0 <tcp_receive+0x88c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b3ec:	4f23      	ldr	r7, [pc, #140]	; (800b47c <tcp_receive+0x568>)
 800b3ee:	4e29      	ldr	r6, [pc, #164]	; (800b494 <tcp_receive+0x580>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b3f0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800b478 <tcp_receive+0x564>
 800b3f4:	e009      	b.n	800b40a <tcp_receive+0x4f6>
              next = next->next;
 800b3f6:	f8d5 9000 	ldr.w	r9, [r5]
              tcp_seg_free(tmp);
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f7fe fbde 	bl	8009bbc <tcp_seg_free>
            while (next &&
 800b400:	f1b9 0f00 	cmp.w	r9, #0
 800b404:	f000 81cc 	beq.w	800b7a0 <tcp_receive+0x88c>
              next = next->next;
 800b408:	464d      	mov	r5, r9
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b40a:	f8d7 c000 	ldr.w	ip, [r7]
 800b40e:	6929      	ldr	r1, [r5, #16]
 800b410:	6848      	ldr	r0, [r1, #4]
 800b412:	8833      	ldrh	r3, [r6, #0]
 800b414:	4463      	add	r3, ip
 800b416:	1a1b      	subs	r3, r3, r0
 800b418:	892a      	ldrh	r2, [r5, #8]
 800b41a:	1a9a      	subs	r2, r3, r2
            while (next &&
 800b41c:	2a00      	cmp	r2, #0
 800b41e:	f2c0 81c1 	blt.w	800b7a4 <tcp_receive+0x890>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b422:	8988      	ldrh	r0, [r1, #12]
 800b424:	f7fc f9fc 	bl	8007820 <lwip_htons>
 800b428:	f010 0f01 	tst.w	r0, #1
 800b42c:	d0e3      	beq.n	800b3f6 <tcp_receive+0x4e2>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b42e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b432:	8998      	ldrh	r0, [r3, #12]
 800b434:	f7fc f9f4 	bl	8007820 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b438:	f010 0f02 	tst.w	r0, #2
 800b43c:	d1db      	bne.n	800b3f6 <tcp_receive+0x4e2>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b43e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b442:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800b446:	2001      	movs	r0, #1
 800b448:	f7fc f9ea 	bl	8007820 <lwip_htons>
 800b44c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b450:	ea49 0900 	orr.w	r9, r9, r0
 800b454:	f8a3 900c 	strh.w	r9, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b458:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800b45c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b460:	8998      	ldrh	r0, [r3, #12]
 800b462:	f7fc f9dd 	bl	8007820 <lwip_htons>
 800b466:	f010 0303 	ands.w	r3, r0, #3
 800b46a:	bf18      	it	ne
 800b46c:	2301      	movne	r3, #1
 800b46e:	444b      	add	r3, r9
 800b470:	8033      	strh	r3, [r6, #0]
 800b472:	e7c0      	b.n	800b3f6 <tcp_receive+0x4e2>
 800b474:	20004358 	.word	0x20004358
 800b478:	20000f84 	.word	0x20000f84
 800b47c:	20000fa4 	.word	0x20000fa4
 800b480:	0801812c 	.word	0x0801812c
 800b484:	08018250 	.word	0x08018250
 800b488:	08016a38 	.word	0x08016a38
 800b48c:	08018260 	.word	0x08018260
 800b490:	08018270 	.word	0x08018270
 800b494:	20000fba 	.word	0x20000fba
 800b498:	08018280 	.word	0x08018280
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b49c:	4baa      	ldr	r3, [pc, #680]	; (800b748 <tcp_receive+0x834>)
 800b49e:	eba0 000c 	sub.w	r0, r0, ip
 800b4a2:	8118      	strh	r0, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	8998      	ldrh	r0, [r3, #12]
 800b4a8:	f7fc f9ba 	bl	8007820 <lwip_htons>
 800b4ac:	f010 0f02 	tst.w	r0, #2
 800b4b0:	d003      	beq.n	800b4ba <tcp_receive+0x5a6>
                inseg.len -= 1;
 800b4b2:	4aa5      	ldr	r2, [pc, #660]	; (800b748 <tcp_receive+0x834>)
 800b4b4:	8913      	ldrh	r3, [r2, #8]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800b4ba:	4fa3      	ldr	r7, [pc, #652]	; (800b748 <tcp_receive+0x834>)
 800b4bc:	8939      	ldrh	r1, [r7, #8]
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7fd ff00 	bl	80092c4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b4c4:	893e      	ldrh	r6, [r7, #8]
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	8998      	ldrh	r0, [r3, #12]
 800b4ca:	f7fc f9a9 	bl	8007820 <lwip_htons>
 800b4ce:	f010 0303 	ands.w	r3, r0, #3
 800b4d2:	bf18      	it	ne
 800b4d4:	2301      	movne	r3, #1
 800b4d6:	4433      	add	r3, r6
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	4a9c      	ldr	r2, [pc, #624]	; (800b74c <tcp_receive+0x838>)
 800b4dc:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b4de:	4a9c      	ldr	r2, [pc, #624]	; (800b750 <tcp_receive+0x83c>)
 800b4e0:	6812      	ldr	r2, [r2, #0]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	692a      	ldr	r2, [r5, #16]
 800b4e6:	6852      	ldr	r2, [r2, #4]
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	f000 815e 	beq.w	800b7aa <tcp_receive+0x896>
 800b4ee:	4b99      	ldr	r3, [pc, #612]	; (800b754 <tcp_receive+0x840>)
 800b4f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b4f4:	4998      	ldr	r1, [pc, #608]	; (800b758 <tcp_receive+0x844>)
 800b4f6:	4899      	ldr	r0, [pc, #612]	; (800b75c <tcp_receive+0x848>)
 800b4f8:	f008 fede 	bl	80142b8 <app_debug_rtt_raw>
 800b4fc:	e155      	b.n	800b7aa <tcp_receive+0x896>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b4fe:	4b95      	ldr	r3, [pc, #596]	; (800b754 <tcp_receive+0x840>)
 800b500:	f240 6207 	movw	r2, #1543	; 0x607
 800b504:	4996      	ldr	r1, [pc, #600]	; (800b760 <tcp_receive+0x84c>)
 800b506:	4895      	ldr	r0, [pc, #596]	; (800b75c <tcp_receive+0x848>)
 800b508:	f008 fed6 	bl	80142b8 <app_debug_rtt_raw>
 800b50c:	e158      	b.n	800b7c0 <tcp_receive+0x8ac>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b50e:	4643      	mov	r3, r8
 800b510:	f240 622b 	movw	r2, #1579	; 0x62b
 800b514:	4639      	mov	r1, r7
 800b516:	4891      	ldr	r0, [pc, #580]	; (800b75c <tcp_receive+0x848>)
 800b518:	f008 fece 	bl	80142b8 <app_debug_rtt_raw>
 800b51c:	e03e      	b.n	800b59c <tcp_receive+0x688>
              pbuf_cat(recv_data, cseg->p);
 800b51e:	f7fd ff55 	bl	80093cc <pbuf_cat>
            cseg->p = NULL;
 800b522:	2300      	movs	r3, #0
 800b524:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b526:	692b      	ldr	r3, [r5, #16]
 800b528:	8998      	ldrh	r0, [r3, #12]
 800b52a:	f7fc f979 	bl	8007820 <lwip_htons>
 800b52e:	f010 0f01 	tst.w	r0, #1
 800b532:	d009      	beq.n	800b548 <tcp_receive+0x634>
            recv_flags |= TF_GOT_FIN;
 800b534:	4a8b      	ldr	r2, [pc, #556]	; (800b764 <tcp_receive+0x850>)
 800b536:	7813      	ldrb	r3, [r2, #0]
 800b538:	f043 0320 	orr.w	r3, r3, #32
 800b53c:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b53e:	7e23      	ldrb	r3, [r4, #24]
 800b540:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800b542:	bf04      	itt	eq
 800b544:	2307      	moveq	r3, #7
 800b546:	7623      	strbeq	r3, [r4, #24]
          pcb->ooseq = cseg->next;
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	67a3      	str	r3, [r4, #120]	; 0x78
          tcp_seg_free(cseg);
 800b54c:	4628      	mov	r0, r5
 800b54e:	f7fe fb35 	bl	8009bbc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b552:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 800b554:	2d00      	cmp	r5, #0
 800b556:	d03d      	beq.n	800b5d4 <tcp_receive+0x6c0>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b558:	692a      	ldr	r2, [r5, #16]
 800b55a:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800b55c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b55e:	428b      	cmp	r3, r1
 800b560:	d138      	bne.n	800b5d4 <tcp_receive+0x6c0>
          seqno = pcb->ooseq->tcphdr->seqno;
 800b562:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b564:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800b568:	8990      	ldrh	r0, [r2, #12]
 800b56a:	f7fc f959 	bl	8007820 <lwip_htons>
 800b56e:	f010 0003 	ands.w	r0, r0, #3
 800b572:	bf18      	it	ne
 800b574:	2001      	movne	r0, #1
 800b576:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b578:	4499      	add	r9, r3
 800b57a:	4448      	add	r0, r9
 800b57c:	62a0      	str	r0, [r4, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b57e:	f8b4 902c 	ldrh.w	r9, [r4, #44]	; 0x2c
 800b582:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800b586:	692b      	ldr	r3, [r5, #16]
 800b588:	8998      	ldrh	r0, [r3, #12]
 800b58a:	f7fc f949 	bl	8007820 <lwip_htons>
 800b58e:	f010 0003 	ands.w	r0, r0, #3
 800b592:	bf18      	it	ne
 800b594:	2001      	movne	r0, #1
 800b596:	4450      	add	r0, sl
 800b598:	4581      	cmp	r9, r0
 800b59a:	d3b8      	bcc.n	800b50e <tcp_receive+0x5fa>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b59c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800b5a0:	692b      	ldr	r3, [r5, #16]
 800b5a2:	8998      	ldrh	r0, [r3, #12]
 800b5a4:	f7fc f93c 	bl	8007820 <lwip_htons>
 800b5a8:	f010 0003 	ands.w	r0, r0, #3
 800b5ac:	bf18      	it	ne
 800b5ae:	2001      	movne	r0, #1
 800b5b0:	4448      	add	r0, r9
 800b5b2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800b5b4:	1a18      	subs	r0, r3, r0
 800b5b6:	85a0      	strh	r0, [r4, #44]	; 0x2c
          tcp_update_rcv_ann_wnd(pcb);
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f7fe fa8b 	bl	8009ad4 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800b5be:	6869      	ldr	r1, [r5, #4]
 800b5c0:	890b      	ldrh	r3, [r1, #8]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0af      	beq.n	800b526 <tcp_receive+0x612>
            if (recv_data) {
 800b5c6:	4b68      	ldr	r3, [pc, #416]	; (800b768 <tcp_receive+0x854>)
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d1a7      	bne.n	800b51e <tcp_receive+0x60a>
              recv_data = cseg->p;
 800b5ce:	4b66      	ldr	r3, [pc, #408]	; (800b768 <tcp_receive+0x854>)
 800b5d0:	6019      	str	r1, [r3, #0]
 800b5d2:	e7a6      	b.n	800b522 <tcp_receive+0x60e>
        tcp_ack(pcb);
 800b5d4:	8be3      	ldrh	r3, [r4, #30]
 800b5d6:	f013 0f01 	tst.w	r3, #1
 800b5da:	bf1a      	itte	ne
 800b5dc:	f023 0301 	bicne.w	r3, r3, #1
 800b5e0:	f043 0302 	orrne.w	r3, r3, #2
 800b5e4:	f043 0301 	orreq.w	r3, r3, #1
 800b5e8:	83e3      	strh	r3, [r4, #30]
 800b5ea:	e548      	b.n	800b07e <tcp_receive+0x16a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b5ec:	4856      	ldr	r0, [pc, #344]	; (800b748 <tcp_receive+0x834>)
 800b5ee:	f7fe fafd 	bl	8009bec <tcp_seg_copy>
 800b5f2:	67a0      	str	r0, [r4, #120]	; 0x78
 800b5f4:	e051      	b.n	800b69a <tcp_receive+0x786>
              if (inseg.len > next->len) {
 800b5f6:	4b54      	ldr	r3, [pc, #336]	; (800b748 <tcp_receive+0x834>)
 800b5f8:	891a      	ldrh	r2, [r3, #8]
 800b5fa:	892b      	ldrh	r3, [r5, #8]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d94c      	bls.n	800b69a <tcp_receive+0x786>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b600:	4851      	ldr	r0, [pc, #324]	; (800b748 <tcp_receive+0x834>)
 800b602:	f7fe faf3 	bl	8009bec <tcp_seg_copy>
                if (cseg != NULL) {
 800b606:	4603      	mov	r3, r0
 800b608:	2800      	cmp	r0, #0
 800b60a:	d046      	beq.n	800b69a <tcp_receive+0x786>
                  if (prev != NULL) {
 800b60c:	b12e      	cbz	r6, 800b61a <tcp_receive+0x706>
                    prev->next = cseg;
 800b60e:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800b610:	4629      	mov	r1, r5
 800b612:	4618      	mov	r0, r3
 800b614:	f7ff fc26 	bl	800ae64 <tcp_oos_insert_segment>
 800b618:	e03f      	b.n	800b69a <tcp_receive+0x786>
                    pcb->ooseq = cseg;
 800b61a:	67a0      	str	r0, [r4, #120]	; 0x78
 800b61c:	e7f8      	b.n	800b610 <tcp_receive+0x6fc>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b61e:	1a99      	subs	r1, r3, r2
 800b620:	2900      	cmp	r1, #0
 800b622:	db27      	blt.n	800b674 <tcp_receive+0x760>
              if (next->next == NULL &&
 800b624:	6829      	ldr	r1, [r5, #0]
 800b626:	462e      	mov	r6, r5
 800b628:	2900      	cmp	r1, #0
 800b62a:	d033      	beq.n	800b694 <tcp_receive+0x780>
 800b62c:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800b62e:	6928      	ldr	r0, [r5, #16]
 800b630:	6842      	ldr	r2, [r0, #4]
 800b632:	429a      	cmp	r2, r3
 800b634:	d0df      	beq.n	800b5f6 <tcp_receive+0x6e2>
              if (prev == NULL) {
 800b636:	2e00      	cmp	r6, #0
 800b638:	d0f1      	beq.n	800b61e <tcp_receive+0x70a>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b63a:	6931      	ldr	r1, [r6, #16]
 800b63c:	6849      	ldr	r1, [r1, #4]
 800b63e:	1a79      	subs	r1, r7, r1
 800b640:	2900      	cmp	r1, #0
 800b642:	dbef      	blt.n	800b624 <tcp_receive+0x710>
 800b644:	ebac 0102 	sub.w	r1, ip, r2
 800b648:	2900      	cmp	r1, #0
 800b64a:	dceb      	bgt.n	800b624 <tcp_receive+0x710>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b64c:	483e      	ldr	r0, [pc, #248]	; (800b748 <tcp_receive+0x834>)
 800b64e:	f7fe facd 	bl	8009bec <tcp_seg_copy>
                  if (cseg != NULL) {
 800b652:	4607      	mov	r7, r0
 800b654:	b308      	cbz	r0, 800b69a <tcp_receive+0x786>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b656:	6933      	ldr	r3, [r6, #16]
 800b658:	6859      	ldr	r1, [r3, #4]
 800b65a:	4b3d      	ldr	r3, [pc, #244]	; (800b750 <tcp_receive+0x83c>)
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	8933      	ldrh	r3, [r6, #8]
 800b660:	440b      	add	r3, r1
 800b662:	1a9b      	subs	r3, r3, r2
 800b664:	2b00      	cmp	r3, #0
 800b666:	dc0e      	bgt.n	800b686 <tcp_receive+0x772>
                    prev->next = cseg;
 800b668:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b66a:	4629      	mov	r1, r5
 800b66c:	4638      	mov	r0, r7
 800b66e:	f7ff fbf9 	bl	800ae64 <tcp_oos_insert_segment>
 800b672:	e012      	b.n	800b69a <tcp_receive+0x786>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b674:	4834      	ldr	r0, [pc, #208]	; (800b748 <tcp_receive+0x834>)
 800b676:	f7fe fab9 	bl	8009bec <tcp_seg_copy>
                  if (cseg != NULL) {
 800b67a:	b170      	cbz	r0, 800b69a <tcp_receive+0x786>
                    pcb->ooseq = cseg;
 800b67c:	67a0      	str	r0, [r4, #120]	; 0x78
                    tcp_oos_insert_segment(cseg, next);
 800b67e:	4629      	mov	r1, r5
 800b680:	f7ff fbf0 	bl	800ae64 <tcp_oos_insert_segment>
 800b684:	e009      	b.n	800b69a <tcp_receive+0x786>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b686:	1a52      	subs	r2, r2, r1
 800b688:	b291      	uxth	r1, r2
 800b68a:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b68c:	6870      	ldr	r0, [r6, #4]
 800b68e:	f7fd fe19 	bl	80092c4 <pbuf_realloc>
 800b692:	e7e9      	b.n	800b668 <tcp_receive+0x754>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b694:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800b696:	2b00      	cmp	r3, #0
 800b698:	dc03      	bgt.n	800b6a2 <tcp_receive+0x78e>
        tcp_send_empty_ack(pcb);
 800b69a:	4620      	mov	r0, r4
 800b69c:	f002 f83c 	bl	800d718 <tcp_send_empty_ack>
 800b6a0:	e4ed      	b.n	800b07e <tcp_receive+0x16a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b6a2:	8980      	ldrh	r0, [r0, #12]
 800b6a4:	f7fc f8bc 	bl	8007820 <lwip_htons>
 800b6a8:	f010 0f01 	tst.w	r0, #1
 800b6ac:	d1f5      	bne.n	800b69a <tcp_receive+0x786>
                next->next = tcp_seg_copy(&inseg);
 800b6ae:	4826      	ldr	r0, [pc, #152]	; (800b748 <tcp_receive+0x834>)
 800b6b0:	f7fe fa9c 	bl	8009bec <tcp_seg_copy>
 800b6b4:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d0ef      	beq.n	800b69a <tcp_receive+0x786>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b6ba:	692b      	ldr	r3, [r5, #16]
 800b6bc:	6859      	ldr	r1, [r3, #4]
 800b6be:	4b24      	ldr	r3, [pc, #144]	; (800b750 <tcp_receive+0x83c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	892a      	ldrh	r2, [r5, #8]
 800b6c4:	440a      	add	r2, r1
 800b6c6:	1ad2      	subs	r2, r2, r3
 800b6c8:	2a00      	cmp	r2, #0
 800b6ca:	dc51      	bgt.n	800b770 <tcp_receive+0x85c>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b6cc:	4b1f      	ldr	r3, [pc, #124]	; (800b74c <tcp_receive+0x838>)
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	4a1f      	ldr	r2, [pc, #124]	; (800b750 <tcp_receive+0x83c>)
 800b6d2:	6812      	ldr	r2, [r2, #0]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b6d8:	1a9b      	subs	r3, r3, r2
 800b6da:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	dddb      	ble.n	800b69a <tcp_receive+0x786>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b6e2:	682b      	ldr	r3, [r5, #0]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	8998      	ldrh	r0, [r3, #12]
 800b6e8:	f7fc f89a 	bl	8007820 <lwip_htons>
 800b6ec:	f010 0f01 	tst.w	r0, #1
 800b6f0:	d145      	bne.n	800b77e <tcp_receive+0x86a>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b6f2:	682a      	ldr	r2, [r5, #0]
 800b6f4:	4e16      	ldr	r6, [pc, #88]	; (800b750 <tcp_receive+0x83c>)
 800b6f6:	6831      	ldr	r1, [r6, #0]
 800b6f8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800b6fa:	1a5b      	subs	r3, r3, r1
 800b6fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b6fe:	440b      	add	r3, r1
 800b700:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b702:	682b      	ldr	r3, [r5, #0]
 800b704:	8919      	ldrh	r1, [r3, #8]
 800b706:	6858      	ldr	r0, [r3, #4]
 800b708:	f7fd fddc 	bl	80092c4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b70c:	682b      	ldr	r3, [r5, #0]
 800b70e:	891d      	ldrh	r5, [r3, #8]
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	8998      	ldrh	r0, [r3, #12]
 800b714:	f7fc f884 	bl	8007820 <lwip_htons>
 800b718:	f010 0303 	ands.w	r3, r0, #3
 800b71c:	bf18      	it	ne
 800b71e:	2301      	movne	r3, #1
 800b720:	442b      	add	r3, r5
 800b722:	b29b      	uxth	r3, r3
 800b724:	4a09      	ldr	r2, [pc, #36]	; (800b74c <tcp_receive+0x838>)
 800b726:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b728:	6832      	ldr	r2, [r6, #0]
 800b72a:	4413      	add	r3, r2
 800b72c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800b72e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b730:	440a      	add	r2, r1
 800b732:	4293      	cmp	r3, r2
 800b734:	d0b1      	beq.n	800b69a <tcp_receive+0x786>
 800b736:	4b07      	ldr	r3, [pc, #28]	; (800b754 <tcp_receive+0x840>)
 800b738:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b73c:	490b      	ldr	r1, [pc, #44]	; (800b76c <tcp_receive+0x858>)
 800b73e:	4807      	ldr	r0, [pc, #28]	; (800b75c <tcp_receive+0x848>)
 800b740:	f008 fdba 	bl	80142b8 <app_debug_rtt_raw>
 800b744:	e7a9      	b.n	800b69a <tcp_receive+0x786>
 800b746:	bf00      	nop
 800b748:	20000f84 	.word	0x20000f84
 800b74c:	20000fba 	.word	0x20000fba
 800b750:	20000fa4 	.word	0x20000fa4
 800b754:	0801812c 	.word	0x0801812c
 800b758:	080182b8 	.word	0x080182b8
 800b75c:	08016a38 	.word	0x08016a38
 800b760:	080182f4 	.word	0x080182f4
 800b764:	20000fa0 	.word	0x20000fa0
 800b768:	20000f9c 	.word	0x20000f9c
 800b76c:	08018280 	.word	0x08018280
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b770:	1a5b      	subs	r3, r3, r1
 800b772:	b299      	uxth	r1, r3
 800b774:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800b776:	6868      	ldr	r0, [r5, #4]
 800b778:	f7fd fda4 	bl	80092c4 <pbuf_realloc>
 800b77c:	e7a6      	b.n	800b6cc <tcp_receive+0x7b8>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b77e:	682b      	ldr	r3, [r5, #0]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	899e      	ldrh	r6, [r3, #12]
 800b784:	4630      	mov	r0, r6
 800b786:	f7fc f84b 	bl	8007820 <lwip_htons>
 800b78a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800b78e:	f7fc f847 	bl	8007820 <lwip_htons>
 800b792:	682b      	ldr	r3, [r5, #0]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800b79a:	4306      	orrs	r6, r0
 800b79c:	819e      	strh	r6, [r3, #12]
 800b79e:	e7a8      	b.n	800b6f2 <tcp_receive+0x7de>
              next = next->next;
 800b7a0:	2500      	movs	r5, #0
 800b7a2:	e002      	b.n	800b7aa <tcp_receive+0x896>
            if (next &&
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f73f ae79 	bgt.w	800b49c <tcp_receive+0x588>
            pcb->ooseq = next;
 800b7aa:	67a5      	str	r5, [r4, #120]	; 0x78
        pcb->rcv_nxt = seqno + tcplen;
 800b7ac:	4b18      	ldr	r3, [pc, #96]	; (800b810 <tcp_receive+0x8fc>)
 800b7ae:	881a      	ldrh	r2, [r3, #0]
 800b7b0:	4b18      	ldr	r3, [pc, #96]	; (800b814 <tcp_receive+0x900>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	62a3      	str	r3, [r4, #40]	; 0x28
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b7b8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	f4ff ae9f 	bcc.w	800b4fe <tcp_receive+0x5ea>
        pcb->rcv_wnd -= tcplen;
 800b7c0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800b7c2:	4a13      	ldr	r2, [pc, #76]	; (800b810 <tcp_receive+0x8fc>)
 800b7c4:	8812      	ldrh	r2, [r2, #0]
 800b7c6:	1a9b      	subs	r3, r3, r2
 800b7c8:	85a3      	strh	r3, [r4, #44]	; 0x2c
        tcp_update_rcv_ann_wnd(pcb);
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f7fe f982 	bl	8009ad4 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800b7d0:	4b11      	ldr	r3, [pc, #68]	; (800b818 <tcp_receive+0x904>)
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	891a      	ldrh	r2, [r3, #8]
 800b7d6:	b122      	cbz	r2, 800b7e2 <tcp_receive+0x8ce>
          recv_data = inseg.p;
 800b7d8:	4a10      	ldr	r2, [pc, #64]	; (800b81c <tcp_receive+0x908>)
 800b7da:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800b7dc:	4b0e      	ldr	r3, [pc, #56]	; (800b818 <tcp_receive+0x904>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b7e2:	4b0d      	ldr	r3, [pc, #52]	; (800b818 <tcp_receive+0x904>)
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	8998      	ldrh	r0, [r3, #12]
 800b7e8:	f7fc f81a 	bl	8007820 <lwip_htons>
 800b7ec:	f010 0f01 	tst.w	r0, #1
 800b7f0:	d004      	beq.n	800b7fc <tcp_receive+0x8e8>
          recv_flags |= TF_GOT_FIN;
 800b7f2:	4a0b      	ldr	r2, [pc, #44]	; (800b820 <tcp_receive+0x90c>)
 800b7f4:	7813      	ldrb	r3, [r2, #0]
 800b7f6:	f043 0320 	orr.w	r3, r3, #32
 800b7fa:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800b7fc:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 800b7fe:	2d00      	cmp	r5, #0
 800b800:	f43f aee8 	beq.w	800b5d4 <tcp_receive+0x6c0>
          seqno = pcb->ooseq->tcphdr->seqno;
 800b804:	4e03      	ldr	r6, [pc, #12]	; (800b814 <tcp_receive+0x900>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b806:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800b828 <tcp_receive+0x914>
 800b80a:	4f06      	ldr	r7, [pc, #24]	; (800b824 <tcp_receive+0x910>)
 800b80c:	e6a4      	b.n	800b558 <tcp_receive+0x644>
 800b80e:	bf00      	nop
 800b810:	20000fba 	.word	0x20000fba
 800b814:	20000fa4 	.word	0x20000fa4
 800b818:	20000f84 	.word	0x20000f84
 800b81c:	20000f9c 	.word	0x20000f9c
 800b820:	20000fa0 	.word	0x20000fa0
 800b824:	08018314 	.word	0x08018314
 800b828:	0801812c 	.word	0x0801812c

0800b82c <tcp_input>:
{
 800b82c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b830:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b832:	4604      	mov	r4, r0
 800b834:	b158      	cbz	r0, 800b84e <tcp_input+0x22>
  tcphdr = (struct tcp_hdr *)p->payload;
 800b836:	6862      	ldr	r2, [r4, #4]
 800b838:	4b7c      	ldr	r3, [pc, #496]	; (800ba2c <tcp_input+0x200>)
 800b83a:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800b83c:	8963      	ldrh	r3, [r4, #10]
 800b83e:	2b13      	cmp	r3, #19
 800b840:	d80c      	bhi.n	800b85c <tcp_input+0x30>
  pbuf_free(p);
 800b842:	4620      	mov	r0, r4
 800b844:	f7fd fc44 	bl	80090d0 <pbuf_free>
}
 800b848:	b005      	add	sp, #20
 800b84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b84e:	4b78      	ldr	r3, [pc, #480]	; (800ba30 <tcp_input+0x204>)
 800b850:	2283      	movs	r2, #131	; 0x83
 800b852:	4978      	ldr	r1, [pc, #480]	; (800ba34 <tcp_input+0x208>)
 800b854:	4878      	ldr	r0, [pc, #480]	; (800ba38 <tcp_input+0x20c>)
 800b856:	f008 fd2f 	bl	80142b8 <app_debug_rtt_raw>
 800b85a:	e7ec      	b.n	800b836 <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b85c:	4b77      	ldr	r3, [pc, #476]	; (800ba3c <tcp_input+0x210>)
 800b85e:	6819      	ldr	r1, [r3, #0]
 800b860:	6958      	ldr	r0, [r3, #20]
 800b862:	f003 fa14 	bl	800ec8e <ip4_addr_isbroadcast_u32>
 800b866:	2800      	cmp	r0, #0
 800b868:	d1eb      	bne.n	800b842 <tcp_input+0x16>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b86a:	4b74      	ldr	r3, [pc, #464]	; (800ba3c <tcp_input+0x210>)
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b872:	2be0      	cmp	r3, #224	; 0xe0
 800b874:	d0e5      	beq.n	800b842 <tcp_input+0x16>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800b876:	4b72      	ldr	r3, [pc, #456]	; (800ba40 <tcp_input+0x214>)
 800b878:	1d1a      	adds	r2, r3, #4
 800b87a:	9200      	str	r2, [sp, #0]
 800b87c:	8922      	ldrh	r2, [r4, #8]
 800b87e:	2106      	movs	r1, #6
 800b880:	4620      	mov	r0, r4
 800b882:	f7fc fdbb 	bl	80083fc <ip_chksum_pseudo>
    if (chksum != 0) {
 800b886:	2800      	cmp	r0, #0
 800b888:	d1db      	bne.n	800b842 <tcp_input+0x16>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b88a:	4b68      	ldr	r3, [pc, #416]	; (800ba2c <tcp_input+0x200>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	8998      	ldrh	r0, [r3, #12]
 800b890:	f7fb ffc6 	bl	8007820 <lwip_htons>
 800b894:	0a81      	lsrs	r1, r0, #10
 800b896:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b89a:	2913      	cmp	r1, #19
 800b89c:	d9d1      	bls.n	800b842 <tcp_input+0x16>
 800b89e:	b28b      	uxth	r3, r1
 800b8a0:	8922      	ldrh	r2, [r4, #8]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d3cd      	bcc.n	800b842 <tcp_input+0x16>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b8a6:	f1a3 0214 	sub.w	r2, r3, #20
 800b8aa:	b292      	uxth	r2, r2
 800b8ac:	4865      	ldr	r0, [pc, #404]	; (800ba44 <tcp_input+0x218>)
 800b8ae:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800b8b0:	4865      	ldr	r0, [pc, #404]	; (800ba48 <tcp_input+0x21c>)
 800b8b2:	2500      	movs	r5, #0
 800b8b4:	6005      	str	r5, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800b8b6:	8960      	ldrh	r0, [r4, #10]
 800b8b8:	4298      	cmp	r0, r3
 800b8ba:	d22e      	bcs.n	800b91a <tcp_input+0xee>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d068      	beq.n	800b994 <tcp_input+0x168>
    pbuf_remove_header(p, TCP_HLEN);
 800b8c2:	2114      	movs	r1, #20
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f7fd fbc3 	bl	8009050 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800b8ca:	8965      	ldrh	r5, [r4, #10]
 800b8cc:	4b5f      	ldr	r3, [pc, #380]	; (800ba4c <tcp_input+0x220>)
 800b8ce:	801d      	strh	r5, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b8d0:	4b5c      	ldr	r3, [pc, #368]	; (800ba44 <tcp_input+0x218>)
 800b8d2:	881f      	ldrh	r7, [r3, #0]
 800b8d4:	1b7e      	subs	r6, r7, r5
 800b8d6:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 800b8d8:	4629      	mov	r1, r5
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f7fd fbb8 	bl	8009050 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800b8e0:	6820      	ldr	r0, [r4, #0]
 800b8e2:	8943      	ldrh	r3, [r0, #10]
 800b8e4:	42b3      	cmp	r3, r6
 800b8e6:	d3ac      	bcc.n	800b842 <tcp_input+0x16>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b8e8:	6842      	ldr	r2, [r0, #4]
 800b8ea:	4b57      	ldr	r3, [pc, #348]	; (800ba48 <tcp_input+0x21c>)
 800b8ec:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800b8ee:	4631      	mov	r1, r6
 800b8f0:	f7fd fbae 	bl	8009050 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b8f4:	8923      	ldrh	r3, [r4, #8]
 800b8f6:	442b      	add	r3, r5
 800b8f8:	1bdb      	subs	r3, r3, r7
 800b8fa:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b8fc:	8963      	ldrh	r3, [r4, #10]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d14f      	bne.n	800b9a2 <tcp_input+0x176>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	8922      	ldrh	r2, [r4, #8]
 800b906:	891b      	ldrh	r3, [r3, #8]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d00b      	beq.n	800b924 <tcp_input+0xf8>
 800b90c:	4b48      	ldr	r3, [pc, #288]	; (800ba30 <tcp_input+0x204>)
 800b90e:	22e0      	movs	r2, #224	; 0xe0
 800b910:	494f      	ldr	r1, [pc, #316]	; (800ba50 <tcp_input+0x224>)
 800b912:	4849      	ldr	r0, [pc, #292]	; (800ba38 <tcp_input+0x20c>)
 800b914:	f008 fcd0 	bl	80142b8 <app_debug_rtt_raw>
 800b918:	e004      	b.n	800b924 <tcp_input+0xf8>
    tcphdr_opt1len = tcphdr_optlen;
 800b91a:	4b4c      	ldr	r3, [pc, #304]	; (800ba4c <tcp_input+0x220>)
 800b91c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b91e:	4620      	mov	r0, r4
 800b920:	f7fd fb96 	bl	8009050 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b924:	4d41      	ldr	r5, [pc, #260]	; (800ba2c <tcp_input+0x200>)
 800b926:	682e      	ldr	r6, [r5, #0]
 800b928:	8830      	ldrh	r0, [r6, #0]
 800b92a:	f7fb ff79 	bl	8007820 <lwip_htons>
 800b92e:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b930:	682e      	ldr	r6, [r5, #0]
 800b932:	8870      	ldrh	r0, [r6, #2]
 800b934:	f7fb ff74 	bl	8007820 <lwip_htons>
 800b938:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b93a:	682e      	ldr	r6, [r5, #0]
 800b93c:	6870      	ldr	r0, [r6, #4]
 800b93e:	f7fb ff74 	bl	800782a <lwip_htonl>
 800b942:	6070      	str	r0, [r6, #4]
 800b944:	4b43      	ldr	r3, [pc, #268]	; (800ba54 <tcp_input+0x228>)
 800b946:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b948:	682e      	ldr	r6, [r5, #0]
 800b94a:	68b0      	ldr	r0, [r6, #8]
 800b94c:	f7fb ff6d 	bl	800782a <lwip_htonl>
 800b950:	60b0      	str	r0, [r6, #8]
 800b952:	4b41      	ldr	r3, [pc, #260]	; (800ba58 <tcp_input+0x22c>)
 800b954:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b956:	682e      	ldr	r6, [r5, #0]
 800b958:	89f0      	ldrh	r0, [r6, #14]
 800b95a:	f7fb ff61 	bl	8007820 <lwip_htons>
 800b95e:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	8998      	ldrh	r0, [r3, #12]
 800b964:	f7fb ff5c 	bl	8007820 <lwip_htons>
 800b968:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800b96c:	4b3b      	ldr	r3, [pc, #236]	; (800ba5c <tcp_input+0x230>)
 800b96e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b970:	8923      	ldrh	r3, [r4, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b972:	f010 0f03 	tst.w	r0, #3
 800b976:	d11b      	bne.n	800b9b0 <tcp_input+0x184>
  tcplen = p->tot_len;
 800b978:	4a39      	ldr	r2, [pc, #228]	; (800ba60 <tcp_input+0x234>)
 800b97a:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b97c:	4b39      	ldr	r3, [pc, #228]	; (800ba64 <tcp_input+0x238>)
 800b97e:	681d      	ldr	r5, [r3, #0]
 800b980:	2d00      	cmp	r5, #0
 800b982:	f000 8574 	beq.w	800c46e <tcp_input+0xc42>
  prev = NULL;
 800b986:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b988:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800ba30 <tcp_input+0x204>
 800b98c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800ba78 <tcp_input+0x24c>
 800b990:	4f29      	ldr	r7, [pc, #164]	; (800ba38 <tcp_input+0x20c>)
 800b992:	e035      	b.n	800ba00 <tcp_input+0x1d4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b994:	4b26      	ldr	r3, [pc, #152]	; (800ba30 <tcp_input+0x204>)
 800b996:	22c2      	movs	r2, #194	; 0xc2
 800b998:	4933      	ldr	r1, [pc, #204]	; (800ba68 <tcp_input+0x23c>)
 800b99a:	4827      	ldr	r0, [pc, #156]	; (800ba38 <tcp_input+0x20c>)
 800b99c:	f008 fc8c 	bl	80142b8 <app_debug_rtt_raw>
 800b9a0:	e78f      	b.n	800b8c2 <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b9a2:	4b23      	ldr	r3, [pc, #140]	; (800ba30 <tcp_input+0x204>)
 800b9a4:	22df      	movs	r2, #223	; 0xdf
 800b9a6:	4931      	ldr	r1, [pc, #196]	; (800ba6c <tcp_input+0x240>)
 800b9a8:	4823      	ldr	r0, [pc, #140]	; (800ba38 <tcp_input+0x20c>)
 800b9aa:	f008 fc85 	bl	80142b8 <app_debug_rtt_raw>
 800b9ae:	e7a8      	b.n	800b902 <tcp_input+0xd6>
    tcplen++;
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	b292      	uxth	r2, r2
 800b9b4:	492a      	ldr	r1, [pc, #168]	; (800ba60 <tcp_input+0x234>)
 800b9b6:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d9df      	bls.n	800b97c <tcp_input+0x150>
 800b9bc:	e741      	b.n	800b842 <tcp_input+0x16>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b9be:	4643      	mov	r3, r8
 800b9c0:	22fb      	movs	r2, #251	; 0xfb
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f008 fc77 	bl	80142b8 <app_debug_rtt_raw>
 800b9ca:	e01c      	b.n	800ba06 <tcp_input+0x1da>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b9cc:	4643      	mov	r3, r8
 800b9ce:	22fc      	movs	r2, #252	; 0xfc
 800b9d0:	4927      	ldr	r1, [pc, #156]	; (800ba70 <tcp_input+0x244>)
 800b9d2:	4638      	mov	r0, r7
 800b9d4:	f008 fc70 	bl	80142b8 <app_debug_rtt_raw>
 800b9d8:	e018      	b.n	800ba0c <tcp_input+0x1e0>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b9da:	4643      	mov	r3, r8
 800b9dc:	22fd      	movs	r2, #253	; 0xfd
 800b9de:	4925      	ldr	r1, [pc, #148]	; (800ba74 <tcp_input+0x248>)
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f008 fc69 	bl	80142b8 <app_debug_rtt_raw>
 800b9e6:	e014      	b.n	800ba12 <tcp_input+0x1e6>
    if (pcb->remote_port == tcphdr->src &&
 800b9e8:	4b10      	ldr	r3, [pc, #64]	; (800ba2c <tcp_input+0x200>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	8ba9      	ldrh	r1, [r5, #28]
 800b9ee:	881a      	ldrh	r2, [r3, #0]
 800b9f0:	4291      	cmp	r1, r2
 800b9f2:	d043      	beq.n	800ba7c <tcp_input+0x250>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9f4:	692b      	ldr	r3, [r5, #16]
 800b9f6:	462e      	mov	r6, r5
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 8538 	beq.w	800c46e <tcp_input+0xc42>
 800b9fe:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ba00:	7e2b      	ldrb	r3, [r5, #24]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d0db      	beq.n	800b9be <tcp_input+0x192>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ba06:	7e2b      	ldrb	r3, [r5, #24]
 800ba08:	2b0a      	cmp	r3, #10
 800ba0a:	d0df      	beq.n	800b9cc <tcp_input+0x1a0>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ba0c:	7e2b      	ldrb	r3, [r5, #24]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d0e3      	beq.n	800b9da <tcp_input+0x1ae>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba12:	7a2a      	ldrb	r2, [r5, #8]
 800ba14:	2a00      	cmp	r2, #0
 800ba16:	d0e7      	beq.n	800b9e8 <tcp_input+0x1bc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba18:	4b08      	ldr	r3, [pc, #32]	; (800ba3c <tcp_input+0x210>)
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba20:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d0df      	beq.n	800b9e8 <tcp_input+0x1bc>
 800ba28:	e7e4      	b.n	800b9f4 <tcp_input+0x1c8>
 800ba2a:	bf00      	nop
 800ba2c:	20000fac 	.word	0x20000fac
 800ba30:	0801812c 	.word	0x0801812c
 800ba34:	0801833c 	.word	0x0801833c
 800ba38:	08016a38 	.word	0x08016a38
 800ba3c:	20002d00 	.word	0x20002d00
 800ba40:	20002d10 	.word	0x20002d10
 800ba44:	20000fb8 	.word	0x20000fb8
 800ba48:	20000fb4 	.word	0x20000fb4
 800ba4c:	20000fb0 	.word	0x20000fb0
 800ba50:	08018370 	.word	0x08018370
 800ba54:	20000fa4 	.word	0x20000fa4
 800ba58:	20000f7c 	.word	0x20000f7c
 800ba5c:	20000f80 	.word	0x20000f80
 800ba60:	20000fba 	.word	0x20000fba
 800ba64:	20004354 	.word	0x20004354
 800ba68:	08018354 	.word	0x08018354
 800ba6c:	08018364 	.word	0x08018364
 800ba70:	080183b8 	.word	0x080183b8
 800ba74:	080183e4 	.word	0x080183e4
 800ba78:	08018390 	.word	0x08018390
    if (pcb->remote_port == tcphdr->src &&
 800ba7c:	8b6a      	ldrh	r2, [r5, #26]
 800ba7e:	885b      	ldrh	r3, [r3, #2]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d1b7      	bne.n	800b9f4 <tcp_input+0x1c8>
        pcb->local_port == tcphdr->dest &&
 800ba84:	686a      	ldr	r2, [r5, #4]
 800ba86:	4b9b      	ldr	r3, [pc, #620]	; (800bcf4 <tcp_input+0x4c8>)
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d1b2      	bne.n	800b9f4 <tcp_input+0x1c8>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba8e:	682a      	ldr	r2, [r5, #0]
 800ba90:	4b98      	ldr	r3, [pc, #608]	; (800bcf4 <tcp_input+0x4c8>)
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d1ad      	bne.n	800b9f4 <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ba98:	692b      	ldr	r3, [r5, #16]
 800ba9a:	42ab      	cmp	r3, r5
 800ba9c:	d04d      	beq.n	800bb3a <tcp_input+0x30e>
      if (prev != NULL) {
 800ba9e:	b146      	cbz	r6, 800bab2 <tcp_input+0x286>
        prev->next = pcb->next;
 800baa0:	692b      	ldr	r3, [r5, #16]
 800baa2:	6133      	str	r3, [r6, #16]
        pcb->next = tcp_active_pcbs;
 800baa4:	4b94      	ldr	r3, [pc, #592]	; (800bcf8 <tcp_input+0x4cc>)
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	612a      	str	r2, [r5, #16]
        tcp_active_pcbs = pcb;
 800baaa:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800baac:	692b      	ldr	r3, [r5, #16]
 800baae:	42ab      	cmp	r3, r5
 800bab0:	d04d      	beq.n	800bb4e <tcp_input+0x322>
    inseg.next = NULL;
 800bab2:	4a92      	ldr	r2, [pc, #584]	; (800bcfc <tcp_input+0x4d0>)
 800bab4:	2300      	movs	r3, #0
 800bab6:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800bab8:	8921      	ldrh	r1, [r4, #8]
 800baba:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800babc:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 800babe:	4990      	ldr	r1, [pc, #576]	; (800bd00 <tcp_input+0x4d4>)
 800bac0:	6809      	ldr	r1, [r1, #0]
 800bac2:	6111      	str	r1, [r2, #16]
    recv_data = NULL;
 800bac4:	4a8f      	ldr	r2, [pc, #572]	; (800bd04 <tcp_input+0x4d8>)
 800bac6:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800bac8:	4a8f      	ldr	r2, [pc, #572]	; (800bd08 <tcp_input+0x4dc>)
 800baca:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800bacc:	4a8f      	ldr	r2, [pc, #572]	; (800bd0c <tcp_input+0x4e0>)
 800bace:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800bad0:	4b8f      	ldr	r3, [pc, #572]	; (800bd10 <tcp_input+0x4e4>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	f013 0f08 	tst.w	r3, #8
 800bad8:	f040 8195 	bne.w	800be06 <tcp_input+0x5da>
    if (pcb->refused_data != NULL) {
 800badc:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800bade:	b16b      	cbz	r3, 800bafc <tcp_input+0x2d0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bae0:	4628      	mov	r0, r5
 800bae2:	f7fe fda9 	bl	800a638 <tcp_process_refused_data>
 800bae6:	f110 0f0d 	cmn.w	r0, #13
 800baea:	f000 8191 	beq.w	800be10 <tcp_input+0x5e4>
 800baee:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800baf0:	b123      	cbz	r3, 800bafc <tcp_input+0x2d0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800baf2:	4b88      	ldr	r3, [pc, #544]	; (800bd14 <tcp_input+0x4e8>)
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f040 818a 	bne.w	800be10 <tcp_input+0x5e4>
    tcp_input_pcb = pcb;
 800bafc:	4b86      	ldr	r3, [pc, #536]	; (800bd18 <tcp_input+0x4ec>)
 800bafe:	601d      	str	r5, [r3, #0]
  if (flags & TCP_RST) {
 800bb00:	4b83      	ldr	r3, [pc, #524]	; (800bd10 <tcp_input+0x4e4>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	f013 0f04 	tst.w	r3, #4
 800bb08:	f000 81c3 	beq.w	800be92 <tcp_input+0x666>
    if (pcb->state == SYN_SENT) {
 800bb0c:	7e29      	ldrb	r1, [r5, #24]
 800bb0e:	2902      	cmp	r1, #2
 800bb10:	f000 8184 	beq.w	800be1c <tcp_input+0x5f0>
      if (seqno == pcb->rcv_nxt) {
 800bb14:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800bb16:	4b81      	ldr	r3, [pc, #516]	; (800bd1c <tcp_input+0x4f0>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	f000 81a7 	beq.w	800be6e <tcp_input+0x642>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bb20:	1a9b      	subs	r3, r3, r2
 800bb22:	f100 8180 	bmi.w	800be26 <tcp_input+0x5fa>
 800bb26:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800bb28:	1a9b      	subs	r3, r3, r2
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f300 817b 	bgt.w	800be26 <tcp_input+0x5fa>
        tcp_ack_now(pcb);
 800bb30:	8beb      	ldrh	r3, [r5, #30]
 800bb32:	f043 0302 	orr.w	r3, r3, #2
 800bb36:	83eb      	strh	r3, [r5, #30]
    if (acceptable) {
 800bb38:	e175      	b.n	800be26 <tcp_input+0x5fa>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bb3a:	4b79      	ldr	r3, [pc, #484]	; (800bd20 <tcp_input+0x4f4>)
 800bb3c:	f240 120d 	movw	r2, #269	; 0x10d
 800bb40:	4978      	ldr	r1, [pc, #480]	; (800bd24 <tcp_input+0x4f8>)
 800bb42:	4879      	ldr	r0, [pc, #484]	; (800bd28 <tcp_input+0x4fc>)
 800bb44:	f008 fbb8 	bl	80142b8 <app_debug_rtt_raw>
      if (prev != NULL) {
 800bb48:	2e00      	cmp	r6, #0
 800bb4a:	d1a9      	bne.n	800baa0 <tcp_input+0x274>
 800bb4c:	e7ae      	b.n	800baac <tcp_input+0x280>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bb4e:	4b74      	ldr	r3, [pc, #464]	; (800bd20 <tcp_input+0x4f4>)
 800bb50:	f240 1215 	movw	r2, #277	; 0x115
 800bb54:	4975      	ldr	r1, [pc, #468]	; (800bd2c <tcp_input+0x500>)
 800bb56:	4874      	ldr	r0, [pc, #464]	; (800bd28 <tcp_input+0x4fc>)
 800bb58:	f008 fbae 	bl	80142b8 <app_debug_rtt_raw>
 800bb5c:	e7a9      	b.n	800bab2 <tcp_input+0x286>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bb5e:	4643      	mov	r3, r8
 800bb60:	f240 121f 	movw	r2, #287	; 0x11f
 800bb64:	4639      	mov	r1, r7
 800bb66:	4630      	mov	r0, r6
 800bb68:	f008 fba6 	bl	80142b8 <app_debug_rtt_raw>
 800bb6c:	e00b      	b.n	800bb86 <tcp_input+0x35a>
      if (pcb->remote_port == tcphdr->src &&
 800bb6e:	4b64      	ldr	r3, [pc, #400]	; (800bd00 <tcp_input+0x4d4>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	8819      	ldrh	r1, [r3, #0]
 800bb74:	8baa      	ldrh	r2, [r5, #28]
 800bb76:	428a      	cmp	r2, r1
 800bb78:	d011      	beq.n	800bb9e <tcp_input+0x372>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb7a:	692d      	ldr	r5, [r5, #16]
 800bb7c:	2d00      	cmp	r5, #0
 800bb7e:	d051      	beq.n	800bc24 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bb80:	7e2b      	ldrb	r3, [r5, #24]
 800bb82:	2b0a      	cmp	r3, #10
 800bb84:	d1eb      	bne.n	800bb5e <tcp_input+0x332>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb86:	7a2a      	ldrb	r2, [r5, #8]
 800bb88:	2a00      	cmp	r2, #0
 800bb8a:	d0f0      	beq.n	800bb6e <tcp_input+0x342>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb8c:	4b59      	ldr	r3, [pc, #356]	; (800bcf4 <tcp_input+0x4c8>)
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb94:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d0e8      	beq.n	800bb6e <tcp_input+0x342>
 800bb9c:	e7ed      	b.n	800bb7a <tcp_input+0x34e>
          pcb->local_port == tcphdr->dest &&
 800bb9e:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800bba0:	8b6b      	ldrh	r3, [r5, #26]
 800bba2:	4283      	cmp	r3, r0
 800bba4:	d1e9      	bne.n	800bb7a <tcp_input+0x34e>
          pcb->local_port == tcphdr->dest &&
 800bba6:	686a      	ldr	r2, [r5, #4]
 800bba8:	4b52      	ldr	r3, [pc, #328]	; (800bcf4 <tcp_input+0x4c8>)
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d1e4      	bne.n	800bb7a <tcp_input+0x34e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbb0:	682a      	ldr	r2, [r5, #0]
 800bbb2:	4b50      	ldr	r3, [pc, #320]	; (800bcf4 <tcp_input+0x4c8>)
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d1df      	bne.n	800bb7a <tcp_input+0x34e>
  if (flags & TCP_RST) {
 800bbba:	4b55      	ldr	r3, [pc, #340]	; (800bd10 <tcp_input+0x4e4>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	f013 0f04 	tst.w	r3, #4
 800bbc2:	d10e      	bne.n	800bbe2 <tcp_input+0x3b6>
  if (flags & TCP_SYN) {
 800bbc4:	f013 0f02 	tst.w	r3, #2
 800bbc8:	d01d      	beq.n	800bc06 <tcp_input+0x3da>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bbca:	4b54      	ldr	r3, [pc, #336]	; (800bd1c <tcp_input+0x4f0>)
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	d403      	bmi.n	800bbdc <tcp_input+0x3b0>
 800bbd4:	8dae      	ldrh	r6, [r5, #44]	; 0x2c
 800bbd6:	1b9b      	subs	r3, r3, r6
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dd06      	ble.n	800bbea <tcp_input+0x3be>
  if ((tcplen > 0)) {
 800bbdc:	4b4d      	ldr	r3, [pc, #308]	; (800bd14 <tcp_input+0x4e8>)
 800bbde:	881b      	ldrh	r3, [r3, #0]
 800bbe0:	b9c3      	cbnz	r3, 800bc14 <tcp_input+0x3e8>
        pbuf_free(p);
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f7fd fa74 	bl	80090d0 <pbuf_free>
        return;
 800bbe8:	e62e      	b.n	800b848 <tcp_input+0x1c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bbea:	4b51      	ldr	r3, [pc, #324]	; (800bd30 <tcp_input+0x504>)
 800bbec:	4e49      	ldr	r6, [pc, #292]	; (800bd14 <tcp_input+0x4e8>)
 800bbee:	8836      	ldrh	r6, [r6, #0]
 800bbf0:	9102      	str	r1, [sp, #8]
 800bbf2:	9001      	str	r0, [sp, #4]
 800bbf4:	1f19      	subs	r1, r3, #4
 800bbf6:	9100      	str	r1, [sp, #0]
 800bbf8:	4432      	add	r2, r6
 800bbfa:	494e      	ldr	r1, [pc, #312]	; (800bd34 <tcp_input+0x508>)
 800bbfc:	6809      	ldr	r1, [r1, #0]
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f001 fd42 	bl	800d688 <tcp_rst>
      return;
 800bc04:	e7ed      	b.n	800bbe2 <tcp_input+0x3b6>
  } else if (flags & TCP_FIN) {
 800bc06:	f013 0f01 	tst.w	r3, #1
 800bc0a:	d0e7      	beq.n	800bbdc <tcp_input+0x3b0>
    pcb->tmr = tcp_ticks;
 800bc0c:	4b4a      	ldr	r3, [pc, #296]	; (800bd38 <tcp_input+0x50c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	626b      	str	r3, [r5, #36]	; 0x24
 800bc12:	e7e3      	b.n	800bbdc <tcp_input+0x3b0>
    tcp_ack_now(pcb);
 800bc14:	8beb      	ldrh	r3, [r5, #30]
 800bc16:	f043 0302 	orr.w	r3, r3, #2
 800bc1a:	83eb      	strh	r3, [r5, #30]
    tcp_output(pcb);
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	f001 fdb5 	bl	800d78c <tcp_output>
 800bc22:	e7de      	b.n	800bbe2 <tcp_input+0x3b6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc24:	4b45      	ldr	r3, [pc, #276]	; (800bd3c <tcp_input+0x510>)
 800bc26:	f8d3 8000 	ldr.w	r8, [r3]
 800bc2a:	f1b8 0f00 	cmp.w	r8, #0
 800bc2e:	d027      	beq.n	800bc80 <tcp_input+0x454>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc30:	4b30      	ldr	r3, [pc, #192]	; (800bcf4 <tcp_input+0x4c8>)
 800bc32:	685f      	ldr	r7, [r3, #4]
      if (lpcb->local_port == tcphdr->dest) {
 800bc34:	4a32      	ldr	r2, [pc, #200]	; (800bd00 <tcp_input+0x4d4>)
 800bc36:	6810      	ldr	r0, [r2, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bc38:	f8d3 e014 	ldr.w	lr, [r3, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc3c:	4645      	mov	r5, r8
  struct tcp_pcb_listen *lpcb_any = NULL;
 800bc3e:	2600      	movs	r6, #0
  struct tcp_pcb *lpcb_prev = NULL;
 800bc40:	46b4      	mov	ip, r6
    prev = NULL;
 800bc42:	4631      	mov	r1, r6
 800bc44:	e007      	b.n	800bc56 <tcp_input+0x42a>
      if (lpcb->local_port == tcphdr->dest) {
 800bc46:	8b6a      	ldrh	r2, [r5, #26]
 800bc48:	8843      	ldrh	r3, [r0, #2]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d00d      	beq.n	800bc6a <tcp_input+0x43e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc4e:	692b      	ldr	r3, [r5, #16]
 800bc50:	4629      	mov	r1, r5
 800bc52:	b1a3      	cbz	r3, 800bc7e <tcp_input+0x452>
 800bc54:	461d      	mov	r5, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bc56:	7a2a      	ldrb	r2, [r5, #8]
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	d0f4      	beq.n	800bc46 <tcp_input+0x41a>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800bc60:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d0ee      	beq.n	800bc46 <tcp_input+0x41a>
 800bc68:	e7f1      	b.n	800bc4e <tcp_input+0x422>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bc6a:	682b      	ldr	r3, [r5, #0]
 800bc6c:	4573      	cmp	r3, lr
 800bc6e:	d016      	beq.n	800bc9e <tcp_input+0x472>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bf08      	it	eq
 800bc74:	462e      	moveq	r6, r5
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	bf08      	it	eq
 800bc7a:	468c      	moveq	ip, r1
 800bc7c:	e7e7      	b.n	800bc4e <tcp_input+0x422>
    if (lpcb != NULL) {
 800bc7e:	b966      	cbnz	r6, 800bc9a <tcp_input+0x46e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bc80:	4b1f      	ldr	r3, [pc, #124]	; (800bd00 <tcp_input+0x4d4>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	8998      	ldrh	r0, [r3, #12]
 800bc86:	f7fb fdcb 	bl	8007820 <lwip_htons>
 800bc8a:	f010 0f04 	tst.w	r0, #4
 800bc8e:	f000 83da 	beq.w	800c446 <tcp_input+0xc1a>
    pbuf_free(p);
 800bc92:	4620      	mov	r0, r4
 800bc94:	f7fd fa1c 	bl	80090d0 <pbuf_free>
 800bc98:	e5d6      	b.n	800b848 <tcp_input+0x1c>
 800bc9a:	4635      	mov	r5, r6
 800bc9c:	4661      	mov	r1, ip
      if (prev != NULL) {
 800bc9e:	b129      	cbz	r1, 800bcac <tcp_input+0x480>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bca0:	692b      	ldr	r3, [r5, #16]
 800bca2:	610b      	str	r3, [r1, #16]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bca4:	f8c5 8010 	str.w	r8, [r5, #16]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bca8:	4b24      	ldr	r3, [pc, #144]	; (800bd3c <tcp_input+0x510>)
 800bcaa:	601d      	str	r5, [r3, #0]
  if (flags & TCP_RST) {
 800bcac:	4b18      	ldr	r3, [pc, #96]	; (800bd10 <tcp_input+0x4e4>)
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	f013 0f04 	tst.w	r3, #4
 800bcb4:	d105      	bne.n	800bcc2 <tcp_input+0x496>
  if (flags & TCP_ACK) {
 800bcb6:	f013 0f10 	tst.w	r3, #16
 800bcba:	d106      	bne.n	800bcca <tcp_input+0x49e>
  } else if (flags & TCP_SYN) {
 800bcbc:	f013 0f02 	tst.w	r3, #2
 800bcc0:	d13e      	bne.n	800bd40 <tcp_input+0x514>
      pbuf_free(p);
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f7fd fa04 	bl	80090d0 <pbuf_free>
      return;
 800bcc8:	e5be      	b.n	800b848 <tcp_input+0x1c>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bcca:	4b0d      	ldr	r3, [pc, #52]	; (800bd00 <tcp_input+0x4d4>)
 800bccc:	6819      	ldr	r1, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bcce:	4b18      	ldr	r3, [pc, #96]	; (800bd30 <tcp_input+0x504>)
 800bcd0:	4a10      	ldr	r2, [pc, #64]	; (800bd14 <tcp_input+0x4e8>)
 800bcd2:	8810      	ldrh	r0, [r2, #0]
 800bcd4:	4a11      	ldr	r2, [pc, #68]	; (800bd1c <tcp_input+0x4f0>)
 800bcd6:	6812      	ldr	r2, [r2, #0]
 800bcd8:	880e      	ldrh	r6, [r1, #0]
 800bcda:	9602      	str	r6, [sp, #8]
 800bcdc:	8849      	ldrh	r1, [r1, #2]
 800bcde:	9101      	str	r1, [sp, #4]
 800bce0:	1f19      	subs	r1, r3, #4
 800bce2:	9100      	str	r1, [sp, #0]
 800bce4:	4402      	add	r2, r0
 800bce6:	4913      	ldr	r1, [pc, #76]	; (800bd34 <tcp_input+0x508>)
 800bce8:	6809      	ldr	r1, [r1, #0]
 800bcea:	4628      	mov	r0, r5
 800bcec:	f001 fccc 	bl	800d688 <tcp_rst>
 800bcf0:	e7e7      	b.n	800bcc2 <tcp_input+0x496>
 800bcf2:	bf00      	nop
 800bcf4:	20002d00 	.word	0x20002d00
 800bcf8:	20004354 	.word	0x20004354
 800bcfc:	20000f84 	.word	0x20000f84
 800bd00:	20000fac 	.word	0x20000fac
 800bd04:	20000f9c 	.word	0x20000f9c
 800bd08:	20000fa0 	.word	0x20000fa0
 800bd0c:	20000f98 	.word	0x20000f98
 800bd10:	20000f80 	.word	0x20000f80
 800bd14:	20000fba 	.word	0x20000fba
 800bd18:	20004368 	.word	0x20004368
 800bd1c:	20000fa4 	.word	0x20000fa4
 800bd20:	0801812c 	.word	0x0801812c
 800bd24:	0801840c 	.word	0x0801840c
 800bd28:	08016a38 	.word	0x08016a38
 800bd2c:	08018438 	.word	0x08018438
 800bd30:	20002d14 	.word	0x20002d14
 800bd34:	20000f7c 	.word	0x20000f7c
 800bd38:	20004358 	.word	0x20004358
 800bd3c:	2000435c 	.word	0x2000435c
    npcb = tcp_alloc(pcb->prio);
 800bd40:	7e68      	ldrb	r0, [r5, #25]
 800bd42:	f7fe fabb 	bl	800a2bc <tcp_alloc>
    if (npcb == NULL) {
 800bd46:	4606      	mov	r6, r0
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d04d      	beq.n	800bde8 <tcp_input+0x5bc>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bd4c:	4baa      	ldr	r3, [pc, #680]	; (800bff8 <tcp_input+0x7cc>)
 800bd4e:	695a      	ldr	r2, [r3, #20]
 800bd50:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800bd56:	8b6b      	ldrh	r3, [r5, #26]
 800bd58:	8343      	strh	r3, [r0, #26]
    npcb->remote_port = tcphdr->src;
 800bd5a:	4fa8      	ldr	r7, [pc, #672]	; (800bffc <tcp_input+0x7d0>)
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
 800bd62:	2303      	movs	r3, #3
 800bd64:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
 800bd66:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 800c038 <tcp_input+0x80c>
 800bd6a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	6283      	str	r3, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bd72:	6303      	str	r3, [r0, #48]	; 0x30
    iss = tcp_next_iss(npcb);
 800bd74:	f7fd ffd8 	bl	8009d28 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800bd78:	65f0      	str	r0, [r6, #92]	; 0x5c
    npcb->snd_nxt = iss;
 800bd7a:	6570      	str	r0, [r6, #84]	; 0x54
    npcb->lastack = iss;
 800bd7c:	64b0      	str	r0, [r6, #72]	; 0x48
    npcb->snd_lbb = iss;
 800bd7e:	6630      	str	r0, [r6, #96]	; 0x60
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bd80:	f8d8 3000 	ldr.w	r3, [r8]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	65b3      	str	r3, [r6, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 800bd88:	696b      	ldr	r3, [r5, #20]
 800bd8a:	6173      	str	r3, [r6, #20]
    npcb->listener = pcb;
 800bd8c:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bd90:	7a6b      	ldrb	r3, [r5, #9]
 800bd92:	f003 030c 	and.w	r3, r3, #12
 800bd96:	7273      	strb	r3, [r6, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bd98:	7a2b      	ldrb	r3, [r5, #8]
 800bd9a:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 800bd9c:	4b98      	ldr	r3, [pc, #608]	; (800c000 <tcp_input+0x7d4>)
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	6132      	str	r2, [r6, #16]
 800bda2:	601e      	str	r6, [r3, #0]
 800bda4:	f002 f848 	bl	800de38 <tcp_timer_needed>
 800bda8:	4b96      	ldr	r3, [pc, #600]	; (800c004 <tcp_input+0x7d8>)
 800bdaa:	2201      	movs	r2, #1
 800bdac:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f7fe ff72 	bl	800ac98 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	89db      	ldrh	r3, [r3, #14]
 800bdb8:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bdbc:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bdc0:	8ef7      	ldrh	r7, [r6, #54]	; 0x36
 800bdc2:	1d35      	adds	r5, r6, #4
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	f002 fdb1 	bl	800e92c <ip4_route>
 800bdca:	4601      	mov	r1, r0
 800bdcc:	462a      	mov	r2, r5
 800bdce:	4638      	mov	r0, r7
 800bdd0:	f7fd ffc6 	bl	8009d60 <tcp_eff_send_mss_netif>
 800bdd4:	86f0      	strh	r0, [r6, #54]	; 0x36
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bdd6:	2112      	movs	r1, #18
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f001 faa1 	bl	800d320 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800bdde:	b968      	cbnz	r0, 800bdfc <tcp_input+0x5d0>
    tcp_output(npcb);
 800bde0:	4630      	mov	r0, r6
 800bde2:	f001 fcd3 	bl	800d78c <tcp_output>
 800bde6:	e76c      	b.n	800bcc2 <tcp_input+0x496>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bde8:	69eb      	ldr	r3, [r5, #28]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f43f af69 	beq.w	800bcc2 <tcp_input+0x496>
 800bdf0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	6968      	ldr	r0, [r5, #20]
 800bdf8:	4798      	blx	r3
 800bdfa:	e762      	b.n	800bcc2 <tcp_input+0x496>
      tcp_abandon(npcb, 0);
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	4630      	mov	r0, r6
 800be00:	f7fe f952 	bl	800a0a8 <tcp_abandon>
      return;
 800be04:	e75d      	b.n	800bcc2 <tcp_input+0x496>
      p->flags |= PBUF_FLAG_PUSH;
 800be06:	7b63      	ldrb	r3, [r4, #13]
 800be08:	f043 0301 	orr.w	r3, r3, #1
 800be0c:	7363      	strb	r3, [r4, #13]
 800be0e:	e665      	b.n	800badc <tcp_input+0x2b0>
        if (pcb->rcv_ann_wnd == 0) {
 800be10:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 800be12:	b9e3      	cbnz	r3, 800be4e <tcp_input+0x622>
          tcp_send_empty_ack(pcb);
 800be14:	4628      	mov	r0, r5
 800be16:	f001 fc7f 	bl	800d718 <tcp_send_empty_ack>
 800be1a:	e018      	b.n	800be4e <tcp_input+0x622>
      if (ackno == pcb->snd_nxt) {
 800be1c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800be1e:	4b7a      	ldr	r3, [pc, #488]	; (800c008 <tcp_input+0x7dc>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	429a      	cmp	r2, r3
 800be24:	d02b      	beq.n	800be7e <tcp_input+0x652>
      if (recv_flags & TF_RESET) {
 800be26:	4b79      	ldr	r3, [pc, #484]	; (800c00c <tcp_input+0x7e0>)
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	f013 0f08 	tst.w	r3, #8
 800be2e:	f000 8298 	beq.w	800c362 <tcp_input+0xb36>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800be32:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800be36:	b11b      	cbz	r3, 800be40 <tcp_input+0x614>
 800be38:	f06f 010d 	mvn.w	r1, #13
 800be3c:	6968      	ldr	r0, [r5, #20]
 800be3e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800be40:	4629      	mov	r1, r5
 800be42:	486f      	ldr	r0, [pc, #444]	; (800c000 <tcp_input+0x7d4>)
 800be44:	f7fe f8c8 	bl	8009fd8 <tcp_pcb_remove>
        tcp_free(pcb);
 800be48:	4628      	mov	r0, r5
 800be4a:	f7fd fdb9 	bl	80099c0 <tcp_free>
    tcp_input_pcb = NULL;
 800be4e:	2300      	movs	r3, #0
 800be50:	4a6f      	ldr	r2, [pc, #444]	; (800c010 <tcp_input+0x7e4>)
 800be52:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800be54:	4a6f      	ldr	r2, [pc, #444]	; (800c014 <tcp_input+0x7e8>)
 800be56:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800be58:	4b6f      	ldr	r3, [pc, #444]	; (800c018 <tcp_input+0x7ec>)
 800be5a:	6858      	ldr	r0, [r3, #4]
 800be5c:	2800      	cmp	r0, #0
 800be5e:	f43f acf3 	beq.w	800b848 <tcp_input+0x1c>
      pbuf_free(inseg.p);
 800be62:	f7fd f935 	bl	80090d0 <pbuf_free>
      inseg.p = NULL;
 800be66:	4b6c      	ldr	r3, [pc, #432]	; (800c018 <tcp_input+0x7ec>)
 800be68:	2200      	movs	r2, #0
 800be6a:	605a      	str	r2, [r3, #4]
 800be6c:	e4ec      	b.n	800b848 <tcp_input+0x1c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800be6e:	b931      	cbnz	r1, 800be7e <tcp_input+0x652>
 800be70:	4b6a      	ldr	r3, [pc, #424]	; (800c01c <tcp_input+0x7f0>)
 800be72:	f44f 724e 	mov.w	r2, #824	; 0x338
 800be76:	496a      	ldr	r1, [pc, #424]	; (800c020 <tcp_input+0x7f4>)
 800be78:	486a      	ldr	r0, [pc, #424]	; (800c024 <tcp_input+0x7f8>)
 800be7a:	f008 fa1d 	bl	80142b8 <app_debug_rtt_raw>
      recv_flags |= TF_RESET;
 800be7e:	4a63      	ldr	r2, [pc, #396]	; (800c00c <tcp_input+0x7e0>)
 800be80:	7813      	ldrb	r3, [r2, #0]
 800be82:	f043 0308 	orr.w	r3, r3, #8
 800be86:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800be88:	8beb      	ldrh	r3, [r5, #30]
 800be8a:	f023 0301 	bic.w	r3, r3, #1
 800be8e:	83eb      	strh	r3, [r5, #30]
      return ERR_RST;
 800be90:	e7c9      	b.n	800be26 <tcp_input+0x5fa>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800be92:	f013 0f02 	tst.w	r3, #2
 800be96:	d004      	beq.n	800bea2 <tcp_input+0x676>
 800be98:	7e2b      	ldrb	r3, [r5, #24]
 800be9a:	3b02      	subs	r3, #2
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d81c      	bhi.n	800bedc <tcp_input+0x6b0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bea2:	8beb      	ldrh	r3, [r5, #30]
 800bea4:	f013 0f10 	tst.w	r3, #16
 800bea8:	d102      	bne.n	800beb0 <tcp_input+0x684>
    pcb->tmr = tcp_ticks;
 800beaa:	4b5f      	ldr	r3, [pc, #380]	; (800c028 <tcp_input+0x7fc>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	626b      	str	r3, [r5, #36]	; 0x24
  pcb->keep_cnt_sent = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	f885 30a7 	strb.w	r3, [r5, #167]	; 0xa7
  pcb->persist_probe = 0;
 800beb6:	f885 30a6 	strb.w	r3, [r5, #166]	; 0xa6
  tcp_parseopt(pcb);
 800beba:	4628      	mov	r0, r5
 800bebc:	f7fe feec 	bl	800ac98 <tcp_parseopt>
  switch (pcb->state) {
 800bec0:	7e2b      	ldrb	r3, [r5, #24]
 800bec2:	3b02      	subs	r3, #2
 800bec4:	2b07      	cmp	r3, #7
 800bec6:	d8ae      	bhi.n	800be26 <tcp_input+0x5fa>
 800bec8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800becc:	00d1000d 	.word	0x00d1000d
 800bed0:	01610151 	.word	0x01610151
 800bed4:	015101b3 	.word	0x015101b3
 800bed8:	023201df 	.word	0x023201df
    tcp_ack_now(pcb);
 800bedc:	8beb      	ldrh	r3, [r5, #30]
 800bede:	f043 0302 	orr.w	r3, r3, #2
 800bee2:	83eb      	strh	r3, [r5, #30]
    return ERR_OK;
 800bee4:	e79f      	b.n	800be26 <tcp_input+0x5fa>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bee6:	4b51      	ldr	r3, [pc, #324]	; (800c02c <tcp_input+0x800>)
 800bee8:	781a      	ldrb	r2, [r3, #0]
 800beea:	f002 0312 	and.w	r3, r2, #18
 800beee:	2b12      	cmp	r3, #18
 800bef0:	d020      	beq.n	800bf34 <tcp_input+0x708>
      else if (flags & TCP_ACK) {
 800bef2:	f012 0f10 	tst.w	r2, #16
 800bef6:	d096      	beq.n	800be26 <tcp_input+0x5fa>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bef8:	4b40      	ldr	r3, [pc, #256]	; (800bffc <tcp_input+0x7d0>)
 800befa:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800befc:	4b4c      	ldr	r3, [pc, #304]	; (800c030 <tcp_input+0x804>)
 800befe:	4a4d      	ldr	r2, [pc, #308]	; (800c034 <tcp_input+0x808>)
 800bf00:	8810      	ldrh	r0, [r2, #0]
 800bf02:	4a4d      	ldr	r2, [pc, #308]	; (800c038 <tcp_input+0x80c>)
 800bf04:	6812      	ldr	r2, [r2, #0]
 800bf06:	880c      	ldrh	r4, [r1, #0]
 800bf08:	9402      	str	r4, [sp, #8]
 800bf0a:	8849      	ldrh	r1, [r1, #2]
 800bf0c:	9101      	str	r1, [sp, #4]
 800bf0e:	1f19      	subs	r1, r3, #4
 800bf10:	9100      	str	r1, [sp, #0]
 800bf12:	4402      	add	r2, r0
 800bf14:	493c      	ldr	r1, [pc, #240]	; (800c008 <tcp_input+0x7dc>)
 800bf16:	6809      	ldr	r1, [r1, #0]
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f001 fbb5 	bl	800d688 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bf1e:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 800bf22:	2b05      	cmp	r3, #5
 800bf24:	f63f af7f 	bhi.w	800be26 <tcp_input+0x5fa>
          pcb->rtime = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	86ab      	strh	r3, [r5, #52]	; 0x34
          tcp_rexmit_rto(pcb);
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	f001 fe61 	bl	800dbf4 <tcp_rexmit_rto>
 800bf32:	e778      	b.n	800be26 <tcp_input+0x5fa>
          && (ackno == pcb->lastack + 1)) {
 800bf34:	4b34      	ldr	r3, [pc, #208]	; (800c008 <tcp_input+0x7dc>)
 800bf36:	6819      	ldr	r1, [r3, #0]
 800bf38:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	428b      	cmp	r3, r1
 800bf3e:	d1d8      	bne.n	800bef2 <tcp_input+0x6c6>
        pcb->rcv_nxt = seqno + 1;
 800bf40:	4b3d      	ldr	r3, [pc, #244]	; (800c038 <tcp_input+0x80c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	1c5a      	adds	r2, r3, #1
 800bf46:	62aa      	str	r2, [r5, #40]	; 0x28
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bf48:	632a      	str	r2, [r5, #48]	; 0x30
        pcb->lastack = ackno;
 800bf4a:	64a9      	str	r1, [r5, #72]	; 0x48
        pcb->snd_wnd = tcphdr->wnd;
 800bf4c:	4a2b      	ldr	r2, [pc, #172]	; (800bffc <tcp_input+0x7d0>)
 800bf4e:	6812      	ldr	r2, [r2, #0]
 800bf50:	89d2      	ldrh	r2, [r2, #14]
 800bf52:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bf56:	f8a5 2066 	strh.w	r2, [r5, #102]	; 0x66
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	65ab      	str	r3, [r5, #88]	; 0x58
        pcb->state = ESTABLISHED;
 800bf5e:	2304      	movs	r3, #4
 800bf60:	762b      	strb	r3, [r5, #24]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bf62:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800bf64:	18ec      	adds	r4, r5, r3
 800bf66:	4620      	mov	r0, r4
 800bf68:	f002 fce0 	bl	800e92c <ip4_route>
 800bf6c:	4601      	mov	r1, r0
 800bf6e:	4622      	mov	r2, r4
 800bf70:	4630      	mov	r0, r6
 800bf72:	f7fd fef5 	bl	8009d60 <tcp_eff_send_mss_netif>
 800bf76:	4603      	mov	r3, r0
 800bf78:	86e8      	strh	r0, [r5, #54]	; 0x36
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bf7a:	0041      	lsls	r1, r0, #1
 800bf7c:	f241 121c 	movw	r2, #4380	; 0x111c
 800bf80:	428a      	cmp	r2, r1
 800bf82:	bf38      	it	cc
 800bf84:	460a      	movcc	r2, r1
 800bf86:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
 800bf8a:	d92b      	bls.n	800bfe4 <tcp_input+0x7b8>
 800bf8c:	0083      	lsls	r3, r0, #2
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bf94:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d04f      	beq.n	800c03c <tcp_input+0x810>
        --pcb->snd_queuelen;
 800bf9c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
        rseg = pcb->unacked;
 800bfa6:	6f6c      	ldr	r4, [r5, #116]	; 0x74
        if (rseg == NULL) {
 800bfa8:	2c00      	cmp	r4, #0
 800bfaa:	d04f      	beq.n	800c04c <tcp_input+0x820>
          pcb->unacked = rseg->next;
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	676b      	str	r3, [r5, #116]	; 0x74
        tcp_seg_free(rseg);
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f7fd fe03 	bl	8009bbc <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800bfb6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d054      	beq.n	800c066 <tcp_input+0x83a>
          pcb->rtime = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	86ab      	strh	r3, [r5, #52]	; 0x34
          pcb->nrtx = 0;
 800bfc0:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bfc4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800bfc8:	b13b      	cbz	r3, 800bfda <tcp_input+0x7ae>
 800bfca:	2200      	movs	r2, #0
 800bfcc:	4629      	mov	r1, r5
 800bfce:	6968      	ldr	r0, [r5, #20]
 800bfd0:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800bfd2:	f110 0f0d 	cmn.w	r0, #13
 800bfd6:	f43f af3a 	beq.w	800be4e <tcp_input+0x622>
        tcp_ack_now(pcb);
 800bfda:	8beb      	ldrh	r3, [r5, #30]
 800bfdc:	f043 0302 	orr.w	r3, r3, #2
 800bfe0:	83eb      	strh	r3, [r5, #30]
 800bfe2:	e720      	b.n	800be26 <tcp_input+0x5fa>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bfe4:	f241 121c 	movw	r2, #4380	; 0x111c
 800bfe8:	4291      	cmp	r1, r2
 800bfea:	bf86      	itte	hi
 800bfec:	0043      	lslhi	r3, r0, #1
 800bfee:	b29b      	uxthhi	r3, r3
 800bff0:	f241 131c 	movwls	r3, #4380	; 0x111c
 800bff4:	e7cc      	b.n	800bf90 <tcp_input+0x764>
 800bff6:	bf00      	nop
 800bff8:	20002d00 	.word	0x20002d00
 800bffc:	20000fac 	.word	0x20000fac
 800c000:	20004354 	.word	0x20004354
 800c004:	20004350 	.word	0x20004350
 800c008:	20000f7c 	.word	0x20000f7c
 800c00c:	20000fa0 	.word	0x20000fa0
 800c010:	20004368 	.word	0x20004368
 800c014:	20000f9c 	.word	0x20000f9c
 800c018:	20000f84 	.word	0x20000f84
 800c01c:	0801812c 	.word	0x0801812c
 800c020:	08018494 	.word	0x08018494
 800c024:	08016a38 	.word	0x08016a38
 800c028:	20004358 	.word	0x20004358
 800c02c:	20000f80 	.word	0x20000f80
 800c030:	20002d14 	.word	0x20002d14
 800c034:	20000fba 	.word	0x20000fba
 800c038:	20000fa4 	.word	0x20000fa4
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c03c:	4ba5      	ldr	r3, [pc, #660]	; (800c2d4 <tcp_input+0xaa8>)
 800c03e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c042:	49a5      	ldr	r1, [pc, #660]	; (800c2d8 <tcp_input+0xaac>)
 800c044:	48a5      	ldr	r0, [pc, #660]	; (800c2dc <tcp_input+0xab0>)
 800c046:	f008 f937 	bl	80142b8 <app_debug_rtt_raw>
 800c04a:	e7a7      	b.n	800bf9c <tcp_input+0x770>
          rseg = pcb->unsent;
 800c04c:	6f2c      	ldr	r4, [r5, #112]	; 0x70
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c04e:	b114      	cbz	r4, 800c056 <tcp_input+0x82a>
          pcb->unsent = rseg->next;
 800c050:	6823      	ldr	r3, [r4, #0]
 800c052:	672b      	str	r3, [r5, #112]	; 0x70
 800c054:	e7ac      	b.n	800bfb0 <tcp_input+0x784>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c056:	4b9f      	ldr	r3, [pc, #636]	; (800c2d4 <tcp_input+0xaa8>)
 800c058:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c05c:	49a0      	ldr	r1, [pc, #640]	; (800c2e0 <tcp_input+0xab4>)
 800c05e:	489f      	ldr	r0, [pc, #636]	; (800c2dc <tcp_input+0xab0>)
 800c060:	f008 f92a 	bl	80142b8 <app_debug_rtt_raw>
 800c064:	e7f4      	b.n	800c050 <tcp_input+0x824>
          pcb->rtime = -1;
 800c066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c06a:	86ab      	strh	r3, [r5, #52]	; 0x34
 800c06c:	e7aa      	b.n	800bfc4 <tcp_input+0x798>
      if (flags & TCP_ACK) {
 800c06e:	4b9d      	ldr	r3, [pc, #628]	; (800c2e4 <tcp_input+0xab8>)
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	f013 0f10 	tst.w	r3, #16
 800c076:	d06b      	beq.n	800c150 <tcp_input+0x924>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c078:	4b9b      	ldr	r3, [pc, #620]	; (800c2e8 <tcp_input+0xabc>)
 800c07a:	6819      	ldr	r1, [r3, #0]
 800c07c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800c07e:	43db      	mvns	r3, r3
 800c080:	42cb      	cmn	r3, r1
 800c082:	d403      	bmi.n	800c08c <tcp_input+0x860>
 800c084:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800c086:	1acb      	subs	r3, r1, r3
 800c088:	2b00      	cmp	r3, #0
 800c08a:	dd11      	ble.n	800c0b0 <tcp_input+0x884>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c08c:	4b97      	ldr	r3, [pc, #604]	; (800c2ec <tcp_input+0xac0>)
 800c08e:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c090:	4b97      	ldr	r3, [pc, #604]	; (800c2f0 <tcp_input+0xac4>)
 800c092:	4a98      	ldr	r2, [pc, #608]	; (800c2f4 <tcp_input+0xac8>)
 800c094:	8814      	ldrh	r4, [r2, #0]
 800c096:	4a98      	ldr	r2, [pc, #608]	; (800c2f8 <tcp_input+0xacc>)
 800c098:	6812      	ldr	r2, [r2, #0]
 800c09a:	8806      	ldrh	r6, [r0, #0]
 800c09c:	9602      	str	r6, [sp, #8]
 800c09e:	8840      	ldrh	r0, [r0, #2]
 800c0a0:	9001      	str	r0, [sp, #4]
 800c0a2:	1f18      	subs	r0, r3, #4
 800c0a4:	9000      	str	r0, [sp, #0]
 800c0a6:	4422      	add	r2, r4
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f001 faed 	bl	800d688 <tcp_rst>
 800c0ae:	e6ba      	b.n	800be26 <tcp_input+0x5fa>
          pcb->state = ESTABLISHED;
 800c0b0:	2304      	movs	r3, #4
 800c0b2:	762b      	strb	r3, [r5, #24]
          if (pcb->listener == NULL) {
 800c0b4:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d03c      	beq.n	800c136 <tcp_input+0x90a>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	b34b      	cbz	r3, 800c114 <tcp_input+0x8e8>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	6968      	ldr	r0, [r5, #20]
 800c0c6:	4798      	blx	r3
          if (err != ERR_OK) {
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d130      	bne.n	800c12e <tcp_input+0x902>
          tcp_receive(pcb);
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	f7fe ff21 	bl	800af14 <tcp_receive>
          if (recv_acked != 0) {
 800c0d2:	4b8a      	ldr	r3, [pc, #552]	; (800c2fc <tcp_input+0xad0>)
 800c0d4:	881b      	ldrh	r3, [r3, #0]
 800c0d6:	b113      	cbz	r3, 800c0de <tcp_input+0x8b2>
            recv_acked--;
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	4a88      	ldr	r2, [pc, #544]	; (800c2fc <tcp_input+0xad0>)
 800c0dc:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c0de:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 800c0e0:	0059      	lsls	r1, r3, #1
 800c0e2:	f241 121c 	movw	r2, #4380	; 0x111c
 800c0e6:	428a      	cmp	r2, r1
 800c0e8:	bf38      	it	cc
 800c0ea:	460a      	movcc	r2, r1
 800c0ec:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800c0f0:	d925      	bls.n	800c13e <tcp_input+0x912>
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
          if (recv_flags & TF_GOT_FIN) {
 800c0fa:	4b81      	ldr	r3, [pc, #516]	; (800c300 <tcp_input+0xad4>)
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	f013 0f20 	tst.w	r3, #32
 800c102:	f43f ae90 	beq.w	800be26 <tcp_input+0x5fa>
            tcp_ack_now(pcb);
 800c106:	8beb      	ldrh	r3, [r5, #30]
 800c108:	f043 0302 	orr.w	r3, r3, #2
 800c10c:	83eb      	strh	r3, [r5, #30]
            pcb->state = CLOSE_WAIT;
 800c10e:	2307      	movs	r3, #7
 800c110:	762b      	strb	r3, [r5, #24]
 800c112:	e688      	b.n	800be26 <tcp_input+0x5fa>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c114:	4b6f      	ldr	r3, [pc, #444]	; (800c2d4 <tcp_input+0xaa8>)
 800c116:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c11a:	497a      	ldr	r1, [pc, #488]	; (800c304 <tcp_input+0xad8>)
 800c11c:	486f      	ldr	r0, [pc, #444]	; (800c2dc <tcp_input+0xab0>)
 800c11e:	f008 f8cb 	bl	80142b8 <app_debug_rtt_raw>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c122:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800c126:	69db      	ldr	r3, [r3, #28]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1c9      	bne.n	800c0c0 <tcp_input+0x894>
 800c12c:	e003      	b.n	800c136 <tcp_input+0x90a>
            if (err != ERR_ABRT) {
 800c12e:	f110 0f0d 	cmn.w	r0, #13
 800c132:	f43f ae8c 	beq.w	800be4e <tcp_input+0x622>
              tcp_abort(pcb);
 800c136:	4628      	mov	r0, r5
 800c138:	f7fe f83c 	bl	800a1b4 <tcp_abort>
 800c13c:	e687      	b.n	800be4e <tcp_input+0x622>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c13e:	f241 121c 	movw	r2, #4380	; 0x111c
 800c142:	4291      	cmp	r1, r2
 800c144:	bf86      	itte	hi
 800c146:	005b      	lslhi	r3, r3, #1
 800c148:	b29b      	uxthhi	r3, r3
 800c14a:	f241 131c 	movwls	r3, #4380	; 0x111c
 800c14e:	e7d2      	b.n	800c0f6 <tcp_input+0x8ca>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c150:	f013 0f02 	tst.w	r3, #2
 800c154:	f43f ae67 	beq.w	800be26 <tcp_input+0x5fa>
 800c158:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c15a:	3b01      	subs	r3, #1
 800c15c:	4a66      	ldr	r2, [pc, #408]	; (800c2f8 <tcp_input+0xacc>)
 800c15e:	6812      	ldr	r2, [r2, #0]
 800c160:	4293      	cmp	r3, r2
 800c162:	f47f ae60 	bne.w	800be26 <tcp_input+0x5fa>
        tcp_rexmit(pcb);
 800c166:	4628      	mov	r0, r5
 800c168:	f001 fa0a 	bl	800d580 <tcp_rexmit>
 800c16c:	e65b      	b.n	800be26 <tcp_input+0x5fa>
      tcp_receive(pcb);
 800c16e:	4628      	mov	r0, r5
 800c170:	f7fe fed0 	bl	800af14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c174:	4b62      	ldr	r3, [pc, #392]	; (800c300 <tcp_input+0xad4>)
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	f013 0f20 	tst.w	r3, #32
 800c17c:	f43f ae53 	beq.w	800be26 <tcp_input+0x5fa>
        tcp_ack_now(pcb);
 800c180:	8beb      	ldrh	r3, [r5, #30]
 800c182:	f043 0302 	orr.w	r3, r3, #2
 800c186:	83eb      	strh	r3, [r5, #30]
        pcb->state = CLOSE_WAIT;
 800c188:	2307      	movs	r3, #7
 800c18a:	762b      	strb	r3, [r5, #24]
 800c18c:	e64b      	b.n	800be26 <tcp_input+0x5fa>
      tcp_receive(pcb);
 800c18e:	4628      	mov	r0, r5
 800c190:	f7fe fec0 	bl	800af14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c194:	4b5a      	ldr	r3, [pc, #360]	; (800c300 <tcp_input+0xad4>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	f013 0f20 	tst.w	r3, #32
 800c19c:	d036      	beq.n	800c20c <tcp_input+0x9e0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c19e:	4b51      	ldr	r3, [pc, #324]	; (800c2e4 <tcp_input+0xab8>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	f013 0f10 	tst.w	r3, #16
 800c1a6:	d004      	beq.n	800c1b2 <tcp_input+0x986>
 800c1a8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800c1aa:	4b4f      	ldr	r3, [pc, #316]	; (800c2e8 <tcp_input+0xabc>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d006      	beq.n	800c1c0 <tcp_input+0x994>
          tcp_ack_now(pcb);
 800c1b2:	8beb      	ldrh	r3, [r5, #30]
 800c1b4:	f043 0302 	orr.w	r3, r3, #2
 800c1b8:	83eb      	strh	r3, [r5, #30]
          pcb->state = CLOSING;
 800c1ba:	2308      	movs	r3, #8
 800c1bc:	762b      	strb	r3, [r5, #24]
 800c1be:	e632      	b.n	800be26 <tcp_input+0x5fa>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d1f5      	bne.n	800c1b2 <tcp_input+0x986>
          tcp_ack_now(pcb);
 800c1c6:	8beb      	ldrh	r3, [r5, #30]
 800c1c8:	f043 0302 	orr.w	r3, r3, #2
 800c1cc:	83eb      	strh	r3, [r5, #30]
          tcp_pcb_purge(pcb);
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f7fd fed2 	bl	8009f78 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c1d4:	4b4c      	ldr	r3, [pc, #304]	; (800c308 <tcp_input+0xadc>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	429d      	cmp	r5, r3
 800c1da:	d005      	beq.n	800c1e8 <tcp_input+0x9bc>
 800c1dc:	b153      	cbz	r3, 800c1f4 <tcp_input+0x9c8>
 800c1de:	691a      	ldr	r2, [r3, #16]
 800c1e0:	4295      	cmp	r5, r2
 800c1e2:	d005      	beq.n	800c1f0 <tcp_input+0x9c4>
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	e7f9      	b.n	800c1dc <tcp_input+0x9b0>
 800c1e8:	691a      	ldr	r2, [r3, #16]
 800c1ea:	4b47      	ldr	r3, [pc, #284]	; (800c308 <tcp_input+0xadc>)
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	e001      	b.n	800c1f4 <tcp_input+0x9c8>
 800c1f0:	6912      	ldr	r2, [r2, #16]
 800c1f2:	611a      	str	r2, [r3, #16]
 800c1f4:	4b45      	ldr	r3, [pc, #276]	; (800c30c <tcp_input+0xae0>)
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c1fa:	230a      	movs	r3, #10
 800c1fc:	762b      	strb	r3, [r5, #24]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c1fe:	4b44      	ldr	r3, [pc, #272]	; (800c310 <tcp_input+0xae4>)
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	612a      	str	r2, [r5, #16]
 800c204:	601d      	str	r5, [r3, #0]
 800c206:	f001 fe17 	bl	800de38 <tcp_timer_needed>
 800c20a:	e60c      	b.n	800be26 <tcp_input+0x5fa>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c20c:	4b35      	ldr	r3, [pc, #212]	; (800c2e4 <tcp_input+0xab8>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	f013 0f10 	tst.w	r3, #16
 800c214:	f43f ae07 	beq.w	800be26 <tcp_input+0x5fa>
 800c218:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800c21a:	4b33      	ldr	r3, [pc, #204]	; (800c2e8 <tcp_input+0xabc>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	429a      	cmp	r2, r3
 800c220:	f47f ae01 	bne.w	800be26 <tcp_input+0x5fa>
 800c224:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c226:	2b00      	cmp	r3, #0
 800c228:	f47f adfd 	bne.w	800be26 <tcp_input+0x5fa>
        pcb->state = FIN_WAIT_2;
 800c22c:	2306      	movs	r3, #6
 800c22e:	762b      	strb	r3, [r5, #24]
 800c230:	e5f9      	b.n	800be26 <tcp_input+0x5fa>
      tcp_receive(pcb);
 800c232:	4628      	mov	r0, r5
 800c234:	f7fe fe6e 	bl	800af14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c238:	4b31      	ldr	r3, [pc, #196]	; (800c300 <tcp_input+0xad4>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	f013 0f20 	tst.w	r3, #32
 800c240:	f43f adf1 	beq.w	800be26 <tcp_input+0x5fa>
        tcp_ack_now(pcb);
 800c244:	8beb      	ldrh	r3, [r5, #30]
 800c246:	f043 0302 	orr.w	r3, r3, #2
 800c24a:	83eb      	strh	r3, [r5, #30]
        tcp_pcb_purge(pcb);
 800c24c:	4628      	mov	r0, r5
 800c24e:	f7fd fe93 	bl	8009f78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c252:	4b2d      	ldr	r3, [pc, #180]	; (800c308 <tcp_input+0xadc>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	429d      	cmp	r5, r3
 800c258:	d005      	beq.n	800c266 <tcp_input+0xa3a>
 800c25a:	b153      	cbz	r3, 800c272 <tcp_input+0xa46>
 800c25c:	691a      	ldr	r2, [r3, #16]
 800c25e:	4295      	cmp	r5, r2
 800c260:	d005      	beq.n	800c26e <tcp_input+0xa42>
 800c262:	4613      	mov	r3, r2
 800c264:	e7f9      	b.n	800c25a <tcp_input+0xa2e>
 800c266:	691a      	ldr	r2, [r3, #16]
 800c268:	4b27      	ldr	r3, [pc, #156]	; (800c308 <tcp_input+0xadc>)
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	e001      	b.n	800c272 <tcp_input+0xa46>
 800c26e:	6912      	ldr	r2, [r2, #16]
 800c270:	611a      	str	r2, [r3, #16]
 800c272:	4b26      	ldr	r3, [pc, #152]	; (800c30c <tcp_input+0xae0>)
 800c274:	2201      	movs	r2, #1
 800c276:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c278:	230a      	movs	r3, #10
 800c27a:	762b      	strb	r3, [r5, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c27c:	4b24      	ldr	r3, [pc, #144]	; (800c310 <tcp_input+0xae4>)
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	612a      	str	r2, [r5, #16]
 800c282:	601d      	str	r5, [r3, #0]
 800c284:	f001 fdd8 	bl	800de38 <tcp_timer_needed>
 800c288:	e5cd      	b.n	800be26 <tcp_input+0x5fa>
      tcp_receive(pcb);
 800c28a:	4628      	mov	r0, r5
 800c28c:	f7fe fe42 	bl	800af14 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c290:	4b14      	ldr	r3, [pc, #80]	; (800c2e4 <tcp_input+0xab8>)
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	f013 0f10 	tst.w	r3, #16
 800c298:	f43f adc5 	beq.w	800be26 <tcp_input+0x5fa>
 800c29c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800c29e:	4b12      	ldr	r3, [pc, #72]	; (800c2e8 <tcp_input+0xabc>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	f47f adbf 	bne.w	800be26 <tcp_input+0x5fa>
 800c2a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f47f adbb 	bne.w	800be26 <tcp_input+0x5fa>
        tcp_pcb_purge(pcb);
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	f7fd fe61 	bl	8009f78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c2b6:	4b14      	ldr	r3, [pc, #80]	; (800c308 <tcp_input+0xadc>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429d      	cmp	r5, r3
 800c2bc:	d005      	beq.n	800c2ca <tcp_input+0xa9e>
 800c2be:	b35b      	cbz	r3, 800c318 <tcp_input+0xaec>
 800c2c0:	691a      	ldr	r2, [r3, #16]
 800c2c2:	4295      	cmp	r5, r2
 800c2c4:	d026      	beq.n	800c314 <tcp_input+0xae8>
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	e7f9      	b.n	800c2be <tcp_input+0xa92>
 800c2ca:	691a      	ldr	r2, [r3, #16]
 800c2cc:	4b0e      	ldr	r3, [pc, #56]	; (800c308 <tcp_input+0xadc>)
 800c2ce:	601a      	str	r2, [r3, #0]
 800c2d0:	e022      	b.n	800c318 <tcp_input+0xaec>
 800c2d2:	bf00      	nop
 800c2d4:	0801812c 	.word	0x0801812c
 800c2d8:	080184b4 	.word	0x080184b4
 800c2dc:	08016a38 	.word	0x08016a38
 800c2e0:	080184cc 	.word	0x080184cc
 800c2e4:	20000f80 	.word	0x20000f80
 800c2e8:	20000f7c 	.word	0x20000f7c
 800c2ec:	20000fac 	.word	0x20000fac
 800c2f0:	20002d14 	.word	0x20002d14
 800c2f4:	20000fba 	.word	0x20000fba
 800c2f8:	20000fa4 	.word	0x20000fa4
 800c2fc:	20000f98 	.word	0x20000f98
 800c300:	20000fa0 	.word	0x20000fa0
 800c304:	080184e0 	.word	0x080184e0
 800c308:	20004354 	.word	0x20004354
 800c30c:	20004350 	.word	0x20004350
 800c310:	20004364 	.word	0x20004364
 800c314:	6912      	ldr	r2, [r2, #16]
 800c316:	611a      	str	r2, [r3, #16]
 800c318:	4b5a      	ldr	r3, [pc, #360]	; (800c484 <tcp_input+0xc58>)
 800c31a:	2201      	movs	r2, #1
 800c31c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c31e:	230a      	movs	r3, #10
 800c320:	762b      	strb	r3, [r5, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c322:	4b59      	ldr	r3, [pc, #356]	; (800c488 <tcp_input+0xc5c>)
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	612a      	str	r2, [r5, #16]
 800c328:	601d      	str	r5, [r3, #0]
 800c32a:	f001 fd85 	bl	800de38 <tcp_timer_needed>
 800c32e:	e57a      	b.n	800be26 <tcp_input+0x5fa>
      tcp_receive(pcb);
 800c330:	4628      	mov	r0, r5
 800c332:	f7fe fdef 	bl	800af14 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c336:	4b55      	ldr	r3, [pc, #340]	; (800c48c <tcp_input+0xc60>)
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	f013 0f10 	tst.w	r3, #16
 800c33e:	f43f ad72 	beq.w	800be26 <tcp_input+0x5fa>
 800c342:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800c344:	4b52      	ldr	r3, [pc, #328]	; (800c490 <tcp_input+0xc64>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	429a      	cmp	r2, r3
 800c34a:	f47f ad6c 	bne.w	800be26 <tcp_input+0x5fa>
 800c34e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c350:	2b00      	cmp	r3, #0
 800c352:	f47f ad68 	bne.w	800be26 <tcp_input+0x5fa>
        recv_flags |= TF_CLOSED;
 800c356:	4a4f      	ldr	r2, [pc, #316]	; (800c494 <tcp_input+0xc68>)
 800c358:	7813      	ldrb	r3, [r2, #0]
 800c35a:	f043 0310 	orr.w	r3, r3, #16
 800c35e:	7013      	strb	r3, [r2, #0]
 800c360:	e561      	b.n	800be26 <tcp_input+0x5fa>
        if (recv_acked > 0) {
 800c362:	4b4d      	ldr	r3, [pc, #308]	; (800c498 <tcp_input+0xc6c>)
 800c364:	881a      	ldrh	r2, [r3, #0]
 800c366:	b162      	cbz	r2, 800c382 <tcp_input+0xb56>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c368:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800c36c:	b133      	cbz	r3, 800c37c <tcp_input+0xb50>
 800c36e:	4629      	mov	r1, r5
 800c370:	6968      	ldr	r0, [r5, #20]
 800c372:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800c374:	f110 0f0d 	cmn.w	r0, #13
 800c378:	f43f ad69 	beq.w	800be4e <tcp_input+0x622>
          recv_acked = 0;
 800c37c:	4b46      	ldr	r3, [pc, #280]	; (800c498 <tcp_input+0xc6c>)
 800c37e:	2200      	movs	r2, #0
 800c380:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c382:	4628      	mov	r0, r5
 800c384:	f7fe fcd2 	bl	800ad2c <tcp_input_delayed_close>
 800c388:	2800      	cmp	r0, #0
 800c38a:	f47f ad60 	bne.w	800be4e <tcp_input+0x622>
        if (recv_data != NULL) {
 800c38e:	4b43      	ldr	r3, [pc, #268]	; (800c49c <tcp_input+0xc70>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	b1eb      	cbz	r3, 800c3d0 <tcp_input+0xba4>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c394:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800c396:	b133      	cbz	r3, 800c3a6 <tcp_input+0xb7a>
 800c398:	4b41      	ldr	r3, [pc, #260]	; (800c4a0 <tcp_input+0xc74>)
 800c39a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c39e:	4941      	ldr	r1, [pc, #260]	; (800c4a4 <tcp_input+0xc78>)
 800c3a0:	4841      	ldr	r0, [pc, #260]	; (800c4a8 <tcp_input+0xc7c>)
 800c3a2:	f007 ff89 	bl	80142b8 <app_debug_rtt_raw>
          if (pcb->flags & TF_RXCLOSED) {
 800c3a6:	8beb      	ldrh	r3, [r5, #30]
 800c3a8:	f013 0f10 	tst.w	r3, #16
 800c3ac:	d128      	bne.n	800c400 <tcp_input+0xbd4>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c3ae:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
 800c3b2:	b36c      	cbz	r4, 800c410 <tcp_input+0xbe4>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	4a39      	ldr	r2, [pc, #228]	; (800c49c <tcp_input+0xc70>)
 800c3b8:	6812      	ldr	r2, [r2, #0]
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	6968      	ldr	r0, [r5, #20]
 800c3be:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 800c3c0:	f110 0f0d 	cmn.w	r0, #13
 800c3c4:	f43f ad43 	beq.w	800be4e <tcp_input+0x622>
          if (err != ERR_OK) {
 800c3c8:	b110      	cbz	r0, 800c3d0 <tcp_input+0xba4>
            pcb->refused_data = recv_data;
 800c3ca:	4b34      	ldr	r3, [pc, #208]	; (800c49c <tcp_input+0xc70>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	67eb      	str	r3, [r5, #124]	; 0x7c
        if (recv_flags & TF_GOT_FIN) {
 800c3d0:	4b30      	ldr	r3, [pc, #192]	; (800c494 <tcp_input+0xc68>)
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	f013 0f20 	tst.w	r3, #32
 800c3d8:	d005      	beq.n	800c3e6 <tcp_input+0xbba>
          if (pcb->refused_data != NULL) {
 800c3da:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800c3dc:	b303      	cbz	r3, 800c420 <tcp_input+0xbf4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c3de:	7b5a      	ldrb	r2, [r3, #13]
 800c3e0:	f042 0220 	orr.w	r2, r2, #32
 800c3e4:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800c3e6:	4b31      	ldr	r3, [pc, #196]	; (800c4ac <tcp_input+0xc80>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	f7fe fc9d 	bl	800ad2c <tcp_input_delayed_close>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	f47f ad2b 	bne.w	800be4e <tcp_input+0x622>
        tcp_output(pcb);
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	f001 f9c7 	bl	800d78c <tcp_output>
 800c3fe:	e526      	b.n	800be4e <tcp_input+0x622>
            pbuf_free(recv_data);
 800c400:	4b26      	ldr	r3, [pc, #152]	; (800c49c <tcp_input+0xc70>)
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	f7fc fe64 	bl	80090d0 <pbuf_free>
            tcp_abort(pcb);
 800c408:	4628      	mov	r0, r5
 800c40a:	f7fd fed3 	bl	800a1b4 <tcp_abort>
            goto aborted;
 800c40e:	e51e      	b.n	800be4e <tcp_input+0x622>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c410:	2300      	movs	r3, #0
 800c412:	4a22      	ldr	r2, [pc, #136]	; (800c49c <tcp_input+0xc70>)
 800c414:	6812      	ldr	r2, [r2, #0]
 800c416:	4629      	mov	r1, r5
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fe f8e9 	bl	800a5f0 <tcp_recv_null>
 800c41e:	e7cf      	b.n	800c3c0 <tcp_input+0xb94>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c420:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800c422:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
              pcb->rcv_wnd++;
 800c426:	bf1c      	itt	ne
 800c428:	3301      	addne	r3, #1
 800c42a:	85ab      	strhne	r3, [r5, #44]	; 0x2c
            TCP_EVENT_CLOSED(pcb, err);
 800c42c:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
 800c430:	2c00      	cmp	r4, #0
 800c432:	d0d8      	beq.n	800c3e6 <tcp_input+0xbba>
 800c434:	2300      	movs	r3, #0
 800c436:	461a      	mov	r2, r3
 800c438:	4629      	mov	r1, r5
 800c43a:	6968      	ldr	r0, [r5, #20]
 800c43c:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 800c43e:	f110 0f0d 	cmn.w	r0, #13
 800c442:	d1d0      	bne.n	800c3e6 <tcp_input+0xbba>
 800c444:	e503      	b.n	800be4e <tcp_input+0x622>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c446:	4b1a      	ldr	r3, [pc, #104]	; (800c4b0 <tcp_input+0xc84>)
 800c448:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c44a:	4b1a      	ldr	r3, [pc, #104]	; (800c4b4 <tcp_input+0xc88>)
 800c44c:	4a1a      	ldr	r2, [pc, #104]	; (800c4b8 <tcp_input+0xc8c>)
 800c44e:	8810      	ldrh	r0, [r2, #0]
 800c450:	4a1a      	ldr	r2, [pc, #104]	; (800c4bc <tcp_input+0xc90>)
 800c452:	6812      	ldr	r2, [r2, #0]
 800c454:	880d      	ldrh	r5, [r1, #0]
 800c456:	9502      	str	r5, [sp, #8]
 800c458:	8849      	ldrh	r1, [r1, #2]
 800c45a:	9101      	str	r1, [sp, #4]
 800c45c:	1f19      	subs	r1, r3, #4
 800c45e:	9100      	str	r1, [sp, #0]
 800c460:	4402      	add	r2, r0
 800c462:	490b      	ldr	r1, [pc, #44]	; (800c490 <tcp_input+0xc64>)
 800c464:	6809      	ldr	r1, [r1, #0]
 800c466:	2000      	movs	r0, #0
 800c468:	f001 f90e 	bl	800d688 <tcp_rst>
 800c46c:	e411      	b.n	800bc92 <tcp_input+0x466>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <tcp_input+0xc5c>)
 800c470:	681d      	ldr	r5, [r3, #0]
 800c472:	2d00      	cmp	r5, #0
 800c474:	f43f abd6 	beq.w	800bc24 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c478:	f8df 8024 	ldr.w	r8, [pc, #36]	; 800c4a0 <tcp_input+0xc74>
 800c47c:	4f10      	ldr	r7, [pc, #64]	; (800c4c0 <tcp_input+0xc94>)
 800c47e:	4e0a      	ldr	r6, [pc, #40]	; (800c4a8 <tcp_input+0xc7c>)
 800c480:	f7ff bb7e 	b.w	800bb80 <tcp_input+0x354>
 800c484:	20004350 	.word	0x20004350
 800c488:	20004364 	.word	0x20004364
 800c48c:	20000f80 	.word	0x20000f80
 800c490:	20000f7c 	.word	0x20000f7c
 800c494:	20000fa0 	.word	0x20000fa0
 800c498:	20000f98 	.word	0x20000f98
 800c49c:	20000f9c 	.word	0x20000f9c
 800c4a0:	0801812c 	.word	0x0801812c
 800c4a4:	08018500 	.word	0x08018500
 800c4a8:	08016a38 	.word	0x08016a38
 800c4ac:	20004368 	.word	0x20004368
 800c4b0:	20000fac 	.word	0x20000fac
 800c4b4:	20002d14 	.word	0x20002d14
 800c4b8:	20000fba 	.word	0x20000fba
 800c4bc:	20000fa4 	.word	0x20000fa4
 800c4c0:	08018464 	.word	0x08018464

0800c4c4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800c4c4:	4a02      	ldr	r2, [pc, #8]	; (800c4d0 <tcp_trigger_input_pcb_close+0xc>)
 800c4c6:	7813      	ldrb	r3, [r2, #0]
 800c4c8:	f043 0310 	orr.w	r3, r3, #16
 800c4cc:	7013      	strb	r3, [r2, #0]
}
 800c4ce:	4770      	bx	lr
 800c4d0:	20000fa0 	.word	0x20000fa0

0800c4d4 <tcp_seg_add_chksum>:
 * Called by tcp_write and tcp_split_unsent_seg.
 */
static void
tcp_seg_add_chksum(u16_t chksum, u16_t len, u16_t *seg_chksum,
                   u8_t *seg_chksum_swapped)
{
 800c4d4:	b410      	push	{r4}
  u32_t helper;
  /* add chksum to old chksum and fold to u16_t */
  helper = chksum + *seg_chksum;
 800c4d6:	8814      	ldrh	r4, [r2, #0]
 800c4d8:	4404      	add	r4, r0
  chksum = FOLD_U32T(helper);
 800c4da:	b2a0      	uxth	r0, r4
 800c4dc:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 800c4e0:	b280      	uxth	r0, r0
  if ((len & 1) != 0) {
 800c4e2:	f011 0f01 	tst.w	r1, #1
 800c4e6:	d007      	beq.n	800c4f8 <tcp_seg_add_chksum+0x24>
    *seg_chksum_swapped = 1 - *seg_chksum_swapped;
 800c4e8:	7819      	ldrb	r1, [r3, #0]
 800c4ea:	f1c1 0101 	rsb	r1, r1, #1
 800c4ee:	7019      	strb	r1, [r3, #0]
    chksum = SWAP_BYTES_IN_WORD(chksum);
 800c4f0:	0a03      	lsrs	r3, r0, #8
 800c4f2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800c4f6:	b280      	uxth	r0, r0
  }
  *seg_chksum = chksum;
 800c4f8:	8010      	strh	r0, [r2, #0]
}
 800c4fa:	bc10      	pop	{r4}
 800c4fc:	4770      	bx	lr
	...

0800c500 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c500:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c502:	4604      	mov	r4, r0
 800c504:	b128      	cbz	r0, 800c512 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c506:	6863      	ldr	r3, [r4, #4]
 800c508:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800c50a:	3801      	subs	r0, #1
 800c50c:	bf18      	it	ne
 800c50e:	2001      	movne	r0, #1
 800c510:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c512:	4b04      	ldr	r3, [pc, #16]	; (800c524 <tcp_output_segment_busy+0x24>)
 800c514:	f240 529a 	movw	r2, #1434	; 0x59a
 800c518:	4903      	ldr	r1, [pc, #12]	; (800c528 <tcp_output_segment_busy+0x28>)
 800c51a:	4804      	ldr	r0, [pc, #16]	; (800c52c <tcp_output_segment_busy+0x2c>)
 800c51c:	f007 fecc 	bl	80142b8 <app_debug_rtt_raw>
 800c520:	e7f1      	b.n	800c506 <tcp_output_segment_busy+0x6>
 800c522:	bf00      	nop
 800c524:	0801851c 	.word	0x0801851c
 800c528:	08018548 	.word	0x08018548
 800c52c:	08016a38 	.word	0x08016a38

0800c530 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c534:	460d      	mov	r5, r1
 800c536:	b181      	cbz	r1, 800c55a <tcp_output_fill_options+0x2a>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c538:	686b      	ldr	r3, [r5, #4]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c53a:	00a4      	lsls	r4, r4, #2
 800c53c:	f004 0404 	and.w	r4, r4, #4
 800c540:	3414      	adds	r4, #20
 800c542:	441c      	add	r4, r3
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c544:	3314      	adds	r3, #20
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c546:	429c      	cmp	r4, r3
 800c548:	d006      	beq.n	800c558 <tcp_output_fill_options+0x28>
 800c54a:	4b08      	ldr	r3, [pc, #32]	; (800c56c <tcp_output_fill_options+0x3c>)
 800c54c:	f240 7275 	movw	r2, #1909	; 0x775
 800c550:	4907      	ldr	r1, [pc, #28]	; (800c570 <tcp_output_fill_options+0x40>)
 800c552:	4808      	ldr	r0, [pc, #32]	; (800c574 <tcp_output_fill_options+0x44>)
 800c554:	f007 feb0 	bl	80142b8 <app_debug_rtt_raw>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c558:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c55a:	4b04      	ldr	r3, [pc, #16]	; (800c56c <tcp_output_fill_options+0x3c>)
 800c55c:	f240 7256 	movw	r2, #1878	; 0x756
 800c560:	4905      	ldr	r1, [pc, #20]	; (800c578 <tcp_output_fill_options+0x48>)
 800c562:	4804      	ldr	r0, [pc, #16]	; (800c574 <tcp_output_fill_options+0x44>)
 800c564:	f007 fea8 	bl	80142b8 <app_debug_rtt_raw>
 800c568:	e7e6      	b.n	800c538 <tcp_output_fill_options+0x8>
 800c56a:	bf00      	nop
 800c56c:	0801851c 	.word	0x0801851c
 800c570:	08018598 	.word	0x08018598
 800c574:	08016a38 	.word	0x08016a38
 800c578:	08018570 	.word	0x08018570

0800c57c <tcp_pbuf_prealloc>:
{
 800c57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c580:	4680      	mov	r8, r0
 800c582:	460c      	mov	r4, r1
 800c584:	4615      	mov	r5, r2
 800c586:	9e08      	ldr	r6, [sp, #32]
 800c588:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c58c:	461f      	mov	r7, r3
 800c58e:	b1cb      	cbz	r3, 800c5c4 <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c590:	b1fe      	cbz	r6, 800c5d2 <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 800c592:	42ac      	cmp	r4, r5
 800c594:	d229      	bcs.n	800c5ea <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c596:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c59a:	f013 0f02 	tst.w	r3, #2
 800c59e:	d108      	bne.n	800c5b2 <tcp_pbuf_prealloc+0x36>
 800c5a0:	8bf3      	ldrh	r3, [r6, #30]
 800c5a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c5a6:	d139      	bne.n	800c61c <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 800c5a8:	f1b9 0f00 	cmp.w	r9, #0
 800c5ac:	d001      	beq.n	800c5b2 <tcp_pbuf_prealloc+0x36>
         (!first_seg ||
 800c5ae:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c5b0:	b1b3      	cbz	r3, 800c5e0 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c5b2:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800c5b6:	f021 0103 	bic.w	r1, r1, #3
 800c5ba:	428d      	cmp	r5, r1
 800c5bc:	bf28      	it	cs
 800c5be:	460d      	movcs	r5, r1
 800c5c0:	b2a9      	uxth	r1, r5
 800c5c2:	e013      	b.n	800c5ec <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c5c4:	4b16      	ldr	r3, [pc, #88]	; (800c620 <tcp_pbuf_prealloc+0xa4>)
 800c5c6:	22e8      	movs	r2, #232	; 0xe8
 800c5c8:	4916      	ldr	r1, [pc, #88]	; (800c624 <tcp_pbuf_prealloc+0xa8>)
 800c5ca:	4817      	ldr	r0, [pc, #92]	; (800c628 <tcp_pbuf_prealloc+0xac>)
 800c5cc:	f007 fe74 	bl	80142b8 <app_debug_rtt_raw>
 800c5d0:	e7de      	b.n	800c590 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c5d2:	4b13      	ldr	r3, [pc, #76]	; (800c620 <tcp_pbuf_prealloc+0xa4>)
 800c5d4:	22e9      	movs	r2, #233	; 0xe9
 800c5d6:	4915      	ldr	r1, [pc, #84]	; (800c62c <tcp_pbuf_prealloc+0xb0>)
 800c5d8:	4813      	ldr	r0, [pc, #76]	; (800c628 <tcp_pbuf_prealloc+0xac>)
 800c5da:	f007 fe6d 	bl	80142b8 <app_debug_rtt_raw>
 800c5de:	e7d8      	b.n	800c592 <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 800c5e0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1e5      	bne.n	800c5b2 <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	e000      	b.n	800c5ec <tcp_pbuf_prealloc+0x70>
 800c5ea:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c5ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c5f0:	4640      	mov	r0, r8
 800c5f2:	f7fc fdd7 	bl	80091a4 <pbuf_alloc>
  if (p == NULL) {
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	b168      	cbz	r0, 800c616 <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c5fa:	6803      	ldr	r3, [r0, #0]
 800c5fc:	b133      	cbz	r3, 800c60c <tcp_pbuf_prealloc+0x90>
 800c5fe:	4b08      	ldr	r3, [pc, #32]	; (800c620 <tcp_pbuf_prealloc+0xa4>)
 800c600:	f240 120b 	movw	r2, #267	; 0x10b
 800c604:	490a      	ldr	r1, [pc, #40]	; (800c630 <tcp_pbuf_prealloc+0xb4>)
 800c606:	4808      	ldr	r0, [pc, #32]	; (800c628 <tcp_pbuf_prealloc+0xac>)
 800c608:	f007 fe56 	bl	80142b8 <app_debug_rtt_raw>
  *oversize = p->len - length;
 800c60c:	896b      	ldrh	r3, [r5, #10]
 800c60e:	1b1b      	subs	r3, r3, r4
 800c610:	803b      	strh	r3, [r7, #0]
  p->len = p->tot_len = length;
 800c612:	812c      	strh	r4, [r5, #8]
 800c614:	816c      	strh	r4, [r5, #10]
}
 800c616:	4628      	mov	r0, r5
 800c618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 800c61c:	4621      	mov	r1, r4
 800c61e:	e7e5      	b.n	800c5ec <tcp_pbuf_prealloc+0x70>
 800c620:	0801851c 	.word	0x0801851c
 800c624:	080185ac 	.word	0x080185ac
 800c628:	08016a38 	.word	0x08016a38
 800c62c:	080185d0 	.word	0x080185d0
 800c630:	080185f0 	.word	0x080185f0

0800c634 <tcp_create_segment>:
{
 800c634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	460e      	mov	r6, r1
 800c63a:	4690      	mov	r8, r2
 800c63c:	4699      	mov	r9, r3
 800c63e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c642:	4682      	mov	sl, r0
 800c644:	2800      	cmp	r0, #0
 800c646:	d046      	beq.n	800c6d6 <tcp_create_segment+0xa2>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c648:	2e00      	cmp	r6, #0
 800c64a:	d04b      	beq.n	800c6e4 <tcp_create_segment+0xb0>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c64c:	00bd      	lsls	r5, r7, #2
 800c64e:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c652:	2003      	movs	r0, #3
 800c654:	f7fc fa5a 	bl	8008b0c <memp_malloc>
 800c658:	4604      	mov	r4, r0
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d049      	beq.n	800c6f2 <tcp_create_segment+0xbe>
  seg->flags = optflags;
 800c65e:	73c7      	strb	r7, [r0, #15]
  seg->next = NULL;
 800c660:	2300      	movs	r3, #0
 800c662:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800c664:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c666:	fa1f fb85 	uxth.w	fp, r5
 800c66a:	8933      	ldrh	r3, [r6, #8]
 800c66c:	455b      	cmp	r3, fp
 800c66e:	d344      	bcc.n	800c6fa <tcp_create_segment+0xc6>
  seg->len = p->tot_len - optlen;
 800c670:	8933      	ldrh	r3, [r6, #8]
 800c672:	eba3 030b 	sub.w	r3, r3, fp
 800c676:	8123      	strh	r3, [r4, #8]
  seg->oversize_left = 0;
 800c678:	2100      	movs	r1, #0
 800c67a:	8161      	strh	r1, [r4, #10]
  seg->chksum = 0;
 800c67c:	81a1      	strh	r1, [r4, #12]
  seg->chksum_swapped = 0;
 800c67e:	73a1      	strb	r1, [r4, #14]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
 800c680:	f017 0f04 	tst.w	r7, #4
 800c684:	d140      	bne.n	800c708 <tcp_create_segment+0xd4>
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c686:	2114      	movs	r1, #20
 800c688:	4630      	mov	r0, r6
 800c68a:	f7fc fcdb 	bl	8009044 <pbuf_add_header>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d141      	bne.n	800c716 <tcp_create_segment+0xe2>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c692:	6863      	ldr	r3, [r4, #4]
 800c694:	685e      	ldr	r6, [r3, #4]
 800c696:	6126      	str	r6, [r4, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c698:	f8ba 001a 	ldrh.w	r0, [sl, #26]
 800c69c:	f7fb f8c0 	bl	8007820 <lwip_htons>
 800c6a0:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c6a2:	6926      	ldr	r6, [r4, #16]
 800c6a4:	f8ba 001c 	ldrh.w	r0, [sl, #28]
 800c6a8:	f7fb f8ba 	bl	8007820 <lwip_htons>
 800c6ac:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c6ae:	6926      	ldr	r6, [r4, #16]
 800c6b0:	4648      	mov	r0, r9
 800c6b2:	f7fb f8ba 	bl	800782a <lwip_htonl>
 800c6b6:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c6b8:	6926      	ldr	r6, [r4, #16]
 800c6ba:	08a8      	lsrs	r0, r5, #2
 800c6bc:	3005      	adds	r0, #5
 800c6be:	ea48 3000 	orr.w	r0, r8, r0, lsl #12
 800c6c2:	f7fb f8ad 	bl	8007820 <lwip_htons>
 800c6c6:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800c6c8:	6923      	ldr	r3, [r4, #16]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	749a      	strb	r2, [r3, #18]
 800c6ce:	74da      	strb	r2, [r3, #19]
}
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c6d6:	4b12      	ldr	r3, [pc, #72]	; (800c720 <tcp_create_segment+0xec>)
 800c6d8:	22a3      	movs	r2, #163	; 0xa3
 800c6da:	4912      	ldr	r1, [pc, #72]	; (800c724 <tcp_create_segment+0xf0>)
 800c6dc:	4812      	ldr	r0, [pc, #72]	; (800c728 <tcp_create_segment+0xf4>)
 800c6de:	f007 fdeb 	bl	80142b8 <app_debug_rtt_raw>
 800c6e2:	e7b1      	b.n	800c648 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <tcp_create_segment+0xec>)
 800c6e6:	22a4      	movs	r2, #164	; 0xa4
 800c6e8:	4910      	ldr	r1, [pc, #64]	; (800c72c <tcp_create_segment+0xf8>)
 800c6ea:	480f      	ldr	r0, [pc, #60]	; (800c728 <tcp_create_segment+0xf4>)
 800c6ec:	f007 fde4 	bl	80142b8 <app_debug_rtt_raw>
 800c6f0:	e7ac      	b.n	800c64c <tcp_create_segment+0x18>
    pbuf_free(p);
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	f7fc fcec 	bl	80090d0 <pbuf_free>
    return NULL;
 800c6f8:	e7ea      	b.n	800c6d0 <tcp_create_segment+0x9c>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c6fa:	4b09      	ldr	r3, [pc, #36]	; (800c720 <tcp_create_segment+0xec>)
 800c6fc:	22b0      	movs	r2, #176	; 0xb0
 800c6fe:	490c      	ldr	r1, [pc, #48]	; (800c730 <tcp_create_segment+0xfc>)
 800c700:	4809      	ldr	r0, [pc, #36]	; (800c728 <tcp_create_segment+0xf4>)
 800c702:	f007 fdd9 	bl	80142b8 <app_debug_rtt_raw>
 800c706:	e7b3      	b.n	800c670 <tcp_create_segment+0x3c>
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
 800c708:	4b05      	ldr	r3, [pc, #20]	; (800c720 <tcp_create_segment+0xec>)
 800c70a:	22b9      	movs	r2, #185	; 0xb9
 800c70c:	4909      	ldr	r1, [pc, #36]	; (800c734 <tcp_create_segment+0x100>)
 800c70e:	4806      	ldr	r0, [pc, #24]	; (800c728 <tcp_create_segment+0xf4>)
 800c710:	f007 fdd2 	bl	80142b8 <app_debug_rtt_raw>
 800c714:	e7b7      	b.n	800c686 <tcp_create_segment+0x52>
    tcp_seg_free(seg);
 800c716:	4620      	mov	r0, r4
 800c718:	f7fd fa50 	bl	8009bbc <tcp_seg_free>
    return NULL;
 800c71c:	2400      	movs	r4, #0
 800c71e:	e7d7      	b.n	800c6d0 <tcp_create_segment+0x9c>
 800c720:	0801851c 	.word	0x0801851c
 800c724:	08018604 	.word	0x08018604
 800c728:	08016a38 	.word	0x08016a38
 800c72c:	08018624 	.word	0x08018624
 800c730:	08018648 	.word	0x08018648
 800c734:	08018660 	.word	0x08018660

0800c738 <tcp_output_alloc_header_common>:
{
 800c738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c73c:	4607      	mov	r7, r0
 800c73e:	460c      	mov	r4, r1
 800c740:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c742:	3214      	adds	r2, #20
 800c744:	4411      	add	r1, r2
 800c746:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c74a:	b289      	uxth	r1, r1
 800c74c:	2024      	movs	r0, #36	; 0x24
 800c74e:	f7fc fd29 	bl	80091a4 <pbuf_alloc>
  if (p != NULL) {
 800c752:	4606      	mov	r6, r0
 800c754:	b348      	cbz	r0, 800c7aa <tcp_output_alloc_header_common+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c756:	f104 0313 	add.w	r3, r4, #19
 800c75a:	8942      	ldrh	r2, [r0, #10]
 800c75c:	4293      	cmp	r3, r2
 800c75e:	da27      	bge.n	800c7b0 <tcp_output_alloc_header_common+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800c760:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800c762:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800c766:	f7fb f85b 	bl	8007820 <lwip_htons>
 800c76a:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c76c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800c770:	f7fb f856 	bl	8007820 <lwip_htons>
 800c774:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800c776:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c77a:	4638      	mov	r0, r7
 800c77c:	f7fb f855 	bl	800782a <lwip_htonl>
 800c780:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c782:	08a4      	lsrs	r4, r4, #2
 800c784:	3405      	adds	r4, #5
 800c786:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800c78a:	ea40 3404 	orr.w	r4, r0, r4, lsl #12
 800c78e:	b2a0      	uxth	r0, r4
 800c790:	f7fb f846 	bl	8007820 <lwip_htons>
 800c794:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c796:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800c79a:	f7fb f841 	bl	8007820 <lwip_htons>
 800c79e:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	742b      	strb	r3, [r5, #16]
 800c7a4:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800c7a6:	74ab      	strb	r3, [r5, #18]
 800c7a8:	74eb      	strb	r3, [r5, #19]
}
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c7b0:	4b03      	ldr	r3, [pc, #12]	; (800c7c0 <tcp_output_alloc_header_common+0x88>)
 800c7b2:	f240 7223 	movw	r2, #1827	; 0x723
 800c7b6:	4903      	ldr	r1, [pc, #12]	; (800c7c4 <tcp_output_alloc_header_common+0x8c>)
 800c7b8:	4803      	ldr	r0, [pc, #12]	; (800c7c8 <tcp_output_alloc_header_common+0x90>)
 800c7ba:	f007 fd7d 	bl	80142b8 <app_debug_rtt_raw>
 800c7be:	e7cf      	b.n	800c760 <tcp_output_alloc_header_common+0x28>
 800c7c0:	0801851c 	.word	0x0801851c
 800c7c4:	08018694 	.word	0x08018694
 800c7c8:	08016a38 	.word	0x08016a38

0800c7cc <tcp_output_alloc_header>:
{
 800c7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	460d      	mov	r5, r1
 800c7d2:	4616      	mov	r6, r2
 800c7d4:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	b1a0      	cbz	r0, 800c804 <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c7da:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800c7dc:	9303      	str	r3, [sp, #12]
 800c7de:	2310      	movs	r3, #16
 800c7e0:	9302      	str	r3, [sp, #8]
 800c7e2:	8ba3      	ldrh	r3, [r4, #28]
 800c7e4:	9301      	str	r3, [sp, #4]
 800c7e6:	8b63      	ldrh	r3, [r4, #26]
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	463b      	mov	r3, r7
 800c7ec:	4632      	mov	r2, r6
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c7f2:	f7ff ffa1 	bl	800c738 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800c7f6:	b118      	cbz	r0, 800c800 <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c7f8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800c7fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c7fc:	4413      	add	r3, r2
 800c7fe:	6323      	str	r3, [r4, #48]	; 0x30
}
 800c800:	b005      	add	sp, #20
 800c802:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c804:	4b03      	ldr	r3, [pc, #12]	; (800c814 <tcp_output_alloc_header+0x48>)
 800c806:	f240 7242 	movw	r2, #1858	; 0x742
 800c80a:	4903      	ldr	r1, [pc, #12]	; (800c818 <tcp_output_alloc_header+0x4c>)
 800c80c:	4803      	ldr	r0, [pc, #12]	; (800c81c <tcp_output_alloc_header+0x50>)
 800c80e:	f007 fd53 	bl	80142b8 <app_debug_rtt_raw>
 800c812:	e7e2      	b.n	800c7da <tcp_output_alloc_header+0xe>
 800c814:	0801851c 	.word	0x0801851c
 800c818:	080186c4 	.word	0x080186c4
 800c81c:	08016a38 	.word	0x08016a38

0800c820 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c824:	b085      	sub	sp, #20
 800c826:	4604      	mov	r4, r0
 800c828:	4617      	mov	r7, r2
 800c82a:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c82c:	460e      	mov	r6, r1
 800c82e:	b379      	cbz	r1, 800c890 <tcp_output_control_segment+0x70>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c830:	2c00      	cmp	r4, #0
 800c832:	d04e      	beq.n	800c8d2 <tcp_output_control_segment+0xb2>
 800c834:	7a20      	ldrb	r0, [r4, #8]
 800c836:	bb98      	cbnz	r0, 800c8a0 <tcp_output_control_segment+0x80>
    return ip_route(src, dst);
 800c838:	4628      	mov	r0, r5
 800c83a:	f002 f877 	bl	800e92c <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800c83e:	4680      	mov	r8, r0
 800c840:	2800      	cmp	r0, #0
 800c842:	d040      	beq.n	800c8c6 <tcp_output_control_segment+0xa6>
    err = ERR_RTE;
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800c844:	f8d6 9004 	ldr.w	r9, [r6, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800c848:	9500      	str	r5, [sp, #0]
 800c84a:	463b      	mov	r3, r7
 800c84c:	8932      	ldrh	r2, [r6, #8]
 800c84e:	2106      	movs	r1, #6
 800c850:	4630      	mov	r0, r6
 800c852:	f7fb fdd3 	bl	80083fc <ip_chksum_pseudo>
 800c856:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
 800c85a:	f104 030c 	add.w	r3, r4, #12
 800c85e:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
      ttl = pcb->ttl;
 800c862:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800c864:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c866:	f8cd 8008 	str.w	r8, [sp, #8]
 800c86a:	2206      	movs	r2, #6
 800c86c:	9201      	str	r2, [sp, #4]
 800c86e:	9100      	str	r1, [sp, #0]
 800c870:	462a      	mov	r2, r5
 800c872:	4639      	mov	r1, r7
 800c874:	4630      	mov	r0, r6
 800c876:	f002 f9f5 	bl	800ec64 <ip4_output_if>
 800c87a:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
 800c87c:	2300      	movs	r3, #0
 800c87e:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  }
  pbuf_free(p);
 800c882:	4630      	mov	r0, r6
 800c884:	f7fc fc24 	bl	80090d0 <pbuf_free>
  return err;
}
 800c888:	4620      	mov	r0, r4
 800c88a:	b005      	add	sp, #20
 800c88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c890:	4b19      	ldr	r3, [pc, #100]	; (800c8f8 <tcp_output_control_segment+0xd8>)
 800c892:	f240 7287 	movw	r2, #1927	; 0x787
 800c896:	4919      	ldr	r1, [pc, #100]	; (800c8fc <tcp_output_control_segment+0xdc>)
 800c898:	4819      	ldr	r0, [pc, #100]	; (800c900 <tcp_output_control_segment+0xe0>)
 800c89a:	f007 fd0d 	bl	80142b8 <app_debug_rtt_raw>
 800c89e:	e7c7      	b.n	800c830 <tcp_output_control_segment+0x10>
    return netif_get_by_index(pcb->netif_idx);
 800c8a0:	f7fc fb36 	bl	8008f10 <netif_get_by_index>
  if (netif == NULL) {
 800c8a4:	4680      	mov	r8, r0
 800c8a6:	b158      	cbz	r0, 800c8c0 <tcp_output_control_segment+0xa0>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800c8a8:	f8d6 9004 	ldr.w	r9, [r6, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800c8ac:	9500      	str	r5, [sp, #0]
 800c8ae:	463b      	mov	r3, r7
 800c8b0:	8932      	ldrh	r2, [r6, #8]
 800c8b2:	2106      	movs	r1, #6
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	f7fb fda1 	bl	80083fc <ip_chksum_pseudo>
 800c8ba:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 800c8be:	e7cc      	b.n	800c85a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c8c0:	f06f 0403 	mvn.w	r4, #3
 800c8c4:	e7dd      	b.n	800c882 <tcp_output_control_segment+0x62>
 800c8c6:	f06f 0403 	mvn.w	r4, #3
 800c8ca:	e7da      	b.n	800c882 <tcp_output_control_segment+0x62>
 800c8cc:	f06f 0403 	mvn.w	r4, #3
 800c8d0:	e7d7      	b.n	800c882 <tcp_output_control_segment+0x62>
    return ip_route(src, dst);
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f002 f82a 	bl	800e92c <ip4_route>
  if (netif == NULL) {
 800c8d8:	4680      	mov	r8, r0
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d0f6      	beq.n	800c8cc <tcp_output_control_segment+0xac>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800c8de:	6874      	ldr	r4, [r6, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800c8e0:	9500      	str	r5, [sp, #0]
 800c8e2:	463b      	mov	r3, r7
 800c8e4:	8932      	ldrh	r2, [r6, #8]
 800c8e6:	2106      	movs	r1, #6
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7fb fd87 	bl	80083fc <ip_chksum_pseudo>
 800c8ee:	8220      	strh	r0, [r4, #16]
      tos = 0;
 800c8f0:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800c8f2:	23ff      	movs	r3, #255	; 0xff
 800c8f4:	e7b7      	b.n	800c866 <tcp_output_control_segment+0x46>
 800c8f6:	bf00      	nop
 800c8f8:	0801851c 	.word	0x0801851c
 800c8fc:	080186ec 	.word	0x080186ec
 800c900:	08016a38 	.word	0x08016a38

0800c904 <tcp_write>:
{
 800c904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c908:	b095      	sub	sp, #84	; 0x54
 800c90a:	9107      	str	r1, [sp, #28]
 800c90c:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  u16_t concat_chksum = 0;
 800c914:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  u8_t concat_chksum_swapped = 0;
 800c918:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c91c:	b1c0      	cbz	r0, 800c950 <tcp_write+0x4c>
 800c91e:	4692      	mov	sl, r2
 800c920:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c922:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 800c924:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 800c928:	085b      	lsrs	r3, r3, #1
 800c92a:	4293      	cmp	r3, r2
 800c92c:	bf28      	it	cs
 800c92e:	4613      	movcs	r3, r2
 800c930:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800c932:	2b00      	cmp	r3, #0
 800c934:	bf08      	it	eq
 800c936:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c938:	9b07      	ldr	r3, [sp, #28]
 800c93a:	b19b      	cbz	r3, 800c964 <tcp_write+0x60>
  if ((pcb->state != ESTABLISHED) &&
 800c93c:	7e03      	ldrb	r3, [r0, #24]
 800c93e:	2b07      	cmp	r3, #7
 800c940:	d01a      	beq.n	800c978 <tcp_write+0x74>
      (pcb->state != CLOSE_WAIT) &&
 800c942:	3b02      	subs	r3, #2
 800c944:	b2db      	uxtb	r3, r3
 800c946:	2b02      	cmp	r3, #2
 800c948:	d916      	bls.n	800c978 <tcp_write+0x74>
    return ERR_CONN;
 800c94a:	f06f 000a 	mvn.w	r0, #10
  if (err != ERR_OK) {
 800c94e:	e25f      	b.n	800ce10 <tcp_write+0x50c>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c950:	4bb0      	ldr	r3, [pc, #704]	; (800cc14 <tcp_write+0x310>)
 800c952:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c956:	49b0      	ldr	r1, [pc, #704]	; (800cc18 <tcp_write+0x314>)
 800c958:	48b0      	ldr	r0, [pc, #704]	; (800cc1c <tcp_write+0x318>)
 800c95a:	f007 fcad 	bl	80142b8 <app_debug_rtt_raw>
 800c95e:	f06f 000f 	mvn.w	r0, #15
 800c962:	e255      	b.n	800ce10 <tcp_write+0x50c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c964:	4bab      	ldr	r3, [pc, #684]	; (800cc14 <tcp_write+0x310>)
 800c966:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c96a:	49ad      	ldr	r1, [pc, #692]	; (800cc20 <tcp_write+0x31c>)
 800c96c:	48ab      	ldr	r0, [pc, #684]	; (800cc1c <tcp_write+0x318>)
 800c96e:	f007 fca3 	bl	80142b8 <app_debug_rtt_raw>
 800c972:	f06f 000f 	mvn.w	r0, #15
 800c976:	e24b      	b.n	800ce10 <tcp_write+0x50c>
  } else if (len == 0) {
 800c978:	f1ba 0f00 	cmp.w	sl, #0
 800c97c:	d039      	beq.n	800c9f2 <tcp_write+0xee>
  if (len > pcb->snd_buf) {
 800c97e:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 800c982:	4553      	cmp	r3, sl
 800c984:	d310      	bcc.n	800c9a8 <tcp_write+0xa4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c986:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
 800c98a:	2b07      	cmp	r3, #7
 800c98c:	d815      	bhi.n	800c9ba <tcp_write+0xb6>
  if (pcb->snd_queuelen != 0) {
 800c98e:	b32b      	cbz	r3, 800c9dc <tcp_write+0xd8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c990:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800c994:	bb6b      	cbnz	r3, 800c9f2 <tcp_write+0xee>
 800c996:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c99a:	b1bb      	cbz	r3, 800c9cc <tcp_write+0xc8>
  queuelen = pcb->snd_queuelen;
 800c99c:	f8b8 606a 	ldrh.w	r6, [r8, #106]	; 0x6a
  if (pcb->unsent != NULL) {
 800c9a0:	f8d8 9070 	ldr.w	r9, [r8, #112]	; 0x70
 800c9a4:	464b      	mov	r3, r9
 800c9a6:	e02c      	b.n	800ca02 <tcp_write+0xfe>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c9a8:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800c9ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9b0:	f8a8 301e 	strh.w	r3, [r8, #30]
    return ERR_MEM;
 800c9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b8:	e22a      	b.n	800ce10 <tcp_write+0x50c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c9ba:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800c9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9c2:	f8a8 301e 	strh.w	r3, [r8, #30]
    return ERR_MEM;
 800c9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ca:	e221      	b.n	800ce10 <tcp_write+0x50c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c9cc:	4b91      	ldr	r3, [pc, #580]	; (800cc14 <tcp_write+0x310>)
 800c9ce:	f240 1255 	movw	r2, #341	; 0x155
 800c9d2:	4994      	ldr	r1, [pc, #592]	; (800cc24 <tcp_write+0x320>)
 800c9d4:	4891      	ldr	r0, [pc, #580]	; (800cc1c <tcp_write+0x318>)
 800c9d6:	f007 fc6f 	bl	80142b8 <app_debug_rtt_raw>
 800c9da:	e00a      	b.n	800c9f2 <tcp_write+0xee>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c9dc:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d050      	beq.n	800ca86 <tcp_write+0x182>
 800c9e4:	4b8b      	ldr	r3, [pc, #556]	; (800cc14 <tcp_write+0x310>)
 800c9e6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c9ea:	498f      	ldr	r1, [pc, #572]	; (800cc28 <tcp_write+0x324>)
 800c9ec:	488b      	ldr	r0, [pc, #556]	; (800cc1c <tcp_write+0x318>)
 800c9ee:	f007 fc63 	bl	80142b8 <app_debug_rtt_raw>
  queuelen = pcb->snd_queuelen;
 800c9f2:	f8b8 606a 	ldrh.w	r6, [r8, #106]	; 0x6a
  if (pcb->unsent != NULL) {
 800c9f6:	f8d8 9070 	ldr.w	r9, [r8, #112]	; 0x70
 800c9fa:	f1b9 0f00 	cmp.w	r9, #0
 800c9fe:	d048      	beq.n	800ca92 <tcp_write+0x18e>
 800ca00:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ca02:	9309      	str	r3, [sp, #36]	; 0x24
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1fb      	bne.n	800ca02 <tcp_write+0xfe>
 800ca0a:	4699      	mov	r9, r3
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ca0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca0e:	7bdc      	ldrb	r4, [r3, #15]
 800ca10:	00a4      	lsls	r4, r4, #2
 800ca12:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ca16:	891b      	ldrh	r3, [r3, #8]
 800ca18:	4423      	add	r3, r4
 800ca1a:	459b      	cmp	fp, r3
 800ca1c:	db52      	blt.n	800cac4 <tcp_write+0x1c0>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ca1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca20:	890b      	ldrh	r3, [r1, #8]
 800ca22:	ebab 0303 	sub.w	r3, fp, r3
 800ca26:	1b1c      	subs	r4, r3, r4
 800ca28:	b2a3      	uxth	r3, r4
 800ca2a:	930b      	str	r3, [sp, #44]	; 0x2c
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800ca2c:	f8b8 206c 	ldrh.w	r2, [r8, #108]	; 0x6c
 800ca30:	894b      	ldrh	r3, [r1, #10]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d14e      	bne.n	800cad4 <tcp_write+0x1d0>
    oversize = pcb->unsent_oversize;
 800ca36:	f8b8 406c 	ldrh.w	r4, [r8, #108]	; 0x6c
 800ca3a:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
    if (oversize > 0) {
 800ca3e:	2c00      	cmp	r4, #0
 800ca40:	d061      	beq.n	800cb06 <tcp_write+0x202>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ca42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca44:	429c      	cmp	r4, r3
 800ca46:	d84d      	bhi.n	800cae4 <tcp_write+0x1e0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ca48:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800ca4c:	461c      	mov	r4, r3
 800ca4e:	4553      	cmp	r3, sl
 800ca50:	bf28      	it	cs
 800ca52:	4654      	movcs	r4, sl
 800ca54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca56:	4294      	cmp	r4, r2
 800ca58:	bf28      	it	cs
 800ca5a:	4614      	movcs	r4, r2
 800ca5c:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800ca5e:	1b1b      	subs	r3, r3, r4
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
      space -= oversize_used;
 800ca66:	1b12      	subs	r2, r2, r4
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	920b      	str	r2, [sp, #44]	; 0x2c
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 809a 	beq.w	800cba6 <tcp_write+0x2a2>
 800ca72:	45a2      	cmp	sl, r4
 800ca74:	d13e      	bne.n	800caf4 <tcp_write+0x1f0>
 800ca76:	9f09      	ldr	r7, [sp, #36]	; 0x24
  while (pos < len) {
 800ca78:	940d      	str	r4, [sp, #52]	; 0x34
 800ca7a:	f8cd 9018 	str.w	r9, [sp, #24]
 800ca7e:	2300      	movs	r3, #0
 800ca80:	930e      	str	r3, [sp, #56]	; 0x38
 800ca82:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca84:	e1da      	b.n	800ce3c <tcp_write+0x538>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ca86:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1aa      	bne.n	800c9e4 <tcp_write+0xe0>
  queuelen = pcb->snd_queuelen;
 800ca8e:	f8b8 606a 	ldrh.w	r6, [r8, #106]	; 0x6a
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ca92:	f8b8 406c 	ldrh.w	r4, [r8, #108]	; 0x6c
 800ca96:	2c00      	cmp	r4, #0
 800ca98:	f040 80d2 	bne.w	800cc40 <tcp_write+0x33c>
  u16_t concat_chksummed = 0;
 800ca9c:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t extendlen = 0;
 800ca9e:	940e      	str	r4, [sp, #56]	; 0x38
  u16_t oversize_add = 0;
 800caa0:	940f      	str	r4, [sp, #60]	; 0x3c
  u16_t oversize_used = 0;
 800caa2:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800caa4:	2300      	movs	r3, #0
 800caa6:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800caa8:	4699      	mov	r9, r3
  while (pos < len) {
 800caaa:	45a2      	cmp	sl, r4
 800caac:	f240 81df 	bls.w	800ce6e <tcp_write+0x56a>
 800cab0:	2300      	movs	r3, #0
 800cab2:	9306      	str	r3, [sp, #24]
 800cab4:	9305      	str	r3, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cab8:	f003 0301 	and.w	r3, r3, #1
 800cabc:	9308      	str	r3, [sp, #32]
 800cabe:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cac2:	e147      	b.n	800cd54 <tcp_write+0x450>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cac4:	4b53      	ldr	r3, [pc, #332]	; (800cc14 <tcp_write+0x310>)
 800cac6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800caca:	4958      	ldr	r1, [pc, #352]	; (800cc2c <tcp_write+0x328>)
 800cacc:	4853      	ldr	r0, [pc, #332]	; (800cc1c <tcp_write+0x318>)
 800cace:	f007 fbf3 	bl	80142b8 <app_debug_rtt_raw>
 800cad2:	e7a4      	b.n	800ca1e <tcp_write+0x11a>
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800cad4:	4b4f      	ldr	r3, [pc, #316]	; (800cc14 <tcp_write+0x310>)
 800cad6:	f240 12f3 	movw	r2, #499	; 0x1f3
 800cada:	4955      	ldr	r1, [pc, #340]	; (800cc30 <tcp_write+0x32c>)
 800cadc:	484f      	ldr	r0, [pc, #316]	; (800cc1c <tcp_write+0x318>)
 800cade:	f007 fbeb 	bl	80142b8 <app_debug_rtt_raw>
 800cae2:	e7a8      	b.n	800ca36 <tcp_write+0x132>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800cae4:	4b4b      	ldr	r3, [pc, #300]	; (800cc14 <tcp_write+0x310>)
 800cae6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800caea:	4952      	ldr	r1, [pc, #328]	; (800cc34 <tcp_write+0x330>)
 800caec:	484b      	ldr	r0, [pc, #300]	; (800cc1c <tcp_write+0x318>)
 800caee:	f007 fbe3 	bl	80142b8 <app_debug_rtt_raw>
 800caf2:	e7a9      	b.n	800ca48 <tcp_write+0x144>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800caf4:	4b47      	ldr	r3, [pc, #284]	; (800cc14 <tcp_write+0x310>)
 800caf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cafa:	494f      	ldr	r1, [pc, #316]	; (800cc38 <tcp_write+0x334>)
 800cafc:	4847      	ldr	r0, [pc, #284]	; (800cc1c <tcp_write+0x318>)
 800cafe:	f007 fbdb 	bl	80142b8 <app_debug_rtt_raw>
 800cb02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cb04:	e000      	b.n	800cb08 <tcp_write+0x204>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cb06:	464f      	mov	r7, r9
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cb08:	45a2      	cmp	sl, r4
 800cb0a:	d9b5      	bls.n	800ca78 <tcp_write+0x174>
 800cb0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f000 80a6 	beq.w	800cc60 <tcp_write+0x35c>
 800cb14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb16:	8912      	ldrh	r2, [r2, #8]
 800cb18:	920e      	str	r2, [sp, #56]	; 0x38
 800cb1a:	2a00      	cmp	r2, #0
 800cb1c:	f000 80a5 	beq.w	800cc6a <tcp_write+0x366>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cb20:	ebaa 0504 	sub.w	r5, sl, r4
 800cb24:	429d      	cmp	r5, r3
 800cb26:	bfa8      	it	ge
 800cb28:	461d      	movge	r5, r3
 800cb2a:	b2ad      	uxth	r5, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb2e:	f013 0f01 	tst.w	r3, #1
 800cb32:	d13a      	bne.n	800cbaa <tcp_write+0x2a6>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800cb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb36:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800cb3a:	464a      	mov	r2, r9
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	6812      	ldr	r2, [r2, #0]
 800cb40:	2a00      	cmp	r2, #0
 800cb42:	d1fb      	bne.n	800cb3c <tcp_write+0x238>
 800cb44:	4691      	mov	r9, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cb46:	7b1a      	ldrb	r2, [r3, #12]
 800cb48:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800cb4c:	d105      	bne.n	800cb5a <tcp_write+0x256>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800cb4e:	895a      	ldrh	r2, [r3, #10]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cb54:	9a07      	ldr	r2, [sp, #28]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d04f      	beq.n	800cbfa <tcp_write+0x2f6>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	2000      	movs	r0, #0
 800cb60:	f7fc fb20 	bl	80091a4 <pbuf_alloc>
 800cb64:	4681      	mov	r9, r0
 800cb66:	2800      	cmp	r0, #0
 800cb68:	f000 827d 	beq.w	800d066 <tcp_write+0x762>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800cb6c:	9b07      	ldr	r3, [sp, #28]
 800cb6e:	4423      	add	r3, r4
 800cb70:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800cb72:	f7fc fc07 	bl	8009384 <pbuf_clen>
 800cb76:	4406      	add	r6, r0
 800cb78:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	930e      	str	r3, [sp, #56]	; 0x38
        tcp_seg_add_chksum(~inet_chksum((const u8_t *)arg + pos, seglen), seglen,
 800cb7e:	4629      	mov	r1, r5
 800cb80:	9b07      	ldr	r3, [sp, #28]
 800cb82:	1918      	adds	r0, r3, r4
 800cb84:	f7fb fcbc 	bl	8008500 <inet_chksum>
 800cb88:	43c0      	mvns	r0, r0
 800cb8a:	f10d 034b 	add.w	r3, sp, #75	; 0x4b
 800cb8e:	aa13      	add	r2, sp, #76	; 0x4c
 800cb90:	4629      	mov	r1, r5
 800cb92:	b280      	uxth	r0, r0
 800cb94:	f7ff fc9e 	bl	800c4d4 <tcp_seg_add_chksum>
  u16_t oversize_add = 0;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	930f      	str	r3, [sp, #60]	; 0x3c
      pos += seglen;
 800cb9c:	192b      	adds	r3, r5, r4
 800cb9e:	950b      	str	r5, [sp, #44]	; 0x2c
 800cba0:	940d      	str	r4, [sp, #52]	; 0x34
 800cba2:	b29c      	uxth	r4, r3
 800cba4:	e781      	b.n	800caaa <tcp_write+0x1a6>
 800cba6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cba8:	e7ae      	b.n	800cb08 <tcp_write+0x204>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800cbaa:	2301      	movs	r3, #1
 800cbac:	9302      	str	r3, [sp, #8]
 800cbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	f8cd 8000 	str.w	r8, [sp]
 800cbb6:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
 800cbba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	f7ff fcdc 	bl	800c57c <tcp_pbuf_prealloc>
 800cbc4:	4681      	mov	r9, r0
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	f000 824d 	beq.w	800d066 <tcp_write+0x762>
        oversize_add = oversize;
 800cbcc:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800cbd0:	930f      	str	r3, [sp, #60]	; 0x3c
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cbd2:	462a      	mov	r2, r5
 800cbd4:	9b07      	ldr	r3, [sp, #28]
 800cbd6:	1919      	adds	r1, r3, r4
 800cbd8:	6840      	ldr	r0, [r0, #4]
 800cbda:	f7fb fcbe 	bl	800855a <lwip_chksum_copy>
 800cbde:	f10d 034b 	add.w	r3, sp, #75	; 0x4b
 800cbe2:	aa13      	add	r2, sp, #76	; 0x4c
 800cbe4:	4629      	mov	r1, r5
 800cbe6:	f7ff fc75 	bl	800c4d4 <tcp_seg_add_chksum>
        queuelen += pbuf_clen(concat_p);
 800cbea:	4648      	mov	r0, r9
 800cbec:	f7fc fbca 	bl	8009384 <pbuf_clen>
 800cbf0:	4406      	add	r6, r0
 800cbf2:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	930e      	str	r3, [sp, #56]	; 0x38
 800cbf8:	e7d0      	b.n	800cb9c <tcp_write+0x298>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800cbfa:	b90c      	cbnz	r4, 800cc00 <tcp_write+0x2fc>
          extendlen = seglen;
 800cbfc:	950e      	str	r5, [sp, #56]	; 0x38
 800cbfe:	e7be      	b.n	800cb7e <tcp_write+0x27a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800cc00:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <tcp_write+0x310>)
 800cc02:	f240 2231 	movw	r2, #561	; 0x231
 800cc06:	490d      	ldr	r1, [pc, #52]	; (800cc3c <tcp_write+0x338>)
 800cc08:	4804      	ldr	r0, [pc, #16]	; (800cc1c <tcp_write+0x318>)
 800cc0a:	f007 fb55 	bl	80142b8 <app_debug_rtt_raw>
          extendlen = seglen;
 800cc0e:	950e      	str	r5, [sp, #56]	; 0x38
 800cc10:	e7b5      	b.n	800cb7e <tcp_write+0x27a>
 800cc12:	bf00      	nop
 800cc14:	0801851c 	.word	0x0801851c
 800cc18:	08018718 	.word	0x08018718
 800cc1c:	08016a38 	.word	0x08016a38
 800cc20:	08018730 	.word	0x08018730
 800cc24:	08018764 	.word	0x08018764
 800cc28:	080187a0 	.word	0x080187a0
 800cc2c:	080187d4 	.word	0x080187d4
 800cc30:	080187ec 	.word	0x080187ec
 800cc34:	0801881c 	.word	0x0801881c
 800cc38:	0801883c 	.word	0x0801883c
 800cc3c:	0801885c 	.word	0x0801885c
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cc40:	4b8d      	ldr	r3, [pc, #564]	; (800ce78 <tcp_write+0x574>)
 800cc42:	f240 224a 	movw	r2, #586	; 0x24a
 800cc46:	498d      	ldr	r1, [pc, #564]	; (800ce7c <tcp_write+0x578>)
 800cc48:	488d      	ldr	r0, [pc, #564]	; (800ce80 <tcp_write+0x57c>)
 800cc4a:	f007 fb35 	bl	80142b8 <app_debug_rtt_raw>
  u16_t concat_chksummed = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t extendlen = 0;
 800cc52:	930e      	str	r3, [sp, #56]	; 0x38
  u16_t oversize_add = 0;
 800cc54:	930f      	str	r3, [sp, #60]	; 0x3c
  u16_t oversize_used = 0;
 800cc56:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t pos = 0; /* position in 'arg' data */
 800cc58:	461c      	mov	r4, r3
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cc5a:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800cc5c:	4699      	mov	r9, r3
 800cc5e:	e724      	b.n	800caaa <tcp_write+0x1a6>
 800cc60:	940d      	str	r4, [sp, #52]	; 0x34
 800cc62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc64:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc66:	930e      	str	r3, [sp, #56]	; 0x38
 800cc68:	e722      	b.n	800cab0 <tcp_write+0x1ac>
 800cc6a:	940d      	str	r4, [sp, #52]	; 0x34
 800cc6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc70:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc72:	e71d      	b.n	800cab0 <tcp_write+0x1ac>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cc74:	9b06      	ldr	r3, [sp, #24]
 800cc76:	fab3 f383 	clz	r3, r3
 800cc7a:	095b      	lsrs	r3, r3, #5
 800cc7c:	9302      	str	r3, [sp, #8]
 800cc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	f8cd 8000 	str.w	r8, [sp]
 800cc86:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
 800cc8a:	465a      	mov	r2, fp
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	2038      	movs	r0, #56	; 0x38
 800cc90:	f7ff fc74 	bl	800c57c <tcp_pbuf_prealloc>
 800cc94:	4607      	mov	r7, r0
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f000 80e0 	beq.w	800ce5c <tcp_write+0x558>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cc9c:	8943      	ldrh	r3, [r0, #10]
 800cc9e:	42ab      	cmp	r3, r5
 800cca0:	d30c      	bcc.n	800ccbc <tcp_write+0x3b8>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cca2:	462a      	mov	r2, r5
 800cca4:	9b07      	ldr	r3, [sp, #28]
 800cca6:	1919      	adds	r1, r3, r4
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7fb fc56 	bl	800855a <lwip_chksum_copy>
 800ccae:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 800ccb2:	aa12      	add	r2, sp, #72	; 0x48
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	f7ff fc0d 	bl	800c4d4 <tcp_seg_add_chksum>
 800ccba:	e01d      	b.n	800ccf8 <tcp_write+0x3f4>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ccbc:	4b6e      	ldr	r3, [pc, #440]	; (800ce78 <tcp_write+0x574>)
 800ccbe:	f240 2266 	movw	r2, #614	; 0x266
 800ccc2:	4970      	ldr	r1, [pc, #448]	; (800ce84 <tcp_write+0x580>)
 800ccc4:	486e      	ldr	r0, [pc, #440]	; (800ce80 <tcp_write+0x57c>)
 800ccc6:	f007 faf7 	bl	80142b8 <app_debug_rtt_raw>
 800ccca:	e7ea      	b.n	800cca2 <tcp_write+0x39e>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cccc:	4b6a      	ldr	r3, [pc, #424]	; (800ce78 <tcp_write+0x574>)
 800ccce:	f240 2271 	movw	r2, #625	; 0x271
 800ccd2:	496d      	ldr	r1, [pc, #436]	; (800ce88 <tcp_write+0x584>)
 800ccd4:	486a      	ldr	r0, [pc, #424]	; (800ce80 <tcp_write+0x57c>)
 800ccd6:	f007 faef 	bl	80142b8 <app_debug_rtt_raw>
 800ccda:	e04e      	b.n	800cd7a <tcp_write+0x476>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ccdc:	f8c9 7004 	str.w	r7, [r9, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cce0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cce4:	2100      	movs	r1, #0
 800cce6:	2038      	movs	r0, #56	; 0x38
 800cce8:	f7fc fa5c 	bl	80091a4 <pbuf_alloc>
 800ccec:	4607      	mov	r7, r0
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d061      	beq.n	800cdb6 <tcp_write+0x4b2>
      pbuf_cat(p/*header*/, p2/*data*/);
 800ccf2:	4649      	mov	r1, r9
 800ccf4:	f7fc fb6a 	bl	80093cc <pbuf_cat>
    queuelen += pbuf_clen(p);
 800ccf8:	4638      	mov	r0, r7
 800ccfa:	f7fc fb43 	bl	8009384 <pbuf_clen>
 800ccfe:	4406      	add	r6, r0
 800cd00:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cd02:	2e08      	cmp	r6, #8
 800cd04:	d85d      	bhi.n	800cdc2 <tcp_write+0x4be>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cd06:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	9200      	str	r2, [sp, #0]
 800cd0e:	4423      	add	r3, r4
 800cd10:	4639      	mov	r1, r7
 800cd12:	4640      	mov	r0, r8
 800cd14:	f7ff fc8e 	bl	800c634 <tcp_create_segment>
 800cd18:	4607      	mov	r7, r0
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	f000 80a4 	beq.w	800ce68 <tcp_write+0x564>
    seg->oversize_left = oversize;
 800cd20:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800cd24:	8143      	strh	r3, [r0, #10]
    seg->chksum = chksum;
 800cd26:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cd2a:	8183      	strh	r3, [r0, #12]
    seg->chksum_swapped = chksum_swapped;
 800cd2c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 800cd30:	7383      	strb	r3, [r0, #14]
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
 800cd32:	7bc3      	ldrb	r3, [r0, #15]
 800cd34:	f043 0304 	orr.w	r3, r3, #4
 800cd38:	73c3      	strb	r3, [r0, #15]
    if (queue == NULL) {
 800cd3a:	9b06      	ldr	r3, [sp, #24]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d072      	beq.n	800ce26 <tcp_write+0x522>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800cd40:	9b05      	ldr	r3, [sp, #20]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d067      	beq.n	800ce16 <tcp_write+0x512>
      prev_seg->next = seg;
 800cd46:	9b05      	ldr	r3, [sp, #20]
 800cd48:	601f      	str	r7, [r3, #0]
    pos += seglen;
 800cd4a:	442c      	add	r4, r5
 800cd4c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800cd4e:	45a2      	cmp	sl, r4
 800cd50:	d96b      	bls.n	800ce2a <tcp_write+0x526>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cd52:	9705      	str	r7, [sp, #20]
    u16_t left = len - pos;
 800cd54:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800cd58:	b2ad      	uxth	r5, r5
 800cd5a:	455d      	cmp	r5, fp
 800cd5c:	bf28      	it	cs
 800cd5e:	465d      	movcs	r5, fp
 800cd60:	b2ad      	uxth	r5, r5
    u16_t chksum = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    u8_t chksum_swapped = 0;
 800cd68:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cd6c:	9b08      	ldr	r3, [sp, #32]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d180      	bne.n	800cc74 <tcp_write+0x370>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cd72:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1a8      	bne.n	800cccc <tcp_write+0x3c8>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	2038      	movs	r0, #56	; 0x38
 800cd80:	f7fc fa10 	bl	80091a4 <pbuf_alloc>
 800cd84:	4681      	mov	r9, r0
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d06b      	beq.n	800ce62 <tcp_write+0x55e>
      chksum = ~inet_chksum((const u8_t *)arg + pos, seglen);
 800cd8a:	9b07      	ldr	r3, [sp, #28]
 800cd8c:	191f      	adds	r7, r3, r4
 800cd8e:	4629      	mov	r1, r5
 800cd90:	4638      	mov	r0, r7
 800cd92:	f7fb fbb5 	bl	8008500 <inet_chksum>
 800cd96:	43c0      	mvns	r0, r0
 800cd98:	b280      	uxth	r0, r0
 800cd9a:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
      if (seglen & 1) {
 800cd9e:	f015 0f01 	tst.w	r5, #1
 800cda2:	d09b      	beq.n	800ccdc <tcp_write+0x3d8>
        chksum_swapped = 1;
 800cda4:	2301      	movs	r3, #1
 800cda6:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
        chksum = SWAP_BYTES_IN_WORD(chksum);
 800cdaa:	0a03      	lsrs	r3, r0, #8
 800cdac:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800cdb0:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800cdb4:	e792      	b.n	800ccdc <tcp_write+0x3d8>
 800cdb6:	4648      	mov	r0, r9
 800cdb8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        pbuf_free(p2);
 800cdbc:	f7fc f988 	bl	80090d0 <pbuf_free>
        goto memerr;
 800cdc0:	e004      	b.n	800cdcc <tcp_write+0x4c8>
 800cdc2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
      pbuf_free(p);
 800cdc6:	4638      	mov	r0, r7
 800cdc8:	f7fc f982 	bl	80090d0 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdcc:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800cdd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd4:	f8a8 301e 	strh.w	r3, [r8, #30]
  if (concat_p != NULL) {
 800cdd8:	f1b9 0f00 	cmp.w	r9, #0
 800cddc:	d002      	beq.n	800cde4 <tcp_write+0x4e0>
    pbuf_free(concat_p);
 800cdde:	4648      	mov	r0, r9
 800cde0:	f7fc f976 	bl	80090d0 <pbuf_free>
  if (queue != NULL) {
 800cde4:	9b06      	ldr	r3, [sp, #24]
 800cde6:	b113      	cbz	r3, 800cdee <tcp_write+0x4ea>
    tcp_segs_free(queue);
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fc fef4 	bl	8009bd6 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800cdee:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f000 8131 	beq.w	800d05a <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cdf8:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f040 812f 	bne.w	800d060 <tcp_write+0x75c>
 800ce02:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f000 8119 	beq.w	800d03e <tcp_write+0x73a>
  return ERR_MEM;
 800ce0c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ce10:	b015      	add	sp, #84	; 0x54
 800ce12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ce16:	4b18      	ldr	r3, [pc, #96]	; (800ce78 <tcp_write+0x574>)
 800ce18:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ce1c:	491b      	ldr	r1, [pc, #108]	; (800ce8c <tcp_write+0x588>)
 800ce1e:	4818      	ldr	r0, [pc, #96]	; (800ce80 <tcp_write+0x57c>)
 800ce20:	f007 fa4a 	bl	80142b8 <app_debug_rtt_raw>
 800ce24:	e78f      	b.n	800cd46 <tcp_write+0x442>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ce26:	9006      	str	r0, [sp, #24]
 800ce28:	e78f      	b.n	800cd4a <tcp_write+0x446>
 800ce2a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800ce2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce30:	b122      	cbz	r2, 800ce3c <tcp_write+0x538>
 800ce32:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ce34:	b111      	cbz	r1, 800ce3c <tcp_write+0x538>
    last_unsent->oversize_left += oversize_add;
 800ce36:	8953      	ldrh	r3, [r2, #10]
 800ce38:	4419      	add	r1, r3
 800ce3a:	8151      	strh	r1, [r2, #10]
  if (oversize_used > 0) {
 800ce3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 80a7 	beq.w	800cf92 <tcp_write+0x68e>
    for (p = last_unsent->p; p; p = p->next) {
 800ce44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce46:	6854      	ldr	r4, [r2, #4]
 800ce48:	2c00      	cmp	r4, #0
 800ce4a:	d040      	beq.n	800cece <tcp_write+0x5ca>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ce4c:	f102 050e 	add.w	r5, r2, #14
 800ce50:	f102 0b0c 	add.w	fp, r2, #12
 800ce54:	9605      	str	r6, [sp, #20]
 800ce56:	462e      	mov	r6, r5
 800ce58:	461d      	mov	r5, r3
 800ce5a:	e01a      	b.n	800ce92 <tcp_write+0x58e>
 800ce5c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800ce60:	e7b4      	b.n	800cdcc <tcp_write+0x4c8>
 800ce62:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800ce66:	e7b1      	b.n	800cdcc <tcp_write+0x4c8>
 800ce68:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800ce6c:	e7ae      	b.n	800cdcc <tcp_write+0x4c8>
  while (pos < len) {
 800ce6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce70:	2300      	movs	r3, #0
 800ce72:	9306      	str	r3, [sp, #24]
 800ce74:	e7db      	b.n	800ce2e <tcp_write+0x52a>
 800ce76:	bf00      	nop
 800ce78:	0801851c 	.word	0x0801851c
 800ce7c:	08018888 	.word	0x08018888
 800ce80:	08016a38 	.word	0x08016a38
 800ce84:	080188b8 	.word	0x080188b8
 800ce88:	080188f8 	.word	0x080188f8
 800ce8c:	08018908 	.word	0x08018908
 800ce90:	461c      	mov	r4, r3
      p->tot_len += oversize_used;
 800ce92:	8923      	ldrh	r3, [r4, #8]
 800ce94:	442b      	add	r3, r5
 800ce96:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1f8      	bne.n	800ce90 <tcp_write+0x58c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ce9e:	8963      	ldrh	r3, [r4, #10]
 800cea0:	6860      	ldr	r0, [r4, #4]
 800cea2:	462a      	mov	r2, r5
 800cea4:	9907      	ldr	r1, [sp, #28]
 800cea6:	4418      	add	r0, r3
 800cea8:	f7fb fb57 	bl	800855a <lwip_chksum_copy>
 800ceac:	4633      	mov	r3, r6
 800ceae:	465a      	mov	r2, fp
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	f7ff fb0f 	bl	800c4d4 <tcp_seg_add_chksum>
 800ceb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceb8:	7bd3      	ldrb	r3, [r2, #15]
 800ceba:	f043 0304 	orr.w	r3, r3, #4
 800cebe:	73d3      	strb	r3, [r2, #15]
        p->len += oversize_used;
 800cec0:	8963      	ldrh	r3, [r4, #10]
 800cec2:	442b      	add	r3, r5
 800cec4:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1e1      	bne.n	800ce90 <tcp_write+0x58c>
 800cecc:	9e05      	ldr	r6, [sp, #20]
    last_unsent->len += oversize_used;
 800cece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ced0:	8913      	ldrh	r3, [r2, #8]
 800ced2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ced4:	4403      	add	r3, r0
 800ced6:	8113      	strh	r3, [r2, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800ced8:	8953      	ldrh	r3, [r2, #10]
 800ceda:	4283      	cmp	r3, r0
 800cedc:	d351      	bcc.n	800cf82 <tcp_write+0x67e>
    last_unsent->oversize_left -= oversize_used;
 800cede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cee0:	8953      	ldrh	r3, [r2, #10]
 800cee2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cee4:	1a5b      	subs	r3, r3, r1
 800cee6:	8153      	strh	r3, [r2, #10]
  pcb->unsent_oversize = oversize;
 800cee8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800ceec:	f8a8 306c 	strh.w	r3, [r8, #108]	; 0x6c
  if (concat_p != NULL) {
 800cef0:	f1b9 0f00 	cmp.w	r9, #0
 800cef4:	f000 80c9 	beq.w	800d08a <tcp_write+0x786>
    pbuf_cat(last_unsent->p, concat_p);
 800cef8:	4649      	mov	r1, r9
 800cefa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cefc:	6860      	ldr	r0, [r4, #4]
 800cefe:	f7fc fa65 	bl	80093cc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800cf02:	8923      	ldrh	r3, [r4, #8]
 800cf04:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800cf08:	4413      	add	r3, r2
 800cf0a:	8123      	strh	r3, [r4, #8]
  if (concat_chksummed) {
 800cf0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf0e:	b1bb      	cbz	r3, 800cf40 <tcp_write+0x63c>
    if (concat_chksum_swapped) {
 800cf10:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 800cf14:	b133      	cbz	r3, 800cf24 <tcp_write+0x620>
      concat_chksum = SWAP_BYTES_IN_WORD(concat_chksum);
 800cf16:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800cf1a:	0a13      	lsrs	r3, r2, #8
 800cf1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf20:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    tcp_seg_add_chksum(concat_chksum, concat_chksummed, &last_unsent->chksum,
 800cf24:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cf26:	4622      	mov	r2, r4
 800cf28:	f104 030e 	add.w	r3, r4, #14
 800cf2c:	320c      	adds	r2, #12
 800cf2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf30:	f8bd 004c 	ldrh.w	r0, [sp, #76]	; 0x4c
 800cf34:	f7ff face 	bl	800c4d4 <tcp_seg_add_chksum>
    last_unsent->flags |= TF_SEG_DATA_CHECKSUMMED;
 800cf38:	7be3      	ldrb	r3, [r4, #15]
 800cf3a:	f043 0304 	orr.w	r3, r3, #4
 800cf3e:	73e3      	strb	r3, [r4, #15]
    last_unsent->next = queue;
 800cf40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf42:	461a      	mov	r2, r3
 800cf44:	9b06      	ldr	r3, [sp, #24]
 800cf46:	6013      	str	r3, [r2, #0]
  pcb->snd_lbb += len;
 800cf48:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 800cf4c:	4453      	add	r3, sl
 800cf4e:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
  pcb->snd_buf -= len;
 800cf52:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 800cf56:	eba3 0a0a 	sub.w	sl, r3, sl
 800cf5a:	f8a8 a068 	strh.w	sl, [r8, #104]	; 0x68
  pcb->snd_queuelen = queuelen;
 800cf5e:	f8a8 606a 	strh.w	r6, [r8, #106]	; 0x6a
  if (pcb->snd_queuelen != 0) {
 800cf62:	b11e      	cbz	r6, 800cf6c <tcp_write+0x668>
    LWIP_ASSERT("tcp_write: valid queue length",
 800cf64:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d053      	beq.n	800d014 <tcp_write+0x710>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800cf6c:	2f00      	cmp	r7, #0
 800cf6e:	d070      	beq.n	800d052 <tcp_write+0x74e>
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d06f      	beq.n	800d056 <tcp_write+0x752>
 800cf76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf78:	f012 0f02 	tst.w	r2, #2
 800cf7c:	d056      	beq.n	800d02c <tcp_write+0x728>
  return ERR_OK;
 800cf7e:	2000      	movs	r0, #0
 800cf80:	e746      	b.n	800ce10 <tcp_write+0x50c>
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800cf82:	4b49      	ldr	r3, [pc, #292]	; (800d0a8 <tcp_write+0x7a4>)
 800cf84:	f240 22d3 	movw	r2, #723	; 0x2d3
 800cf88:	4948      	ldr	r1, [pc, #288]	; (800d0ac <tcp_write+0x7a8>)
 800cf8a:	4849      	ldr	r0, [pc, #292]	; (800d0b0 <tcp_write+0x7ac>)
 800cf8c:	f007 f994 	bl	80142b8 <app_debug_rtt_raw>
 800cf90:	e7a5      	b.n	800cede <tcp_write+0x5da>
  pcb->unsent_oversize = oversize;
 800cf92:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800cf96:	f8a8 306c 	strh.w	r3, [r8, #108]	; 0x6c
  if (concat_p != NULL) {
 800cf9a:	f1b9 0f00 	cmp.w	r9, #0
 800cf9e:	d00a      	beq.n	800cfb6 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800cfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d1a8      	bne.n	800cef8 <tcp_write+0x5f4>
 800cfa6:	4b40      	ldr	r3, [pc, #256]	; (800d0a8 <tcp_write+0x7a4>)
 800cfa8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800cfac:	4941      	ldr	r1, [pc, #260]	; (800d0b4 <tcp_write+0x7b0>)
 800cfae:	4840      	ldr	r0, [pc, #256]	; (800d0b0 <tcp_write+0x7ac>)
 800cfb0:	f007 f982 	bl	80142b8 <app_debug_rtt_raw>
 800cfb4:	e7a0      	b.n	800cef8 <tcp_write+0x5f4>
  } else if (extendlen > 0) {
 800cfb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d05b      	beq.n	800d074 <tcp_write+0x770>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d166      	bne.n	800d090 <tcp_write+0x78c>
 800cfc2:	4b39      	ldr	r3, [pc, #228]	; (800d0a8 <tcp_write+0x7a4>)
 800cfc4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cfc8:	493b      	ldr	r1, [pc, #236]	; (800d0b8 <tcp_write+0x7b4>)
 800cfca:	4839      	ldr	r0, [pc, #228]	; (800d0b0 <tcp_write+0x7ac>)
 800cfcc:	f007 f974 	bl	80142b8 <app_debug_rtt_raw>
 800cfd0:	e062      	b.n	800d098 <tcp_write+0x794>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cfd2:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 800cfd4:	890b      	ldrh	r3, [r1, #8]
 800cfd6:	4403      	add	r3, r0
 800cfd8:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cfda:	6813      	ldr	r3, [r2, #0]
 800cfdc:	4611      	mov	r1, r2
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1f7      	bne.n	800cfd2 <tcp_write+0x6ce>
    p->tot_len += extendlen;
 800cfe2:	8913      	ldrh	r3, [r2, #8]
 800cfe4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cfe6:	440b      	add	r3, r1
 800cfe8:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800cfea:	8953      	ldrh	r3, [r2, #10]
 800cfec:	440b      	add	r3, r1
 800cfee:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800cff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cff2:	8913      	ldrh	r3, [r2, #8]
 800cff4:	440b      	add	r3, r1
 800cff6:	8113      	strh	r3, [r2, #8]
  if (concat_chksummed) {
 800cff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d188      	bne.n	800cf10 <tcp_write+0x60c>
 800cffe:	e79f      	b.n	800cf40 <tcp_write+0x63c>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d000:	460a      	mov	r2, r1
 800d002:	e7ee      	b.n	800cfe2 <tcp_write+0x6de>
    LWIP_ASSERT("tcp_write: concat checksum needs concatenated data",
 800d004:	4b28      	ldr	r3, [pc, #160]	; (800d0a8 <tcp_write+0x7a4>)
 800d006:	f240 22f2 	movw	r2, #754	; 0x2f2
 800d00a:	492c      	ldr	r1, [pc, #176]	; (800d0bc <tcp_write+0x7b8>)
 800d00c:	4828      	ldr	r0, [pc, #160]	; (800d0b0 <tcp_write+0x7ac>)
 800d00e:	f007 f953 	bl	80142b8 <app_debug_rtt_raw>
 800d012:	e77d      	b.n	800cf10 <tcp_write+0x60c>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d014:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1a7      	bne.n	800cf6c <tcp_write+0x668>
 800d01c:	4b22      	ldr	r3, [pc, #136]	; (800d0a8 <tcp_write+0x7a4>)
 800d01e:	f240 3212 	movw	r2, #786	; 0x312
 800d022:	4927      	ldr	r1, [pc, #156]	; (800d0c0 <tcp_write+0x7bc>)
 800d024:	4822      	ldr	r0, [pc, #136]	; (800d0b0 <tcp_write+0x7ac>)
 800d026:	f007 f947 	bl	80142b8 <app_debug_rtt_raw>
 800d02a:	e79f      	b.n	800cf6c <tcp_write+0x668>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d02c:	899c      	ldrh	r4, [r3, #12]
 800d02e:	2008      	movs	r0, #8
 800d030:	f7fa fbf6 	bl	8007820 <lwip_htons>
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	4304      	orrs	r4, r0
 800d038:	819c      	strh	r4, [r3, #12]
  return ERR_OK;
 800d03a:	2000      	movs	r0, #0
 800d03c:	e6e8      	b.n	800ce10 <tcp_write+0x50c>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d03e:	4b1a      	ldr	r3, [pc, #104]	; (800d0a8 <tcp_write+0x7a4>)
 800d040:	f240 3227 	movw	r2, #807	; 0x327
 800d044:	491e      	ldr	r1, [pc, #120]	; (800d0c0 <tcp_write+0x7bc>)
 800d046:	481a      	ldr	r0, [pc, #104]	; (800d0b0 <tcp_write+0x7ac>)
 800d048:	f007 f936 	bl	80142b8 <app_debug_rtt_raw>
  return ERR_MEM;
 800d04c:	f04f 30ff 	mov.w	r0, #4294967295
 800d050:	e6de      	b.n	800ce10 <tcp_write+0x50c>
  return ERR_OK;
 800d052:	2000      	movs	r0, #0
 800d054:	e6dc      	b.n	800ce10 <tcp_write+0x50c>
 800d056:	2000      	movs	r0, #0
 800d058:	e6da      	b.n	800ce10 <tcp_write+0x50c>
  return ERR_MEM;
 800d05a:	f04f 30ff 	mov.w	r0, #4294967295
 800d05e:	e6d7      	b.n	800ce10 <tcp_write+0x50c>
 800d060:	f04f 30ff 	mov.w	r0, #4294967295
 800d064:	e6d4      	b.n	800ce10 <tcp_write+0x50c>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d066:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800d06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d06e:	f8a8 301e 	strh.w	r3, [r8, #30]
  if (queue != NULL) {
 800d072:	e6bc      	b.n	800cdee <tcp_write+0x4ea>
  if (concat_chksummed) {
 800d074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1c4      	bne.n	800d004 <tcp_write+0x700>
  if (last_unsent == NULL) {
 800d07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f47f af5f 	bne.w	800cf40 <tcp_write+0x63c>
    pcb->unsent = queue;
 800d082:	9b06      	ldr	r3, [sp, #24]
 800d084:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
 800d088:	e75e      	b.n	800cf48 <tcp_write+0x644>
  } else if (extendlen > 0) {
 800d08a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d0f1      	beq.n	800d074 <tcp_write+0x770>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d094      	beq.n	800cfc2 <tcp_write+0x6be>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09a:	6859      	ldr	r1, [r3, #4]
 800d09c:	680a      	ldr	r2, [r1, #0]
 800d09e:	2a00      	cmp	r2, #0
 800d0a0:	d0ae      	beq.n	800d000 <tcp_write+0x6fc>
 800d0a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d0a4:	e796      	b.n	800cfd4 <tcp_write+0x6d0>
 800d0a6:	bf00      	nop
 800d0a8:	0801851c 	.word	0x0801851c
 800d0ac:	0801891c 	.word	0x0801891c
 800d0b0:	08016a38 	.word	0x08016a38
 800d0b4:	08018948 	.word	0x08018948
 800d0b8:	08018980 	.word	0x08018980
 800d0bc:	080189b8 	.word	0x080189b8
 800d0c0:	080189ec 	.word	0x080189ec

0800d0c4 <tcp_split_unsent_seg>:
{
 800d0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c8:	b085      	sub	sp, #20
 800d0ca:	460c      	mov	r4, r1
  u16_t chksum = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f8ad 300e 	strh.w	r3, [sp, #14]
  u8_t chksum_swapped = 0;
 800d0d2:	f88d 300d 	strb.w	r3, [sp, #13]
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d0d6:	4607      	mov	r7, r0
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	d03c      	beq.n	800d156 <tcp_split_unsent_seg+0x92>
  useg = pcb->unsent;
 800d0dc:	6f3d      	ldr	r5, [r7, #112]	; 0x70
  if (useg == NULL) {
 800d0de:	2d00      	cmp	r5, #0
 800d0e0:	f000 8106 	beq.w	800d2f0 <tcp_split_unsent_seg+0x22c>
  if (split == 0) {
 800d0e4:	2c00      	cmp	r4, #0
 800d0e6:	d03e      	beq.n	800d166 <tcp_split_unsent_seg+0xa2>
  if (useg->len <= split) {
 800d0e8:	892b      	ldrh	r3, [r5, #8]
 800d0ea:	42a3      	cmp	r3, r4
 800d0ec:	f240 8103 	bls.w	800d2f6 <tcp_split_unsent_seg+0x232>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d0f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d0f2:	42a3      	cmp	r3, r4
 800d0f4:	d341      	bcc.n	800d17a <tcp_split_unsent_seg+0xb6>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d0f6:	892b      	ldrh	r3, [r5, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d046      	beq.n	800d18a <tcp_split_unsent_seg+0xc6>
  optflags = useg->flags;
 800d0fc:	f895 800f 	ldrb.w	r8, [r5, #15]
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
 800d100:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d104:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 800d108:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 800d10c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800d110:	ebaa 0604 	sub.w	r6, sl, r4
 800d114:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d116:	eb06 010b 	add.w	r1, r6, fp
 800d11a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d11e:	b289      	uxth	r1, r1
 800d120:	2038      	movs	r0, #56	; 0x38
 800d122:	f7fc f83f 	bl	80091a4 <pbuf_alloc>
  if (p == NULL) {
 800d126:	4681      	mov	r9, r0
 800d128:	2800      	cmp	r0, #0
 800d12a:	f000 80e8 	beq.w	800d2fe <tcp_split_unsent_seg+0x23a>
  offset = useg->p->tot_len - useg->len + split;
 800d12e:	6868      	ldr	r0, [r5, #4]
 800d130:	8903      	ldrh	r3, [r0, #8]
 800d132:	892a      	ldrh	r2, [r5, #8]
 800d134:	1a9b      	subs	r3, r3, r2
 800d136:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d138:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	4632      	mov	r2, r6
 800d140:	4459      	add	r1, fp
 800d142:	f7fc fa67 	bl	8009614 <pbuf_copy_partial>
 800d146:	42b0      	cmp	r0, r6
 800d148:	d027      	beq.n	800d19a <tcp_split_unsent_seg+0xd6>
    pbuf_free(p);
 800d14a:	4648      	mov	r0, r9
 800d14c:	f7fb ffc0 	bl	80090d0 <pbuf_free>
  return ERR_MEM;
 800d150:	f04f 30ff 	mov.w	r0, #4294967295
 800d154:	e0d0      	b.n	800d2f8 <tcp_split_unsent_seg+0x234>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d156:	4b6b      	ldr	r3, [pc, #428]	; (800d304 <tcp_split_unsent_seg+0x240>)
 800d158:	f240 324b 	movw	r2, #843	; 0x34b
 800d15c:	496a      	ldr	r1, [pc, #424]	; (800d308 <tcp_split_unsent_seg+0x244>)
 800d15e:	486b      	ldr	r0, [pc, #428]	; (800d30c <tcp_split_unsent_seg+0x248>)
 800d160:	f007 f8aa 	bl	80142b8 <app_debug_rtt_raw>
 800d164:	e7ba      	b.n	800d0dc <tcp_split_unsent_seg+0x18>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d166:	4b67      	ldr	r3, [pc, #412]	; (800d304 <tcp_split_unsent_seg+0x240>)
 800d168:	f240 3253 	movw	r2, #851	; 0x353
 800d16c:	4968      	ldr	r1, [pc, #416]	; (800d310 <tcp_split_unsent_seg+0x24c>)
 800d16e:	4867      	ldr	r0, [pc, #412]	; (800d30c <tcp_split_unsent_seg+0x248>)
 800d170:	f007 f8a2 	bl	80142b8 <app_debug_rtt_raw>
    return ERR_VAL;
 800d174:	f06f 0005 	mvn.w	r0, #5
 800d178:	e0be      	b.n	800d2f8 <tcp_split_unsent_seg+0x234>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d17a:	4b62      	ldr	r3, [pc, #392]	; (800d304 <tcp_split_unsent_seg+0x240>)
 800d17c:	f240 325b 	movw	r2, #859	; 0x35b
 800d180:	4964      	ldr	r1, [pc, #400]	; (800d314 <tcp_split_unsent_seg+0x250>)
 800d182:	4862      	ldr	r0, [pc, #392]	; (800d30c <tcp_split_unsent_seg+0x248>)
 800d184:	f007 f898 	bl	80142b8 <app_debug_rtt_raw>
 800d188:	e7b5      	b.n	800d0f6 <tcp_split_unsent_seg+0x32>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d18a:	4b5e      	ldr	r3, [pc, #376]	; (800d304 <tcp_split_unsent_seg+0x240>)
 800d18c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d190:	4961      	ldr	r1, [pc, #388]	; (800d318 <tcp_split_unsent_seg+0x254>)
 800d192:	485e      	ldr	r0, [pc, #376]	; (800d30c <tcp_split_unsent_seg+0x248>)
 800d194:	f007 f890 	bl	80142b8 <app_debug_rtt_raw>
 800d198:	e7b0      	b.n	800d0fc <tcp_split_unsent_seg+0x38>
  tcp_seg_add_chksum(~inet_chksum((const u8_t *)p->payload + optlen, remainder), remainder,
 800d19a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800d19e:	4631      	mov	r1, r6
 800d1a0:	4458      	add	r0, fp
 800d1a2:	f7fb f9ad 	bl	8008500 <inet_chksum>
 800d1a6:	43c0      	mvns	r0, r0
 800d1a8:	f10d 030d 	add.w	r3, sp, #13
 800d1ac:	f10d 020e 	add.w	r2, sp, #14
 800d1b0:	4631      	mov	r1, r6
 800d1b2:	b280      	uxth	r0, r0
 800d1b4:	f7ff f98e 	bl	800c4d4 <tcp_seg_add_chksum>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d1b8:	692b      	ldr	r3, [r5, #16]
 800d1ba:	8998      	ldrh	r0, [r3, #12]
 800d1bc:	f7fa fb30 	bl	8007820 <lwip_htons>
 800d1c0:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800d1c2:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d1c6:	bf0e      	itee	eq
 800d1c8:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800d1cc:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800d1d0:	f04f 0b08 	movne.w	fp, #8
  if (split_flags & TCP_FIN) {
 800d1d4:	f016 0f01 	tst.w	r6, #1
    split_flags &= ~TCP_FIN;
 800d1d8:	bf1c      	itt	ne
 800d1da:	f006 06fe 	andne.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800d1de:	f04b 0b01 	orrne.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d1e2:	692b      	ldr	r3, [r5, #16]
 800d1e4:	6858      	ldr	r0, [r3, #4]
 800d1e6:	f7fa fb20 	bl	800782a <lwip_htonl>
 800d1ea:	f8cd 8000 	str.w	r8, [sp]
 800d1ee:	1823      	adds	r3, r4, r0
 800d1f0:	465a      	mov	r2, fp
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	4638      	mov	r0, r7
 800d1f6:	f7ff fa1d 	bl	800c634 <tcp_create_segment>
  if (seg == NULL) {
 800d1fa:	4680      	mov	r8, r0
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d0a4      	beq.n	800d14a <tcp_split_unsent_seg+0x86>
  seg->chksum = chksum;
 800d200:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d204:	8183      	strh	r3, [r0, #12]
  seg->chksum_swapped = chksum_swapped;
 800d206:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d20a:	7383      	strb	r3, [r0, #14]
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
 800d20c:	7bc3      	ldrb	r3, [r0, #15]
 800d20e:	f043 0304 	orr.w	r3, r3, #4
 800d212:	73c3      	strb	r3, [r0, #15]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d214:	6868      	ldr	r0, [r5, #4]
 800d216:	f7fc f8b5 	bl	8009384 <pbuf_clen>
 800d21a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800d21e:	1a1b      	subs	r3, r3, r0
 800d220:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d224:	6868      	ldr	r0, [r5, #4]
 800d226:	eba4 040a 	sub.w	r4, r4, sl
 800d22a:	b2a4      	uxth	r4, r4
 800d22c:	8901      	ldrh	r1, [r0, #8]
 800d22e:	4421      	add	r1, r4
 800d230:	b289      	uxth	r1, r1
 800d232:	f7fc f847 	bl	80092c4 <pbuf_realloc>
  useg->len -= remainder;
 800d236:	892b      	ldrh	r3, [r5, #8]
 800d238:	441c      	add	r4, r3
 800d23a:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d23c:	692b      	ldr	r3, [r5, #16]
 800d23e:	899c      	ldrh	r4, [r3, #12]
 800d240:	4630      	mov	r0, r6
 800d242:	f7fa faed 	bl	8007820 <lwip_htons>
 800d246:	692b      	ldr	r3, [r5, #16]
 800d248:	4304      	orrs	r4, r0
 800d24a:	819c      	strh	r4, [r3, #12]
  useg->oversize_left = 0;
 800d24c:	2400      	movs	r4, #0
 800d24e:	816c      	strh	r4, [r5, #10]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d250:	6868      	ldr	r0, [r5, #4]
 800d252:	f7fc f897 	bl	8009384 <pbuf_clen>
 800d256:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800d25a:	4418      	add	r0, r3
 800d25c:	f8a7 006a 	strh.w	r0, [r7, #106]	; 0x6a
  useg->chksum = 0;
 800d260:	81ac      	strh	r4, [r5, #12]
  useg->chksum_swapped = 0;
 800d262:	73ac      	strb	r4, [r5, #14]
  q = useg->p;
 800d264:	686c      	ldr	r4, [r5, #4]
  offset = q->tot_len - useg->len; /* Offset due to exposed headers */
 800d266:	8926      	ldrh	r6, [r4, #8]
 800d268:	8929      	ldrh	r1, [r5, #8]
 800d26a:	1a76      	subs	r6, r6, r1
 800d26c:	b2b6      	uxth	r6, r6
  while (q != NULL && offset > q->len) {
 800d26e:	8961      	ldrh	r1, [r4, #10]
 800d270:	42b1      	cmp	r1, r6
 800d272:	d20c      	bcs.n	800d28e <tcp_split_unsent_seg+0x1ca>
    offset -= q->len;
 800d274:	1a76      	subs	r6, r6, r1
 800d276:	b2b6      	uxth	r6, r6
    q = q->next;
 800d278:	6824      	ldr	r4, [r4, #0]
  while (q != NULL && offset > q->len) {
 800d27a:	2c00      	cmp	r4, #0
 800d27c:	d1f7      	bne.n	800d26e <tcp_split_unsent_seg+0x1aa>
  LWIP_ASSERT("Found start of payload pbuf", q != NULL);
 800d27e:	4b21      	ldr	r3, [pc, #132]	; (800d304 <tcp_split_unsent_seg+0x240>)
 800d280:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d284:	4925      	ldr	r1, [pc, #148]	; (800d31c <tcp_split_unsent_seg+0x258>)
 800d286:	4821      	ldr	r0, [pc, #132]	; (800d30c <tcp_split_unsent_seg+0x248>)
 800d288:	f007 f816 	bl	80142b8 <app_debug_rtt_raw>
  for (; q != NULL; offset = 0, q = q->next) {
 800d28c:	e019      	b.n	800d2c2 <tcp_split_unsent_seg+0x1fe>
    tcp_seg_add_chksum(~inet_chksum((const u8_t *)q->payload + offset, q->len - offset), q->len - offset,
 800d28e:	f105 0b0e 	add.w	fp, r5, #14
 800d292:	f105 0a0c 	add.w	sl, r5, #12
  for (; q != NULL; offset = 0, q = q->next) {
 800d296:	f04f 0900 	mov.w	r9, #0
    tcp_seg_add_chksum(~inet_chksum((const u8_t *)q->payload + offset, q->len - offset), q->len - offset,
 800d29a:	8961      	ldrh	r1, [r4, #10]
 800d29c:	1b89      	subs	r1, r1, r6
 800d29e:	6860      	ldr	r0, [r4, #4]
 800d2a0:	b289      	uxth	r1, r1
 800d2a2:	4430      	add	r0, r6
 800d2a4:	f7fb f92c 	bl	8008500 <inet_chksum>
 800d2a8:	8961      	ldrh	r1, [r4, #10]
 800d2aa:	1b89      	subs	r1, r1, r6
 800d2ac:	43c0      	mvns	r0, r0
 800d2ae:	465b      	mov	r3, fp
 800d2b0:	4652      	mov	r2, sl
 800d2b2:	b289      	uxth	r1, r1
 800d2b4:	b280      	uxth	r0, r0
 800d2b6:	f7ff f90d 	bl	800c4d4 <tcp_seg_add_chksum>
  for (; q != NULL; offset = 0, q = q->next) {
 800d2ba:	6824      	ldr	r4, [r4, #0]
 800d2bc:	464e      	mov	r6, r9
 800d2be:	2c00      	cmp	r4, #0
 800d2c0:	d1eb      	bne.n	800d29a <tcp_split_unsent_seg+0x1d6>
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d2c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d2c6:	f7fc f85d 	bl	8009384 <pbuf_clen>
 800d2ca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800d2ce:	4418      	add	r0, r3
 800d2d0:	f8a7 006a 	strh.w	r0, [r7, #106]	; 0x6a
  seg->next = useg->next;
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800d2da:	f8c5 8000 	str.w	r8, [r5]
  if (seg->next == NULL) {
 800d2de:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e2:	b10b      	cbz	r3, 800d2e8 <tcp_split_unsent_seg+0x224>
  return ERR_OK;
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	e007      	b.n	800d2f8 <tcp_split_unsent_seg+0x234>
    pcb->unsent_oversize = 0;
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	f8a7 006c 	strh.w	r0, [r7, #108]	; 0x6c
 800d2ee:	e003      	b.n	800d2f8 <tcp_split_unsent_seg+0x234>
    return ERR_MEM;
 800d2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f4:	e000      	b.n	800d2f8 <tcp_split_unsent_seg+0x234>
    return ERR_OK;
 800d2f6:	2000      	movs	r0, #0
}
 800d2f8:	b005      	add	sp, #20
 800d2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800d2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d302:	e7f9      	b.n	800d2f8 <tcp_split_unsent_seg+0x234>
 800d304:	0801851c 	.word	0x0801851c
 800d308:	08018a0c 	.word	0x08018a0c
 800d30c:	08016a38 	.word	0x08016a38
 800d310:	08018a30 	.word	0x08018a30
 800d314:	08018a54 	.word	0x08018a54
 800d318:	08018a64 	.word	0x08018a64
 800d31c:	08018a74 	.word	0x08018a74

0800d320 <tcp_enqueue_flags>:
{
 800d320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d324:	b083      	sub	sp, #12
 800d326:	4604      	mov	r4, r0
 800d328:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d32a:	f011 0703 	ands.w	r7, r1, #3
 800d32e:	d048      	beq.n	800d3c2 <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d330:	2c00      	cmp	r4, #0
 800d332:	d04e      	beq.n	800d3d2 <tcp_enqueue_flags+0xb2>
  if (flags & TCP_SYN) {
 800d334:	f3c5 0640 	ubfx	r6, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d338:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800d33c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d340:	4641      	mov	r1, r8
 800d342:	2038      	movs	r0, #56	; 0x38
 800d344:	f7fb ff2e 	bl	80091a4 <pbuf_alloc>
 800d348:	4681      	mov	r9, r0
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d049      	beq.n	800d3e2 <tcp_enqueue_flags+0xc2>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d34e:	8943      	ldrh	r3, [r0, #10]
 800d350:	4543      	cmp	r3, r8
 800d352:	d34d      	bcc.n	800d3f0 <tcp_enqueue_flags+0xd0>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d354:	9600      	str	r6, [sp, #0]
 800d356:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d358:	462a      	mov	r2, r5
 800d35a:	4649      	mov	r1, r9
 800d35c:	4620      	mov	r0, r4
 800d35e:	f7ff f969 	bl	800c634 <tcp_create_segment>
 800d362:	4606      	mov	r6, r0
 800d364:	2800      	cmp	r0, #0
 800d366:	d04b      	beq.n	800d400 <tcp_enqueue_flags+0xe0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d368:	6903      	ldr	r3, [r0, #16]
 800d36a:	f013 0f03 	tst.w	r3, #3
 800d36e:	d14e      	bne.n	800d40e <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d370:	8933      	ldrh	r3, [r6, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d153      	bne.n	800d41e <tcp_enqueue_flags+0xfe>
  if (pcb->unsent == NULL) {
 800d376:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d058      	beq.n	800d42e <tcp_enqueue_flags+0x10e>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d37c:	461a      	mov	r2, r3
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1fb      	bne.n	800d37c <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800d384:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d38c:	b117      	cbz	r7, 800d394 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800d38e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d390:	3301      	adds	r3, #1
 800d392:	6623      	str	r3, [r4, #96]	; 0x60
  if (flags & TCP_FIN) {
 800d394:	f015 0f01 	tst.w	r5, #1
 800d398:	d003      	beq.n	800d3a2 <tcp_enqueue_flags+0x82>
    tcp_set_flags(pcb, TF_FIN);
 800d39a:	8be3      	ldrh	r3, [r4, #30]
 800d39c:	f043 0320 	orr.w	r3, r3, #32
 800d3a0:	83e3      	strh	r3, [r4, #30]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d3a2:	6870      	ldr	r0, [r6, #4]
 800d3a4:	f7fb ffee 	bl	8009384 <pbuf_clen>
 800d3a8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d3ac:	4418      	add	r0, r3
 800d3ae:	b280      	uxth	r0, r0
 800d3b0:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
  if (pcb->snd_queuelen != 0) {
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d049      	beq.n	800d44c <tcp_enqueue_flags+0x12c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d3b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d039      	beq.n	800d432 <tcp_enqueue_flags+0x112>
  return ERR_OK;
 800d3be:	2000      	movs	r0, #0
 800d3c0:	e045      	b.n	800d44e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d3c2:	4b24      	ldr	r3, [pc, #144]	; (800d454 <tcp_enqueue_flags+0x134>)
 800d3c4:	f240 4211 	movw	r2, #1041	; 0x411
 800d3c8:	4923      	ldr	r1, [pc, #140]	; (800d458 <tcp_enqueue_flags+0x138>)
 800d3ca:	4824      	ldr	r0, [pc, #144]	; (800d45c <tcp_enqueue_flags+0x13c>)
 800d3cc:	f006 ff74 	bl	80142b8 <app_debug_rtt_raw>
 800d3d0:	e7ae      	b.n	800d330 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d3d2:	4b20      	ldr	r3, [pc, #128]	; (800d454 <tcp_enqueue_flags+0x134>)
 800d3d4:	f240 4213 	movw	r2, #1043	; 0x413
 800d3d8:	4921      	ldr	r1, [pc, #132]	; (800d460 <tcp_enqueue_flags+0x140>)
 800d3da:	4820      	ldr	r0, [pc, #128]	; (800d45c <tcp_enqueue_flags+0x13c>)
 800d3dc:	f006 ff6c 	bl	80142b8 <app_debug_rtt_raw>
 800d3e0:	e7a8      	b.n	800d334 <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d3e2:	8be3      	ldrh	r3, [r4, #30]
 800d3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3e8:	83e3      	strh	r3, [r4, #30]
    return ERR_MEM;
 800d3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ee:	e02e      	b.n	800d44e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d3f0:	4b18      	ldr	r3, [pc, #96]	; (800d454 <tcp_enqueue_flags+0x134>)
 800d3f2:	f240 4239 	movw	r2, #1081	; 0x439
 800d3f6:	491b      	ldr	r1, [pc, #108]	; (800d464 <tcp_enqueue_flags+0x144>)
 800d3f8:	4818      	ldr	r0, [pc, #96]	; (800d45c <tcp_enqueue_flags+0x13c>)
 800d3fa:	f006 ff5d 	bl	80142b8 <app_debug_rtt_raw>
 800d3fe:	e7a9      	b.n	800d354 <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d400:	8be3      	ldrh	r3, [r4, #30]
 800d402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d406:	83e3      	strh	r3, [r4, #30]
    return ERR_MEM;
 800d408:	f04f 30ff 	mov.w	r0, #4294967295
 800d40c:	e01f      	b.n	800d44e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d40e:	4b11      	ldr	r3, [pc, #68]	; (800d454 <tcp_enqueue_flags+0x134>)
 800d410:	f240 4242 	movw	r2, #1090	; 0x442
 800d414:	4914      	ldr	r1, [pc, #80]	; (800d468 <tcp_enqueue_flags+0x148>)
 800d416:	4811      	ldr	r0, [pc, #68]	; (800d45c <tcp_enqueue_flags+0x13c>)
 800d418:	f006 ff4e 	bl	80142b8 <app_debug_rtt_raw>
 800d41c:	e7a8      	b.n	800d370 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d41e:	4b0d      	ldr	r3, [pc, #52]	; (800d454 <tcp_enqueue_flags+0x134>)
 800d420:	f240 4243 	movw	r2, #1091	; 0x443
 800d424:	4911      	ldr	r1, [pc, #68]	; (800d46c <tcp_enqueue_flags+0x14c>)
 800d426:	480d      	ldr	r0, [pc, #52]	; (800d45c <tcp_enqueue_flags+0x13c>)
 800d428:	f006 ff46 	bl	80142b8 <app_debug_rtt_raw>
 800d42c:	e7a3      	b.n	800d376 <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 800d42e:	6726      	str	r6, [r4, #112]	; 0x70
 800d430:	e7a9      	b.n	800d386 <tcp_enqueue_flags+0x66>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d432:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d434:	b10b      	cbz	r3, 800d43a <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 800d436:	2000      	movs	r0, #0
 800d438:	e009      	b.n	800d44e <tcp_enqueue_flags+0x12e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d43a:	4b06      	ldr	r3, [pc, #24]	; (800d454 <tcp_enqueue_flags+0x134>)
 800d43c:	f240 4265 	movw	r2, #1125	; 0x465
 800d440:	490b      	ldr	r1, [pc, #44]	; (800d470 <tcp_enqueue_flags+0x150>)
 800d442:	4806      	ldr	r0, [pc, #24]	; (800d45c <tcp_enqueue_flags+0x13c>)
 800d444:	f006 ff38 	bl	80142b8 <app_debug_rtt_raw>
  return ERR_OK;
 800d448:	2000      	movs	r0, #0
 800d44a:	e000      	b.n	800d44e <tcp_enqueue_flags+0x12e>
 800d44c:	2000      	movs	r0, #0
}
 800d44e:	b003      	add	sp, #12
 800d450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d454:	0801851c 	.word	0x0801851c
 800d458:	08018a90 	.word	0x08018a90
 800d45c:	08016a38 	.word	0x08016a38
 800d460:	08018ae8 	.word	0x08018ae8
 800d464:	08018b08 	.word	0x08018b08
 800d468:	08018b44 	.word	0x08018b44
 800d46c:	08018b5c 	.word	0x08018b5c
 800d470:	08018b88 	.word	0x08018b88

0800d474 <tcp_send_fin>:
{
 800d474:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d476:	4605      	mov	r5, r0
 800d478:	b188      	cbz	r0, 800d49e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800d47a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d47c:	b153      	cbz	r3, 800d494 <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d47e:	461c      	mov	r4, r3
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d1fb      	bne.n	800d47e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	8998      	ldrh	r0, [r3, #12]
 800d48a:	f7fa f9c9 	bl	8007820 <lwip_htons>
 800d48e:	f010 0f07 	tst.w	r0, #7
 800d492:	d00c      	beq.n	800d4ae <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d494:	2101      	movs	r1, #1
 800d496:	4628      	mov	r0, r5
 800d498:	f7ff ff42 	bl	800d320 <tcp_enqueue_flags>
}
 800d49c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d49e:	4b0b      	ldr	r3, [pc, #44]	; (800d4cc <tcp_send_fin+0x58>)
 800d4a0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d4a4:	490a      	ldr	r1, [pc, #40]	; (800d4d0 <tcp_send_fin+0x5c>)
 800d4a6:	480b      	ldr	r0, [pc, #44]	; (800d4d4 <tcp_send_fin+0x60>)
 800d4a8:	f006 ff06 	bl	80142b8 <app_debug_rtt_raw>
 800d4ac:	e7e5      	b.n	800d47a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	899e      	ldrh	r6, [r3, #12]
 800d4b2:	2001      	movs	r0, #1
 800d4b4:	f7fa f9b4 	bl	8007820 <lwip_htons>
 800d4b8:	6923      	ldr	r3, [r4, #16]
 800d4ba:	4306      	orrs	r6, r0
 800d4bc:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d4be:	8beb      	ldrh	r3, [r5, #30]
 800d4c0:	f043 0320 	orr.w	r3, r3, #32
 800d4c4:	83eb      	strh	r3, [r5, #30]
      return ERR_OK;
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	e7e8      	b.n	800d49c <tcp_send_fin+0x28>
 800d4ca:	bf00      	nop
 800d4cc:	0801851c 	.word	0x0801851c
 800d4d0:	08018bb0 	.word	0x08018bb0
 800d4d4:	08016a38 	.word	0x08016a38

0800d4d8 <tcp_rexmit_rto_prepare>:
{
 800d4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d4dc:	4605      	mov	r5, r0
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d033      	beq.n	800d54a <tcp_rexmit_rto_prepare+0x72>
  if (pcb->unacked == NULL) {
 800d4e2:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800d4e4:	2c00      	cmp	r4, #0
 800d4e6:	d03c      	beq.n	800d562 <tcp_rexmit_rto_prepare+0x8a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	b143      	cbz	r3, 800d4fe <tcp_rexmit_rto_prepare+0x26>
    if (tcp_output_segment_busy(seg)) {
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f7ff f807 	bl	800c500 <tcp_output_segment_busy>
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d138      	bne.n	800d568 <tcp_rexmit_rto_prepare+0x90>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d4f6:	6824      	ldr	r4, [r4, #0]
 800d4f8:	6823      	ldr	r3, [r4, #0]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1f6      	bne.n	800d4ec <tcp_rexmit_rto_prepare+0x14>
  if (tcp_output_segment_busy(seg)) {
 800d4fe:	4620      	mov	r0, r4
 800d500:	f7fe fffe 	bl	800c500 <tcp_output_segment_busy>
 800d504:	2800      	cmp	r0, #0
 800d506:	d132      	bne.n	800d56e <tcp_rexmit_rto_prepare+0x96>
  seg->next = pcb->unsent;
 800d508:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d50a:	6023      	str	r3, [r4, #0]
  if (pcb->unsent == NULL) {
 800d50c:	b32b      	cbz	r3, 800d55a <tcp_rexmit_rto_prepare+0x82>
  pcb->unsent = pcb->unacked;
 800d50e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d510:	672b      	str	r3, [r5, #112]	; 0x70
  pcb->unacked = NULL;
 800d512:	2600      	movs	r6, #0
 800d514:	676e      	str	r6, [r5, #116]	; 0x74
  tcp_set_flags(pcb, TF_RTO);
 800d516:	8beb      	ldrh	r3, [r5, #30]
 800d518:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d51c:	83eb      	strh	r3, [r5, #30]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d51e:	6923      	ldr	r3, [r4, #16]
 800d520:	6858      	ldr	r0, [r3, #4]
 800d522:	f7fa f982 	bl	800782a <lwip_htonl>
 800d526:	4607      	mov	r7, r0
 800d528:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800d52c:	6923      	ldr	r3, [r4, #16]
 800d52e:	8998      	ldrh	r0, [r3, #12]
 800d530:	f7fa f976 	bl	8007820 <lwip_htons>
 800d534:	f010 0303 	ands.w	r3, r0, #3
 800d538:	bf18      	it	ne
 800d53a:	2301      	movne	r3, #1
 800d53c:	4447      	add	r7, r8
 800d53e:	443b      	add	r3, r7
 800d540:	652b      	str	r3, [r5, #80]	; 0x50
  pcb->rttest = 0;
 800d542:	63ae      	str	r6, [r5, #56]	; 0x38
  return ERR_OK;
 800d544:	4630      	mov	r0, r6
}
 800d546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d54a:	4b0a      	ldr	r3, [pc, #40]	; (800d574 <tcp_rexmit_rto_prepare+0x9c>)
 800d54c:	f240 6263 	movw	r2, #1635	; 0x663
 800d550:	4909      	ldr	r1, [pc, #36]	; (800d578 <tcp_rexmit_rto_prepare+0xa0>)
 800d552:	480a      	ldr	r0, [pc, #40]	; (800d57c <tcp_rexmit_rto_prepare+0xa4>)
 800d554:	f006 feb0 	bl	80142b8 <app_debug_rtt_raw>
 800d558:	e7c3      	b.n	800d4e2 <tcp_rexmit_rto_prepare+0xa>
    pcb->unsent_oversize = seg->oversize_left;
 800d55a:	8963      	ldrh	r3, [r4, #10]
 800d55c:	f8a5 306c 	strh.w	r3, [r5, #108]	; 0x6c
 800d560:	e7d5      	b.n	800d50e <tcp_rexmit_rto_prepare+0x36>
    return ERR_VAL;
 800d562:	f06f 0005 	mvn.w	r0, #5
 800d566:	e7ee      	b.n	800d546 <tcp_rexmit_rto_prepare+0x6e>
      return ERR_VAL;
 800d568:	f06f 0005 	mvn.w	r0, #5
 800d56c:	e7eb      	b.n	800d546 <tcp_rexmit_rto_prepare+0x6e>
    return ERR_VAL;
 800d56e:	f06f 0005 	mvn.w	r0, #5
 800d572:	e7e8      	b.n	800d546 <tcp_rexmit_rto_prepare+0x6e>
 800d574:	0801851c 	.word	0x0801851c
 800d578:	08018bcc 	.word	0x08018bcc
 800d57c:	08016a38 	.word	0x08016a38

0800d580 <tcp_rexmit>:
{
 800d580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d582:	4607      	mov	r7, r0
 800d584:	2800      	cmp	r0, #0
 800d586:	d02c      	beq.n	800d5e2 <tcp_rexmit+0x62>
  if (pcb->unacked == NULL) {
 800d588:	6f7e      	ldr	r6, [r7, #116]	; 0x74
 800d58a:	2e00      	cmp	r6, #0
 800d58c:	d034      	beq.n	800d5f8 <tcp_rexmit+0x78>
  if (tcp_output_segment_busy(seg)) {
 800d58e:	4630      	mov	r0, r6
 800d590:	f7fe ffb6 	bl	800c500 <tcp_output_segment_busy>
 800d594:	2800      	cmp	r0, #0
 800d596:	d132      	bne.n	800d5fe <tcp_rexmit+0x7e>
  pcb->unacked = seg->next;
 800d598:	6833      	ldr	r3, [r6, #0]
 800d59a:	677b      	str	r3, [r7, #116]	; 0x74
  cur_seg = &(pcb->unsent);
 800d59c:	f107 0570 	add.w	r5, r7, #112	; 0x70
  while (*cur_seg &&
 800d5a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5a2:	b17b      	cbz	r3, 800d5c4 <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	6858      	ldr	r0, [r3, #4]
 800d5a8:	f7fa f93f 	bl	800782a <lwip_htonl>
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	6933      	ldr	r3, [r6, #16]
 800d5b0:	6858      	ldr	r0, [r3, #4]
 800d5b2:	f7fa f93a 	bl	800782a <lwip_htonl>
 800d5b6:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800d5b8:	2c00      	cmp	r4, #0
 800d5ba:	da03      	bge.n	800d5c4 <tcp_rexmit+0x44>
    cur_seg = &((*cur_seg)->next );
 800d5bc:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800d5be:	682b      	ldr	r3, [r5, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1ef      	bne.n	800d5a4 <tcp_rexmit+0x24>
  seg->next = *cur_seg;
 800d5c4:	682b      	ldr	r3, [r5, #0]
 800d5c6:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800d5c8:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800d5ca:	6833      	ldr	r3, [r6, #0]
 800d5cc:	b18b      	cbz	r3, 800d5f2 <tcp_rexmit+0x72>
  if (pcb->nrtx < 0xFF) {
 800d5ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d5d2:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800d5d4:	bf1c      	itt	ne
 800d5d6:	3301      	addne	r3, #1
 800d5d8:	f887 3046 	strbne.w	r3, [r7, #70]	; 0x46
  pcb->rttest = 0;
 800d5dc:	2000      	movs	r0, #0
 800d5de:	63b8      	str	r0, [r7, #56]	; 0x38
}
 800d5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d5e2:	4b08      	ldr	r3, [pc, #32]	; (800d604 <tcp_rexmit+0x84>)
 800d5e4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d5e8:	4907      	ldr	r1, [pc, #28]	; (800d608 <tcp_rexmit+0x88>)
 800d5ea:	4808      	ldr	r0, [pc, #32]	; (800d60c <tcp_rexmit+0x8c>)
 800d5ec:	f006 fe64 	bl	80142b8 <app_debug_rtt_raw>
 800d5f0:	e7ca      	b.n	800d588 <tcp_rexmit+0x8>
    pcb->unsent_oversize = 0;
 800d5f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800d5f6:	e7ea      	b.n	800d5ce <tcp_rexmit+0x4e>
    return ERR_VAL;
 800d5f8:	f06f 0005 	mvn.w	r0, #5
 800d5fc:	e7f0      	b.n	800d5e0 <tcp_rexmit+0x60>
    return ERR_VAL;
 800d5fe:	f06f 0005 	mvn.w	r0, #5
 800d602:	e7ed      	b.n	800d5e0 <tcp_rexmit+0x60>
 800d604:	0801851c 	.word	0x0801851c
 800d608:	08018bf0 	.word	0x08018bf0
 800d60c:	08016a38 	.word	0x08016a38

0800d610 <tcp_rexmit_fast>:
{
 800d610:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d612:	4604      	mov	r4, r0
 800d614:	b130      	cbz	r0, 800d624 <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d616:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d618:	b11b      	cbz	r3, 800d622 <tcp_rexmit_fast+0x12>
 800d61a:	8be3      	ldrh	r3, [r4, #30]
 800d61c:	f013 0f04 	tst.w	r3, #4
 800d620:	d008      	beq.n	800d634 <tcp_rexmit_fast+0x24>
}
 800d622:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d624:	4b15      	ldr	r3, [pc, #84]	; (800d67c <tcp_rexmit_fast+0x6c>)
 800d626:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d62a:	4915      	ldr	r1, [pc, #84]	; (800d680 <tcp_rexmit_fast+0x70>)
 800d62c:	4815      	ldr	r0, [pc, #84]	; (800d684 <tcp_rexmit_fast+0x74>)
 800d62e:	f006 fe43 	bl	80142b8 <app_debug_rtt_raw>
 800d632:	e7f0      	b.n	800d616 <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d634:	4620      	mov	r0, r4
 800d636:	f7ff ffa3 	bl	800d580 <tcp_rexmit>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d1f1      	bne.n	800d622 <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d63e:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800d642:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800d646:	429a      	cmp	r2, r3
 800d648:	bf28      	it	cs
 800d64a:	461a      	movcs	r2, r3
 800d64c:	1052      	asrs	r2, r2, #1
 800d64e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d652:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800d654:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
        pcb->ssthresh = 2 * pcb->mss;
 800d658:	bf3c      	itt	cc
 800d65a:	005a      	lslcc	r2, r3, #1
 800d65c:	f8a4 204e 	strhcc.w	r2, [r4, #78]	; 0x4e
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d660:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d664:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 800d668:	4413      	add	r3, r2
 800d66a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      tcp_set_flags(pcb, TF_INFR);
 800d66e:	8be3      	ldrh	r3, [r4, #30]
 800d670:	f043 0304 	orr.w	r3, r3, #4
 800d674:	83e3      	strh	r3, [r4, #30]
      pcb->rtime = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	86a3      	strh	r3, [r4, #52]	; 0x34
}
 800d67a:	e7d2      	b.n	800d622 <tcp_rexmit_fast+0x12>
 800d67c:	0801851c 	.word	0x0801851c
 800d680:	08018c08 	.word	0x08018c08
 800d684:	08016a38 	.word	0x08016a38

0800d688 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d68c:	b084      	sub	sp, #16
 800d68e:	4604      	mov	r4, r0
 800d690:	460e      	mov	r6, r1
 800d692:	4615      	mov	r5, r2
 800d694:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d696:	4698      	mov	r8, r3
 800d698:	b32b      	cbz	r3, 800d6e6 <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d69a:	b367      	cbz	r7, 800d6f6 <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d69c:	4630      	mov	r0, r6
 800d69e:	f7fa f8c4 	bl	800782a <lwip_htonl>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	f243 0204 	movw	r2, #12292	; 0x3004
 800d6a8:	9203      	str	r2, [sp, #12]
 800d6aa:	2214      	movs	r2, #20
 800d6ac:	9202      	str	r2, [sp, #8]
 800d6ae:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800d6b2:	9201      	str	r2, [sp, #4]
 800d6b4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800d6b8:	9200      	str	r2, [sp, #0]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f7ff f83a 	bl	800c738 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d6c4:	4605      	mov	r5, r0
 800d6c6:	b158      	cbz	r0, 800d6e0 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	4601      	mov	r1, r0
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f7fe ff2e 	bl	800c530 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d6d4:	463b      	mov	r3, r7
 800d6d6:	4642      	mov	r2, r8
 800d6d8:	4629      	mov	r1, r5
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f7ff f8a0 	bl	800c820 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d6e0:	b004      	add	sp, #16
 800d6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d6e6:	4b08      	ldr	r3, [pc, #32]	; (800d708 <tcp_rst+0x80>)
 800d6e8:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d6ec:	4907      	ldr	r1, [pc, #28]	; (800d70c <tcp_rst+0x84>)
 800d6ee:	4808      	ldr	r0, [pc, #32]	; (800d710 <tcp_rst+0x88>)
 800d6f0:	f006 fde2 	bl	80142b8 <app_debug_rtt_raw>
 800d6f4:	e7d1      	b.n	800d69a <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d6f6:	4b04      	ldr	r3, [pc, #16]	; (800d708 <tcp_rst+0x80>)
 800d6f8:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d6fc:	4905      	ldr	r1, [pc, #20]	; (800d714 <tcp_rst+0x8c>)
 800d6fe:	4804      	ldr	r0, [pc, #16]	; (800d710 <tcp_rst+0x88>)
 800d700:	f006 fdda 	bl	80142b8 <app_debug_rtt_raw>
 800d704:	e7ca      	b.n	800d69c <tcp_rst+0x14>
 800d706:	bf00      	nop
 800d708:	0801851c 	.word	0x0801851c
 800d70c:	08018c28 	.word	0x08018c28
 800d710:	08016a38 	.word	0x08016a38
 800d714:	08018c44 	.word	0x08018c44

0800d718 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d718:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d71a:	4604      	mov	r4, r0
 800d71c:	b1e0      	cbz	r0, 800d758 <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d71e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d720:	f7fa f883 	bl	800782a <lwip_htonl>
 800d724:	4603      	mov	r3, r0
 800d726:	2200      	movs	r2, #0
 800d728:	4611      	mov	r1, r2
 800d72a:	4620      	mov	r0, r4
 800d72c:	f7ff f84e 	bl	800c7cc <tcp_output_alloc_header>
  if (p == NULL) {
 800d730:	4605      	mov	r5, r0
 800d732:	b1c8      	cbz	r0, 800d768 <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d734:	2300      	movs	r3, #0
 800d736:	461a      	mov	r2, r3
 800d738:	4601      	mov	r1, r0
 800d73a:	4620      	mov	r0, r4
 800d73c:	f7fe fef8 	bl	800c530 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d740:	1d23      	adds	r3, r4, #4
 800d742:	4622      	mov	r2, r4
 800d744:	4629      	mov	r1, r5
 800d746:	4620      	mov	r0, r4
 800d748:	f7ff f86a 	bl	800c820 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800d74c:	b198      	cbz	r0, 800d776 <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d74e:	8be3      	ldrh	r3, [r4, #30]
 800d750:	f043 0303 	orr.w	r3, r3, #3
 800d754:	83e3      	strh	r3, [r4, #30]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800d756:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d758:	4b09      	ldr	r3, [pc, #36]	; (800d780 <tcp_send_empty_ack+0x68>)
 800d75a:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d75e:	4909      	ldr	r1, [pc, #36]	; (800d784 <tcp_send_empty_ack+0x6c>)
 800d760:	4809      	ldr	r0, [pc, #36]	; (800d788 <tcp_send_empty_ack+0x70>)
 800d762:	f006 fda9 	bl	80142b8 <app_debug_rtt_raw>
 800d766:	e7da      	b.n	800d71e <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d768:	8be3      	ldrh	r3, [r4, #30]
 800d76a:	f043 0303 	orr.w	r3, r3, #3
 800d76e:	83e3      	strh	r3, [r4, #30]
    return ERR_BUF;
 800d770:	f06f 0001 	mvn.w	r0, #1
 800d774:	e7ef      	b.n	800d756 <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d776:	8be3      	ldrh	r3, [r4, #30]
 800d778:	f023 0303 	bic.w	r3, r3, #3
 800d77c:	83e3      	strh	r3, [r4, #30]
 800d77e:	e7ea      	b.n	800d756 <tcp_send_empty_ack+0x3e>
 800d780:	0801851c 	.word	0x0801851c
 800d784:	08018c60 	.word	0x08018c60
 800d788:	08016a38 	.word	0x08016a38

0800d78c <tcp_output>:
{
 800d78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d790:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d792:	4605      	mov	r5, r0
 800d794:	2800      	cmp	r0, #0
 800d796:	d038      	beq.n	800d80a <tcp_output+0x7e>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d798:	7e2b      	ldrb	r3, [r5, #24]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d03d      	beq.n	800d81a <tcp_output+0x8e>
  if (tcp_input_pcb == pcb) {
 800d79e:	4bac      	ldr	r3, [pc, #688]	; (800da50 <tcp_output+0x2c4>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	42ab      	cmp	r3, r5
 800d7a4:	f000 8204 	beq.w	800dbb0 <tcp_output+0x424>
  seg = pcb->unsent;
 800d7a8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  if (seg == NULL) {
 800d7aa:	2c00      	cmp	r4, #0
 800d7ac:	d03d      	beq.n	800d82a <tcp_output+0x9e>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d7ae:	f8b5 804c 	ldrh.w	r8, [r5, #76]	; 0x4c
 800d7b2:	f8b5 7064 	ldrh.w	r7, [r5, #100]	; 0x64
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d7b6:	f105 0a04 	add.w	sl, r5, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d7ba:	7a28      	ldrb	r0, [r5, #8]
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d144      	bne.n	800d84a <tcp_output+0xbe>
    return ip_route(src, dst);
 800d7c0:	4650      	mov	r0, sl
 800d7c2:	f001 f8b3 	bl	800e92c <ip4_route>
 800d7c6:	4606      	mov	r6, r0
  if (netif == NULL) {
 800d7c8:	2e00      	cmp	r6, #0
 800d7ca:	f000 81f3 	beq.w	800dbb4 <tcp_output+0x428>
  if (ip_addr_isany(&pcb->local_ip)) {
 800d7ce:	682b      	ldr	r3, [r5, #0]
 800d7d0:	b90b      	cbnz	r3, 800d7d6 <tcp_output+0x4a>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d7d2:	6873      	ldr	r3, [r6, #4]
 800d7d4:	602b      	str	r3, [r5, #0]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d7d6:	4547      	cmp	r7, r8
 800d7d8:	bf28      	it	cs
 800d7da:	4647      	movcs	r7, r8
 800d7dc:	46bb      	mov	fp, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d7de:	6923      	ldr	r3, [r4, #16]
 800d7e0:	6858      	ldr	r0, [r3, #4]
 800d7e2:	f7fa f822 	bl	800782a <lwip_htonl>
 800d7e6:	8923      	ldrh	r3, [r4, #8]
 800d7e8:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800d7ea:	1a9b      	subs	r3, r3, r2
 800d7ec:	4403      	add	r3, r0
 800d7ee:	42bb      	cmp	r3, r7
 800d7f0:	d93e      	bls.n	800d870 <tcp_output+0xe4>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d7f2:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 800d7f6:	42bb      	cmp	r3, r7
 800d7f8:	d02b      	beq.n	800d852 <tcp_output+0xc6>
    if (pcb->flags & TF_ACK_NOW) {
 800d7fa:	8beb      	ldrh	r3, [r5, #30]
 800d7fc:	f013 0f02 	tst.w	r3, #2
 800d800:	d017      	beq.n	800d832 <tcp_output+0xa6>
      return tcp_send_empty_ack(pcb);
 800d802:	4628      	mov	r0, r5
 800d804:	f7ff ff88 	bl	800d718 <tcp_send_empty_ack>
 800d808:	e018      	b.n	800d83c <tcp_output+0xb0>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d80a:	4b92      	ldr	r3, [pc, #584]	; (800da54 <tcp_output+0x2c8>)
 800d80c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d810:	4991      	ldr	r1, [pc, #580]	; (800da58 <tcp_output+0x2cc>)
 800d812:	4892      	ldr	r0, [pc, #584]	; (800da5c <tcp_output+0x2d0>)
 800d814:	f006 fd50 	bl	80142b8 <app_debug_rtt_raw>
 800d818:	e7be      	b.n	800d798 <tcp_output+0xc>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d81a:	4b8e      	ldr	r3, [pc, #568]	; (800da54 <tcp_output+0x2c8>)
 800d81c:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d820:	498f      	ldr	r1, [pc, #572]	; (800da60 <tcp_output+0x2d4>)
 800d822:	488e      	ldr	r0, [pc, #568]	; (800da5c <tcp_output+0x2d0>)
 800d824:	f006 fd48 	bl	80142b8 <app_debug_rtt_raw>
 800d828:	e7b9      	b.n	800d79e <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800d82a:	8beb      	ldrh	r3, [r5, #30]
 800d82c:	f013 0f02 	tst.w	r3, #2
 800d830:	d107      	bne.n	800d842 <tcp_output+0xb6>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d832:	8beb      	ldrh	r3, [r5, #30]
 800d834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d838:	83eb      	strh	r3, [r5, #30]
  return ERR_OK;
 800d83a:	2000      	movs	r0, #0
}
 800d83c:	b007      	add	sp, #28
 800d83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800d842:	4628      	mov	r0, r5
 800d844:	f7ff ff68 	bl	800d718 <tcp_send_empty_ack>
 800d848:	e7f8      	b.n	800d83c <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800d84a:	f7fb fb61 	bl	8008f10 <netif_get_by_index>
 800d84e:	4606      	mov	r6, r0
 800d850:	e7ba      	b.n	800d7c8 <tcp_output+0x3c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d852:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1d0      	bne.n	800d7fa <tcp_output+0x6e>
 800d858:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1cc      	bne.n	800d7fa <tcp_output+0x6e>
      pcb->persist_cnt = 0;
 800d860:	f885 30a4 	strb.w	r3, [r5, #164]	; 0xa4
      pcb->persist_backoff = 1;
 800d864:	2201      	movs	r2, #1
 800d866:	f885 20a5 	strb.w	r2, [r5, #165]	; 0xa5
      pcb->persist_probe = 0;
 800d86a:	f885 30a6 	strb.w	r3, [r5, #166]	; 0xa6
 800d86e:	e7c4      	b.n	800d7fa <tcp_output+0x6e>
  pcb->persist_backoff = 0;
 800d870:	2300      	movs	r3, #0
 800d872:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
  useg = pcb->unacked;
 800d876:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  if (useg != NULL) {
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f000 8197 	beq.w	800dbac <tcp_output+0x420>
    for (; useg->next != NULL; useg = useg->next);
 800d87e:	461f      	mov	r7, r3
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1fb      	bne.n	800d87e <tcp_output+0xf2>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d886:	9505      	str	r5, [sp, #20]
    LWIP_ASSERT("RST not expected here!",
 800d888:	46b8      	mov	r8, r7
 800d88a:	e11f      	b.n	800dacc <tcp_output+0x340>
 800d88c:	4b71      	ldr	r3, [pc, #452]	; (800da54 <tcp_output+0x2c8>)
 800d88e:	f240 5236 	movw	r2, #1334	; 0x536
 800d892:	4974      	ldr	r1, [pc, #464]	; (800da64 <tcp_output+0x2d8>)
 800d894:	4871      	ldr	r0, [pc, #452]	; (800da5c <tcp_output+0x2d0>)
 800d896:	f006 fd0f 	bl	80142b8 <app_debug_rtt_raw>
 800d89a:	e12a      	b.n	800daf2 <tcp_output+0x366>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d89c:	8911      	ldrh	r1, [r2, #8]
 800d89e:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800d8a0:	4291      	cmp	r1, r2
 800d8a2:	f080 8134 	bcs.w	800db0e <tcp_output+0x382>
 800d8a6:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
 800d8aa:	2a00      	cmp	r2, #0
 800d8ac:	f000 812f 	beq.w	800db0e <tcp_output+0x382>
 800d8b0:	f8b5 206a 	ldrh.w	r2, [r5, #106]	; 0x6a
 800d8b4:	2a07      	cmp	r2, #7
 800d8b6:	f200 812a 	bhi.w	800db0e <tcp_output+0x382>
 800d8ba:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800d8be:	f040 8126 	bne.w	800db0e <tcp_output+0x382>
  if (pcb->unsent == NULL) {
 800d8c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1b4      	bne.n	800d832 <tcp_output+0xa6>
    pcb->unsent_oversize = 0;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	f8a5 306c 	strh.w	r3, [r5, #108]	; 0x6c
 800d8ce:	e7b0      	b.n	800d832 <tcp_output+0xa6>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d8d0:	6923      	ldr	r3, [r4, #16]
 800d8d2:	899f      	ldrh	r7, [r3, #12]
 800d8d4:	2010      	movs	r0, #16
 800d8d6:	f7f9 ffa3 	bl	8007820 <lwip_htons>
 800d8da:	6923      	ldr	r3, [r4, #16]
 800d8dc:	4338      	orrs	r0, r7
 800d8de:	8198      	strh	r0, [r3, #12]
 800d8e0:	e119      	b.n	800db16 <tcp_output+0x38a>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d8e2:	6927      	ldr	r7, [r4, #16]
 800d8e4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800d8e6:	f7f9 ffa0 	bl	800782a <lwip_htonl>
 800d8ea:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d8ec:	6927      	ldr	r7, [r4, #16]
 800d8ee:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
 800d8f0:	f7f9 ff96 	bl	8007820 <lwip_htons>
 800d8f4:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d8f6:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
 800d8f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d8fa:	4413      	add	r3, r2
 800d8fc:	632b      	str	r3, [r5, #48]	; 0x30
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d8fe:	6927      	ldr	r7, [r4, #16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d900:	7be3      	ldrb	r3, [r4, #15]
 800d902:	f013 0f01 	tst.w	r3, #1
 800d906:	d177      	bne.n	800d9f8 <tcp_output+0x26c>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d908:	3714      	adds	r7, #20
  if (pcb->rtime < 0) {
 800d90a:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 800d90e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800d910:	bfbc      	itt	lt
 800d912:	2300      	movlt	r3, #0
 800d914:	86ab      	strhlt	r3, [r5, #52]	; 0x34
  if (pcb->rttest == 0) {
 800d916:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d07a      	beq.n	800da12 <tcp_output+0x286>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d91c:	6861      	ldr	r1, [r4, #4]
 800d91e:	6923      	ldr	r3, [r4, #16]
 800d920:	684a      	ldr	r2, [r1, #4]
 800d922:	1a9b      	subs	r3, r3, r2
 800d924:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800d926:	894a      	ldrh	r2, [r1, #10]
 800d928:	1ad2      	subs	r2, r2, r3
 800d92a:	814a      	strh	r2, [r1, #10]
  seg->p->tot_len -= len;
 800d92c:	6861      	ldr	r1, [r4, #4]
 800d92e:	890a      	ldrh	r2, [r1, #8]
 800d930:	1ad3      	subs	r3, r2, r3
 800d932:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800d934:	6862      	ldr	r2, [r4, #4]
 800d936:	6923      	ldr	r3, [r4, #16]
 800d938:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 800d93a:	2200      	movs	r2, #0
 800d93c:	741a      	strb	r2, [r3, #16]
 800d93e:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d940:	7be3      	ldrb	r3, [r4, #15]
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	f003 0304 	and.w	r3, r3, #4
 800d948:	3314      	adds	r3, #20
 800d94a:	6922      	ldr	r2, [r4, #16]
 800d94c:	4413      	add	r3, r2
 800d94e:	429f      	cmp	r7, r3
 800d950:	d006      	beq.n	800d960 <tcp_output+0x1d4>
 800d952:	4b40      	ldr	r3, [pc, #256]	; (800da54 <tcp_output+0x2c8>)
 800d954:	f240 621c 	movw	r2, #1564	; 0x61c
 800d958:	4943      	ldr	r1, [pc, #268]	; (800da68 <tcp_output+0x2dc>)
 800d95a:	4840      	ldr	r0, [pc, #256]	; (800da5c <tcp_output+0x2d0>)
 800d95c:	f006 fcac 	bl	80142b8 <app_debug_rtt_raw>
    if ((seg->flags & TF_SEG_DATA_CHECKSUMMED) == 0) {
 800d960:	7be3      	ldrb	r3, [r4, #15]
 800d962:	f013 0f04 	tst.w	r3, #4
 800d966:	d05d      	beq.n	800da24 <tcp_output+0x298>
    acc = ip_chksum_pseudo_partial(seg->p, IP_PROTO_TCP,
 800d968:	6867      	ldr	r7, [r4, #4]
 800d96a:	f8b7 9008 	ldrh.w	r9, [r7, #8]
                                   seg->p->tot_len, TCPH_HDRLEN_BYTES(seg->tcphdr), &pcb->local_ip, &pcb->remote_ip);
 800d96e:	6923      	ldr	r3, [r4, #16]
 800d970:	8998      	ldrh	r0, [r3, #12]
 800d972:	f7f9 ff55 	bl	8007820 <lwip_htons>
 800d976:	0a83      	lsrs	r3, r0, #10
    acc = ip_chksum_pseudo_partial(seg->p, IP_PROTO_TCP,
 800d978:	f8cd a004 	str.w	sl, [sp, #4]
 800d97c:	9a05      	ldr	r2, [sp, #20]
 800d97e:	9200      	str	r2, [sp, #0]
 800d980:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800d984:	464a      	mov	r2, r9
 800d986:	2106      	movs	r1, #6
 800d988:	4638      	mov	r0, r7
 800d98a:	f7fa fdaf 	bl	80084ec <ip_chksum_pseudo_partial>
    if (seg->chksum_swapped) {
 800d98e:	7ba3      	ldrb	r3, [r4, #14]
 800d990:	b143      	cbz	r3, 800d9a4 <tcp_output+0x218>
      seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
 800d992:	89a2      	ldrh	r2, [r4, #12]
 800d994:	0a13      	lsrs	r3, r2, #8
 800d996:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d99a:	81a3      	strh	r3, [r4, #12]
      seg->chksum_swapped = 0;
 800d99c:	2300      	movs	r3, #0
 800d99e:	73a3      	strb	r3, [r4, #14]
      seg_chksum_was_swapped = 1;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	9304      	str	r3, [sp, #16]
    acc = (u16_t)~acc + seg->chksum;
 800d9a4:	43c3      	mvns	r3, r0
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	89a1      	ldrh	r1, [r4, #12]
    seg->tcphdr->chksum = (u16_t)~FOLD_U32T(acc);
 800d9aa:	6922      	ldr	r2, [r4, #16]
    acc = (u16_t)~acc + seg->chksum;
 800d9ac:	440b      	add	r3, r1
    seg->tcphdr->chksum = (u16_t)~FOLD_U32T(acc);
 800d9ae:	eb03 4313 	add.w	r3, r3, r3, lsr #16
 800d9b2:	43db      	mvns	r3, r3
 800d9b4:	8213      	strh	r3, [r2, #16]
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
 800d9b6:	f105 030c 	add.w	r3, r5, #12
 800d9ba:	63b3      	str	r3, [r6, #56]	; 0x38
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d9bc:	6860      	ldr	r0, [r4, #4]
 800d9be:	9602      	str	r6, [sp, #8]
 800d9c0:	2306      	movs	r3, #6
 800d9c2:	9301      	str	r3, [sp, #4]
 800d9c4:	7aab      	ldrb	r3, [r5, #10]
 800d9c6:	9300      	str	r3, [sp, #0]
 800d9c8:	7aeb      	ldrb	r3, [r5, #11]
 800d9ca:	4652      	mov	r2, sl
 800d9cc:	9905      	ldr	r1, [sp, #20]
 800d9ce:	f001 f949 	bl	800ec64 <ip4_output_if>
  NETIF_RESET_HINTS(netif);
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	63b3      	str	r3, [r6, #56]	; 0x38
  if (seg_chksum_was_swapped) {
 800d9d6:	9b04      	ldr	r3, [sp, #16]
 800d9d8:	b133      	cbz	r3, 800d9e8 <tcp_output+0x25c>
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
 800d9da:	89a2      	ldrh	r2, [r4, #12]
 800d9dc:	0a13      	lsrs	r3, r2, #8
 800d9de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9e2:	81a3      	strh	r3, [r4, #12]
    seg->chksum_swapped = 1;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	73a3      	strb	r3, [r4, #14]
    if (err != ERR_OK) {
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	f000 809b 	beq.w	800db24 <tcp_output+0x398>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d9ee:	8beb      	ldrh	r3, [r5, #30]
 800d9f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9f4:	83eb      	strh	r3, [r5, #30]
      return err;
 800d9f6:	e721      	b.n	800d83c <tcp_output+0xb0>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d9f8:	4652      	mov	r2, sl
 800d9fa:	4631      	mov	r1, r6
 800d9fc:	f44f 7006 	mov.w	r0, #536	; 0x218
 800da00:	f7fc f9ae 	bl	8009d60 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800da04:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800da08:	f7f9 ff0f 	bl	800782a <lwip_htonl>
 800da0c:	6178      	str	r0, [r7, #20]
    opts += 1;
 800da0e:	3718      	adds	r7, #24
 800da10:	e77b      	b.n	800d90a <tcp_output+0x17e>
    pcb->rttest = tcp_ticks;
 800da12:	4b16      	ldr	r3, [pc, #88]	; (800da6c <tcp_output+0x2e0>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	63ab      	str	r3, [r5, #56]	; 0x38
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800da18:	6923      	ldr	r3, [r4, #16]
 800da1a:	6858      	ldr	r0, [r3, #4]
 800da1c:	f7f9 ff05 	bl	800782a <lwip_htonl>
 800da20:	63e8      	str	r0, [r5, #60]	; 0x3c
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_output_segment: rtseq %"U32_F"\n", pcb->rtseq));
 800da22:	e77b      	b.n	800d91c <tcp_output+0x190>
      LWIP_ASSERT("data included but not checksummed",
 800da24:	6863      	ldr	r3, [r4, #4]
 800da26:	891f      	ldrh	r7, [r3, #8]
 800da28:	6923      	ldr	r3, [r4, #16]
 800da2a:	8998      	ldrh	r0, [r3, #12]
 800da2c:	f7f9 fef8 	bl	8007820 <lwip_htons>
 800da30:	0a80      	lsrs	r0, r0, #10
 800da32:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800da36:	42b8      	cmp	r0, r7
 800da38:	d096      	beq.n	800d968 <tcp_output+0x1dc>
 800da3a:	4b06      	ldr	r3, [pc, #24]	; (800da54 <tcp_output+0x2c8>)
 800da3c:	f240 6227 	movw	r2, #1575	; 0x627
 800da40:	490b      	ldr	r1, [pc, #44]	; (800da70 <tcp_output+0x2e4>)
 800da42:	4806      	ldr	r0, [pc, #24]	; (800da5c <tcp_output+0x2d0>)
 800da44:	f006 fc38 	bl	80142b8 <app_debug_rtt_raw>
 800da48:	e78e      	b.n	800d968 <tcp_output+0x1dc>
        pcb->unacked = seg;
 800da4a:	676c      	str	r4, [r5, #116]	; 0x74
        useg = seg;
 800da4c:	46a0      	mov	r8, r4
 800da4e:	e039      	b.n	800dac4 <tcp_output+0x338>
 800da50:	20004368 	.word	0x20004368
 800da54:	0801851c 	.word	0x0801851c
 800da58:	08018c80 	.word	0x08018c80
 800da5c:	08016a38 	.word	0x08016a38
 800da60:	08018c98 	.word	0x08018c98
 800da64:	08018cc0 	.word	0x08018cc0
 800da68:	08018598 	.word	0x08018598
 800da6c:	20004358 	.word	0x20004358
 800da70:	08018cd8 	.word	0x08018cd8
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800da74:	f105 0974 	add.w	r9, r5, #116	; 0x74
          while (*cur_seg &&
 800da78:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800da7a:	b1d3      	cbz	r3, 800dab2 <tcp_output+0x326>
 800da7c:	4622      	mov	r2, r4
 800da7e:	464c      	mov	r4, r9
 800da80:	4691      	mov	r9, r2
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	6858      	ldr	r0, [r3, #4]
 800da86:	f7f9 fed0 	bl	800782a <lwip_htonl>
 800da8a:	4607      	mov	r7, r0
 800da8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da90:	6858      	ldr	r0, [r3, #4]
 800da92:	f7f9 feca 	bl	800782a <lwip_htonl>
 800da96:	1a3f      	subs	r7, r7, r0
          while (*cur_seg &&
 800da98:	2f00      	cmp	r7, #0
 800da9a:	da07      	bge.n	800daac <tcp_output+0x320>
            cur_seg = &((*cur_seg)->next );
 800da9c:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
 800da9e:	6823      	ldr	r3, [r4, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1ee      	bne.n	800da82 <tcp_output+0x2f6>
 800daa4:	464b      	mov	r3, r9
 800daa6:	46a1      	mov	r9, r4
 800daa8:	461c      	mov	r4, r3
 800daaa:	e002      	b.n	800dab2 <tcp_output+0x326>
 800daac:	464b      	mov	r3, r9
 800daae:	46a1      	mov	r9, r4
 800dab0:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
 800dab2:	f8d9 3000 	ldr.w	r3, [r9]
 800dab6:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800dab8:	f8c9 4000 	str.w	r4, [r9]
 800dabc:	e002      	b.n	800dac4 <tcp_output+0x338>
      tcp_seg_free(seg);
 800dabe:	4620      	mov	r0, r4
 800dac0:	f7fc f87c 	bl	8009bbc <tcp_seg_free>
    seg = pcb->unsent;
 800dac4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL &&
 800dac6:	2c00      	cmp	r4, #0
 800dac8:	f43f aefe 	beq.w	800d8c8 <tcp_output+0x13c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dacc:	6923      	ldr	r3, [r4, #16]
 800dace:	6858      	ldr	r0, [r3, #4]
 800dad0:	f7f9 feab 	bl	800782a <lwip_htonl>
 800dad4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800dad6:	1ac0      	subs	r0, r0, r3
 800dad8:	8923      	ldrh	r3, [r4, #8]
 800dada:	4418      	add	r0, r3
  while (seg != NULL &&
 800dadc:	4558      	cmp	r0, fp
 800dade:	f63f aef0 	bhi.w	800d8c2 <tcp_output+0x136>
    LWIP_ASSERT("RST not expected here!",
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	8998      	ldrh	r0, [r3, #12]
 800dae6:	f7f9 fe9b 	bl	8007820 <lwip_htons>
 800daea:	f010 0f04 	tst.w	r0, #4
 800daee:	f47f aecd 	bne.w	800d88c <tcp_output+0x100>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800daf2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800daf4:	b15b      	cbz	r3, 800db0e <tcp_output+0x382>
 800daf6:	8beb      	ldrh	r3, [r5, #30]
 800daf8:	f013 0f44 	tst.w	r3, #68	; 0x44
 800dafc:	d107      	bne.n	800db0e <tcp_output+0x382>
 800dafe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800db00:	2a00      	cmp	r2, #0
 800db02:	f43f aed0 	beq.w	800d8a6 <tcp_output+0x11a>
 800db06:	6811      	ldr	r1, [r2, #0]
 800db08:	2900      	cmp	r1, #0
 800db0a:	f43f aec7 	beq.w	800d89c <tcp_output+0x110>
    if (pcb->state != SYN_SENT) {
 800db0e:	7e2b      	ldrb	r3, [r5, #24]
 800db10:	2b02      	cmp	r3, #2
 800db12:	f47f aedd 	bne.w	800d8d0 <tcp_output+0x144>
  if (tcp_output_segment_busy(seg)) {
 800db16:	4620      	mov	r0, r4
 800db18:	f7fe fcf2 	bl	800c500 <tcp_output_segment_busy>
 800db1c:	9004      	str	r0, [sp, #16]
 800db1e:	2800      	cmp	r0, #0
 800db20:	f43f aedf 	beq.w	800d8e2 <tcp_output+0x156>
    seg->oversize_left = 0;
 800db24:	2300      	movs	r3, #0
 800db26:	8163      	strh	r3, [r4, #10]
    pcb->unsent = seg->next;
 800db28:	6823      	ldr	r3, [r4, #0]
 800db2a:	672b      	str	r3, [r5, #112]	; 0x70
    if (pcb->state != SYN_SENT) {
 800db2c:	7e2b      	ldrb	r3, [r5, #24]
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d003      	beq.n	800db3a <tcp_output+0x3ae>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db32:	8beb      	ldrh	r3, [r5, #30]
 800db34:	f023 0303 	bic.w	r3, r3, #3
 800db38:	83eb      	strh	r3, [r5, #30]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800db3a:	6923      	ldr	r3, [r4, #16]
 800db3c:	6858      	ldr	r0, [r3, #4]
 800db3e:	f7f9 fe74 	bl	800782a <lwip_htonl>
 800db42:	4607      	mov	r7, r0
 800db44:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800db48:	6923      	ldr	r3, [r4, #16]
 800db4a:	8998      	ldrh	r0, [r3, #12]
 800db4c:	f7f9 fe68 	bl	8007820 <lwip_htons>
 800db50:	f010 0003 	ands.w	r0, r0, #3
 800db54:	bf18      	it	ne
 800db56:	2001      	movne	r0, #1
 800db58:	444f      	add	r7, r9
 800db5a:	4438      	add	r0, r7
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800db5c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800db5e:	1a1b      	subs	r3, r3, r0
 800db60:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800db62:	bfb8      	it	lt
 800db64:	6568      	strlt	r0, [r5, #84]	; 0x54
    if (TCP_TCPLEN(seg) > 0) {
 800db66:	8927      	ldrh	r7, [r4, #8]
 800db68:	6923      	ldr	r3, [r4, #16]
 800db6a:	8998      	ldrh	r0, [r3, #12]
 800db6c:	f7f9 fe58 	bl	8007820 <lwip_htons>
 800db70:	f010 0003 	ands.w	r0, r0, #3
 800db74:	bf18      	it	ne
 800db76:	2001      	movne	r0, #1
 800db78:	42f8      	cmn	r0, r7
 800db7a:	d0a0      	beq.n	800dabe <tcp_output+0x332>
      seg->next = NULL;
 800db7c:	2300      	movs	r3, #0
 800db7e:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800db80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800db82:	2b00      	cmp	r3, #0
 800db84:	f43f af61 	beq.w	800da4a <tcp_output+0x2be>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800db88:	6923      	ldr	r3, [r4, #16]
 800db8a:	6858      	ldr	r0, [r3, #4]
 800db8c:	f7f9 fe4d 	bl	800782a <lwip_htonl>
 800db90:	4607      	mov	r7, r0
 800db92:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800db96:	6858      	ldr	r0, [r3, #4]
 800db98:	f7f9 fe47 	bl	800782a <lwip_htonl>
 800db9c:	1a3f      	subs	r7, r7, r0
 800db9e:	2f00      	cmp	r7, #0
 800dba0:	f6ff af68 	blt.w	800da74 <tcp_output+0x2e8>
          useg->next = seg;
 800dba4:	f8c8 4000 	str.w	r4, [r8]
 800dba8:	46a0      	mov	r8, r4
 800dbaa:	e78b      	b.n	800dac4 <tcp_output+0x338>
  useg = pcb->unacked;
 800dbac:	461f      	mov	r7, r3
 800dbae:	e66a      	b.n	800d886 <tcp_output+0xfa>
    return ERR_OK;
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	e643      	b.n	800d83c <tcp_output+0xb0>
    return ERR_RTE;
 800dbb4:	f06f 0003 	mvn.w	r0, #3
 800dbb8:	e640      	b.n	800d83c <tcp_output+0xb0>
 800dbba:	bf00      	nop

0800dbbc <tcp_rexmit_rto_commit>:
{
 800dbbc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	b150      	cbz	r0, 800dbd8 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800dbc2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dbc6:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800dbc8:	bf1c      	itt	ne
 800dbca:	3301      	addne	r3, #1
 800dbcc:	f884 3046 	strbne.w	r3, [r4, #70]	; 0x46
  tcp_output(pcb);
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	f7ff fddb 	bl	800d78c <tcp_output>
}
 800dbd6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800dbd8:	4b03      	ldr	r3, [pc, #12]	; (800dbe8 <tcp_rexmit_rto_commit+0x2c>)
 800dbda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dbde:	4903      	ldr	r1, [pc, #12]	; (800dbec <tcp_rexmit_rto_commit+0x30>)
 800dbe0:	4803      	ldr	r0, [pc, #12]	; (800dbf0 <tcp_rexmit_rto_commit+0x34>)
 800dbe2:	f006 fb69 	bl	80142b8 <app_debug_rtt_raw>
 800dbe6:	e7ec      	b.n	800dbc2 <tcp_rexmit_rto_commit+0x6>
 800dbe8:	0801851c 	.word	0x0801851c
 800dbec:	08018cfc 	.word	0x08018cfc
 800dbf0:	08016a38 	.word	0x08016a38

0800dbf4 <tcp_rexmit_rto>:
{
 800dbf4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	b120      	cbz	r0, 800dc04 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f7ff fc6c 	bl	800d4d8 <tcp_rexmit_rto_prepare>
 800dc00:	b140      	cbz	r0, 800dc14 <tcp_rexmit_rto+0x20>
}
 800dc02:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800dc04:	4b05      	ldr	r3, [pc, #20]	; (800dc1c <tcp_rexmit_rto+0x28>)
 800dc06:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800dc0a:	4905      	ldr	r1, [pc, #20]	; (800dc20 <tcp_rexmit_rto+0x2c>)
 800dc0c:	4805      	ldr	r0, [pc, #20]	; (800dc24 <tcp_rexmit_rto+0x30>)
 800dc0e:	f006 fb53 	bl	80142b8 <app_debug_rtt_raw>
 800dc12:	e7f2      	b.n	800dbfa <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800dc14:	4620      	mov	r0, r4
 800dc16:	f7ff ffd1 	bl	800dbbc <tcp_rexmit_rto_commit>
}
 800dc1a:	e7f2      	b.n	800dc02 <tcp_rexmit_rto+0xe>
 800dc1c:	0801851c 	.word	0x0801851c
 800dc20:	08018d20 	.word	0x08018d20
 800dc24:	08016a38 	.word	0x08016a38

0800dc28 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dc28:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	b1c0      	cbz	r0, 800dc60 <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dc2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc30:	3801      	subs	r0, #1
 800dc32:	f7f9 fdfa 	bl	800782a <lwip_htonl>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2200      	movs	r2, #0
 800dc3a:	4611      	mov	r1, r2
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f7fe fdc5 	bl	800c7cc <tcp_output_alloc_header>
  if (p == NULL) {
 800dc42:	4605      	mov	r5, r0
 800dc44:	b1a0      	cbz	r0, 800dc70 <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc46:	2300      	movs	r3, #0
 800dc48:	461a      	mov	r2, r3
 800dc4a:	4601      	mov	r1, r0
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f7fe fc6f 	bl	800c530 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc52:	1d23      	adds	r3, r4, #4
 800dc54:	4622      	mov	r2, r4
 800dc56:	4629      	mov	r1, r5
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f7fe fde1 	bl	800c820 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800dc5e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dc60:	4b05      	ldr	r3, [pc, #20]	; (800dc78 <tcp_keepalive+0x50>)
 800dc62:	f640 0224 	movw	r2, #2084	; 0x824
 800dc66:	4905      	ldr	r1, [pc, #20]	; (800dc7c <tcp_keepalive+0x54>)
 800dc68:	4805      	ldr	r0, [pc, #20]	; (800dc80 <tcp_keepalive+0x58>)
 800dc6a:	f006 fb25 	bl	80142b8 <app_debug_rtt_raw>
 800dc6e:	e7de      	b.n	800dc2e <tcp_keepalive+0x6>
    return ERR_MEM;
 800dc70:	f04f 30ff 	mov.w	r0, #4294967295
 800dc74:	e7f3      	b.n	800dc5e <tcp_keepalive+0x36>
 800dc76:	bf00      	nop
 800dc78:	0801851c 	.word	0x0801851c
 800dc7c:	08018d3c 	.word	0x08018d3c
 800dc80:	08016a38 	.word	0x08016a38

0800dc84 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dc88:	4604      	mov	r4, r0
 800dc8a:	b328      	cbz	r0, 800dcd8 <tcp_zero_window_probe+0x54>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dc8c:	6f25      	ldr	r5, [r4, #112]	; 0x70
  if (seg == NULL) {
 800dc8e:	b35d      	cbz	r5, 800dce8 <tcp_zero_window_probe+0x64>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dc90:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 800dc94:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800dc96:	bf1c      	itt	ne
 800dc98:	3301      	addne	r3, #1
 800dc9a:	f884 30a6 	strbne.w	r3, [r4, #166]	; 0xa6
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dc9e:	692b      	ldr	r3, [r5, #16]
 800dca0:	8998      	ldrh	r0, [r3, #12]
 800dca2:	f7f9 fdbd 	bl	8007820 <lwip_htons>
 800dca6:	f010 0f01 	tst.w	r0, #1
 800dcaa:	d001      	beq.n	800dcb0 <tcp_zero_window_probe+0x2c>
 800dcac:	892b      	ldrh	r3, [r5, #8]
 800dcae:	b31b      	cbz	r3, 800dcf8 <tcp_zero_window_probe+0x74>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dcb0:	692b      	ldr	r3, [r5, #16]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f7fe fd87 	bl	800c7cc <tcp_output_alloc_header>
  if (p == NULL) {
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	b1b8      	cbz	r0, 800dcf2 <tcp_zero_window_probe+0x6e>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dcc2:	6868      	ldr	r0, [r5, #4]
 800dcc4:	8903      	ldrh	r3, [r0, #8]
 800dcc6:	892a      	ldrh	r2, [r5, #8]
 800dcc8:	1a9b      	subs	r3, r3, r2
    char *d = ((char *)p->payload + TCP_HLEN);
 800dcca:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	2201      	movs	r2, #1
 800dcd0:	3114      	adds	r1, #20
 800dcd2:	f7fb fc9f 	bl	8009614 <pbuf_copy_partial>
 800dcd6:	e025      	b.n	800dd24 <tcp_zero_window_probe+0xa0>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dcd8:	4b1e      	ldr	r3, [pc, #120]	; (800dd54 <tcp_zero_window_probe+0xd0>)
 800dcda:	f640 024f 	movw	r2, #2127	; 0x84f
 800dcde:	491e      	ldr	r1, [pc, #120]	; (800dd58 <tcp_zero_window_probe+0xd4>)
 800dce0:	481e      	ldr	r0, [pc, #120]	; (800dd5c <tcp_zero_window_probe+0xd8>)
 800dce2:	f006 fae9 	bl	80142b8 <app_debug_rtt_raw>
 800dce6:	e7d1      	b.n	800dc8c <tcp_zero_window_probe+0x8>
    return ERR_OK;
 800dce8:	2000      	movs	r0, #0
 800dcea:	e031      	b.n	800dd50 <tcp_zero_window_probe+0xcc>
    return ERR_MEM;
 800dcec:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf0:	e02e      	b.n	800dd50 <tcp_zero_window_probe+0xcc>
 800dcf2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf6:	e02b      	b.n	800dd50 <tcp_zero_window_probe+0xcc>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dcf8:	692b      	ldr	r3, [r5, #16]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	4611      	mov	r1, r2
 800dd00:	4620      	mov	r0, r4
 800dd02:	f7fe fd63 	bl	800c7cc <tcp_output_alloc_header>
  if (p == NULL) {
 800dd06:	4606      	mov	r6, r0
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d0ef      	beq.n	800dcec <tcp_zero_window_probe+0x68>
  tcphdr = (struct tcp_hdr *)p->payload;
 800dd0c:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dd10:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800dd14:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800dd18:	2011      	movs	r0, #17
 800dd1a:	f7f9 fd81 	bl	8007820 <lwip_htons>
 800dd1e:	4307      	orrs	r7, r0
 800dd20:	f8a8 700c 	strh.w	r7, [r8, #12]
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dd24:	692b      	ldr	r3, [r5, #16]
 800dd26:	6858      	ldr	r0, [r3, #4]
 800dd28:	f7f9 fd7f 	bl	800782a <lwip_htonl>
 800dd2c:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dd2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dd30:	1a1b      	subs	r3, r3, r0
 800dd32:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800dd34:	bfb8      	it	lt
 800dd36:	6560      	strlt	r0, [r4, #84]	; 0x54
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd38:	2300      	movs	r3, #0
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	4631      	mov	r1, r6
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f7fe fbf6 	bl	800c530 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd44:	1d23      	adds	r3, r4, #4
 800dd46:	4622      	mov	r2, r4
 800dd48:	4631      	mov	r1, r6
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f7fe fd68 	bl	800c820 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800dd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd54:	0801851c 	.word	0x0801851c
 800dd58:	08018d58 	.word	0x08018d58
 800dd5c:	08016a38 	.word	0x08016a38

0800dd60 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd62:	4604      	mov	r4, r0
 800dd64:	460f      	mov	r7, r1
 800dd66:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dd68:	2004      	movs	r0, #4
 800dd6a:	f7fa fecf 	bl	8008b0c <memp_malloc>
  if (timeout == NULL) {
 800dd6e:	b180      	cbz	r0, 800dd92 <sys_timeout_abs+0x32>
 800dd70:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800dd72:	2300      	movs	r3, #0
 800dd74:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800dd76:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800dd78:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800dd7a:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dd7c:	4b0f      	ldr	r3, [pc, #60]	; (800ddbc <sys_timeout_abs+0x5c>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	b173      	cbz	r3, 800dda0 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dd82:	685a      	ldr	r2, [r3, #4]
 800dd84:	1aa2      	subs	r2, r4, r2
 800dd86:	2a00      	cmp	r2, #0
 800dd88:	da0d      	bge.n	800dda6 <sys_timeout_abs+0x46>
    timeout->next = next_timeout;
 800dd8a:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 800dd8c:	4b0b      	ldr	r3, [pc, #44]	; (800ddbc <sys_timeout_abs+0x5c>)
 800dd8e:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800dd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dd92:	4b0b      	ldr	r3, [pc, #44]	; (800ddc0 <sys_timeout_abs+0x60>)
 800dd94:	22be      	movs	r2, #190	; 0xbe
 800dd96:	490b      	ldr	r1, [pc, #44]	; (800ddc4 <sys_timeout_abs+0x64>)
 800dd98:	480b      	ldr	r0, [pc, #44]	; (800ddc8 <sys_timeout_abs+0x68>)
 800dd9a:	f006 fa8d 	bl	80142b8 <app_debug_rtt_raw>
    return;
 800dd9e:	e7f7      	b.n	800dd90 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 800dda0:	4b06      	ldr	r3, [pc, #24]	; (800ddbc <sys_timeout_abs+0x5c>)
 800dda2:	6018      	str	r0, [r3, #0]
    return;
 800dda4:	e7f4      	b.n	800dd90 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dda6:	4619      	mov	r1, r3
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	b11b      	cbz	r3, 800ddb4 <sys_timeout_abs+0x54>
 800ddac:	685a      	ldr	r2, [r3, #4]
 800ddae:	1aa2      	subs	r2, r4, r2
 800ddb0:	2a00      	cmp	r2, #0
 800ddb2:	daf8      	bge.n	800dda6 <sys_timeout_abs+0x46>
        timeout->next = t->next;
 800ddb4:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 800ddb6:	600d      	str	r5, [r1, #0]
        break;
 800ddb8:	e7ea      	b.n	800dd90 <sys_timeout_abs+0x30>
 800ddba:	bf00      	nop
 800ddbc:	20000fc0 	.word	0x20000fc0
 800ddc0:	08018d7c 	.word	0x08018d7c
 800ddc4:	08018da8 	.word	0x08018da8
 800ddc8:	08016a38 	.word	0x08016a38

0800ddcc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ddcc:	b570      	push	{r4, r5, r6, lr}
 800ddce:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ddd0:	6843      	ldr	r3, [r0, #4]
 800ddd2:	4798      	blx	r3

  now = sys_now();
 800ddd4:	f006 faa2 	bl	801431c <sys_now>
 800ddd8:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ddda:	6826      	ldr	r6, [r4, #0]
 800dddc:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <lwip_cyclic_timer+0x28>)
 800ddde:	6818      	ldr	r0, [r3, #0]
 800dde0:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800dde2:	1b43      	subs	r3, r0, r5
 800dde4:	2b00      	cmp	r3, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dde6:	4622      	mov	r2, r4
 800dde8:	4903      	ldr	r1, [pc, #12]	; (800ddf8 <lwip_cyclic_timer+0x2c>)
 800ddea:	bfb8      	it	lt
 800ddec:	1970      	addlt	r0, r6, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ddee:	f7ff ffb7 	bl	800dd60 <sys_timeout_abs>
#endif
  }
}
 800ddf2:	bd70      	pop	{r4, r5, r6, pc}
 800ddf4:	20000fbc 	.word	0x20000fbc
 800ddf8:	0800ddcd 	.word	0x0800ddcd

0800ddfc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ddfc:	b570      	push	{r4, r5, r6, lr}
 800ddfe:	4604      	mov	r4, r0
 800de00:	460d      	mov	r5, r1
 800de02:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800de04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800de08:	d207      	bcs.n	800de1a <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800de0a:	f006 fa87 	bl	801431c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800de0e:	4632      	mov	r2, r6
 800de10:	4629      	mov	r1, r5
 800de12:	4420      	add	r0, r4
 800de14:	f7ff ffa4 	bl	800dd60 <sys_timeout_abs>
#endif
}
 800de18:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800de1a:	4b04      	ldr	r3, [pc, #16]	; (800de2c <sys_timeout+0x30>)
 800de1c:	f240 1229 	movw	r2, #297	; 0x129
 800de20:	4903      	ldr	r1, [pc, #12]	; (800de30 <sys_timeout+0x34>)
 800de22:	4804      	ldr	r0, [pc, #16]	; (800de34 <sys_timeout+0x38>)
 800de24:	f006 fa48 	bl	80142b8 <app_debug_rtt_raw>
 800de28:	e7ef      	b.n	800de0a <sys_timeout+0xe>
 800de2a:	bf00      	nop
 800de2c:	08018d7c 	.word	0x08018d7c
 800de30:	08018de8 	.word	0x08018de8
 800de34:	08016a38 	.word	0x08016a38

0800de38 <tcp_timer_needed>:
{
 800de38:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800de3a:	4b0a      	ldr	r3, [pc, #40]	; (800de64 <tcp_timer_needed+0x2c>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	b95b      	cbnz	r3, 800de58 <tcp_timer_needed+0x20>
 800de40:	4b09      	ldr	r3, [pc, #36]	; (800de68 <tcp_timer_needed+0x30>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	b14b      	cbz	r3, 800de5a <tcp_timer_needed+0x22>
    tcpip_tcp_timer_active = 1;
 800de46:	4b07      	ldr	r3, [pc, #28]	; (800de64 <tcp_timer_needed+0x2c>)
 800de48:	2201      	movs	r2, #1
 800de4a:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de4c:	2200      	movs	r2, #0
 800de4e:	4907      	ldr	r1, [pc, #28]	; (800de6c <tcp_timer_needed+0x34>)
 800de50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800de54:	f7ff ffd2 	bl	800ddfc <sys_timeout>
}
 800de58:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800de5a:	4b05      	ldr	r3, [pc, #20]	; (800de70 <tcp_timer_needed+0x38>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1f1      	bne.n	800de46 <tcp_timer_needed+0xe>
 800de62:	e7f9      	b.n	800de58 <tcp_timer_needed+0x20>
 800de64:	20000fc4 	.word	0x20000fc4
 800de68:	20004354 	.word	0x20004354
 800de6c:	0800de75 	.word	0x0800de75
 800de70:	20004364 	.word	0x20004364

0800de74 <tcpip_tcp_timer>:
{
 800de74:	b508      	push	{r3, lr}
  tcp_tmr();
 800de76:	f7fc fee1 	bl	800ac3c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800de7a:	4b09      	ldr	r3, [pc, #36]	; (800dea0 <tcpip_tcp_timer+0x2c>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	b133      	cbz	r3, 800de8e <tcpip_tcp_timer+0x1a>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de80:	2200      	movs	r2, #0
 800de82:	4908      	ldr	r1, [pc, #32]	; (800dea4 <tcpip_tcp_timer+0x30>)
 800de84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800de88:	f7ff ffb8 	bl	800ddfc <sys_timeout>
}
 800de8c:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800de8e:	4b06      	ldr	r3, [pc, #24]	; (800dea8 <tcpip_tcp_timer+0x34>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1f4      	bne.n	800de80 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800de96:	4b05      	ldr	r3, [pc, #20]	; (800deac <tcpip_tcp_timer+0x38>)
 800de98:	2200      	movs	r2, #0
 800de9a:	601a      	str	r2, [r3, #0]
}
 800de9c:	e7f6      	b.n	800de8c <tcpip_tcp_timer+0x18>
 800de9e:	bf00      	nop
 800dea0:	20004354 	.word	0x20004354
 800dea4:	0800de75 	.word	0x0800de75
 800dea8:	20004364 	.word	0x20004364
 800deac:	20000fc4 	.word	0x20000fc4

0800deb0 <sys_timeouts_init>:
{
 800deb0:	b508      	push	{r3, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800deb2:	4a03      	ldr	r2, [pc, #12]	; (800dec0 <sys_timeouts_init+0x10>)
 800deb4:	4903      	ldr	r1, [pc, #12]	; (800dec4 <sys_timeouts_init+0x14>)
 800deb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800deba:	f7ff ff9f 	bl	800ddfc <sys_timeout>
}
 800debe:	bd08      	pop	{r3, pc}
 800dec0:	08018e28 	.word	0x08018e28
 800dec4:	0800ddcd 	.word	0x0800ddcd

0800dec8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800dec8:	b510      	push	{r4, lr}
 800deca:	460c      	mov	r4, r1
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800decc:	4b0d      	ldr	r3, [pc, #52]	; (800df04 <sys_untimeout+0x3c>)
 800dece:	6819      	ldr	r1, [r3, #0]
 800ded0:	b1b1      	cbz	r1, 800df00 <sys_untimeout+0x38>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800ded2:	2200      	movs	r2, #0
 800ded4:	e007      	b.n	800dee6 <sys_untimeout+0x1e>
    if ((t->h == handler) && (t->arg == arg)) {
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 800ded6:	680a      	ldr	r2, [r1, #0]
 800ded8:	4b0a      	ldr	r3, [pc, #40]	; (800df04 <sys_untimeout+0x3c>)
 800deda:	601a      	str	r2, [r3, #0]
 800dedc:	e00d      	b.n	800defa <sys_untimeout+0x32>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800dede:	680b      	ldr	r3, [r1, #0]
 800dee0:	460a      	mov	r2, r1
 800dee2:	b16b      	cbz	r3, 800df00 <sys_untimeout+0x38>
 800dee4:	4619      	mov	r1, r3
    if ((t->h == handler) && (t->arg == arg)) {
 800dee6:	688b      	ldr	r3, [r1, #8]
 800dee8:	4283      	cmp	r3, r0
 800deea:	d1f8      	bne.n	800dede <sys_untimeout+0x16>
 800deec:	68cb      	ldr	r3, [r1, #12]
 800deee:	42a3      	cmp	r3, r4
 800def0:	d1f5      	bne.n	800dede <sys_untimeout+0x16>
      if (prev_t == NULL) {
 800def2:	2a00      	cmp	r2, #0
 800def4:	d0ef      	beq.n	800ded6 <sys_untimeout+0xe>
      } else {
        prev_t->next = t->next;
 800def6:	680b      	ldr	r3, [r1, #0]
 800def8:	6013      	str	r3, [r2, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800defa:	2004      	movs	r0, #4
 800defc:	f7fa fe36 	bl	8008b6c <memp_free>
      return;
    }
  }
  return;
}
 800df00:	bd10      	pop	{r4, pc}
 800df02:	bf00      	nop
 800df04:	20000fc0 	.word	0x20000fc0

0800df08 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800df08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800df0c:	f006 fa06 	bl	801431c <sys_now>
 800df10:	4606      	mov	r6, r0
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800df12:	4f11      	ldr	r7, [pc, #68]	; (800df58 <sys_check_timeouts+0x50>)

    tmptimeout = next_timeout;
 800df14:	4c11      	ldr	r4, [pc, #68]	; (800df5c <sys_check_timeouts+0x54>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800df16:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800df60 <sys_check_timeouts+0x58>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800df1a:	f04f 0804 	mov.w	r8, #4
 800df1e:	e012      	b.n	800df46 <sys_check_timeouts+0x3e>
    PBUF_CHECK_FREE_OOSEQ();
 800df20:	f7fb f854 	bl	8008fcc <pbuf_free_ooseq>
    tmptimeout = next_timeout;
 800df24:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 800df26:	b1a9      	cbz	r1, 800df54 <sys_check_timeouts+0x4c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800df28:	684b      	ldr	r3, [r1, #4]
 800df2a:	1af2      	subs	r2, r6, r3
 800df2c:	2a00      	cmp	r2, #0
 800df2e:	db11      	blt.n	800df54 <sys_check_timeouts+0x4c>
    next_timeout = tmptimeout->next;
 800df30:	680a      	ldr	r2, [r1, #0]
 800df32:	6022      	str	r2, [r4, #0]
    handler = tmptimeout->h;
 800df34:	688d      	ldr	r5, [r1, #8]
    arg = tmptimeout->arg;
 800df36:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800df3a:	f8c9 3000 	str.w	r3, [r9]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800df3e:	4640      	mov	r0, r8
 800df40:	f7fa fe14 	bl	8008b6c <memp_free>
    if (handler != NULL) {
 800df44:	b91d      	cbnz	r5, 800df4e <sys_check_timeouts+0x46>
    PBUF_CHECK_FREE_OOSEQ();
 800df46:	783b      	ldrb	r3, [r7, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d0eb      	beq.n	800df24 <sys_check_timeouts+0x1c>
 800df4c:	e7e8      	b.n	800df20 <sys_check_timeouts+0x18>
      handler(arg);
 800df4e:	4650      	mov	r0, sl
 800df50:	47a8      	blx	r5
 800df52:	e7f8      	b.n	800df46 <sys_check_timeouts+0x3e>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800df54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df58:	2000434c 	.word	0x2000434c
 800df5c:	20000fc0 	.word	0x20000fc0
 800df60:	20000fbc 	.word	0x20000fbc

0800df64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800df64:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800df66:	f006 f9cf 	bl	8014308 <sys_rand>
 800df6a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800df6e:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800df72:	4b01      	ldr	r3, [pc, #4]	; (800df78 <udp_init+0x14>)
 800df74:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800df76:	bd08      	pop	{r3, pc}
 800df78:	2000001a 	.word	0x2000001a

0800df7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800df7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df80:	b085      	sub	sp, #20
 800df82:	460e      	mov	r6, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800df84:	4680      	mov	r8, r0
 800df86:	b308      	cbz	r0, 800dfcc <udp_input+0x50>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800df88:	b33e      	cbz	r6, 800dfda <udp_input+0x5e>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800df8a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800df8e:	2b07      	cmp	r3, #7
 800df90:	d92a      	bls.n	800dfe8 <udp_input+0x6c>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800df92:	f8d8 b004 	ldr.w	fp, [r8, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800df96:	4b73      	ldr	r3, [pc, #460]	; (800e164 <udp_input+0x1e8>)
 800df98:	6819      	ldr	r1, [r3, #0]
 800df9a:	6958      	ldr	r0, [r3, #20]
 800df9c:	f000 fe77 	bl	800ec8e <ip4_addr_isbroadcast_u32>
 800dfa0:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dfa2:	f8bb 0000 	ldrh.w	r0, [fp]
 800dfa6:	f7f9 fc3b 	bl	8007820 <lwip_htons>
 800dfaa:	9003      	str	r0, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800dfac:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 800dfb0:	f7f9 fc36 	bl	8007820 <lwip_htons>
 800dfb4:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfb6:	4b6c      	ldr	r3, [pc, #432]	; (800e168 <udp_input+0x1ec>)
 800dfb8:	681c      	ldr	r4, [r3, #0]
 800dfba:	2c00      	cmp	r4, #0
 800dfbc:	d07e      	beq.n	800e0bc <udp_input+0x140>
  uncon_pcb = NULL;
 800dfbe:	f04f 0a00 	mov.w	sl, #0
  prev = NULL;
 800dfc2:	f8cd a008 	str.w	sl, [sp, #8]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800dfc6:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800e164 <udp_input+0x1e8>
 800dfca:	e02d      	b.n	800e028 <udp_input+0xac>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dfcc:	4b67      	ldr	r3, [pc, #412]	; (800e16c <udp_input+0x1f0>)
 800dfce:	22cf      	movs	r2, #207	; 0xcf
 800dfd0:	4967      	ldr	r1, [pc, #412]	; (800e170 <udp_input+0x1f4>)
 800dfd2:	4868      	ldr	r0, [pc, #416]	; (800e174 <udp_input+0x1f8>)
 800dfd4:	f006 f970 	bl	80142b8 <app_debug_rtt_raw>
 800dfd8:	e7d6      	b.n	800df88 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dfda:	4b64      	ldr	r3, [pc, #400]	; (800e16c <udp_input+0x1f0>)
 800dfdc:	22d0      	movs	r2, #208	; 0xd0
 800dfde:	4966      	ldr	r1, [pc, #408]	; (800e178 <udp_input+0x1fc>)
 800dfe0:	4864      	ldr	r0, [pc, #400]	; (800e174 <udp_input+0x1f8>)
 800dfe2:	f006 f969 	bl	80142b8 <app_debug_rtt_raw>
 800dfe6:	e7d0      	b.n	800df8a <udp_input+0xe>
    pbuf_free(p);
 800dfe8:	4640      	mov	r0, r8
 800dfea:	f7fb f871 	bl	80090d0 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dfee:	b005      	add	sp, #20
 800dff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dff4:	4b5d      	ldr	r3, [pc, #372]	; (800e16c <udp_input+0x1f0>)
 800dff6:	2288      	movs	r2, #136	; 0x88
 800dff8:	4960      	ldr	r1, [pc, #384]	; (800e17c <udp_input+0x200>)
 800dffa:	485e      	ldr	r0, [pc, #376]	; (800e174 <udp_input+0x1f8>)
 800dffc:	f006 f95c 	bl	80142b8 <app_debug_rtt_raw>
 800e000:	e017      	b.n	800e032 <udp_input+0xb6>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	b11b      	cbz	r3, 800e00e <udp_input+0x92>
 800e006:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d107      	bne.n	800e01e <udp_input+0xa2>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e00e:	7d23      	ldrb	r3, [r4, #20]
 800e010:	f013 0f04 	tst.w	r3, #4
 800e014:	d026      	beq.n	800e064 <udp_input+0xe8>
      if ((pcb->remote_port == src) &&
 800e016:	8b23      	ldrh	r3, [r4, #24]
 800e018:	9a03      	ldr	r2, [sp, #12]
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d03c      	beq.n	800e098 <udp_input+0x11c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e01e:	6923      	ldr	r3, [r4, #16]
 800e020:	9402      	str	r4, [sp, #8]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d047      	beq.n	800e0b6 <udp_input+0x13a>
 800e026:	461c      	mov	r4, r3
    if ((pcb->local_port == dest) &&
 800e028:	8ae3      	ldrh	r3, [r4, #22]
 800e02a:	42ab      	cmp	r3, r5
 800e02c:	d1f7      	bne.n	800e01e <udp_input+0xa2>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e02e:	2e00      	cmp	r6, #0
 800e030:	d0e0      	beq.n	800dff4 <udp_input+0x78>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e032:	7a22      	ldrb	r2, [r4, #8]
 800e034:	b13a      	cbz	r2, 800e046 <udp_input+0xca>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e036:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e03a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e03e:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e040:	b2db      	uxtb	r3, r3
 800e042:	429a      	cmp	r2, r3
 800e044:	d1eb      	bne.n	800e01e <udp_input+0xa2>
    if (broadcast != 0) {
 800e046:	2f00      	cmp	r7, #0
 800e048:	d0db      	beq.n	800e002 <udp_input+0x86>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e04a:	6823      	ldr	r3, [r4, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d0de      	beq.n	800e00e <udp_input+0x92>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e050:	f8d9 2014 	ldr.w	r2, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e054:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e058:	d0d9      	beq.n	800e00e <udp_input+0x92>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e05a:	4053      	eors	r3, r2
 800e05c:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e05e:	4213      	tst	r3, r2
 800e060:	d1dd      	bne.n	800e01e <udp_input+0xa2>
 800e062:	e7d4      	b.n	800e00e <udp_input+0x92>
        if (uncon_pcb == NULL) {
 800e064:	f1ba 0f00 	cmp.w	sl, #0
 800e068:	d014      	beq.n	800e094 <udp_input+0x118>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e06a:	b127      	cbz	r7, 800e076 <udp_input+0xfa>
 800e06c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e074:	d004      	beq.n	800e080 <udp_input+0x104>
        else if (!ip_addr_isany(&pcb->local_ip)) {
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	bf18      	it	ne
 800e07c:	46a2      	movne	sl, r4
 800e07e:	e7ca      	b.n	800e016 <udp_input+0x9a>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e080:	6873      	ldr	r3, [r6, #4]
 800e082:	f8da 2000 	ldr.w	r2, [sl]
 800e086:	429a      	cmp	r2, r3
 800e088:	d0c5      	beq.n	800e016 <udp_input+0x9a>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e08a:	6822      	ldr	r2, [r4, #0]
 800e08c:	4293      	cmp	r3, r2
 800e08e:	bf08      	it	eq
 800e090:	46a2      	moveq	sl, r4
 800e092:	e7c0      	b.n	800e016 <udp_input+0x9a>
 800e094:	46a2      	mov	sl, r4
 800e096:	e7be      	b.n	800e016 <udp_input+0x9a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e098:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800e09a:	b11b      	cbz	r3, 800e0a4 <udp_input+0x128>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e09c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d1bc      	bne.n	800e01e <udp_input+0xa2>
        if (prev != NULL) {
 800e0a4:	9a02      	ldr	r2, [sp, #8]
 800e0a6:	b17a      	cbz	r2, 800e0c8 <udp_input+0x14c>
          prev->next = pcb->next;
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	6113      	str	r3, [r2, #16]
          pcb->next = udp_pcbs;
 800e0ac:	4b2e      	ldr	r3, [pc, #184]	; (800e168 <udp_input+0x1ec>)
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	6122      	str	r2, [r4, #16]
          udp_pcbs = pcb;
 800e0b2:	601c      	str	r4, [r3, #0]
 800e0b4:	e008      	b.n	800e0c8 <udp_input+0x14c>
  if (pcb != NULL) {
 800e0b6:	f1ba 0f00 	cmp.w	sl, #0
 800e0ba:	d122      	bne.n	800e102 <udp_input+0x186>
  if (for_us) {
 800e0bc:	6872      	ldr	r2, [r6, #4]
 800e0be:	4b29      	ldr	r3, [pc, #164]	; (800e164 <udp_input+0x1e8>)
 800e0c0:	695b      	ldr	r3, [r3, #20]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d149      	bne.n	800e15a <udp_input+0x1de>
 800e0c6:	2400      	movs	r4, #0
        if (udphdr->chksum != 0) {
 800e0c8:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 800e0cc:	b14b      	cbz	r3, 800e0e2 <udp_input+0x166>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800e0ce:	4b2c      	ldr	r3, [pc, #176]	; (800e180 <udp_input+0x204>)
 800e0d0:	1d1a      	adds	r2, r3, #4
 800e0d2:	9200      	str	r2, [sp, #0]
 800e0d4:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800e0d8:	2111      	movs	r1, #17
 800e0da:	4640      	mov	r0, r8
 800e0dc:	f7fa f98e 	bl	80083fc <ip_chksum_pseudo>
 800e0e0:	b988      	cbnz	r0, 800e106 <udp_input+0x18a>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e0e2:	2108      	movs	r1, #8
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	f7fa ffb3 	bl	8009050 <pbuf_remove_header>
 800e0ea:	b980      	cbnz	r0, 800e10e <udp_input+0x192>
    if (pcb != NULL) {
 800e0ec:	b1f4      	cbz	r4, 800e12c <udp_input+0x1b0>
      if (pcb->recv != NULL) {
 800e0ee:	69e5      	ldr	r5, [r4, #28]
 800e0f0:	b1c5      	cbz	r5, 800e124 <udp_input+0x1a8>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e0f2:	6a20      	ldr	r0, [r4, #32]
 800e0f4:	9b03      	ldr	r3, [sp, #12]
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	4b21      	ldr	r3, [pc, #132]	; (800e180 <udp_input+0x204>)
 800e0fa:	4642      	mov	r2, r8
 800e0fc:	4621      	mov	r1, r4
 800e0fe:	47a8      	blx	r5
 800e100:	e775      	b.n	800dfee <udp_input+0x72>
 800e102:	4654      	mov	r4, sl
 800e104:	e7e0      	b.n	800e0c8 <udp_input+0x14c>
  pbuf_free(p);
 800e106:	4640      	mov	r0, r8
 800e108:	f7fa ffe2 	bl	80090d0 <pbuf_free>
 800e10c:	e76f      	b.n	800dfee <udp_input+0x72>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e10e:	4b17      	ldr	r3, [pc, #92]	; (800e16c <udp_input+0x1f0>)
 800e110:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e114:	491b      	ldr	r1, [pc, #108]	; (800e184 <udp_input+0x208>)
 800e116:	4817      	ldr	r0, [pc, #92]	; (800e174 <udp_input+0x1f8>)
 800e118:	f006 f8ce 	bl	80142b8 <app_debug_rtt_raw>
      pbuf_free(p);
 800e11c:	4640      	mov	r0, r8
 800e11e:	f7fa ffd7 	bl	80090d0 <pbuf_free>
      goto end;
 800e122:	e764      	b.n	800dfee <udp_input+0x72>
        pbuf_free(p);
 800e124:	4640      	mov	r0, r8
 800e126:	f7fa ffd3 	bl	80090d0 <pbuf_free>
        goto end;
 800e12a:	e760      	b.n	800dfee <udp_input+0x72>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e12c:	b92f      	cbnz	r7, 800e13a <udp_input+0x1be>
 800e12e:	4b0d      	ldr	r3, [pc, #52]	; (800e164 <udp_input+0x1e8>)
 800e130:	695b      	ldr	r3, [r3, #20]
 800e132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e136:	2be0      	cmp	r3, #224	; 0xe0
 800e138:	d103      	bne.n	800e142 <udp_input+0x1c6>
      pbuf_free(p);
 800e13a:	4640      	mov	r0, r8
 800e13c:	f7fa ffc8 	bl	80090d0 <pbuf_free>
 800e140:	e755      	b.n	800dfee <udp_input+0x72>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e142:	4b08      	ldr	r3, [pc, #32]	; (800e164 <udp_input+0x1e8>)
 800e144:	8999      	ldrh	r1, [r3, #12]
 800e146:	3108      	adds	r1, #8
 800e148:	b209      	sxth	r1, r1
 800e14a:	4640      	mov	r0, r8
 800e14c:	f7fa ffb4 	bl	80090b8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e150:	2103      	movs	r1, #3
 800e152:	4640      	mov	r0, r8
 800e154:	f000 fb76 	bl	800e844 <icmp_dest_unreach>
 800e158:	e7ef      	b.n	800e13a <udp_input+0x1be>
    pbuf_free(p);
 800e15a:	4640      	mov	r0, r8
 800e15c:	f7fa ffb8 	bl	80090d0 <pbuf_free>
  PERF_STOP("udp_input");
 800e160:	e745      	b.n	800dfee <udp_input+0x72>
 800e162:	bf00      	nop
 800e164:	20002d00 	.word	0x20002d00
 800e168:	2000436c 	.word	0x2000436c
 800e16c:	08018e30 	.word	0x08018e30
 800e170:	08018e58 	.word	0x08018e58
 800e174:	08016a38 	.word	0x08016a38
 800e178:	08018e70 	.word	0x08018e70
 800e17c:	08018e8c 	.word	0x08018e8c
 800e180:	20002d10 	.word	0x20002d10
 800e184:	08018eb4 	.word	0x08018eb4

0800e188 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800e18a:	4b41      	ldr	r3, [pc, #260]	; (800e290 <udp_bind+0x108>)
 800e18c:	2900      	cmp	r1, #0
 800e18e:	bf08      	it	eq
 800e190:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e192:	b168      	cbz	r0, 800e1b0 <udp_bind+0x28>
 800e194:	4604      	mov	r4, r0
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e196:	4b3f      	ldr	r3, [pc, #252]	; (800e294 <udp_bind+0x10c>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d066      	beq.n	800e26c <udp_bind+0xe4>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e19e:	4298      	cmp	r0, r3
 800e1a0:	d067      	beq.n	800e272 <udp_bind+0xea>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	6900      	ldr	r0, [r0, #16]
 800e1a6:	b168      	cbz	r0, 800e1c4 <udp_bind+0x3c>
    if (pcb == ipcb) {
 800e1a8:	4284      	cmp	r4, r0
 800e1aa:	d1fb      	bne.n	800e1a4 <udp_bind+0x1c>
      rebind = 1;
 800e1ac:	2601      	movs	r6, #1
 800e1ae:	e00a      	b.n	800e1c6 <udp_bind+0x3e>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1b0:	4b39      	ldr	r3, [pc, #228]	; (800e298 <udp_bind+0x110>)
 800e1b2:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e1b6:	4939      	ldr	r1, [pc, #228]	; (800e29c <udp_bind+0x114>)
 800e1b8:	4839      	ldr	r0, [pc, #228]	; (800e2a0 <udp_bind+0x118>)
 800e1ba:	f006 f87d 	bl	80142b8 <app_debug_rtt_raw>
 800e1be:	f06f 000f 	mvn.w	r0, #15
 800e1c2:	e060      	b.n	800e286 <udp_bind+0xfe>
  rebind = 0;
 800e1c4:	2600      	movs	r6, #0
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e1c6:	2a00      	cmp	r2, #0
 800e1c8:	d133      	bne.n	800e232 <udp_bind+0xaa>
 800e1ca:	4a36      	ldr	r2, [pc, #216]	; (800e2a4 <udp_bind+0x11c>)
 800e1cc:	8815      	ldrh	r5, [r2, #0]
  rebind = 0;
 800e1ce:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e1d2:	f64f 7cff 	movw	ip, #65535	; 0xffff
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e1d6:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e1da:	4565      	cmp	r5, ip
 800e1dc:	bf1a      	itte	ne
 800e1de:	3501      	addne	r5, #1
 800e1e0:	b2ad      	uxthne	r5, r5
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e1e2:	4675      	moveq	r5, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1e4:	b1e3      	cbz	r3, 800e220 <udp_bind+0x98>
 800e1e6:	461a      	mov	r2, r3
    if (pcb->local_port == udp_port) {
 800e1e8:	8ad0      	ldrh	r0, [r2, #22]
 800e1ea:	42a8      	cmp	r0, r5
 800e1ec:	d00f      	beq.n	800e20e <udp_bind+0x86>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1ee:	6912      	ldr	r2, [r2, #16]
 800e1f0:	2a00      	cmp	r2, #0
 800e1f2:	d1f9      	bne.n	800e1e8 <udp_bind+0x60>
 800e1f4:	4b2b      	ldr	r3, [pc, #172]	; (800e2a4 <udp_bind+0x11c>)
 800e1f6:	801d      	strh	r5, [r3, #0]
  return udp_port;
 800e1f8:	4b2a      	ldr	r3, [pc, #168]	; (800e2a4 <udp_bind+0x11c>)
 800e1fa:	881a      	ldrh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e1fc:	2900      	cmp	r1, #0
 800e1fe:	d02d      	beq.n	800e25c <udp_bind+0xd4>
 800e200:	680b      	ldr	r3, [r1, #0]
 800e202:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800e204:	82e2      	strh	r2, [r4, #22]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e206:	2e00      	cmp	r6, #0
 800e208:	d038      	beq.n	800e27c <udp_bind+0xf4>
    udp_pcbs = pcb;
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e20a:	2000      	movs	r0, #0
 800e20c:	e03b      	b.n	800e286 <udp_bind+0xfe>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e20e:	3f01      	subs	r7, #1
 800e210:	b2bf      	uxth	r7, r7
 800e212:	2f00      	cmp	r7, #0
 800e214:	d1e1      	bne.n	800e1da <udp_bind+0x52>
 800e216:	4b23      	ldr	r3, [pc, #140]	; (800e2a4 <udp_bind+0x11c>)
 800e218:	801d      	strh	r5, [r3, #0]
      return ERR_USE;
 800e21a:	f06f 0007 	mvn.w	r0, #7
 800e21e:	e032      	b.n	800e286 <udp_bind+0xfe>
 800e220:	4b20      	ldr	r3, [pc, #128]	; (800e2a4 <udp_bind+0x11c>)
 800e222:	801d      	strh	r5, [r3, #0]
 800e224:	e7e8      	b.n	800e1f8 <udp_bind+0x70>
          if ((ipcb->local_port == port) &&
 800e226:	8ad8      	ldrh	r0, [r3, #22]
 800e228:	4290      	cmp	r0, r2
 800e22a:	d00d      	beq.n	800e248 <udp_bind+0xc0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e22c:	691b      	ldr	r3, [r3, #16]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d0e4      	beq.n	800e1fc <udp_bind+0x74>
      if (pcb != ipcb) {
 800e232:	429c      	cmp	r4, r3
 800e234:	d0fa      	beq.n	800e22c <udp_bind+0xa4>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 800e236:	7a60      	ldrb	r0, [r4, #9]
 800e238:	f010 0f04 	tst.w	r0, #4
 800e23c:	d0f3      	beq.n	800e226 <udp_bind+0x9e>
 800e23e:	7a58      	ldrb	r0, [r3, #9]
 800e240:	f010 0f04 	tst.w	r0, #4
 800e244:	d1f2      	bne.n	800e22c <udp_bind+0xa4>
 800e246:	e7ee      	b.n	800e226 <udp_bind+0x9e>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e248:	681d      	ldr	r5, [r3, #0]
 800e24a:	6808      	ldr	r0, [r1, #0]
          if ((ipcb->local_port == port) &&
 800e24c:	4285      	cmp	r5, r0
 800e24e:	d007      	beq.n	800e260 <udp_bind+0xd8>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e250:	b148      	cbz	r0, 800e266 <udp_bind+0xde>
              ip_addr_isany(&ipcb->local_ip))) {
 800e252:	2d00      	cmp	r5, #0
 800e254:	d1ea      	bne.n	800e22c <udp_bind+0xa4>
            return ERR_USE;
 800e256:	f06f 0007 	mvn.w	r0, #7
 800e25a:	e014      	b.n	800e286 <udp_bind+0xfe>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e25c:	2300      	movs	r3, #0
 800e25e:	e7d0      	b.n	800e202 <udp_bind+0x7a>
            return ERR_USE;
 800e260:	f06f 0007 	mvn.w	r0, #7
 800e264:	e00f      	b.n	800e286 <udp_bind+0xfe>
 800e266:	f06f 0007 	mvn.w	r0, #7
 800e26a:	e00c      	b.n	800e286 <udp_bind+0xfe>
  if (port == 0) {
 800e26c:	b962      	cbnz	r2, 800e288 <udp_bind+0x100>
  rebind = 0;
 800e26e:	2600      	movs	r6, #0
 800e270:	e7ab      	b.n	800e1ca <udp_bind+0x42>
      rebind = 1;
 800e272:	2601      	movs	r6, #1
 800e274:	e7a7      	b.n	800e1c6 <udp_bind+0x3e>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e276:	2300      	movs	r3, #0
 800e278:	6023      	str	r3, [r4, #0]
  pcb->local_port = port;
 800e27a:	82e2      	strh	r2, [r4, #22]
    pcb->next = udp_pcbs;
 800e27c:	4b05      	ldr	r3, [pc, #20]	; (800e294 <udp_bind+0x10c>)
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	6122      	str	r2, [r4, #16]
    udp_pcbs = pcb;
 800e282:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800e284:	2000      	movs	r0, #0
}
 800e286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e288:	2900      	cmp	r1, #0
 800e28a:	d0f4      	beq.n	800e276 <udp_bind+0xee>
  rebind = 0;
 800e28c:	2600      	movs	r6, #0
 800e28e:	e7b7      	b.n	800e200 <udp_bind+0x78>
 800e290:	08019224 	.word	0x08019224
 800e294:	2000436c 	.word	0x2000436c
 800e298:	08018e30 	.word	0x08018e30
 800e29c:	08018ed0 	.word	0x08018ed0
 800e2a0:	08016a38 	.word	0x08016a38
 800e2a4:	2000001a 	.word	0x2000001a

0800e2a8 <udp_sendto_if_src_chksum>:
{
 800e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ac:	b085      	sub	sp, #20
 800e2ae:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800e2b2:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d073      	beq.n	800e3a2 <udp_sendto_if_src_chksum+0xfa>
 800e2ba:	460c      	mov	r4, r1
 800e2bc:	4690      	mov	r8, r2
 800e2be:	469a      	mov	sl, r3
 800e2c0:	4605      	mov	r5, r0
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e2c2:	2900      	cmp	r1, #0
 800e2c4:	d077      	beq.n	800e3b6 <udp_sendto_if_src_chksum+0x10e>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e2c6:	2a00      	cmp	r2, #0
 800e2c8:	d07f      	beq.n	800e3ca <udp_sendto_if_src_chksum+0x122>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e2ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f000 8086 	beq.w	800e3de <udp_sendto_if_src_chksum+0x136>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e2d2:	f1b9 0f00 	cmp.w	r9, #0
 800e2d6:	f000 808c 	beq.w	800e3f2 <udp_sendto_if_src_chksum+0x14a>
  if (pcb->local_port == 0) {
 800e2da:	8ac3      	ldrh	r3, [r0, #22]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f000 8092 	beq.w	800e406 <udp_sendto_if_src_chksum+0x15e>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e2e2:	8922      	ldrh	r2, [r4, #8]
 800e2e4:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	f200 80b6 	bhi.w	800e45a <udp_sendto_if_src_chksum+0x1b2>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e2ee:	2108      	movs	r1, #8
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f7fa fea7 	bl	8009044 <pbuf_add_header>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	f040 808e 	bne.w	800e418 <udp_sendto_if_src_chksum+0x170>
    q = p;
 800e2fc:	4626      	mov	r6, r4
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e2fe:	8973      	ldrh	r3, [r6, #10]
 800e300:	2b07      	cmp	r3, #7
 800e302:	f240 8099 	bls.w	800e438 <udp_sendto_if_src_chksum+0x190>
  udphdr = (struct udp_hdr *)q->payload;
 800e306:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800e308:	8ae8      	ldrh	r0, [r5, #22]
 800e30a:	f7f9 fa89 	bl	8007820 <lwip_htons>
 800e30e:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e310:	4650      	mov	r0, sl
 800e312:	f7f9 fa85 	bl	8007820 <lwip_htons>
 800e316:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 800e318:	2300      	movs	r3, #0
 800e31a:	71bb      	strb	r3, [r7, #6]
 800e31c:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800e31e:	8930      	ldrh	r0, [r6, #8]
 800e320:	f7f9 fa7e 	bl	8007820 <lwip_htons>
 800e324:	80b8      	strh	r0, [r7, #4]
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800e326:	7d2b      	ldrb	r3, [r5, #20]
 800e328:	f013 0f01 	tst.w	r3, #1
 800e32c:	d11c      	bne.n	800e368 <udp_sendto_if_src_chksum+0xc0>
        if (have_chksum) {
 800e32e:	f1bb 0f00 	cmp.w	fp, #0
 800e332:	f000 8089 	beq.w	800e448 <udp_sendto_if_src_chksum+0x1a0>
          udpchksum = ip_chksum_pseudo_partial(q, IP_PROTO_UDP,
 800e336:	8932      	ldrh	r2, [r6, #8]
 800e338:	f8cd 8004 	str.w	r8, [sp, #4]
 800e33c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	2308      	movs	r3, #8
 800e342:	2111      	movs	r1, #17
 800e344:	4630      	mov	r0, r6
 800e346:	f7fa f8d1 	bl	80084ec <ip_chksum_pseudo_partial>
          acc = udpchksum + (u16_t)~(chksum);
 800e34a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e34e:	43db      	mvns	r3, r3
 800e350:	b29b      	uxth	r3, r3
 800e352:	4403      	add	r3, r0
          udpchksum = FOLD_U32T(acc);
 800e354:	b298      	uxth	r0, r3
 800e356:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800e35a:	b280      	uxth	r0, r0
        udphdr->chksum = udpchksum;
 800e35c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e360:	2800      	cmp	r0, #0
 800e362:	bf08      	it	eq
 800e364:	4618      	moveq	r0, r3
 800e366:	80f8      	strh	r0, [r7, #6]
  ttl = pcb->ttl;
 800e368:	7aeb      	ldrb	r3, [r5, #11]
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
 800e36a:	f105 020c 	add.w	r2, r5, #12
 800e36e:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e372:	f8cd 9008 	str.w	r9, [sp, #8]
 800e376:	2211      	movs	r2, #17
 800e378:	9201      	str	r2, [sp, #4]
 800e37a:	7aaa      	ldrb	r2, [r5, #10]
 800e37c:	9200      	str	r2, [sp, #0]
 800e37e:	4642      	mov	r2, r8
 800e380:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e382:	4630      	mov	r0, r6
 800e384:	f000 fbde 	bl	800eb44 <ip4_output_if_src>
 800e388:	4607      	mov	r7, r0
  NETIF_RESET_HINTS(netif);
 800e38a:	2300      	movs	r3, #0
 800e38c:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
  if (q != p) {
 800e390:	42a6      	cmp	r6, r4
 800e392:	d002      	beq.n	800e39a <udp_sendto_if_src_chksum+0xf2>
    pbuf_free(q);
 800e394:	4630      	mov	r0, r6
 800e396:	f7fa fe9b 	bl	80090d0 <pbuf_free>
}
 800e39a:	4638      	mov	r0, r7
 800e39c:	b005      	add	sp, #20
 800e39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e3a2:	4b31      	ldr	r3, [pc, #196]	; (800e468 <udp_sendto_if_src_chksum+0x1c0>)
 800e3a4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e3a8:	4930      	ldr	r1, [pc, #192]	; (800e46c <udp_sendto_if_src_chksum+0x1c4>)
 800e3aa:	4831      	ldr	r0, [pc, #196]	; (800e470 <udp_sendto_if_src_chksum+0x1c8>)
 800e3ac:	f005 ff84 	bl	80142b8 <app_debug_rtt_raw>
 800e3b0:	f06f 070f 	mvn.w	r7, #15
 800e3b4:	e7f1      	b.n	800e39a <udp_sendto_if_src_chksum+0xf2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e3b6:	4b2c      	ldr	r3, [pc, #176]	; (800e468 <udp_sendto_if_src_chksum+0x1c0>)
 800e3b8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e3bc:	492d      	ldr	r1, [pc, #180]	; (800e474 <udp_sendto_if_src_chksum+0x1cc>)
 800e3be:	482c      	ldr	r0, [pc, #176]	; (800e470 <udp_sendto_if_src_chksum+0x1c8>)
 800e3c0:	f005 ff7a 	bl	80142b8 <app_debug_rtt_raw>
 800e3c4:	f06f 070f 	mvn.w	r7, #15
 800e3c8:	e7e7      	b.n	800e39a <udp_sendto_if_src_chksum+0xf2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e3ca:	4b27      	ldr	r3, [pc, #156]	; (800e468 <udp_sendto_if_src_chksum+0x1c0>)
 800e3cc:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e3d0:	4929      	ldr	r1, [pc, #164]	; (800e478 <udp_sendto_if_src_chksum+0x1d0>)
 800e3d2:	4827      	ldr	r0, [pc, #156]	; (800e470 <udp_sendto_if_src_chksum+0x1c8>)
 800e3d4:	f005 ff70 	bl	80142b8 <app_debug_rtt_raw>
 800e3d8:	f06f 070f 	mvn.w	r7, #15
 800e3dc:	e7dd      	b.n	800e39a <udp_sendto_if_src_chksum+0xf2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e3de:	4b22      	ldr	r3, [pc, #136]	; (800e468 <udp_sendto_if_src_chksum+0x1c0>)
 800e3e0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e3e4:	4925      	ldr	r1, [pc, #148]	; (800e47c <udp_sendto_if_src_chksum+0x1d4>)
 800e3e6:	4822      	ldr	r0, [pc, #136]	; (800e470 <udp_sendto_if_src_chksum+0x1c8>)
 800e3e8:	f005 ff66 	bl	80142b8 <app_debug_rtt_raw>
 800e3ec:	f06f 070f 	mvn.w	r7, #15
 800e3f0:	e7d3      	b.n	800e39a <udp_sendto_if_src_chksum+0xf2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e3f2:	4b1d      	ldr	r3, [pc, #116]	; (800e468 <udp_sendto_if_src_chksum+0x1c0>)
 800e3f4:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e3f8:	4921      	ldr	r1, [pc, #132]	; (800e480 <udp_sendto_if_src_chksum+0x1d8>)
 800e3fa:	481d      	ldr	r0, [pc, #116]	; (800e470 <udp_sendto_if_src_chksum+0x1c8>)
 800e3fc:	f005 ff5c 	bl	80142b8 <app_debug_rtt_raw>
 800e400:	f06f 070f 	mvn.w	r7, #15
 800e404:	e7c9      	b.n	800e39a <udp_sendto_if_src_chksum+0xf2>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e406:	2200      	movs	r2, #0
 800e408:	4601      	mov	r1, r0
 800e40a:	f7ff febd 	bl	800e188 <udp_bind>
    if (err != ERR_OK) {
 800e40e:	4607      	mov	r7, r0
 800e410:	2800      	cmp	r0, #0
 800e412:	f43f af66 	beq.w	800e2e2 <udp_sendto_if_src_chksum+0x3a>
 800e416:	e7c0      	b.n	800e39a <udp_sendto_if_src_chksum+0xf2>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e418:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e41c:	2108      	movs	r1, #8
 800e41e:	2024      	movs	r0, #36	; 0x24
 800e420:	f7fa fec0 	bl	80091a4 <pbuf_alloc>
    if (q == NULL) {
 800e424:	4606      	mov	r6, r0
 800e426:	b1d8      	cbz	r0, 800e460 <udp_sendto_if_src_chksum+0x1b8>
    if (p->tot_len != 0) {
 800e428:	8923      	ldrh	r3, [r4, #8]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f43f af67 	beq.w	800e2fe <udp_sendto_if_src_chksum+0x56>
      pbuf_chain(q, p);
 800e430:	4621      	mov	r1, r4
 800e432:	f7fb f809 	bl	8009448 <pbuf_chain>
 800e436:	e762      	b.n	800e2fe <udp_sendto_if_src_chksum+0x56>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e438:	4b0b      	ldr	r3, [pc, #44]	; (800e468 <udp_sendto_if_src_chksum+0x1c0>)
 800e43a:	f240 320d 	movw	r2, #781	; 0x30d
 800e43e:	4911      	ldr	r1, [pc, #68]	; (800e484 <udp_sendto_if_src_chksum+0x1dc>)
 800e440:	480b      	ldr	r0, [pc, #44]	; (800e470 <udp_sendto_if_src_chksum+0x1c8>)
 800e442:	f005 ff39 	bl	80142b8 <app_debug_rtt_raw>
 800e446:	e75e      	b.n	800e306 <udp_sendto_if_src_chksum+0x5e>
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800e448:	8932      	ldrh	r2, [r6, #8]
 800e44a:	f8cd 8000 	str.w	r8, [sp]
 800e44e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e450:	2111      	movs	r1, #17
 800e452:	4630      	mov	r0, r6
 800e454:	f7f9 ffd2 	bl	80083fc <ip_chksum_pseudo>
 800e458:	e780      	b.n	800e35c <udp_sendto_if_src_chksum+0xb4>
    return ERR_MEM;
 800e45a:	f04f 37ff 	mov.w	r7, #4294967295
 800e45e:	e79c      	b.n	800e39a <udp_sendto_if_src_chksum+0xf2>
      return ERR_MEM;
 800e460:	f04f 37ff 	mov.w	r7, #4294967295
 800e464:	e799      	b.n	800e39a <udp_sendto_if_src_chksum+0xf2>
 800e466:	bf00      	nop
 800e468:	08018e30 	.word	0x08018e30
 800e46c:	08018ee8 	.word	0x08018ee8
 800e470:	08016a38 	.word	0x08016a38
 800e474:	08018f08 	.word	0x08018f08
 800e478:	08018f28 	.word	0x08018f28
 800e47c:	08018f4c 	.word	0x08018f4c
 800e480:	08018f70 	.word	0x08018f70
 800e484:	08018f94 	.word	0x08018f94

0800e488 <udp_sendto_if_chksum>:
{
 800e488:	b570      	push	{r4, r5, r6, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	9c08      	ldr	r4, [sp, #32]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e48e:	b170      	cbz	r0, 800e4ae <udp_sendto_if_chksum+0x26>
 800e490:	4605      	mov	r5, r0
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e492:	b1b1      	cbz	r1, 800e4c2 <udp_sendto_if_chksum+0x3a>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e494:	b1fa      	cbz	r2, 800e4d6 <udp_sendto_if_chksum+0x4e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e496:	b344      	cbz	r4, 800e4ea <udp_sendto_if_chksum+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e498:	6800      	ldr	r0, [r0, #0]
 800e49a:	b380      	cbz	r0, 800e4fe <udp_sendto_if_chksum+0x76>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e49c:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e4a0:	2ee0      	cmp	r6, #224	; 0xe0
 800e4a2:	d02c      	beq.n	800e4fe <udp_sendto_if_chksum+0x76>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e4a4:	6866      	ldr	r6, [r4, #4]
 800e4a6:	42b0      	cmp	r0, r6
 800e4a8:	d137      	bne.n	800e51a <udp_sendto_if_chksum+0x92>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	e028      	b.n	800e500 <udp_sendto_if_chksum+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4ae:	4b1c      	ldr	r3, [pc, #112]	; (800e520 <udp_sendto_if_chksum+0x98>)
 800e4b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e4b4:	491b      	ldr	r1, [pc, #108]	; (800e524 <udp_sendto_if_chksum+0x9c>)
 800e4b6:	481c      	ldr	r0, [pc, #112]	; (800e528 <udp_sendto_if_chksum+0xa0>)
 800e4b8:	f005 fefe 	bl	80142b8 <app_debug_rtt_raw>
 800e4bc:	f06f 000f 	mvn.w	r0, #15
 800e4c0:	e029      	b.n	800e516 <udp_sendto_if_chksum+0x8e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e4c2:	4b17      	ldr	r3, [pc, #92]	; (800e520 <udp_sendto_if_chksum+0x98>)
 800e4c4:	f240 2281 	movw	r2, #641	; 0x281
 800e4c8:	4918      	ldr	r1, [pc, #96]	; (800e52c <udp_sendto_if_chksum+0xa4>)
 800e4ca:	4817      	ldr	r0, [pc, #92]	; (800e528 <udp_sendto_if_chksum+0xa0>)
 800e4cc:	f005 fef4 	bl	80142b8 <app_debug_rtt_raw>
 800e4d0:	f06f 000f 	mvn.w	r0, #15
 800e4d4:	e01f      	b.n	800e516 <udp_sendto_if_chksum+0x8e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e4d6:	4b12      	ldr	r3, [pc, #72]	; (800e520 <udp_sendto_if_chksum+0x98>)
 800e4d8:	f240 2282 	movw	r2, #642	; 0x282
 800e4dc:	4914      	ldr	r1, [pc, #80]	; (800e530 <udp_sendto_if_chksum+0xa8>)
 800e4de:	4812      	ldr	r0, [pc, #72]	; (800e528 <udp_sendto_if_chksum+0xa0>)
 800e4e0:	f005 feea 	bl	80142b8 <app_debug_rtt_raw>
 800e4e4:	f06f 000f 	mvn.w	r0, #15
 800e4e8:	e015      	b.n	800e516 <udp_sendto_if_chksum+0x8e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e4ea:	4b0d      	ldr	r3, [pc, #52]	; (800e520 <udp_sendto_if_chksum+0x98>)
 800e4ec:	f240 2283 	movw	r2, #643	; 0x283
 800e4f0:	4910      	ldr	r1, [pc, #64]	; (800e534 <udp_sendto_if_chksum+0xac>)
 800e4f2:	480d      	ldr	r0, [pc, #52]	; (800e528 <udp_sendto_if_chksum+0xa0>)
 800e4f4:	f005 fee0 	bl	80142b8 <app_debug_rtt_raw>
 800e4f8:	f06f 000f 	mvn.w	r0, #15
 800e4fc:	e00b      	b.n	800e516 <udp_sendto_if_chksum+0x8e>
      src_ip = netif_ip_addr4(netif);
 800e4fe:	1d20      	adds	r0, r4, #4
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
 800e500:	9003      	str	r0, [sp, #12]
 800e502:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 800e506:	9002      	str	r0, [sp, #8]
 800e508:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800e50c:	9001      	str	r0, [sp, #4]
 800e50e:	9400      	str	r4, [sp, #0]
 800e510:	4628      	mov	r0, r5
 800e512:	f7ff fec9 	bl	800e2a8 <udp_sendto_if_src_chksum>
}
 800e516:	b004      	add	sp, #16
 800e518:	bd70      	pop	{r4, r5, r6, pc}
        return ERR_RTE;
 800e51a:	f06f 0003 	mvn.w	r0, #3
 800e51e:	e7fa      	b.n	800e516 <udp_sendto_if_chksum+0x8e>
 800e520:	08018e30 	.word	0x08018e30
 800e524:	08018fc4 	.word	0x08018fc4
 800e528:	08016a38 	.word	0x08016a38
 800e52c:	08018fe0 	.word	0x08018fe0
 800e530:	08018ffc 	.word	0x08018ffc
 800e534:	0801901c 	.word	0x0801901c

0800e538 <udp_sendto_chksum>:
{
 800e538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e53a:	b085      	sub	sp, #20
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e53c:	b1c8      	cbz	r0, 800e572 <udp_sendto_chksum+0x3a>
 800e53e:	460d      	mov	r5, r1
 800e540:	4614      	mov	r4, r2
 800e542:	461e      	mov	r6, r3
 800e544:	4607      	mov	r7, r0
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e546:	b1f1      	cbz	r1, 800e586 <udp_sendto_chksum+0x4e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e548:	b33a      	cbz	r2, 800e59a <udp_sendto_chksum+0x62>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e54a:	7a00      	ldrb	r0, [r0, #8]
 800e54c:	b378      	cbz	r0, 800e5ae <udp_sendto_chksum+0x76>
    netif = netif_get_by_index(pcb->netif_idx);
 800e54e:	f7fa fcdf 	bl	8008f10 <netif_get_by_index>
  if (netif == NULL) {
 800e552:	b380      	cbz	r0, 800e5b6 <udp_sendto_chksum+0x7e>
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
 800e554:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800e558:	9302      	str	r3, [sp, #8]
 800e55a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	9000      	str	r0, [sp, #0]
 800e562:	4633      	mov	r3, r6
 800e564:	4622      	mov	r2, r4
 800e566:	4629      	mov	r1, r5
 800e568:	4638      	mov	r0, r7
 800e56a:	f7ff ff8d 	bl	800e488 <udp_sendto_if_chksum>
}
 800e56e:	b005      	add	sp, #20
 800e570:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e572:	4b12      	ldr	r3, [pc, #72]	; (800e5bc <udp_sendto_chksum+0x84>)
 800e574:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e578:	4911      	ldr	r1, [pc, #68]	; (800e5c0 <udp_sendto_chksum+0x88>)
 800e57a:	4812      	ldr	r0, [pc, #72]	; (800e5c4 <udp_sendto_chksum+0x8c>)
 800e57c:	f005 fe9c 	bl	80142b8 <app_debug_rtt_raw>
 800e580:	f06f 000f 	mvn.w	r0, #15
 800e584:	e7f3      	b.n	800e56e <udp_sendto_chksum+0x36>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e586:	4b0d      	ldr	r3, [pc, #52]	; (800e5bc <udp_sendto_chksum+0x84>)
 800e588:	f240 2219 	movw	r2, #537	; 0x219
 800e58c:	490e      	ldr	r1, [pc, #56]	; (800e5c8 <udp_sendto_chksum+0x90>)
 800e58e:	480d      	ldr	r0, [pc, #52]	; (800e5c4 <udp_sendto_chksum+0x8c>)
 800e590:	f005 fe92 	bl	80142b8 <app_debug_rtt_raw>
 800e594:	f06f 000f 	mvn.w	r0, #15
 800e598:	e7e9      	b.n	800e56e <udp_sendto_chksum+0x36>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e59a:	4b08      	ldr	r3, [pc, #32]	; (800e5bc <udp_sendto_chksum+0x84>)
 800e59c:	f240 221a 	movw	r2, #538	; 0x21a
 800e5a0:	490a      	ldr	r1, [pc, #40]	; (800e5cc <udp_sendto_chksum+0x94>)
 800e5a2:	4808      	ldr	r0, [pc, #32]	; (800e5c4 <udp_sendto_chksum+0x8c>)
 800e5a4:	f005 fe88 	bl	80142b8 <app_debug_rtt_raw>
 800e5a8:	f06f 000f 	mvn.w	r0, #15
 800e5ac:	e7df      	b.n	800e56e <udp_sendto_chksum+0x36>
      netif = ip_route(&pcb->local_ip, dst_ip);
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	f000 f9bc 	bl	800e92c <ip4_route>
 800e5b4:	e7cd      	b.n	800e552 <udp_sendto_chksum+0x1a>
    return ERR_RTE;
 800e5b6:	f06f 0003 	mvn.w	r0, #3
 800e5ba:	e7d8      	b.n	800e56e <udp_sendto_chksum+0x36>
 800e5bc:	08018e30 	.word	0x08018e30
 800e5c0:	0801903c 	.word	0x0801903c
 800e5c4:	08016a38 	.word	0x08016a38
 800e5c8:	08019054 	.word	0x08019054
 800e5cc:	08019070 	.word	0x08019070

0800e5d0 <udp_sendto>:
{
 800e5d0:	b510      	push	{r4, lr}
 800e5d2:	b082      	sub	sp, #8
  return udp_sendto_chksum(pcb, p, dst_ip, dst_port, 0, 0);
 800e5d4:	2400      	movs	r4, #0
 800e5d6:	9401      	str	r4, [sp, #4]
 800e5d8:	9400      	str	r4, [sp, #0]
 800e5da:	f7ff ffad 	bl	800e538 <udp_sendto_chksum>
}
 800e5de:	b002      	add	sp, #8
 800e5e0:	bd10      	pop	{r4, pc}
	...

0800e5e4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e5e4:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e5e6:	b110      	cbz	r0, 800e5ee <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e5e8:	61c1      	str	r1, [r0, #28]
  pcb->recv_arg = recv_arg;
 800e5ea:	6202      	str	r2, [r0, #32]
}
 800e5ec:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e5ee:	4b04      	ldr	r3, [pc, #16]	; (800e600 <udp_recv+0x1c>)
 800e5f0:	f240 428a 	movw	r2, #1162	; 0x48a
 800e5f4:	4903      	ldr	r1, [pc, #12]	; (800e604 <udp_recv+0x20>)
 800e5f6:	4804      	ldr	r0, [pc, #16]	; (800e608 <udp_recv+0x24>)
 800e5f8:	f005 fe5e 	bl	80142b8 <app_debug_rtt_raw>
 800e5fc:	e7f6      	b.n	800e5ec <udp_recv+0x8>
 800e5fe:	bf00      	nop
 800e600:	08018e30 	.word	0x08018e30
 800e604:	0801908c 	.word	0x0801908c
 800e608:	08016a38 	.word	0x08016a38

0800e60c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e60c:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e60e:	b168      	cbz	r0, 800e62c <udp_remove+0x20>
 800e610:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e612:	4b0e      	ldr	r3, [pc, #56]	; (800e64c <udp_remove+0x40>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4283      	cmp	r3, r0
 800e618:	d010      	beq.n	800e63c <udp_remove+0x30>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e61a:	b193      	cbz	r3, 800e642 <udp_remove+0x36>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e61c:	461a      	mov	r2, r3
 800e61e:	691b      	ldr	r3, [r3, #16]
 800e620:	b17b      	cbz	r3, 800e642 <udp_remove+0x36>
 800e622:	428b      	cmp	r3, r1
 800e624:	d1fa      	bne.n	800e61c <udp_remove+0x10>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e626:	690b      	ldr	r3, [r1, #16]
 800e628:	6113      	str	r3, [r2, #16]
        break;
 800e62a:	e00a      	b.n	800e642 <udp_remove+0x36>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e62c:	4b08      	ldr	r3, [pc, #32]	; (800e650 <udp_remove+0x44>)
 800e62e:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800e632:	4908      	ldr	r1, [pc, #32]	; (800e654 <udp_remove+0x48>)
 800e634:	4808      	ldr	r0, [pc, #32]	; (800e658 <udp_remove+0x4c>)
 800e636:	f005 fe3f 	bl	80142b8 <app_debug_rtt_raw>
 800e63a:	e005      	b.n	800e648 <udp_remove+0x3c>
    udp_pcbs = udp_pcbs->next;
 800e63c:	6902      	ldr	r2, [r0, #16]
 800e63e:	4b03      	ldr	r3, [pc, #12]	; (800e64c <udp_remove+0x40>)
 800e640:	601a      	str	r2, [r3, #0]
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e642:	2000      	movs	r0, #0
 800e644:	f7fa fa92 	bl	8008b6c <memp_free>
}
 800e648:	bd08      	pop	{r3, pc}
 800e64a:	bf00      	nop
 800e64c:	2000436c 	.word	0x2000436c
 800e650:	08018e30 	.word	0x08018e30
 800e654:	080190a4 	.word	0x080190a4
 800e658:	08016a38 	.word	0x08016a38

0800e65c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e65c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e65e:	2000      	movs	r0, #0
 800e660:	f7fa fa54 	bl	8008b0c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e664:	4604      	mov	r4, r0
 800e666:	b128      	cbz	r0, 800e674 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e668:	2224      	movs	r2, #36	; 0x24
 800e66a:	2100      	movs	r1, #0
 800e66c:	f005 feb8 	bl	80143e0 <memset>
    pcb->ttl = UDP_TTL;
 800e670:	23ff      	movs	r3, #255	; 0xff
 800e672:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800e674:	4620      	mov	r0, r4
 800e676:	bd10      	pop	{r4, pc}

0800e678 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800e678:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800e67a:	f7ff ffef 	bl	800e65c <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800e67e:	bd08      	pop	{r3, pc}

0800e680 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e680:	b1a0      	cbz	r0, 800e6ac <udp_netif_ip_addr_changed+0x2c>
 800e682:	4602      	mov	r2, r0
 800e684:	6803      	ldr	r3, [r0, #0]
 800e686:	b18b      	cbz	r3, 800e6ac <udp_netif_ip_addr_changed+0x2c>
 800e688:	b181      	cbz	r1, 800e6ac <udp_netif_ip_addr_changed+0x2c>
 800e68a:	680b      	ldr	r3, [r1, #0]
 800e68c:	b173      	cbz	r3, 800e6ac <udp_netif_ip_addr_changed+0x2c>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e68e:	4b08      	ldr	r3, [pc, #32]	; (800e6b0 <udp_netif_ip_addr_changed+0x30>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	b15b      	cbz	r3, 800e6ac <udp_netif_ip_addr_changed+0x2c>
{
 800e694:	b410      	push	{r4}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e696:	681c      	ldr	r4, [r3, #0]
 800e698:	6810      	ldr	r0, [r2, #0]
 800e69a:	4284      	cmp	r4, r0
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e69c:	bf04      	itt	eq
 800e69e:	6808      	ldreq	r0, [r1, #0]
 800e6a0:	6018      	streq	r0, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e6a2:	691b      	ldr	r3, [r3, #16]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d1f6      	bne.n	800e696 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800e6a8:	bc10      	pop	{r4}
 800e6aa:	4770      	bx	lr
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	2000436c 	.word	0x2000436c

0800e6b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6b8:	b085      	sub	sp, #20
 800e6ba:	4605      	mov	r5, r0
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e6bc:	4b5b      	ldr	r3, [pc, #364]	; (800e82c <icmp_input+0x178>)
 800e6be:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800e6c0:	7833      	ldrb	r3, [r6, #0]
 800e6c2:	f003 030f 	and.w	r3, r3, #15
 800e6c6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800e6ca:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 800e6cc:	2c13      	cmp	r4, #19
 800e6ce:	d916      	bls.n	800e6fe <icmp_input+0x4a>
 800e6d0:	460f      	mov	r7, r1
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e6d2:	8943      	ldrh	r3, [r0, #10]
 800e6d4:	2b03      	cmp	r3, #3
 800e6d6:	d912      	bls.n	800e6fe <icmp_input+0x4a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e6d8:	6843      	ldr	r3, [r0, #4]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	2b08      	cmp	r3, #8
 800e6de:	f040 809a 	bne.w	800e816 <icmp_input+0x162>
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e6e2:	4b52      	ldr	r3, [pc, #328]	; (800e82c <icmp_input+0x178>)
 800e6e4:	6958      	ldr	r0, [r3, #20]
 800e6e6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800e6ea:	2be0      	cmp	r3, #224	; 0xe0
 800e6ec:	d01e      	beq.n	800e72c <icmp_input+0x78>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e6ee:	4b4f      	ldr	r3, [pc, #316]	; (800e82c <icmp_input+0x178>)
 800e6f0:	6819      	ldr	r1, [r3, #0]
 800e6f2:	f000 facc 	bl	800ec8e <ip4_addr_isbroadcast_u32>
 800e6f6:	b9c8      	cbnz	r0, 800e72c <icmp_input+0x78>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e6f8:	892b      	ldrh	r3, [r5, #8]
 800e6fa:	2b07      	cmp	r3, #7
 800e6fc:	d805      	bhi.n	800e70a <icmp_input+0x56>
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  return;
lenerr:
  pbuf_free(p);
 800e6fe:	4628      	mov	r0, r5
 800e700:	f7fa fce6 	bl	80090d0 <pbuf_free>
  pbuf_free(p);
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e704:	b005      	add	sp, #20
 800e706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (inet_chksum_pbuf(p) != 0) {
 800e70a:	4628      	mov	r0, r5
 800e70c:	f7f9 fefe 	bl	800850c <inet_chksum_pbuf>
 800e710:	b980      	cbnz	r0, 800e734 <icmp_input+0x80>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e712:	f108 0910 	add.w	r9, r8, #16
 800e716:	4649      	mov	r1, r9
 800e718:	4628      	mov	r0, r5
 800e71a:	f7fa fc93 	bl	8009044 <pbuf_add_header>
 800e71e:	2800      	cmp	r0, #0
 800e720:	d03e      	beq.n	800e7a0 <icmp_input+0xec>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e722:	892b      	ldrh	r3, [r5, #8]
 800e724:	1919      	adds	r1, r3, r4
 800e726:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800e728:	428b      	cmp	r3, r1
 800e72a:	d907      	bls.n	800e73c <icmp_input+0x88>
  pbuf_free(p);
 800e72c:	4628      	mov	r0, r5
 800e72e:	f7fa fccf 	bl	80090d0 <pbuf_free>
  return;
 800e732:	e7e7      	b.n	800e704 <icmp_input+0x50>
          pbuf_free(p);
 800e734:	4628      	mov	r0, r5
 800e736:	f7fa fccb 	bl	80090d0 <pbuf_free>
          return;
 800e73a:	e7e3      	b.n	800e704 <icmp_input+0x50>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e73c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e740:	2010      	movs	r0, #16
 800e742:	f7fa fd2f 	bl	80091a4 <pbuf_alloc>
        if (r == NULL) {
 800e746:	4681      	mov	r9, r0
 800e748:	2800      	cmp	r0, #0
 800e74a:	d0ef      	beq.n	800e72c <icmp_input+0x78>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e74c:	8942      	ldrh	r2, [r0, #10]
 800e74e:	f108 0308 	add.w	r3, r8, #8
 800e752:	429a      	cmp	r2, r3
 800e754:	d313      	bcc.n	800e77e <icmp_input+0xca>
        MEMCPY(r->payload, iphdr_in, hlen);
 800e756:	4642      	mov	r2, r8
 800e758:	4631      	mov	r1, r6
 800e75a:	6840      	ldr	r0, [r0, #4]
 800e75c:	f005 fe18 	bl	8014390 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800e760:	4641      	mov	r1, r8
 800e762:	4648      	mov	r0, r9
 800e764:	f7fa fc74 	bl	8009050 <pbuf_remove_header>
 800e768:	b960      	cbnz	r0, 800e784 <icmp_input+0xd0>
        if (pbuf_copy(r, p) != ERR_OK) {
 800e76a:	4629      	mov	r1, r5
 800e76c:	4648      	mov	r0, r9
 800e76e:	f7fa feaf 	bl	80094d0 <pbuf_copy>
 800e772:	b988      	cbnz	r0, 800e798 <icmp_input+0xe4>
        pbuf_free(p);
 800e774:	4628      	mov	r0, r5
 800e776:	f7fa fcab 	bl	80090d0 <pbuf_free>
        p = r;
 800e77a:	464d      	mov	r5, r9
 800e77c:	e016      	b.n	800e7ac <icmp_input+0xf8>
          pbuf_free(r);
 800e77e:	f7fa fca7 	bl	80090d0 <pbuf_free>
          goto icmperr;
 800e782:	e7d3      	b.n	800e72c <icmp_input+0x78>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e784:	4b2a      	ldr	r3, [pc, #168]	; (800e830 <icmp_input+0x17c>)
 800e786:	22b6      	movs	r2, #182	; 0xb6
 800e788:	492a      	ldr	r1, [pc, #168]	; (800e834 <icmp_input+0x180>)
 800e78a:	482b      	ldr	r0, [pc, #172]	; (800e838 <icmp_input+0x184>)
 800e78c:	f005 fd94 	bl	80142b8 <app_debug_rtt_raw>
          pbuf_free(r);
 800e790:	4648      	mov	r0, r9
 800e792:	f7fa fc9d 	bl	80090d0 <pbuf_free>
          goto icmperr;
 800e796:	e7c9      	b.n	800e72c <icmp_input+0x78>
          pbuf_free(r);
 800e798:	4648      	mov	r0, r9
 800e79a:	f7fa fc99 	bl	80090d0 <pbuf_free>
          goto icmperr;
 800e79e:	e7c5      	b.n	800e72c <icmp_input+0x78>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e7a0:	4649      	mov	r1, r9
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f7fa fc54 	bl	8009050 <pbuf_remove_header>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d138      	bne.n	800e81e <icmp_input+0x16a>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e7ac:	f8d5 9004 	ldr.w	r9, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800e7b0:	4641      	mov	r1, r8
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	f7fa fc46 	bl	8009044 <pbuf_add_header>
 800e7b8:	bb68      	cbnz	r0, 800e816 <icmp_input+0x162>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e7ba:	686e      	ldr	r6, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800e7bc:	4b1b      	ldr	r3, [pc, #108]	; (800e82c <icmp_input+0x178>)
 800e7be:	695a      	ldr	r2, [r3, #20]
 800e7c0:	60f2      	str	r2, [r6, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e7c2:	691b      	ldr	r3, [r3, #16]
 800e7c4:	6133      	str	r3, [r6, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f889 3000 	strb.w	r3, [r9]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e7cc:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 800e7d0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e7d4:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800e7d6:	bf8c      	ite	hi
 800e7d8:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800e7da:	3308      	addls	r3, #8
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	f8a9 3002 	strh.w	r3, [r9, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e7e2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800e7e6:	f886 9008 	strb.w	r9, [r6, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e7ea:	f04f 0800 	mov.w	r8, #0
 800e7ee:	f886 800a 	strb.w	r8, [r6, #10]
 800e7f2:	f886 800b 	strb.w	r8, [r6, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 800e7f6:	4621      	mov	r1, r4
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f7f9 fe81 	bl	8008500 <inet_chksum>
 800e7fe:	8170      	strh	r0, [r6, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e800:	9702      	str	r7, [sp, #8]
 800e802:	2301      	movs	r3, #1
 800e804:	9301      	str	r3, [sp, #4]
 800e806:	f8cd 8000 	str.w	r8, [sp]
 800e80a:	464b      	mov	r3, r9
 800e80c:	4642      	mov	r2, r8
 800e80e:	490b      	ldr	r1, [pc, #44]	; (800e83c <icmp_input+0x188>)
 800e810:	4628      	mov	r0, r5
 800e812:	f000 fa27 	bl	800ec64 <ip4_output_if>
  pbuf_free(p);
 800e816:	4628      	mov	r0, r5
 800e818:	f7fa fc5a 	bl	80090d0 <pbuf_free>
  return;
 800e81c:	e772      	b.n	800e704 <icmp_input+0x50>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e81e:	4b04      	ldr	r3, [pc, #16]	; (800e830 <icmp_input+0x17c>)
 800e820:	22c7      	movs	r2, #199	; 0xc7
 800e822:	4907      	ldr	r1, [pc, #28]	; (800e840 <icmp_input+0x18c>)
 800e824:	4804      	ldr	r0, [pc, #16]	; (800e838 <icmp_input+0x184>)
 800e826:	f005 fd47 	bl	80142b8 <app_debug_rtt_raw>
          goto icmperr;
 800e82a:	e77f      	b.n	800e72c <icmp_input+0x78>
 800e82c:	20002d00 	.word	0x20002d00
 800e830:	080190bc 	.word	0x080190bc
 800e834:	080190e8 	.word	0x080190e8
 800e838:	08016a38 	.word	0x08016a38
 800e83c:	20002d14 	.word	0x20002d14
 800e840:	08019120 	.word	0x08019120

0800e844 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e846:	b087      	sub	sp, #28
 800e848:	4606      	mov	r6, r0
 800e84a:	460f      	mov	r7, r1

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e84c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e850:	2124      	movs	r1, #36	; 0x24
 800e852:	4608      	mov	r0, r1
 800e854:	f7fa fca6 	bl	80091a4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800e858:	2800      	cmp	r0, #0
 800e85a:	d03b      	beq.n	800e8d4 <icmp_dest_unreach+0x90>
 800e85c:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e85e:	8943      	ldrh	r3, [r0, #10]
 800e860:	2b23      	cmp	r3, #35	; 0x23
 800e862:	d939      	bls.n	800e8d8 <icmp_dest_unreach+0x94>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e864:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e868:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800e86a:	2303      	movs	r3, #3
 800e86c:	7023      	strb	r3, [r4, #0]
  icmphdr->code = code;
 800e86e:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800e870:	2300      	movs	r3, #0
 800e872:	7123      	strb	r3, [r4, #4]
 800e874:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800e876:	71a3      	strb	r3, [r4, #6]
 800e878:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e87a:	686b      	ldr	r3, [r5, #4]
 800e87c:	6872      	ldr	r2, [r6, #4]
 800e87e:	6816      	ldr	r6, [r2, #0]
 800e880:	6850      	ldr	r0, [r2, #4]
 800e882:	6891      	ldr	r1, [r2, #8]
 800e884:	68d7      	ldr	r7, [r2, #12]
 800e886:	609e      	str	r6, [r3, #8]
 800e888:	60d8      	str	r0, [r3, #12]
 800e88a:	6119      	str	r1, [r3, #16]
 800e88c:	615f      	str	r7, [r3, #20]
 800e88e:	6916      	ldr	r6, [r2, #16]
 800e890:	6950      	ldr	r0, [r2, #20]
 800e892:	6991      	ldr	r1, [r2, #24]
 800e894:	619e      	str	r6, [r3, #24]
 800e896:	61d8      	str	r0, [r3, #28]
 800e898:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e89a:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800e89e:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e8a0:	a805      	add	r0, sp, #20
 800e8a2:	f000 f843 	bl	800e92c <ip4_route>
#endif
  if (netif != NULL) {
 800e8a6:	4607      	mov	r7, r0
 800e8a8:	b188      	cbz	r0, 800e8ce <icmp_dest_unreach+0x8a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e8aa:	2600      	movs	r6, #0
 800e8ac:	70a6      	strb	r6, [r4, #2]
 800e8ae:	70e6      	strb	r6, [r4, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e8b0:	8969      	ldrh	r1, [r5, #10]
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f7f9 fe24 	bl	8008500 <inet_chksum>
 800e8b8:	8060      	strh	r0, [r4, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e8ba:	9702      	str	r7, [sp, #8]
 800e8bc:	2301      	movs	r3, #1
 800e8be:	9301      	str	r3, [sp, #4]
 800e8c0:	9600      	str	r6, [sp, #0]
 800e8c2:	23ff      	movs	r3, #255	; 0xff
 800e8c4:	aa05      	add	r2, sp, #20
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f000 f9cb 	bl	800ec64 <ip4_output_if>
  }
  pbuf_free(q);
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	f7fa fbfe 	bl	80090d0 <pbuf_free>
}
 800e8d4:	b007      	add	sp, #28
 800e8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e8d8:	4b03      	ldr	r3, [pc, #12]	; (800e8e8 <icmp_dest_unreach+0xa4>)
 800e8da:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e8de:	4903      	ldr	r1, [pc, #12]	; (800e8ec <icmp_dest_unreach+0xa8>)
 800e8e0:	4803      	ldr	r0, [pc, #12]	; (800e8f0 <icmp_dest_unreach+0xac>)
 800e8e2:	f005 fce9 	bl	80142b8 <app_debug_rtt_raw>
 800e8e6:	e7bd      	b.n	800e864 <icmp_dest_unreach+0x20>
 800e8e8:	080190bc 	.word	0x080190bc
 800e8ec:	08019154 	.word	0x08019154
 800e8f0:	08016a38 	.word	0x08016a38

0800e8f4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e8f4:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e8f6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800e8fa:	f013 0f01 	tst.w	r3, #1
 800e8fe:	d00c      	beq.n	800e91a <ip4_input_accept+0x26>
 800e900:	4601      	mov	r1, r0
 800e902:	6843      	ldr	r3, [r0, #4]
 800e904:	b15b      	cbz	r3, 800e91e <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e906:	4a08      	ldr	r2, [pc, #32]	; (800e928 <ip4_input_accept+0x34>)
 800e908:	6950      	ldr	r0, [r2, #20]
 800e90a:	4283      	cmp	r3, r0
 800e90c:	d009      	beq.n	800e922 <ip4_input_accept+0x2e>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e90e:	f000 f9be 	bl	800ec8e <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e912:	3800      	subs	r0, #0
 800e914:	bf18      	it	ne
 800e916:	2001      	movne	r0, #1
 800e918:	e000      	b.n	800e91c <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e91a:	2000      	movs	r0, #0
}
 800e91c:	bd08      	pop	{r3, pc}
  return 0;
 800e91e:	2000      	movs	r0, #0
 800e920:	e7fc      	b.n	800e91c <ip4_input_accept+0x28>
      return 1;
 800e922:	2001      	movs	r0, #1
 800e924:	e7fa      	b.n	800e91c <ip4_input_accept+0x28>
 800e926:	bf00      	nop
 800e928:	20002d00 	.word	0x20002d00

0800e92c <ip4_route>:
{
 800e92c:	b430      	push	{r4, r5}
 800e92e:	4604      	mov	r4, r0
  NETIF_FOREACH(netif) {
 800e930:	4b18      	ldr	r3, [pc, #96]	; (800e994 <ip4_route+0x68>)
 800e932:	6818      	ldr	r0, [r3, #0]
 800e934:	b998      	cbnz	r0, 800e95e <ip4_route+0x32>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e936:	4b18      	ldr	r3, [pc, #96]	; (800e998 <ip4_route+0x6c>)
 800e938:	6818      	ldr	r0, [r3, #0]
 800e93a:	b158      	cbz	r0, 800e954 <ip4_route+0x28>
 800e93c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800e940:	f003 0305 	and.w	r3, r3, #5
 800e944:	2b05      	cmp	r3, #5
 800e946:	d121      	bne.n	800e98c <ip4_route+0x60>
 800e948:	6843      	ldr	r3, [r0, #4]
 800e94a:	b30b      	cbz	r3, 800e990 <ip4_route+0x64>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e94c:	7823      	ldrb	r3, [r4, #0]
    return NULL;
 800e94e:	2b7f      	cmp	r3, #127	; 0x7f
 800e950:	bf08      	it	eq
 800e952:	2000      	moveq	r0, #0
}
 800e954:	bc30      	pop	{r4, r5}
 800e956:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 800e958:	6800      	ldr	r0, [r0, #0]
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d0eb      	beq.n	800e936 <ip4_route+0xa>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e95e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800e962:	f013 0f01 	tst.w	r3, #1
 800e966:	d0f7      	beq.n	800e958 <ip4_route+0x2c>
 800e968:	f013 0f04 	tst.w	r3, #4
 800e96c:	d0f4      	beq.n	800e958 <ip4_route+0x2c>
 800e96e:	6842      	ldr	r2, [r0, #4]
 800e970:	2a00      	cmp	r2, #0
 800e972:	d0f1      	beq.n	800e958 <ip4_route+0x2c>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e974:	6821      	ldr	r1, [r4, #0]
 800e976:	404a      	eors	r2, r1
 800e978:	6885      	ldr	r5, [r0, #8]
 800e97a:	422a      	tst	r2, r5
 800e97c:	d0ea      	beq.n	800e954 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e97e:	f013 0f02 	tst.w	r3, #2
 800e982:	d1e9      	bne.n	800e958 <ip4_route+0x2c>
 800e984:	68c3      	ldr	r3, [r0, #12]
 800e986:	4299      	cmp	r1, r3
 800e988:	d1e6      	bne.n	800e958 <ip4_route+0x2c>
 800e98a:	e7e3      	b.n	800e954 <ip4_route+0x28>
    return NULL;
 800e98c:	2000      	movs	r0, #0
 800e98e:	e7e1      	b.n	800e954 <ip4_route+0x28>
 800e990:	2000      	movs	r0, #0
 800e992:	e7df      	b.n	800e954 <ip4_route+0x28>
 800e994:	20004344 	.word	0x20004344
 800e998:	20004348 	.word	0x20004348

0800e99c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9a0:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e9a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800e9a6:	f898 3000 	ldrb.w	r3, [r8]
 800e9aa:	091a      	lsrs	r2, r3, #4
 800e9ac:	2a04      	cmp	r2, #4
 800e9ae:	d004      	beq.n	800e9ba <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e9b0:	f7fa fb8e 	bl	80090d0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9ba:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e9bc:	f003 030f 	and.w	r3, r3, #15
 800e9c0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800e9c4:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e9c6:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800e9ca:	f7f8 ff29 	bl	8007820 <lwip_htons>
 800e9ce:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 800e9d0:	8923      	ldrh	r3, [r4, #8]
 800e9d2:	4283      	cmp	r3, r0
 800e9d4:	d80b      	bhi.n	800e9ee <ip4_input+0x52>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e9d6:	8963      	ldrh	r3, [r4, #10]
 800e9d8:	42ab      	cmp	r3, r5
 800e9da:	d304      	bcc.n	800e9e6 <ip4_input+0x4a>
 800e9dc:	8923      	ldrh	r3, [r4, #8]
 800e9de:	42b3      	cmp	r3, r6
 800e9e0:	d301      	bcc.n	800e9e6 <ip4_input+0x4a>
 800e9e2:	2d13      	cmp	r5, #19
 800e9e4:	d808      	bhi.n	800e9f8 <ip4_input+0x5c>
    pbuf_free(p);
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f7fa fb72 	bl	80090d0 <pbuf_free>
    return ERR_OK;
 800e9ec:	e7e2      	b.n	800e9b4 <ip4_input+0x18>
    pbuf_realloc(p, iphdr_len);
 800e9ee:	4601      	mov	r1, r0
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f7fa fc67 	bl	80092c4 <pbuf_realloc>
 800e9f6:	e7ee      	b.n	800e9d6 <ip4_input+0x3a>
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	4640      	mov	r0, r8
 800e9fc:	f7f9 fd80 	bl	8008500 <inet_chksum>
 800ea00:	b9a8      	cbnz	r0, 800ea2e <ip4_input+0x92>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ea02:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ea06:	4a4d      	ldr	r2, [pc, #308]	; (800eb3c <ip4_input+0x1a0>)
 800ea08:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ea0a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800ea0e:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea14:	2be0      	cmp	r3, #224	; 0xe0
 800ea16:	d10e      	bne.n	800ea36 <ip4_input+0x9a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ea18:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ea1c:	f013 0f01 	tst.w	r3, #1
 800ea20:	d020      	beq.n	800ea64 <ip4_input+0xc8>
 800ea22:	687b      	ldr	r3, [r7, #4]
      netif = inp;
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	bf14      	ite	ne
 800ea28:	463d      	movne	r5, r7
 800ea2a:	2500      	moveq	r5, #0
 800ea2c:	e01b      	b.n	800ea66 <ip4_input+0xca>
      pbuf_free(p);
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f7fa fb4e 	bl	80090d0 <pbuf_free>
      return ERR_OK;
 800ea34:	e7be      	b.n	800e9b4 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 800ea36:	4638      	mov	r0, r7
 800ea38:	f7ff ff5c 	bl	800e8f4 <ip4_input_accept>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d14d      	bne.n	800eadc <ip4_input+0x140>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ea40:	4b3e      	ldr	r3, [pc, #248]	; (800eb3c <ip4_input+0x1a0>)
 800ea42:	7d1b      	ldrb	r3, [r3, #20]
 800ea44:	2b7f      	cmp	r3, #127	; 0x7f
 800ea46:	d04b      	beq.n	800eae0 <ip4_input+0x144>
        NETIF_FOREACH(netif) {
 800ea48:	4b3d      	ldr	r3, [pc, #244]	; (800eb40 <ip4_input+0x1a4>)
 800ea4a:	681d      	ldr	r5, [r3, #0]
 800ea4c:	b915      	cbnz	r5, 800ea54 <ip4_input+0xb8>
 800ea4e:	e00a      	b.n	800ea66 <ip4_input+0xca>
 800ea50:	682d      	ldr	r5, [r5, #0]
 800ea52:	b145      	cbz	r5, 800ea66 <ip4_input+0xca>
          if (netif == inp) {
 800ea54:	42af      	cmp	r7, r5
 800ea56:	d0fb      	beq.n	800ea50 <ip4_input+0xb4>
          if (ip4_input_accept(netif)) {
 800ea58:	4628      	mov	r0, r5
 800ea5a:	f7ff ff4b 	bl	800e8f4 <ip4_input_accept>
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d0f6      	beq.n	800ea50 <ip4_input+0xb4>
 800ea62:	e000      	b.n	800ea66 <ip4_input+0xca>
      netif = NULL;
 800ea64:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ea66:	4639      	mov	r1, r7
 800ea68:	4b34      	ldr	r3, [pc, #208]	; (800eb3c <ip4_input+0x1a0>)
 800ea6a:	6918      	ldr	r0, [r3, #16]
 800ea6c:	f000 f90f 	bl	800ec8e <ip4_addr_isbroadcast_u32>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d137      	bne.n	800eae4 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ea74:	4b31      	ldr	r3, [pc, #196]	; (800eb3c <ip4_input+0x1a0>)
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ea7c:	2be0      	cmp	r3, #224	; 0xe0
 800ea7e:	d031      	beq.n	800eae4 <ip4_input+0x148>
  if (netif == NULL) {
 800ea80:	b3a5      	cbz	r5, 800eaec <ip4_input+0x150>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ea82:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800ea86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	bb93      	cbnz	r3, 800eaf4 <ip4_input+0x158>
  ip_data.current_netif = netif;
 800ea8e:	4a2b      	ldr	r2, [pc, #172]	; (800eb3c <ip4_input+0x1a0>)
 800ea90:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 800ea92:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ea94:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ea98:	f898 3000 	ldrb.w	r3, [r8]
 800ea9c:	f003 030f 	and.w	r3, r3, #15
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800eaa4:	4649      	mov	r1, r9
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f7fa fad2 	bl	8009050 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800eaac:	f898 3009 	ldrb.w	r3, [r8, #9]
 800eab0:	2b06      	cmp	r3, #6
 800eab2:	d030      	beq.n	800eb16 <ip4_input+0x17a>
 800eab4:	2b11      	cmp	r3, #17
 800eab6:	d021      	beq.n	800eafc <ip4_input+0x160>
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d031      	beq.n	800eb20 <ip4_input+0x184>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eabc:	4629      	mov	r1, r5
 800eabe:	4b1f      	ldr	r3, [pc, #124]	; (800eb3c <ip4_input+0x1a0>)
 800eac0:	6958      	ldr	r0, [r3, #20]
 800eac2:	f000 f8e4 	bl	800ec8e <ip4_addr_isbroadcast_u32>
 800eac6:	b928      	cbnz	r0, 800ead4 <ip4_input+0x138>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eac8:	4b1c      	ldr	r3, [pc, #112]	; (800eb3c <ip4_input+0x1a0>)
 800eaca:	695b      	ldr	r3, [r3, #20]
 800eacc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ead0:	2be0      	cmp	r3, #224	; 0xe0
 800ead2:	d12a      	bne.n	800eb2a <ip4_input+0x18e>
        pbuf_free(p);
 800ead4:	4620      	mov	r0, r4
 800ead6:	f7fa fafb 	bl	80090d0 <pbuf_free>
        break;
 800eada:	e013      	b.n	800eb04 <ip4_input+0x168>
      netif = inp;
 800eadc:	463d      	mov	r5, r7
 800eade:	e7c2      	b.n	800ea66 <ip4_input+0xca>
      netif = NULL;
 800eae0:	2500      	movs	r5, #0
 800eae2:	e7c0      	b.n	800ea66 <ip4_input+0xca>
      pbuf_free(p);
 800eae4:	4620      	mov	r0, r4
 800eae6:	f7fa faf3 	bl	80090d0 <pbuf_free>
      return ERR_OK;
 800eaea:	e763      	b.n	800e9b4 <ip4_input+0x18>
    pbuf_free(p);
 800eaec:	4620      	mov	r0, r4
 800eaee:	f7fa faef 	bl	80090d0 <pbuf_free>
    return ERR_OK;
 800eaf2:	e75f      	b.n	800e9b4 <ip4_input+0x18>
    pbuf_free(p);
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f7fa faeb 	bl	80090d0 <pbuf_free>
    return ERR_OK;
 800eafa:	e75b      	b.n	800e9b4 <ip4_input+0x18>
        udp_input(p, inp);
 800eafc:	4639      	mov	r1, r7
 800eafe:	4620      	mov	r0, r4
 800eb00:	f7ff fa3c 	bl	800df7c <udp_input>
  ip_data.current_netif = NULL;
 800eb04:	4b0d      	ldr	r3, [pc, #52]	; (800eb3c <ip4_input+0x1a0>)
 800eb06:	2200      	movs	r2, #0
 800eb08:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800eb0a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800eb0c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800eb0e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800eb10:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800eb12:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800eb14:	e74e      	b.n	800e9b4 <ip4_input+0x18>
        tcp_input(p, inp);
 800eb16:	4639      	mov	r1, r7
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f7fc fe87 	bl	800b82c <tcp_input>
        break;
 800eb1e:	e7f1      	b.n	800eb04 <ip4_input+0x168>
        icmp_input(p, inp);
 800eb20:	4639      	mov	r1, r7
 800eb22:	4620      	mov	r0, r4
 800eb24:	f7ff fdc6 	bl	800e6b4 <icmp_input>
        break;
 800eb28:	e7ec      	b.n	800eb04 <ip4_input+0x168>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800eb2a:	4649      	mov	r1, r9
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f7fa fac3 	bl	80090b8 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800eb32:	2102      	movs	r1, #2
 800eb34:	4620      	mov	r0, r4
 800eb36:	f7ff fe85 	bl	800e844 <icmp_dest_unreach>
 800eb3a:	e7cb      	b.n	800ead4 <ip4_input+0x138>
 800eb3c:	20002d00 	.word	0x20002d00
 800eb40:	20004344 	.word	0x20004344

0800eb44 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800eb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb48:	b083      	sub	sp, #12
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	4688      	mov	r8, r1
 800eb4e:	4617      	mov	r7, r2
 800eb50:	469a      	mov	sl, r3
 800eb52:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800eb56:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 800eb5a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800eb5e:	7b83      	ldrb	r3, [r0, #14]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d152      	bne.n	800ec0a <ip4_output_if_src+0xc6>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800eb64:	2f00      	cmp	r7, #0
 800eb66:	d063      	beq.n	800ec30 <ip4_output_if_src+0xec>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800eb68:	2114      	movs	r1, #20
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f7fa fa6a 	bl	8009044 <pbuf_add_header>
 800eb70:	2800      	cmp	r0, #0
 800eb72:	d165      	bne.n	800ec40 <ip4_output_if_src+0xfc>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800eb74:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800eb76:	8963      	ldrh	r3, [r4, #10]
 800eb78:	2b13      	cmp	r3, #19
 800eb7a:	d94e      	bls.n	800ec1a <ip4_output_if_src+0xd6>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800eb7c:	f885 a008 	strb.w	sl, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800eb80:	f885 b009 	strb.w	fp, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 800eb84:	ea4b 2b0a 	orr.w	fp, fp, sl, lsl #8
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800eb88:	6839      	ldr	r1, [r7, #0]
 800eb8a:	6129      	str	r1, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800eb8c:	2345      	movs	r3, #69	; 0x45
 800eb8e:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800eb90:	706e      	strb	r6, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 800eb92:	0236      	lsls	r6, r6, #8
 800eb94:	431e      	orrs	r6, r3
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 800eb96:	b28a      	uxth	r2, r1
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 800eb98:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eb9c:	4416      	add	r6, r2
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 800eb9e:	ea4f 2a2b 	mov.w	sl, fp, asr #8
 800eba2:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
 800eba6:	fa1f fa8a 	uxth.w	sl, sl
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 800ebaa:	4456      	add	r6, sl
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ebac:	8920      	ldrh	r0, [r4, #8]
 800ebae:	f7f8 fe37 	bl	8007820 <lwip_htons>
 800ebb2:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 800ebb4:	4406      	add	r6, r0
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	71ab      	strb	r3, [r5, #6]
 800ebba:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ebbc:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 800ec60 <ip4_output_if_src+0x11c>
 800ebc0:	f8ba 0000 	ldrh.w	r0, [sl]
 800ebc4:	f7f8 fe2c 	bl	8007820 <lwip_htons>
 800ebc8:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 800ebca:	4406      	add	r6, r0
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ebcc:	f8ba 3000 	ldrh.w	r3, [sl]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	f8aa 3000 	strh.w	r3, [sl]

    if (src == NULL) {
 800ebd6:	f1b8 0f00 	cmp.w	r8, #0
 800ebda:	d026      	beq.n	800ec2a <ip4_output_if_src+0xe6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ebdc:	f8d8 2000 	ldr.w	r2, [r8]
 800ebe0:	60ea      	str	r2, [r5, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 800ebe2:	b293      	uxth	r3, r2
 800ebe4:	4433      	add	r3, r6
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 800ebe6:	eb03 4612 	add.w	r6, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 800ebea:	b2b3      	uxth	r3, r6
 800ebec:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 800ebf0:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 800ebf4:	43db      	mvns	r3, r3
 800ebf6:	816b      	strh	r3, [r5, #10]
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ebf8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ebfc:	463a      	mov	r2, r7
 800ebfe:	4621      	mov	r1, r4
 800ec00:	4648      	mov	r0, r9
 800ec02:	4798      	blx	r3
}
 800ec04:	b003      	add	sp, #12
 800ec06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ec0a:	4b10      	ldr	r3, [pc, #64]	; (800ec4c <ip4_output_if_src+0x108>)
 800ec0c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ec10:	490f      	ldr	r1, [pc, #60]	; (800ec50 <ip4_output_if_src+0x10c>)
 800ec12:	4810      	ldr	r0, [pc, #64]	; (800ec54 <ip4_output_if_src+0x110>)
 800ec14:	f005 fb50 	bl	80142b8 <app_debug_rtt_raw>
 800ec18:	e7a4      	b.n	800eb64 <ip4_output_if_src+0x20>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ec1a:	4b0c      	ldr	r3, [pc, #48]	; (800ec4c <ip4_output_if_src+0x108>)
 800ec1c:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ec20:	490d      	ldr	r1, [pc, #52]	; (800ec58 <ip4_output_if_src+0x114>)
 800ec22:	480c      	ldr	r0, [pc, #48]	; (800ec54 <ip4_output_if_src+0x110>)
 800ec24:	f005 fb48 	bl	80142b8 <app_debug_rtt_raw>
 800ec28:	e7a8      	b.n	800eb7c <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ec2a:	4b0c      	ldr	r3, [pc, #48]	; (800ec5c <ip4_output_if_src+0x118>)
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	e7d7      	b.n	800ebe0 <ip4_output_if_src+0x9c>
    if (p->len < IP_HLEN) {
 800ec30:	8963      	ldrh	r3, [r4, #10]
 800ec32:	2b13      	cmp	r3, #19
 800ec34:	d907      	bls.n	800ec46 <ip4_output_if_src+0x102>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ec36:	6863      	ldr	r3, [r4, #4]
 800ec38:	691b      	ldr	r3, [r3, #16]
 800ec3a:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800ec3c:	af01      	add	r7, sp, #4
 800ec3e:	e7db      	b.n	800ebf8 <ip4_output_if_src+0xb4>
      return ERR_BUF;
 800ec40:	f06f 0001 	mvn.w	r0, #1
 800ec44:	e7de      	b.n	800ec04 <ip4_output_if_src+0xc0>
      return ERR_BUF;
 800ec46:	f06f 0001 	mvn.w	r0, #1
 800ec4a:	e7db      	b.n	800ec04 <ip4_output_if_src+0xc0>
 800ec4c:	08019180 	.word	0x08019180
 800ec50:	080191ac 	.word	0x080191ac
 800ec54:	08016a38 	.word	0x08016a38
 800ec58:	080191b8 	.word	0x080191b8
 800ec5c:	08019224 	.word	0x08019224
 800ec60:	20000fc8 	.word	0x20000fc8

0800ec64 <ip4_output_if>:
{
 800ec64:	b530      	push	{r4, r5, lr}
 800ec66:	b085      	sub	sp, #20
 800ec68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 800ec6a:	4615      	mov	r5, r2
 800ec6c:	b11a      	cbz	r2, 800ec76 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800ec6e:	b109      	cbz	r1, 800ec74 <ip4_output_if+0x10>
 800ec70:	680a      	ldr	r2, [r1, #0]
 800ec72:	b902      	cbnz	r2, 800ec76 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800ec74:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ec76:	9402      	str	r4, [sp, #8]
 800ec78:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800ec7c:	9201      	str	r2, [sp, #4]
 800ec7e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800ec82:	9200      	str	r2, [sp, #0]
 800ec84:	462a      	mov	r2, r5
 800ec86:	f7ff ff5d 	bl	800eb44 <ip4_output_if_src>
}
 800ec8a:	b005      	add	sp, #20
 800ec8c:	bd30      	pop	{r4, r5, pc}

0800ec8e <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ec8e:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ec90:	1e42      	subs	r2, r0, #1
 800ec92:	f112 0f03 	cmn.w	r2, #3
 800ec96:	d813      	bhi.n	800ecc0 <ip4_addr_isbroadcast_u32+0x32>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ec98:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
 800ec9c:	f010 0002 	ands.w	r0, r0, #2
 800eca0:	d013      	beq.n	800ecca <ip4_addr_isbroadcast_u32+0x3c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800eca2:	684a      	ldr	r2, [r1, #4]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d00d      	beq.n	800ecc4 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800eca8:	6889      	ldr	r1, [r1, #8]
 800ecaa:	405a      	eors	r2, r3
 800ecac:	420a      	tst	r2, r1
 800ecae:	d10b      	bne.n	800ecc8 <ip4_addr_isbroadcast_u32+0x3a>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ecb0:	43c8      	mvns	r0, r1
 800ecb2:	ea23 0301 	bic.w	r3, r3, r1
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800ecb6:	4283      	cmp	r3, r0
 800ecb8:	bf14      	ite	ne
 800ecba:	2000      	movne	r0, #0
 800ecbc:	2001      	moveq	r0, #1
 800ecbe:	4770      	bx	lr
    return 1;
 800ecc0:	2001      	movs	r0, #1
 800ecc2:	4770      	bx	lr
    return 0;
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	4770      	bx	lr
    return 0;
 800ecc8:	2000      	movs	r0, #0
  }
}
 800ecca:	4770      	bx	lr

0800eccc <ip4addr_aton>:
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 800eccc:	7803      	ldrb	r3, [r0, #0]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 800ecce:	4a59      	ldr	r2, [pc, #356]	; (800ee34 <ip4addr_aton+0x168>)
 800ecd0:	5c9a      	ldrb	r2, [r3, r2]
 800ecd2:	f012 0f04 	tst.w	r2, #4
 800ecd6:	f000 808e 	beq.w	800edf6 <ip4addr_aton+0x12a>
{
 800ecda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	460f      	mov	r7, r1
  u32_t *pp = parts;
 800ece2:	46ec      	mov	ip, sp
      return 0;
    }
    val = 0;
    base = 10;
 800ece4:	f04f 080a 	mov.w	r8, #10
    if (c == '0') {
      c = *++cp;
      if (c == 'x' || c == 'X') {
        base = 16;
 800ece8:	f04f 0a10 	mov.w	sl, #16
        c = *++cp;
      } else {
        base = 8;
 800ecec:	f04f 0908 	mov.w	r9, #8
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 800ecf0:	4950      	ldr	r1, [pc, #320]	; (800ee34 <ip4addr_aton+0x168>)
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800ecf2:	f10d 0e0c 	add.w	lr, sp, #12
 800ecf6:	e032      	b.n	800ed5e <ip4addr_aton+0x92>
      c = *++cp;
 800ecf8:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 800ecfa:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 800ecfe:	2a58      	cmp	r2, #88	; 0x58
 800ed00:	d002      	beq.n	800ed08 <ip4addr_aton+0x3c>
      c = *++cp;
 800ed02:	3001      	adds	r0, #1
        base = 8;
 800ed04:	464e      	mov	r6, r9
 800ed06:	e02d      	b.n	800ed64 <ip4addr_aton+0x98>
        c = *++cp;
 800ed08:	7883      	ldrb	r3, [r0, #2]
 800ed0a:	3002      	adds	r0, #2
        base = 16;
 800ed0c:	4656      	mov	r6, sl
        c = *++cp;
 800ed0e:	e029      	b.n	800ed64 <ip4addr_aton+0x98>
        val = (val * base) + (u32_t)(c - '0');
 800ed10:	fb04 3406 	mla	r4, r4, r6, r3
 800ed14:	3c30      	subs	r4, #48	; 0x30
        c = *++cp;
 800ed16:	7843      	ldrb	r3, [r0, #1]
 800ed18:	3001      	adds	r0, #1
 800ed1a:	4605      	mov	r5, r0
      if (lwip_isdigit(c)) {
 800ed1c:	5c5a      	ldrb	r2, [r3, r1]
 800ed1e:	f012 0f04 	tst.w	r2, #4
 800ed22:	d1f5      	bne.n	800ed10 <ip4addr_aton+0x44>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800ed24:	2e10      	cmp	r6, #16
 800ed26:	d10e      	bne.n	800ed46 <ip4addr_aton+0x7a>
 800ed28:	f012 0f44 	tst.w	r2, #68	; 0x44
 800ed2c:	d00b      	beq.n	800ed46 <ip4addr_aton+0x7a>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800ed2e:	330a      	adds	r3, #10
 800ed30:	f002 0203 	and.w	r2, r2, #3
 800ed34:	2a02      	cmp	r2, #2
 800ed36:	bf0c      	ite	eq
 800ed38:	2261      	moveq	r2, #97	; 0x61
 800ed3a:	2241      	movne	r2, #65	; 0x41
 800ed3c:	1a9b      	subs	r3, r3, r2
 800ed3e:	ea43 1404 	orr.w	r4, r3, r4, lsl #4
        c = *++cp;
 800ed42:	7843      	ldrb	r3, [r0, #1]
 800ed44:	e7e8      	b.n	800ed18 <ip4addr_aton+0x4c>
    if (c == '.') {
 800ed46:	2b2e      	cmp	r3, #46	; 0x2e
 800ed48:	d10e      	bne.n	800ed68 <ip4addr_aton+0x9c>
      if (pp >= parts + 3) {
 800ed4a:	45f4      	cmp	ip, lr
 800ed4c:	d055      	beq.n	800edfa <ip4addr_aton+0x12e>
        return 0;
      }
      *pp++ = val;
 800ed4e:	f84c 4b04 	str.w	r4, [ip], #4
      c = *++cp;
 800ed52:	1c68      	adds	r0, r5, #1
 800ed54:	786b      	ldrb	r3, [r5, #1]
    if (!lwip_isdigit(c)) {
 800ed56:	5c5a      	ldrb	r2, [r3, r1]
 800ed58:	f012 0f04 	tst.w	r2, #4
 800ed5c:	d051      	beq.n	800ee02 <ip4addr_aton+0x136>
    if (c == '0') {
 800ed5e:	2b30      	cmp	r3, #48	; 0x30
 800ed60:	d0ca      	beq.n	800ecf8 <ip4addr_aton+0x2c>
    base = 10;
 800ed62:	4646      	mov	r6, r8
 800ed64:	2400      	movs	r4, #0
 800ed66:	e7d8      	b.n	800ed1a <ip4addr_aton+0x4e>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 800ed68:	b113      	cbz	r3, 800ed70 <ip4addr_aton+0xa4>
 800ed6a:	f012 0f08 	tst.w	r2, #8
 800ed6e:	d04a      	beq.n	800ee06 <ip4addr_aton+0x13a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800ed70:	4668      	mov	r0, sp
 800ed72:	ebac 0000 	sub.w	r0, ip, r0
 800ed76:	1080      	asrs	r0, r0, #2
 800ed78:	3001      	adds	r0, #1
 800ed7a:	2804      	cmp	r0, #4
 800ed7c:	d834      	bhi.n	800ede8 <ip4addr_aton+0x11c>
 800ed7e:	e8df f000 	tbb	[pc, r0]
 800ed82:	0b3d      	.short	0x0b3d
 800ed84:	1303      	.short	0x1303
 800ed86:	21          	.byte	0x21
 800ed87:	00          	.byte	0x00

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 800ed88:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 800ed8c:	d23d      	bcs.n	800ee0a <ip4addr_aton+0x13e>
        return 0;
      }
      if (parts[0] > 0xff) {
 800ed8e:	9b00      	ldr	r3, [sp, #0]
 800ed90:	2bff      	cmp	r3, #255	; 0xff
 800ed92:	d83c      	bhi.n	800ee0e <ip4addr_aton+0x142>
        return 0;
      }
      val |= parts[0] << 24;
 800ed94:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      break;
    default:
      LWIP_ASSERT("unhandled", 0);
      break;
  }
  if (addr) {
 800ed98:	2f00      	cmp	r7, #0
 800ed9a:	d048      	beq.n	800ee2e <ip4addr_aton+0x162>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	f7f8 fd44 	bl	800782a <lwip_htonl>
 800eda2:	6038      	str	r0, [r7, #0]
  }
  return 1;
 800eda4:	2001      	movs	r0, #1
 800eda6:	e029      	b.n	800edfc <ip4addr_aton+0x130>
      if (val > 0xffff) {
 800eda8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800edac:	d231      	bcs.n	800ee12 <ip4addr_aton+0x146>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800edae:	9a00      	ldr	r2, [sp, #0]
 800edb0:	2aff      	cmp	r2, #255	; 0xff
 800edb2:	d830      	bhi.n	800ee16 <ip4addr_aton+0x14a>
 800edb4:	9b01      	ldr	r3, [sp, #4]
 800edb6:	2bff      	cmp	r3, #255	; 0xff
 800edb8:	d82f      	bhi.n	800ee1a <ip4addr_aton+0x14e>
      val |= (parts[0] << 24) | (parts[1] << 16);
 800edba:	041b      	lsls	r3, r3, #16
 800edbc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800edc0:	431c      	orrs	r4, r3
      break;
 800edc2:	e7e9      	b.n	800ed98 <ip4addr_aton+0xcc>
      if (val > 0xff) {
 800edc4:	2cff      	cmp	r4, #255	; 0xff
 800edc6:	d82a      	bhi.n	800ee1e <ip4addr_aton+0x152>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800edc8:	9900      	ldr	r1, [sp, #0]
 800edca:	29ff      	cmp	r1, #255	; 0xff
 800edcc:	d829      	bhi.n	800ee22 <ip4addr_aton+0x156>
 800edce:	9b01      	ldr	r3, [sp, #4]
 800edd0:	2bff      	cmp	r3, #255	; 0xff
 800edd2:	d828      	bhi.n	800ee26 <ip4addr_aton+0x15a>
 800edd4:	9a02      	ldr	r2, [sp, #8]
 800edd6:	2aff      	cmp	r2, #255	; 0xff
 800edd8:	d827      	bhi.n	800ee2a <ip4addr_aton+0x15e>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800edda:	041b      	lsls	r3, r3, #16
 800eddc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ede0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ede4:	431c      	orrs	r4, r3
      break;
 800ede6:	e7d7      	b.n	800ed98 <ip4addr_aton+0xcc>
      LWIP_ASSERT("unhandled", 0);
 800ede8:	4b13      	ldr	r3, [pc, #76]	; (800ee38 <ip4addr_aton+0x16c>)
 800edea:	22f9      	movs	r2, #249	; 0xf9
 800edec:	4913      	ldr	r1, [pc, #76]	; (800ee3c <ip4addr_aton+0x170>)
 800edee:	4814      	ldr	r0, [pc, #80]	; (800ee40 <ip4addr_aton+0x174>)
 800edf0:	f005 fa62 	bl	80142b8 <app_debug_rtt_raw>
      break;
 800edf4:	e7d0      	b.n	800ed98 <ip4addr_aton+0xcc>
      return 0;
 800edf6:	2000      	movs	r0, #0
}
 800edf8:	4770      	bx	lr
        return 0;
 800edfa:	2000      	movs	r0, #0
}
 800edfc:	b004      	add	sp, #16
 800edfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return 0;
 800ee02:	2000      	movs	r0, #0
 800ee04:	e7fa      	b.n	800edfc <ip4addr_aton+0x130>
    return 0;
 800ee06:	2000      	movs	r0, #0
 800ee08:	e7f8      	b.n	800edfc <ip4addr_aton+0x130>
        return 0;
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	e7f6      	b.n	800edfc <ip4addr_aton+0x130>
        return 0;
 800ee0e:	2000      	movs	r0, #0
 800ee10:	e7f4      	b.n	800edfc <ip4addr_aton+0x130>
        return 0;
 800ee12:	2000      	movs	r0, #0
 800ee14:	e7f2      	b.n	800edfc <ip4addr_aton+0x130>
        return 0;
 800ee16:	2000      	movs	r0, #0
 800ee18:	e7f0      	b.n	800edfc <ip4addr_aton+0x130>
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	e7ee      	b.n	800edfc <ip4addr_aton+0x130>
        return 0;
 800ee1e:	2000      	movs	r0, #0
 800ee20:	e7ec      	b.n	800edfc <ip4addr_aton+0x130>
        return 0;
 800ee22:	2000      	movs	r0, #0
 800ee24:	e7ea      	b.n	800edfc <ip4addr_aton+0x130>
 800ee26:	2000      	movs	r0, #0
 800ee28:	e7e8      	b.n	800edfc <ip4addr_aton+0x130>
 800ee2a:	2000      	movs	r0, #0
 800ee2c:	e7e6      	b.n	800edfc <ip4addr_aton+0x130>
  return 1;
 800ee2e:	2001      	movs	r0, #1
 800ee30:	e7e4      	b.n	800edfc <ip4addr_aton+0x130>
 800ee32:	bf00      	nop
 800ee34:	08019b6c 	.word	0x08019b6c
 800ee38:	080191e8 	.word	0x080191e8
 800ee3c:	08019218 	.word	0x08019218
 800ee40:	08016a38 	.word	0x08016a38

0800ee44 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800ee44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee48:	b085      	sub	sp, #20
 800ee4a:	9101      	str	r1, [sp, #4]
 800ee4c:	4690      	mov	r8, r2
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 800ee4e:	6803      	ldr	r3, [r0, #0]
 800ee50:	9303      	str	r3, [sp, #12]

  rp = buf;
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 800ee52:	f10d 090c 	add.w	r9, sp, #12
 800ee56:	f10d 0b10 	add.w	fp, sp, #16
  rp = buf;
 800ee5a:	460d      	mov	r5, r1
  int len = 0;
 800ee5c:	f04f 0a00 	mov.w	sl, #0
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 800ee60:	4a23      	ldr	r2, [pc, #140]	; (800eef0 <ip4addr_ntoa_r+0xac>)
 800ee62:	f10d 0c08 	add.w	ip, sp, #8
 800ee66:	f108 0e01 	add.w	lr, r8, #1
 800ee6a:	f819 4b01 	ldrb.w	r4, [r9], #1
    i = 0;
 800ee6e:	2000      	movs	r0, #0
      rem = *ap % (u8_t)10;
 800ee70:	fba2 3104 	umull	r3, r1, r2, r4
 800ee74:	08c9      	lsrs	r1, r1, #3
 800ee76:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800ee7a:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
      *ap /= (u8_t)10;
 800ee7e:	4626      	mov	r6, r4
 800ee80:	b2cc      	uxtb	r4, r1
      inv[i++] = (char)('0' + rem);
 800ee82:	4601      	mov	r1, r0
 800ee84:	3001      	adds	r0, #1
 800ee86:	b2c0      	uxtb	r0, r0
 800ee88:	af04      	add	r7, sp, #16
 800ee8a:	440f      	add	r7, r1
 800ee8c:	3330      	adds	r3, #48	; 0x30
 800ee8e:	f807 3c08 	strb.w	r3, [r7, #-8]
    } while (*ap);
 800ee92:	2e09      	cmp	r6, #9
 800ee94:	d8ec      	bhi.n	800ee70 <ip4addr_ntoa_r+0x2c>
 800ee96:	f809 4c01 	strb.w	r4, [r9, #-1]
    while (i--) {
 800ee9a:	b198      	cbz	r0, 800eec4 <ip4addr_ntoa_r+0x80>
      if (len++ >= buflen) {
 800ee9c:	f10a 0001 	add.w	r0, sl, #1
 800eea0:	45d0      	cmp	r8, sl
 800eea2:	dd21      	ble.n	800eee8 <ip4addr_ntoa_r+0xa4>
 800eea4:	ab02      	add	r3, sp, #8
 800eea6:	440b      	add	r3, r1
        return NULL;
      }
      *rp++ = inv[i];
 800eea8:	781c      	ldrb	r4, [r3, #0]
 800eeaa:	f805 4b01 	strb.w	r4, [r5], #1
    while (i--) {
 800eeae:	4563      	cmp	r3, ip
 800eeb0:	f103 33ff 	add.w	r3, r3, #4294967295
 800eeb4:	d007      	beq.n	800eec6 <ip4addr_ntoa_r+0x82>
      if (len++ >= buflen) {
 800eeb6:	3001      	adds	r0, #1
 800eeb8:	4570      	cmp	r0, lr
 800eeba:	d1f5      	bne.n	800eea8 <ip4addr_ntoa_r+0x64>
        return NULL;
 800eebc:	2000      	movs	r0, #0
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
  return buf;
}
 800eebe:	b005      	add	sp, #20
 800eec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (i--) {
 800eec4:	4650      	mov	r0, sl
    if (len++ >= buflen) {
 800eec6:	f100 0a01 	add.w	sl, r0, #1
 800eeca:	4580      	cmp	r8, r0
 800eecc:	dd0e      	ble.n	800eeec <ip4addr_ntoa_r+0xa8>
    *rp++ = '.';
 800eece:	462b      	mov	r3, r5
 800eed0:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800eed4:	f803 1b01 	strb.w	r1, [r3], #1
  for (n = 0; n < 4; n++) {
 800eed8:	45d9      	cmp	r9, fp
 800eeda:	d001      	beq.n	800eee0 <ip4addr_ntoa_r+0x9c>
    *rp++ = '.';
 800eedc:	461d      	mov	r5, r3
 800eede:	e7c4      	b.n	800ee6a <ip4addr_ntoa_r+0x26>
  *--rp = 0;
 800eee0:	2300      	movs	r3, #0
 800eee2:	702b      	strb	r3, [r5, #0]
  return buf;
 800eee4:	9801      	ldr	r0, [sp, #4]
 800eee6:	e7ea      	b.n	800eebe <ip4addr_ntoa_r+0x7a>
        return NULL;
 800eee8:	2000      	movs	r0, #0
 800eeea:	e7e8      	b.n	800eebe <ip4addr_ntoa_r+0x7a>
      return NULL;
 800eeec:	2000      	movs	r0, #0
 800eeee:	e7e6      	b.n	800eebe <ip4addr_ntoa_r+0x7a>
 800eef0:	cccccccd 	.word	0xcccccccd

0800eef4 <ip4addr_ntoa>:
{
 800eef4:	b508      	push	{r3, lr}
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800eef6:	2210      	movs	r2, #16
 800eef8:	4901      	ldr	r1, [pc, #4]	; (800ef00 <ip4addr_ntoa+0xc>)
 800eefa:	f7ff ffa3 	bl	800ee44 <ip4addr_ntoa_r>
}
 800eefe:	bd08      	pop	{r3, pc}
 800ef00:	20000fcc 	.word	0x20000fcc

0800ef04 <link_required>:
/*
 * An Open on LCP has requested a change from Dead to Establish phase.
 */
void link_required(ppp_pcb *pcb) {
    LWIP_UNUSED_ARG(pcb);
}
 800ef04:	4770      	bx	lr
	...

0800ef08 <link_terminated>:
/*
 * LCP has terminated the link; go to the Dead phase and take the
 * physical layer down.
 */
void link_terminated(ppp_pcb *pcb) {
    if (pcb->phase == PPP_PHASE_DEAD
 800ef08:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ef0c:	b903      	cbnz	r3, 800ef10 <link_terminated+0x8>
 800ef0e:	4770      	bx	lr
void link_terminated(ppp_pcb *pcb) {
 800ef10:	b510      	push	{r4, lr}
 800ef12:	4604      	mov	r4, r0
#ifdef HAVE_MULTILINK
    || pcb->phase == PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	return;
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 800ef14:	210c      	movs	r1, #12
 800ef16:	f003 fc08 	bl	801272a <new_phase>
    }
    session_end(devnam);
#endif /* UNUSED */

    if (!doing_multilink) {
	ppp_notice("Connection terminated.");
 800ef1a:	4805      	ldr	r0, [pc, #20]	; (800ef30 <link_terminated+0x28>)
 800ef1c:	f004 fc94 	bl	8013848 <ppp_notice>
	print_link_stats();
#endif /* PPP_STATS_SUPPORT */
    } else
	ppp_notice("Link terminated.");

    lcp_lowerdown(pcb);
 800ef20:	4620      	mov	r0, r4
 800ef22:	f003 faa7 	bl	8012474 <lcp_lowerdown>

    ppp_link_terminated(pcb);
 800ef26:	4620      	mov	r0, r4
 800ef28:	f003 fbf9 	bl	801271e <ppp_link_terminated>
	else
	    mp_bundle_terminated();
    } else
	new_phase(pcb, PPP_PHASE_DEAD);
#endif
}
 800ef2c:	bd10      	pop	{r4, pc}
 800ef2e:	bf00      	nop
 800ef30:	0801922c 	.word	0x0801922c

0800ef34 <upper_layers_down>:
    }
    /* XXX if doing_multilink, should do something to stop
       network-layer traffic on the link */
}

void upper_layers_down(ppp_pcb *pcb) {
 800ef34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef38:	4606      	mov	r6, r0
    int i;
    const struct protent *protp;

    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800ef3a:	4b12      	ldr	r3, [pc, #72]	; (800ef84 <upper_layers_down+0x50>)
 800ef3c:	681c      	ldr	r4, [r3, #0]
 800ef3e:	b1d4      	cbz	r4, 800ef76 <upper_layers_down+0x42>
 800ef40:	461d      	mov	r5, r3
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 800ef42:	f24c 0721 	movw	r7, #49185	; 0xc021
	    (*protp->lowerdown)(pcb);
        if (protp->protocol < 0xC000 && protp->close != NULL)
	    (*protp->close)(pcb, "LCP down");
 800ef46:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800ef88 <upper_layers_down+0x54>
 800ef4a:	e002      	b.n	800ef52 <upper_layers_down+0x1e>
    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800ef4c:	f855 4f04 	ldr.w	r4, [r5, #4]!
 800ef50:	b18c      	cbz	r4, 800ef76 <upper_layers_down+0x42>
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 800ef52:	8823      	ldrh	r3, [r4, #0]
 800ef54:	42bb      	cmp	r3, r7
 800ef56:	d0f9      	beq.n	800ef4c <upper_layers_down+0x18>
 800ef58:	6963      	ldr	r3, [r4, #20]
 800ef5a:	b10b      	cbz	r3, 800ef60 <upper_layers_down+0x2c>
	    (*protp->lowerdown)(pcb);
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	4798      	blx	r3
        if (protp->protocol < 0xC000 && protp->close != NULL)
 800ef60:	8823      	ldrh	r3, [r4, #0]
 800ef62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ef66:	d2f1      	bcs.n	800ef4c <upper_layers_down+0x18>
 800ef68:	69e3      	ldr	r3, [r4, #28]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d0ee      	beq.n	800ef4c <upper_layers_down+0x18>
	    (*protp->close)(pcb, "LCP down");
 800ef6e:	4641      	mov	r1, r8
 800ef70:	4630      	mov	r0, r6
 800ef72:	4798      	blx	r3
 800ef74:	e7ea      	b.n	800ef4c <upper_layers_down+0x18>
    }
    pcb->num_np_open = 0;
 800ef76:	2300      	movs	r3, #0
 800ef78:	f886 30d8 	strb.w	r3, [r6, #216]	; 0xd8
    pcb->num_np_up = 0;
 800ef7c:	f886 30d9 	strb.w	r3, [r6, #217]	; 0xd9
}
 800ef80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef84:	08019888 	.word	0x08019888
 800ef88:	08019244 	.word	0x08019244

0800ef8c <link_down>:
void link_down(ppp_pcb *pcb) {
 800ef8c:	b510      	push	{r4, lr}
 800ef8e:	4604      	mov	r4, r0
	upper_layers_down(pcb);
 800ef90:	f7ff ffd0 	bl	800ef34 <upper_layers_down>
	if (pcb->phase != PPP_PHASE_DEAD
 800ef94:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800ef98:	b903      	cbnz	r3, 800ef9c <link_down+0x10>
}
 800ef9a:	bd10      	pop	{r4, pc}
	    new_phase(pcb, PPP_PHASE_ESTABLISH);
 800ef9c:	2106      	movs	r1, #6
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f003 fbc3 	bl	801272a <new_phase>
}
 800efa4:	e7f9      	b.n	800ef9a <link_down+0xe>
	...

0800efa8 <continue_networks>:
#endif /* MPPE_SUPPORT */
        )
	continue_networks(pcb);
}

void continue_networks(ppp_pcb *pcb) {
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4605      	mov	r5, r0
    const struct protent *protp;

    /*
     * Start the "real" network protocols.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800efac:	4b0f      	ldr	r3, [pc, #60]	; (800efec <continue_networks+0x44>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	b19b      	cbz	r3, 800efda <continue_networks+0x32>
 800efb2:	4c0e      	ldr	r4, [pc, #56]	; (800efec <continue_networks+0x44>)
 800efb4:	e002      	b.n	800efbc <continue_networks+0x14>
 800efb6:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800efba:	b173      	cbz	r3, 800efda <continue_networks+0x32>
	if (protp->protocol < 0xC000
 800efbc:	881a      	ldrh	r2, [r3, #0]
 800efbe:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800efc2:	d2f8      	bcs.n	800efb6 <continue_networks+0xe>
	    && protp->protocol != PPP_CCP
#endif /* CCP_SUPPORT */
#if ECP_SUPPORT
	    && protp->protocol != PPP_ECP
#endif /* ECP_SUPPORT */
	    && protp->open != NULL) {
 800efc4:	699b      	ldr	r3, [r3, #24]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d0f5      	beq.n	800efb6 <continue_networks+0xe>
	    (*protp->open)(pcb);
 800efca:	4628      	mov	r0, r5
 800efcc:	4798      	blx	r3
	    ++pcb->num_np_open;
 800efce:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
 800efd2:	3301      	adds	r3, #1
 800efd4:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
 800efd8:	e7ed      	b.n	800efb6 <continue_networks+0xe>
	}

    if (pcb->num_np_open == 0)
 800efda:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
 800efde:	b103      	cbz	r3, 800efe2 <continue_networks+0x3a>
	/* nothing to do */
	lcp_close(pcb, "No network protocols running");
}
 800efe0:	bd38      	pop	{r3, r4, r5, pc}
	lcp_close(pcb, "No network protocols running");
 800efe2:	4903      	ldr	r1, [pc, #12]	; (800eff0 <continue_networks+0x48>)
 800efe4:	4628      	mov	r0, r5
 800efe6:	f002 fe9b 	bl	8011d20 <lcp_close>
}
 800efea:	e7f9      	b.n	800efe0 <continue_networks+0x38>
 800efec:	08019888 	.word	0x08019888
 800eff0:	08019250 	.word	0x08019250

0800eff4 <start_networks>:
void start_networks(ppp_pcb *pcb) {
 800eff4:	b510      	push	{r4, lr}
 800eff6:	4604      	mov	r4, r0
    new_phase(pcb, PPP_PHASE_NETWORK);
 800eff8:	2109      	movs	r1, #9
 800effa:	f003 fb96 	bl	801272a <new_phase>
	continue_networks(pcb);
 800effe:	4620      	mov	r0, r4
 800f000:	f7ff ffd2 	bl	800efa8 <continue_networks>
}
 800f004:	bd10      	pop	{r4, pc}
	...

0800f008 <link_established>:
void link_established(ppp_pcb *pcb) {
 800f008:	b570      	push	{r4, r5, r6, lr}
 800f00a:	4606      	mov	r6, r0
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800f00c:	4b0b      	ldr	r3, [pc, #44]	; (800f03c <link_established+0x34>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	b17b      	cbz	r3, 800f032 <link_established+0x2a>
 800f012:	4c0a      	ldr	r4, [pc, #40]	; (800f03c <link_established+0x34>)
	    if (protp->protocol != PPP_LCP
 800f014:	f24c 0521 	movw	r5, #49185	; 0xc021
 800f018:	e002      	b.n	800f020 <link_established+0x18>
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800f01a:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800f01e:	b143      	cbz	r3, 800f032 <link_established+0x2a>
	    if (protp->protocol != PPP_LCP
 800f020:	881a      	ldrh	r2, [r3, #0]
 800f022:	42aa      	cmp	r2, r5
 800f024:	d0f9      	beq.n	800f01a <link_established+0x12>
		&& protp->lowerup != NULL)
 800f026:	691b      	ldr	r3, [r3, #16]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0f6      	beq.n	800f01a <link_established+0x12>
		(*protp->lowerup)(pcb);
 800f02c:	4630      	mov	r0, r6
 800f02e:	4798      	blx	r3
 800f030:	e7f3      	b.n	800f01a <link_established+0x12>
    start_networks(pcb);
 800f032:	4630      	mov	r0, r6
 800f034:	f7ff ffde 	bl	800eff4 <start_networks>
}
 800f038:	bd70      	pop	{r4, r5, r6, pc}
 800f03a:	bf00      	nop
 800f03c:	08019888 	.word	0x08019888

0800f040 <np_up>:


/*
 * np_up - a network protocol has come up.
 */
void np_up(ppp_pcb *pcb, int proto) {
 800f040:	b510      	push	{r4, lr}
 800f042:	4604      	mov	r4, r0
#if PPP_IDLETIMELIMIT
    int tlim;
#endif /* PPP_IDLETIMELIMIT */
    LWIP_UNUSED_ARG(proto);

    if (pcb->num_np_up == 0) {
 800f044:	f890 30d9 	ldrb.w	r3, [r0, #217]	; 0xd9
 800f048:	b12b      	cbz	r3, 800f056 <np_up+0x16>
	 */
	if (updetach && !nodetach)
	    detach();
#endif /* Unused */
    }
    ++pcb->num_np_up;
 800f04a:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
 800f04e:	3301      	adds	r3, #1
 800f050:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
}
 800f054:	bd10      	pop	{r4, pc}
	new_phase(pcb, PPP_PHASE_RUNNING);
 800f056:	210a      	movs	r1, #10
 800f058:	f003 fb67 	bl	801272a <new_phase>
 800f05c:	e7f5      	b.n	800f04a <np_up+0xa>

0800f05e <np_down>:

/*
 * np_down - a network protocol has gone down.
 */
void np_down(ppp_pcb *pcb, int proto) {
 800f05e:	b508      	push	{r3, lr}
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_up == 0) {
 800f060:	f890 30d9 	ldrb.w	r3, [r0, #217]	; 0xd9
 800f064:	3b01      	subs	r3, #1
 800f066:	b2db      	uxtb	r3, r3
 800f068:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
 800f06c:	b103      	cbz	r3, 800f070 <np_down+0x12>
#ifdef MAXOCTETS
	UNTIMEOUT(check_maxoctets, NULL);
#endif
	new_phase(pcb, PPP_PHASE_NETWORK);
    }
}
 800f06e:	bd08      	pop	{r3, pc}
	new_phase(pcb, PPP_PHASE_NETWORK);
 800f070:	2109      	movs	r1, #9
 800f072:	f003 fb5a 	bl	801272a <new_phase>
}
 800f076:	e7fa      	b.n	800f06e <np_down+0x10>

0800f078 <np_finished>:

/*
 * np_finished - a network protocol has finished using the link.
 */
void np_finished(ppp_pcb *pcb, int proto) {
 800f078:	b508      	push	{r3, lr}
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_open <= 0) {
 800f07a:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
 800f07e:	3b01      	subs	r3, #1
 800f080:	b2db      	uxtb	r3, r3
 800f082:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
 800f086:	b103      	cbz	r3, 800f08a <np_finished+0x12>
	/* no further use for the link: shut up shop. */
	lcp_close(pcb, "No network protocols running");
    }
}
 800f088:	bd08      	pop	{r3, pc}
	lcp_close(pcb, "No network protocols running");
 800f08a:	4902      	ldr	r1, [pc, #8]	; (800f094 <np_finished+0x1c>)
 800f08c:	f002 fe48 	bl	8011d20 <lcp_close>
}
 800f090:	e7fa      	b.n	800f088 <np_finished+0x10>
 800f092:	bf00      	nop
 800f094:	08019250 	.word	0x08019250

0800f098 <fsm_sconfreq>:


/*
 * fsm_sconfreq - Send a Configure-Request.
 */
static void fsm_sconfreq(fsm *f, int retransmit) {
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	4604      	mov	r4, r0
 800f09e:	460d      	mov	r5, r1
    ppp_pcb *pcb = f->pcb;
 800f0a0:	6806      	ldr	r6, [r0, #0]
    struct pbuf *p;
    u_char *outp;
    int cilen;

    if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
 800f0a2:	7c03      	ldrb	r3, [r0, #16]
 800f0a4:	3b06      	subs	r3, #6
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	d906      	bls.n	800f0ba <fsm_sconfreq+0x22>
	/* Not currently negotiating - reset options */
	if( f->callbacks->resetci )
 800f0ac:	6843      	ldr	r3, [r0, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	b103      	cbz	r3, 800f0b4 <fsm_sconfreq+0x1c>
	    (*f->callbacks->resetci)(f);
 800f0b2:	4798      	blx	r3
	f->nakloops = 0;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	7563      	strb	r3, [r4, #21]
	f->rnakloops = 0;
 800f0b8:	75a3      	strb	r3, [r4, #22]
    }

    if( !retransmit ){
 800f0ba:	b935      	cbnz	r5, 800f0ca <fsm_sconfreq+0x32>
	/* New request - reset retransmission counter, use new ID */
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800f0bc:	7973      	ldrb	r3, [r6, #5]
 800f0be:	7523      	strb	r3, [r4, #20]
	f->reqid = ++f->id;
 800f0c0:	7ca3      	ldrb	r3, [r4, #18]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	b2db      	uxtb	r3, r3
 800f0c6:	74a3      	strb	r3, [r4, #18]
 800f0c8:	74e3      	strb	r3, [r4, #19]
    }

    f->seen_ack = 0;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	7323      	strb	r3, [r4, #12]

    /*
     * Make up the request packet
     */
    if( f->callbacks->cilen && f->callbacks->addci ){
 800f0ce:	6863      	ldr	r3, [r4, #4]
 800f0d0:	685a      	ldr	r2, [r3, #4]
 800f0d2:	b162      	cbz	r2, 800f0ee <fsm_sconfreq+0x56>
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	b153      	cbz	r3, 800f0ee <fsm_sconfreq+0x56>
	cilen = (*f->callbacks->cilen)(f);
 800f0d8:	4620      	mov	r0, r4
 800f0da:	4790      	blx	r2
 800f0dc:	9001      	str	r0, [sp, #4]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800f0de:	f8b6 30d4 	ldrh.w	r3, [r6, #212]	; 0xd4
 800f0e2:	1eda      	subs	r2, r3, #3
 800f0e4:	4290      	cmp	r0, r2
 800f0e6:	db04      	blt.n	800f0f2 <fsm_sconfreq+0x5a>
	    cilen = pcb->peer_mru - HEADERLEN;
 800f0e8:	3b04      	subs	r3, #4
 800f0ea:	9301      	str	r3, [sp, #4]
 800f0ec:	e001      	b.n	800f0f2 <fsm_sconfreq+0x5a>
    } else
	cilen = 0;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	9301      	str	r3, [sp, #4]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PPP_CTRL_PBUF_TYPE);
 800f0f2:	9901      	ldr	r1, [sp, #4]
 800f0f4:	3108      	adds	r1, #8
 800f0f6:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800f0fa:	b289      	uxth	r1, r1
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	f7fa f851 	bl	80091a4 <pbuf_alloc>
    if(NULL == p)
 800f102:	4605      	mov	r5, r0
 800f104:	2800      	cmp	r0, #0
 800f106:	d038      	beq.n	800f17a <fsm_sconfreq+0xe2>
        return;
    if(p->tot_len != p->len) {
 800f108:	8902      	ldrh	r2, [r0, #8]
 800f10a:	8943      	ldrh	r3, [r0, #10]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d136      	bne.n	800f17e <fsm_sconfreq+0xe6>
        pbuf_free(p);
        return;
    }

    /* send the request to our peer */
    outp = (u_char*)p->payload;
 800f110:	6841      	ldr	r1, [r0, #4]
    MAKEHEADER(outp, f->protocol);
 800f112:	23ff      	movs	r3, #255	; 0xff
 800f114:	700b      	strb	r3, [r1, #0]
 800f116:	2303      	movs	r3, #3
 800f118:	704b      	strb	r3, [r1, #1]
 800f11a:	89e3      	ldrh	r3, [r4, #14]
 800f11c:	0a1b      	lsrs	r3, r3, #8
 800f11e:	708b      	strb	r3, [r1, #2]
 800f120:	89e3      	ldrh	r3, [r4, #14]
 800f122:	70cb      	strb	r3, [r1, #3]
    PUTCHAR(CONFREQ, outp);
 800f124:	2301      	movs	r3, #1
 800f126:	710b      	strb	r3, [r1, #4]
    PUTCHAR(f->reqid, outp);
 800f128:	7ce3      	ldrb	r3, [r4, #19]
 800f12a:	714b      	strb	r3, [r1, #5]
    PUTSHORT(cilen + HEADERLEN, outp);
 800f12c:	9b01      	ldr	r3, [sp, #4]
 800f12e:	1d1a      	adds	r2, r3, #4
 800f130:	1212      	asrs	r2, r2, #8
 800f132:	718a      	strb	r2, [r1, #6]
 800f134:	1d1a      	adds	r2, r3, #4
 800f136:	71ca      	strb	r2, [r1, #7]
    if (cilen != 0) {
 800f138:	b153      	cbz	r3, 800f150 <fsm_sconfreq+0xb8>
	(*f->callbacks->addci)(f, outp, &cilen);
 800f13a:	6863      	ldr	r3, [r4, #4]
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	aa01      	add	r2, sp, #4
 800f140:	3108      	adds	r1, #8
 800f142:	4620      	mov	r0, r4
 800f144:	4798      	blx	r3
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800f146:	896b      	ldrh	r3, [r5, #10]
 800f148:	3b08      	subs	r3, #8
 800f14a:	9a01      	ldr	r2, [sp, #4]
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d119      	bne.n	800f184 <fsm_sconfreq+0xec>
    }

    ppp_write(pcb, p);
 800f150:	4629      	mov	r1, r5
 800f152:	4630      	mov	r0, r6
 800f154:	f003 fadc 	bl	8012710 <ppp_write>

    /* start the retransmit timer */
    --f->retransmits;
 800f158:	7d23      	ldrb	r3, [r4, #20]
 800f15a:	3b01      	subs	r3, #1
 800f15c:	7523      	strb	r3, [r4, #20]
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800f15e:	4d0d      	ldr	r5, [pc, #52]	; (800f194 <fsm_sconfreq+0xfc>)
 800f160:	4621      	mov	r1, r4
 800f162:	4628      	mov	r0, r5
 800f164:	f7fe feb0 	bl	800dec8 <sys_untimeout>
 800f168:	7933      	ldrb	r3, [r6, #4]
 800f16a:	4622      	mov	r2, r4
 800f16c:	4629      	mov	r1, r5
 800f16e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f172:	fb00 f003 	mul.w	r0, r0, r3
 800f176:	f7fe fe41 	bl	800ddfc <sys_timeout>
}
 800f17a:	b002      	add	sp, #8
 800f17c:	bd70      	pop	{r4, r5, r6, pc}
        pbuf_free(p);
 800f17e:	f7f9 ffa7 	bl	80090d0 <pbuf_free>
        return;
 800f182:	e7fa      	b.n	800f17a <fsm_sconfreq+0xe2>
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800f184:	4b04      	ldr	r3, [pc, #16]	; (800f198 <fsm_sconfreq+0x100>)
 800f186:	f240 22f2 	movw	r2, #754	; 0x2f2
 800f18a:	4904      	ldr	r1, [pc, #16]	; (800f19c <fsm_sconfreq+0x104>)
 800f18c:	4804      	ldr	r0, [pc, #16]	; (800f1a0 <fsm_sconfreq+0x108>)
 800f18e:	f005 f893 	bl	80142b8 <app_debug_rtt_raw>
 800f192:	e7dd      	b.n	800f150 <fsm_sconfreq+0xb8>
 800f194:	0800f329 	.word	0x0800f329
 800f198:	08019270 	.word	0x08019270
 800f19c:	0801929c 	.word	0x0801929c
 800f1a0:	08016a38 	.word	0x08016a38

0800f1a4 <fsm_init>:
    ppp_pcb *pcb = f->pcb;
 800f1a4:	6802      	ldr	r2, [r0, #0]
    f->state = PPP_FSM_INITIAL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	7403      	strb	r3, [r0, #16]
    f->flags = 0;
 800f1aa:	7443      	strb	r3, [r0, #17]
    f->id = 0;				/* XXX Start with random id? */
 800f1ac:	7483      	strb	r3, [r0, #18]
    f->maxnakloops = pcb->settings.fsm_max_nak_loops;
 800f1ae:	79d2      	ldrb	r2, [r2, #7]
 800f1b0:	75c2      	strb	r2, [r0, #23]
    f->term_reason_len = 0;
 800f1b2:	7603      	strb	r3, [r0, #24]
}
 800f1b4:	4770      	bx	lr

0800f1b6 <fsm_lowerup>:
void fsm_lowerup(fsm *f) {
 800f1b6:	b510      	push	{r4, lr}
 800f1b8:	4604      	mov	r4, r0
    switch( f->state ){
 800f1ba:	7c03      	ldrb	r3, [r0, #16]
 800f1bc:	b113      	cbz	r3, 800f1c4 <fsm_lowerup+0xe>
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d003      	beq.n	800f1ca <fsm_lowerup+0x14>
}
 800f1c2:	bd10      	pop	{r4, pc}
	f->state = PPP_FSM_CLOSED;
 800f1c4:	2302      	movs	r3, #2
 800f1c6:	7403      	strb	r3, [r0, #16]
	break;
 800f1c8:	e7fb      	b.n	800f1c2 <fsm_lowerup+0xc>
	if( f->flags & OPT_SILENT )
 800f1ca:	7c43      	ldrb	r3, [r0, #17]
 800f1cc:	f013 0f04 	tst.w	r3, #4
 800f1d0:	d002      	beq.n	800f1d8 <fsm_lowerup+0x22>
	    f->state = PPP_FSM_STOPPED;
 800f1d2:	2303      	movs	r3, #3
 800f1d4:	7403      	strb	r3, [r0, #16]
 800f1d6:	e7f4      	b.n	800f1c2 <fsm_lowerup+0xc>
	    fsm_sconfreq(f, 0);
 800f1d8:	2100      	movs	r1, #0
 800f1da:	f7ff ff5d 	bl	800f098 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800f1de:	2306      	movs	r3, #6
 800f1e0:	7423      	strb	r3, [r4, #16]
}
 800f1e2:	e7ee      	b.n	800f1c2 <fsm_lowerup+0xc>

0800f1e4 <fsm_lowerdown>:
void fsm_lowerdown(fsm *f) {
 800f1e4:	b510      	push	{r4, lr}
 800f1e6:	4604      	mov	r4, r0
    switch( f->state ){
 800f1e8:	7c03      	ldrb	r3, [r0, #16]
 800f1ea:	3b02      	subs	r3, #2
 800f1ec:	2b07      	cmp	r3, #7
 800f1ee:	d807      	bhi.n	800f200 <fsm_lowerdown+0x1c>
 800f1f0:	e8df f003 	tbb	[pc, r3]
 800f1f4:	160f0704 	.word	0x160f0704
 800f1f8:	1d161616 	.word	0x1d161616
	f->state = PPP_FSM_INITIAL;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	7403      	strb	r3, [r0, #16]
}
 800f200:	bd10      	pop	{r4, pc}
	f->state = PPP_FSM_STARTING;
 800f202:	2301      	movs	r3, #1
 800f204:	7403      	strb	r3, [r0, #16]
	if( f->callbacks->starting )
 800f206:	6843      	ldr	r3, [r0, #4]
 800f208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d0f8      	beq.n	800f200 <fsm_lowerdown+0x1c>
	    (*f->callbacks->starting)(f);
 800f20e:	4798      	blx	r3
 800f210:	e7f6      	b.n	800f200 <fsm_lowerdown+0x1c>
	f->state = PPP_FSM_INITIAL;
 800f212:	2300      	movs	r3, #0
 800f214:	7403      	strb	r3, [r0, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f216:	4601      	mov	r1, r0
 800f218:	4808      	ldr	r0, [pc, #32]	; (800f23c <fsm_lowerdown+0x58>)
 800f21a:	f7fe fe55 	bl	800dec8 <sys_untimeout>
	break;
 800f21e:	e7ef      	b.n	800f200 <fsm_lowerdown+0x1c>
	f->state = PPP_FSM_STARTING;
 800f220:	2301      	movs	r3, #1
 800f222:	7403      	strb	r3, [r0, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f224:	4601      	mov	r1, r0
 800f226:	4805      	ldr	r0, [pc, #20]	; (800f23c <fsm_lowerdown+0x58>)
 800f228:	f7fe fe4e 	bl	800dec8 <sys_untimeout>
	break;
 800f22c:	e7e8      	b.n	800f200 <fsm_lowerdown+0x1c>
	if( f->callbacks->down )
 800f22e:	6843      	ldr	r3, [r0, #4]
 800f230:	6a1b      	ldr	r3, [r3, #32]
 800f232:	b103      	cbz	r3, 800f236 <fsm_lowerdown+0x52>
	    (*f->callbacks->down)(f);
 800f234:	4798      	blx	r3
	f->state = PPP_FSM_STARTING;
 800f236:	2301      	movs	r3, #1
 800f238:	7423      	strb	r3, [r4, #16]
}
 800f23a:	e7e1      	b.n	800f200 <fsm_lowerdown+0x1c>
 800f23c:	0800f329 	.word	0x0800f329

0800f240 <fsm_open>:
void fsm_open(fsm *f) {
 800f240:	b510      	push	{r4, lr}
 800f242:	4604      	mov	r4, r0
    switch( f->state ){
 800f244:	7c03      	ldrb	r3, [r0, #16]
 800f246:	2b09      	cmp	r3, #9
 800f248:	d820      	bhi.n	800f28c <fsm_open+0x4c>
 800f24a:	e8df f003 	tbb	[pc, r3]
 800f24e:	1f05      	.short	0x1f05
 800f250:	1f191b0c 	.word	0x1f191b0c
 800f254:	1b1f1f1f 	.word	0x1b1f1f1f
	f->state = PPP_FSM_STARTING;
 800f258:	2301      	movs	r3, #1
 800f25a:	7403      	strb	r3, [r0, #16]
	if( f->callbacks->starting )
 800f25c:	6843      	ldr	r3, [r0, #4]
 800f25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f260:	b1a3      	cbz	r3, 800f28c <fsm_open+0x4c>
	    (*f->callbacks->starting)(f);
 800f262:	4798      	blx	r3
 800f264:	e012      	b.n	800f28c <fsm_open+0x4c>
	if( f->flags & OPT_SILENT )
 800f266:	7c43      	ldrb	r3, [r0, #17]
 800f268:	f013 0f04 	tst.w	r3, #4
 800f26c:	d002      	beq.n	800f274 <fsm_open+0x34>
	    f->state = PPP_FSM_STOPPED;
 800f26e:	2303      	movs	r3, #3
 800f270:	7403      	strb	r3, [r0, #16]
 800f272:	e00b      	b.n	800f28c <fsm_open+0x4c>
	    fsm_sconfreq(f, 0);
 800f274:	2100      	movs	r1, #0
 800f276:	f7ff ff0f 	bl	800f098 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800f27a:	2306      	movs	r3, #6
 800f27c:	7423      	strb	r3, [r4, #16]
 800f27e:	e005      	b.n	800f28c <fsm_open+0x4c>
	f->state = PPP_FSM_STOPPING;
 800f280:	2305      	movs	r3, #5
 800f282:	7403      	strb	r3, [r0, #16]
	if( f->flags & OPT_RESTART ){
 800f284:	7c63      	ldrb	r3, [r4, #17]
 800f286:	f013 0f02 	tst.w	r3, #2
 800f28a:	d100      	bne.n	800f28e <fsm_open+0x4e>
}
 800f28c:	bd10      	pop	{r4, pc}
	    fsm_lowerdown(f);
 800f28e:	4620      	mov	r0, r4
 800f290:	f7ff ffa8 	bl	800f1e4 <fsm_lowerdown>
	    fsm_lowerup(f);
 800f294:	4620      	mov	r0, r4
 800f296:	f7ff ff8e 	bl	800f1b6 <fsm_lowerup>
}
 800f29a:	e7f7      	b.n	800f28c <fsm_open+0x4c>

0800f29c <fsm_sdata>:
/*
 * fsm_sdata - Send some data.
 *
 * Used for all packets sent to our peer by this module.
 */
void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
 800f29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a0:	b083      	sub	sp, #12
 800f2a2:	4606      	mov	r6, r0
 800f2a4:	4689      	mov	r9, r1
 800f2a6:	4690      	mov	r8, r2
 800f2a8:	9301      	str	r3, [sp, #4]
 800f2aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ppp_pcb *pcb = f->pcb;
 800f2ac:	f8d0 a000 	ldr.w	sl, [r0]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    /* Adjust length to be smaller than MTU */
    if (datalen > pcb->peer_mru - HEADERLEN)
 800f2b0:	f8ba 30d4 	ldrh.w	r3, [sl, #212]	; 0xd4
 800f2b4:	1eda      	subs	r2, r3, #3
 800f2b6:	42a2      	cmp	r2, r4
	datalen = pcb->peer_mru - HEADERLEN;
 800f2b8:	bfd8      	it	le
 800f2ba:	1f1c      	suble	r4, r3, #4
    outlen = datalen + HEADERLEN;
 800f2bc:	f104 0b04 	add.w	fp, r4, #4

    p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PPP_CTRL_PBUF_TYPE);
 800f2c0:	f104 0108 	add.w	r1, r4, #8
 800f2c4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800f2c8:	b289      	uxth	r1, r1
 800f2ca:	2000      	movs	r0, #0
 800f2cc:	f7f9 ff6a 	bl	80091a4 <pbuf_alloc>
    if(NULL == p)
 800f2d0:	4607      	mov	r7, r0
 800f2d2:	b1d8      	cbz	r0, 800f30c <fsm_sdata+0x70>
        return;
    if(p->tot_len != p->len) {
 800f2d4:	8902      	ldrh	r2, [r0, #8]
 800f2d6:	8943      	ldrh	r3, [r0, #10]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d11a      	bne.n	800f312 <fsm_sdata+0x76>
        pbuf_free(p);
        return;
    }

    outp = (u_char*)p->payload;
 800f2dc:	6845      	ldr	r5, [r0, #4]
    if (datalen) /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
 800f2de:	b9dc      	cbnz	r4, 800f318 <fsm_sdata+0x7c>
	MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
    MAKEHEADER(outp, f->protocol);
 800f2e0:	23ff      	movs	r3, #255	; 0xff
 800f2e2:	702b      	strb	r3, [r5, #0]
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	706b      	strb	r3, [r5, #1]
 800f2e8:	89f3      	ldrh	r3, [r6, #14]
 800f2ea:	0a1b      	lsrs	r3, r3, #8
 800f2ec:	70ab      	strb	r3, [r5, #2]
 800f2ee:	89f3      	ldrh	r3, [r6, #14]
 800f2f0:	70eb      	strb	r3, [r5, #3]
    PUTCHAR(code, outp);
 800f2f2:	f885 9004 	strb.w	r9, [r5, #4]
    PUTCHAR(id, outp);
 800f2f6:	f885 8005 	strb.w	r8, [r5, #5]
    PUTSHORT(outlen, outp);
 800f2fa:	ea4f 232b 	mov.w	r3, fp, asr #8
 800f2fe:	71ab      	strb	r3, [r5, #6]
 800f300:	f885 b007 	strb.w	fp, [r5, #7]
    ppp_write(pcb, p);
 800f304:	4639      	mov	r1, r7
 800f306:	4650      	mov	r0, sl
 800f308:	f003 fa02 	bl	8012710 <ppp_write>
}
 800f30c:	b003      	add	sp, #12
 800f30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p);
 800f312:	f7f9 fedd 	bl	80090d0 <pbuf_free>
        return;
 800f316:	e7f9      	b.n	800f30c <fsm_sdata+0x70>
	MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
 800f318:	4622      	mov	r2, r4
 800f31a:	9901      	ldr	r1, [sp, #4]
 800f31c:	f105 0008 	add.w	r0, r5, #8
 800f320:	f005 f836 	bl	8014390 <memcpy>
 800f324:	e7dc      	b.n	800f2e0 <fsm_sdata+0x44>
	...

0800f328 <fsm_timeout>:
static void fsm_timeout(void *arg) {
 800f328:	b570      	push	{r4, r5, r6, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	4604      	mov	r4, r0
    switch (f->state) {
 800f32e:	7c03      	ldrb	r3, [r0, #16]
 800f330:	2b05      	cmp	r3, #5
 800f332:	d914      	bls.n	800f35e <fsm_timeout+0x36>
 800f334:	3b06      	subs	r3, #6
 800f336:	b2db      	uxtb	r3, r3
 800f338:	2b02      	cmp	r3, #2
 800f33a:	d812      	bhi.n	800f362 <fsm_timeout+0x3a>
	if (f->retransmits <= 0) {
 800f33c:	7d03      	ldrb	r3, [r0, #20]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d03c      	beq.n	800f3bc <fsm_timeout+0x94>
	    if (f->callbacks->retransmit)
 800f342:	6843      	ldr	r3, [r0, #4]
 800f344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f346:	b103      	cbz	r3, 800f34a <fsm_timeout+0x22>
		(*f->callbacks->retransmit)(f);
 800f348:	4798      	blx	r3
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
 800f34a:	2101      	movs	r1, #1
 800f34c:	4620      	mov	r0, r4
 800f34e:	f7ff fea3 	bl	800f098 <fsm_sconfreq>
	    if( f->state == PPP_FSM_ACKRCVD )
 800f352:	7c23      	ldrb	r3, [r4, #16]
 800f354:	2b07      	cmp	r3, #7
		f->state = PPP_FSM_REQSENT;
 800f356:	bf04      	itt	eq
 800f358:	2306      	moveq	r3, #6
 800f35a:	7423      	strbeq	r3, [r4, #16]
}
 800f35c:	e001      	b.n	800f362 <fsm_timeout+0x3a>
    switch (f->state) {
 800f35e:	2b03      	cmp	r3, #3
 800f360:	d801      	bhi.n	800f366 <fsm_timeout+0x3e>
}
 800f362:	b002      	add	sp, #8
 800f364:	bd70      	pop	{r4, r5, r6, pc}
	if( f->retransmits <= 0 ){
 800f366:	7d02      	ldrb	r2, [r0, #20]
 800f368:	b952      	cbnz	r2, 800f380 <fsm_timeout+0x58>
	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
 800f36a:	2b04      	cmp	r3, #4
 800f36c:	bf0c      	ite	eq
 800f36e:	2302      	moveq	r3, #2
 800f370:	2303      	movne	r3, #3
 800f372:	7403      	strb	r3, [r0, #16]
	    if( f->callbacks->finished )
 800f374:	6843      	ldr	r3, [r0, #4]
 800f376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d0f2      	beq.n	800f362 <fsm_timeout+0x3a>
		(*f->callbacks->finished)(f);
 800f37c:	4798      	blx	r3
 800f37e:	e7f0      	b.n	800f362 <fsm_timeout+0x3a>
    ppp_pcb *pcb = f->pcb;
 800f380:	6806      	ldr	r6, [r0, #0]
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800f382:	7c82      	ldrb	r2, [r0, #18]
 800f384:	3201      	adds	r2, #1
 800f386:	b2d2      	uxtb	r2, r2
 800f388:	7482      	strb	r2, [r0, #18]
 800f38a:	74c2      	strb	r2, [r0, #19]
 800f38c:	7e03      	ldrb	r3, [r0, #24]
 800f38e:	9300      	str	r3, [sp, #0]
 800f390:	6883      	ldr	r3, [r0, #8]
 800f392:	2105      	movs	r1, #5
 800f394:	f7ff ff82 	bl	800f29c <fsm_sdata>
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800f398:	4d11      	ldr	r5, [pc, #68]	; (800f3e0 <fsm_timeout+0xb8>)
 800f39a:	4621      	mov	r1, r4
 800f39c:	4628      	mov	r0, r5
 800f39e:	f7fe fd93 	bl	800dec8 <sys_untimeout>
 800f3a2:	7933      	ldrb	r3, [r6, #4]
 800f3a4:	4622      	mov	r2, r4
 800f3a6:	4629      	mov	r1, r5
 800f3a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f3ac:	fb00 f003 	mul.w	r0, r0, r3
 800f3b0:	f7fe fd24 	bl	800ddfc <sys_timeout>
	    --f->retransmits;
 800f3b4:	7d23      	ldrb	r3, [r4, #20]
 800f3b6:	3b01      	subs	r3, #1
 800f3b8:	7523      	strb	r3, [r4, #20]
 800f3ba:	e7d2      	b.n	800f362 <fsm_timeout+0x3a>
	    ppp_warn("%s: timeout sending Config-Requests", PROTO_NAME(f));
 800f3bc:	6843      	ldr	r3, [r0, #4]
 800f3be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800f3c0:	4808      	ldr	r0, [pc, #32]	; (800f3e4 <fsm_timeout+0xbc>)
 800f3c2:	f004 fa32 	bl	801382a <ppp_warn>
	    f->state = PPP_FSM_STOPPED;
 800f3c6:	2303      	movs	r3, #3
 800f3c8:	7423      	strb	r3, [r4, #16]
	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
 800f3ca:	7c63      	ldrb	r3, [r4, #17]
 800f3cc:	f013 0f01 	tst.w	r3, #1
 800f3d0:	d1c7      	bne.n	800f362 <fsm_timeout+0x3a>
 800f3d2:	6863      	ldr	r3, [r4, #4]
 800f3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d0c3      	beq.n	800f362 <fsm_timeout+0x3a>
		(*f->callbacks->finished)(f);
 800f3da:	4620      	mov	r0, r4
 800f3dc:	4798      	blx	r3
 800f3de:	e7c0      	b.n	800f362 <fsm_timeout+0x3a>
 800f3e0:	0800f329 	.word	0x0800f329
 800f3e4:	080192c8 	.word	0x080192c8

0800f3e8 <terminate_layer>:
static void terminate_layer(fsm *f, int nextstate) {
 800f3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	460d      	mov	r5, r1
    ppp_pcb *pcb = f->pcb;
 800f3f0:	6806      	ldr	r6, [r0, #0]
    if( f->state != PPP_FSM_OPENED )
 800f3f2:	7c03      	ldrb	r3, [r0, #16]
 800f3f4:	2b09      	cmp	r3, #9
 800f3f6:	d104      	bne.n	800f402 <terminate_layer+0x1a>
    else if( f->callbacks->down )
 800f3f8:	6843      	ldr	r3, [r0, #4]
 800f3fa:	6a1b      	ldr	r3, [r3, #32]
 800f3fc:	b12b      	cbz	r3, 800f40a <terminate_layer+0x22>
	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
 800f3fe:	4798      	blx	r3
 800f400:	e003      	b.n	800f40a <terminate_layer+0x22>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f402:	4601      	mov	r1, r0
 800f404:	4818      	ldr	r0, [pc, #96]	; (800f468 <terminate_layer+0x80>)
 800f406:	f7fe fd5f 	bl	800dec8 <sys_untimeout>
    f->retransmits = pcb->settings.fsm_max_term_transmits;
 800f40a:	79b3      	ldrb	r3, [r6, #6]
 800f40c:	7523      	strb	r3, [r4, #20]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800f40e:	7ca2      	ldrb	r2, [r4, #18]
 800f410:	3201      	adds	r2, #1
 800f412:	b2d2      	uxtb	r2, r2
 800f414:	74a2      	strb	r2, [r4, #18]
 800f416:	74e2      	strb	r2, [r4, #19]
 800f418:	7e23      	ldrb	r3, [r4, #24]
 800f41a:	9300      	str	r3, [sp, #0]
 800f41c:	68a3      	ldr	r3, [r4, #8]
 800f41e:	2105      	movs	r1, #5
 800f420:	4620      	mov	r0, r4
 800f422:	f7ff ff3b 	bl	800f29c <fsm_sdata>
    if (f->retransmits == 0) {
 800f426:	7d23      	ldrb	r3, [r4, #20]
 800f428:	b953      	cbnz	r3, 800f440 <terminate_layer+0x58>
	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
 800f42a:	2d04      	cmp	r5, #4
 800f42c:	bf0c      	ite	eq
 800f42e:	2302      	moveq	r3, #2
 800f430:	2303      	movne	r3, #3
 800f432:	7423      	strb	r3, [r4, #16]
	if( f->callbacks->finished )
 800f434:	6863      	ldr	r3, [r4, #4]
 800f436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f438:	b1a3      	cbz	r3, 800f464 <terminate_layer+0x7c>
	    (*f->callbacks->finished)(f);
 800f43a:	4620      	mov	r0, r4
 800f43c:	4798      	blx	r3
 800f43e:	e011      	b.n	800f464 <terminate_layer+0x7c>
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800f440:	4f09      	ldr	r7, [pc, #36]	; (800f468 <terminate_layer+0x80>)
 800f442:	4621      	mov	r1, r4
 800f444:	4638      	mov	r0, r7
 800f446:	f7fe fd3f 	bl	800dec8 <sys_untimeout>
 800f44a:	7933      	ldrb	r3, [r6, #4]
 800f44c:	4622      	mov	r2, r4
 800f44e:	4639      	mov	r1, r7
 800f450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f454:	fb00 f003 	mul.w	r0, r0, r3
 800f458:	f7fe fcd0 	bl	800ddfc <sys_timeout>
    --f->retransmits;
 800f45c:	7d23      	ldrb	r3, [r4, #20]
 800f45e:	3b01      	subs	r3, #1
 800f460:	7523      	strb	r3, [r4, #20]
    f->state = nextstate;
 800f462:	7425      	strb	r5, [r4, #16]
}
 800f464:	b003      	add	sp, #12
 800f466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f468:	0800f329 	.word	0x0800f329

0800f46c <fsm_close>:
void fsm_close(fsm *f, const char *reason) {
 800f46c:	b510      	push	{r4, lr}
 800f46e:	4604      	mov	r4, r0
    f->term_reason = reason;
 800f470:	6081      	str	r1, [r0, #8]
    f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
 800f472:	b131      	cbz	r1, 800f482 <fsm_close+0x16>
 800f474:	4608      	mov	r0, r1
 800f476:	f7f0 fee1 	bl	800023c <strlen>
 800f47a:	28fe      	cmp	r0, #254	; 0xfe
 800f47c:	d803      	bhi.n	800f486 <fsm_close+0x1a>
 800f47e:	b2c0      	uxtb	r0, r0
 800f480:	e002      	b.n	800f488 <fsm_close+0x1c>
 800f482:	2000      	movs	r0, #0
 800f484:	e000      	b.n	800f488 <fsm_close+0x1c>
 800f486:	20ff      	movs	r0, #255	; 0xff
 800f488:	7620      	strb	r0, [r4, #24]
    switch( f->state ){
 800f48a:	7c23      	ldrb	r3, [r4, #16]
 800f48c:	3b01      	subs	r3, #1
 800f48e:	2b08      	cmp	r3, #8
 800f490:	d808      	bhi.n	800f4a4 <fsm_close+0x38>
 800f492:	e8df f003 	tbb	[pc, r3]
 800f496:	0705      	.short	0x0705
 800f498:	0e0b0708 	.word	0x0e0b0708
 800f49c:	0e0e      	.short	0x0e0e
 800f49e:	0e          	.byte	0x0e
 800f49f:	00          	.byte	0x00
	f->state = PPP_FSM_INITIAL;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	7423      	strb	r3, [r4, #16]
}
 800f4a4:	bd10      	pop	{r4, pc}
	f->state = PPP_FSM_CLOSED;
 800f4a6:	2302      	movs	r3, #2
 800f4a8:	7423      	strb	r3, [r4, #16]
	break;
 800f4aa:	e7fb      	b.n	800f4a4 <fsm_close+0x38>
	f->state = PPP_FSM_CLOSING;
 800f4ac:	2304      	movs	r3, #4
 800f4ae:	7423      	strb	r3, [r4, #16]
	break;
 800f4b0:	e7f8      	b.n	800f4a4 <fsm_close+0x38>
	terminate_layer(f, PPP_FSM_CLOSING);
 800f4b2:	2104      	movs	r1, #4
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f7ff ff97 	bl	800f3e8 <terminate_layer>
}
 800f4ba:	e7f3      	b.n	800f4a4 <fsm_close+0x38>

0800f4bc <fsm_protreject>:
void fsm_protreject(fsm *f) {
 800f4bc:	b510      	push	{r4, lr}
 800f4be:	4604      	mov	r4, r0
    switch( f->state ){
 800f4c0:	7c03      	ldrb	r3, [r0, #16]
 800f4c2:	3b02      	subs	r3, #2
 800f4c4:	2b07      	cmp	r3, #7
 800f4c6:	d810      	bhi.n	800f4ea <fsm_protreject+0x2e>
 800f4c8:	e8df f003 	tbb	[pc, r3]
 800f4cc:	10041408 	.word	0x10041408
 800f4d0:	1d101010 	.word	0x1d101010
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f4d4:	4601      	mov	r1, r0
 800f4d6:	480e      	ldr	r0, [pc, #56]	; (800f510 <fsm_protreject+0x54>)
 800f4d8:	f7fe fcf6 	bl	800dec8 <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 800f4dc:	2302      	movs	r3, #2
 800f4de:	7423      	strb	r3, [r4, #16]
	if( f->callbacks->finished )
 800f4e0:	6863      	ldr	r3, [r4, #4]
 800f4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4e4:	b10b      	cbz	r3, 800f4ea <fsm_protreject+0x2e>
	    (*f->callbacks->finished)(f);
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	4798      	blx	r3
}
 800f4ea:	bd10      	pop	{r4, pc}
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f4ec:	4601      	mov	r1, r0
 800f4ee:	4808      	ldr	r0, [pc, #32]	; (800f510 <fsm_protreject+0x54>)
 800f4f0:	f7fe fcea 	bl	800dec8 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800f4f4:	2303      	movs	r3, #3
 800f4f6:	7423      	strb	r3, [r4, #16]
	if( f->callbacks->finished )
 800f4f8:	6863      	ldr	r3, [r4, #4]
 800f4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d0f4      	beq.n	800f4ea <fsm_protreject+0x2e>
	    (*f->callbacks->finished)(f);
 800f500:	4620      	mov	r0, r4
 800f502:	4798      	blx	r3
 800f504:	e7f1      	b.n	800f4ea <fsm_protreject+0x2e>
	terminate_layer(f, PPP_FSM_STOPPING);
 800f506:	2105      	movs	r1, #5
 800f508:	f7ff ff6e 	bl	800f3e8 <terminate_layer>
}
 800f50c:	e7ed      	b.n	800f4ea <fsm_protreject+0x2e>
 800f50e:	bf00      	nop
 800f510:	0800f329 	.word	0x0800f329

0800f514 <fsm_input>:
    if (l < HEADERLEN) {
 800f514:	2a03      	cmp	r2, #3
 800f516:	f340 8223 	ble.w	800f960 <fsm_input+0x44c>
void fsm_input(fsm *f, u_char *inpacket, int l) {
 800f51a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	4605      	mov	r5, r0
 800f522:	460c      	mov	r4, r1
    GETSHORT(len, inp);
 800f524:	788b      	ldrb	r3, [r1, #2]
 800f526:	78ce      	ldrb	r6, [r1, #3]
 800f528:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    if (len < HEADERLEN) {
 800f52c:	2e03      	cmp	r6, #3
 800f52e:	f340 818c 	ble.w	800f84a <fsm_input+0x336>
    if (len > l) {
 800f532:	42b2      	cmp	r2, r6
 800f534:	f2c0 8189 	blt.w	800f84a <fsm_input+0x336>
    if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
 800f538:	7c03      	ldrb	r3, [r0, #16]
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	f240 8185 	bls.w	800f84a <fsm_input+0x336>
    GETCHAR(code, inp);
 800f540:	7809      	ldrb	r1, [r1, #0]
    GETCHAR(id, inp);
 800f542:	7867      	ldrb	r7, [r4, #1]
    GETSHORT(len, inp);
 800f544:	f104 0804 	add.w	r8, r4, #4
    len -= HEADERLEN;		/* subtract header length */
 800f548:	f1a6 0904 	sub.w	r9, r6, #4
    switch (code) {
 800f54c:	1e4a      	subs	r2, r1, #1
 800f54e:	2a06      	cmp	r2, #6
 800f550:	f200 81e0 	bhi.w	800f914 <fsm_input+0x400>
 800f554:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f558:	00750007 	.word	0x00750007
 800f55c:	00db00db 	.word	0x00db00db
 800f560:	01850149 	.word	0x01850149
 800f564:	01ce      	.short	0x01ce
	fsm_rconfreq(f, id, inp, len);
 800f566:	f8cd 900c 	str.w	r9, [sp, #12]
    switch( f->state ){
 800f56a:	3b02      	subs	r3, #2
 800f56c:	2b07      	cmp	r3, #7
 800f56e:	d81c      	bhi.n	800f5aa <fsm_input+0x96>
 800f570:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f574:	003f0008 	.word	0x003f0008
 800f578:	016b016b 	.word	0x016b016b
 800f57c:	001b001b 	.word	0x001b001b
 800f580:	0010001b 	.word	0x0010001b
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800f584:	2300      	movs	r3, #0
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	463a      	mov	r2, r7
 800f58a:	2106      	movs	r1, #6
 800f58c:	4628      	mov	r0, r5
 800f58e:	f7ff fe85 	bl	800f29c <fsm_sdata>
	return;
 800f592:	e15a      	b.n	800f84a <fsm_input+0x336>
	if( f->callbacks->down )
 800f594:	686b      	ldr	r3, [r5, #4]
 800f596:	6a1b      	ldr	r3, [r3, #32]
 800f598:	b10b      	cbz	r3, 800f59e <fsm_input+0x8a>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800f59a:	4628      	mov	r0, r5
 800f59c:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800f59e:	2100      	movs	r1, #0
 800f5a0:	4628      	mov	r0, r5
 800f5a2:	f7ff fd79 	bl	800f098 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f5a6:	2306      	movs	r3, #6
 800f5a8:	742b      	strb	r3, [r5, #16]
    if (f->callbacks->reqci){		/* Check CI */
 800f5aa:	686b      	ldr	r3, [r5, #4]
 800f5ac:	699c      	ldr	r4, [r3, #24]
 800f5ae:	b33c      	cbz	r4, 800f600 <fsm_input+0xec>
	reject_if_disagree = (f->nakloops >= f->maxnakloops);
 800f5b0:	7d6a      	ldrb	r2, [r5, #21]
 800f5b2:	7deb      	ldrb	r3, [r5, #23]
	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	bf34      	ite	cc
 800f5b8:	2300      	movcc	r3, #0
 800f5ba:	2301      	movcs	r3, #1
 800f5bc:	aa03      	add	r2, sp, #12
 800f5be:	4641      	mov	r1, r8
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	47a0      	blx	r4
 800f5c4:	4604      	mov	r4, r0
    fsm_sdata(f, code, id, inp, len);
 800f5c6:	9b03      	ldr	r3, [sp, #12]
 800f5c8:	9300      	str	r3, [sp, #0]
 800f5ca:	4643      	mov	r3, r8
 800f5cc:	463a      	mov	r2, r7
 800f5ce:	b2c1      	uxtb	r1, r0
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f7ff fe63 	bl	800f29c <fsm_sdata>
    if (code == CONFACK) {
 800f5d6:	2c02      	cmp	r4, #2
 800f5d8:	d01e      	beq.n	800f618 <fsm_input+0x104>
	if (f->state != PPP_FSM_ACKRCVD)
 800f5da:	7c2b      	ldrb	r3, [r5, #16]
 800f5dc:	2b07      	cmp	r3, #7
 800f5de:	d001      	beq.n	800f5e4 <fsm_input+0xd0>
	    f->state = PPP_FSM_REQSENT;
 800f5e0:	2306      	movs	r3, #6
 800f5e2:	742b      	strb	r3, [r5, #16]
	if( code == CONFNAK )
 800f5e4:	2c03      	cmp	r4, #3
 800f5e6:	f040 8130 	bne.w	800f84a <fsm_input+0x336>
	    ++f->nakloops;
 800f5ea:	7d6b      	ldrb	r3, [r5, #21]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	756b      	strb	r3, [r5, #21]
	break;
 800f5f0:	e12b      	b.n	800f84a <fsm_input+0x336>
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	f7ff fd4f 	bl	800f098 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f5fa:	2306      	movs	r3, #6
 800f5fc:	742b      	strb	r3, [r5, #16]
	break;
 800f5fe:	e7d4      	b.n	800f5aa <fsm_input+0x96>
    } else if (len)
 800f600:	9b03      	ldr	r3, [sp, #12]
 800f602:	2b00      	cmp	r3, #0
 800f604:	f040 819f 	bne.w	800f946 <fsm_input+0x432>
    fsm_sdata(f, code, id, inp, len);
 800f608:	2300      	movs	r3, #0
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	4643      	mov	r3, r8
 800f60e:	463a      	mov	r2, r7
 800f610:	2102      	movs	r1, #2
 800f612:	4628      	mov	r0, r5
 800f614:	f7ff fe42 	bl	800f29c <fsm_sdata>
	if (f->state == PPP_FSM_ACKRCVD) {
 800f618:	7c2b      	ldrb	r3, [r5, #16]
 800f61a:	2b07      	cmp	r3, #7
 800f61c:	d004      	beq.n	800f628 <fsm_input+0x114>
	    f->state = PPP_FSM_ACKSENT;
 800f61e:	2308      	movs	r3, #8
 800f620:	742b      	strb	r3, [r5, #16]
	f->nakloops = 0;
 800f622:	2300      	movs	r3, #0
 800f624:	756b      	strb	r3, [r5, #21]
 800f626:	e110      	b.n	800f84a <fsm_input+0x336>
	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f628:	4629      	mov	r1, r5
 800f62a:	48a6      	ldr	r0, [pc, #664]	; (800f8c4 <fsm_input+0x3b0>)
 800f62c:	f7fe fc4c 	bl	800dec8 <sys_untimeout>
	    f->state = PPP_FSM_OPENED;
 800f630:	2309      	movs	r3, #9
 800f632:	742b      	strb	r3, [r5, #16]
	    if (f->callbacks->up)
 800f634:	686b      	ldr	r3, [r5, #4]
 800f636:	69db      	ldr	r3, [r3, #28]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d0f2      	beq.n	800f622 <fsm_input+0x10e>
		(*f->callbacks->up)(f);	/* Inform upper layers */
 800f63c:	4628      	mov	r0, r5
 800f63e:	4798      	blx	r3
 800f640:	e7ef      	b.n	800f622 <fsm_input+0x10e>
    if (id != f->reqid || f->seen_ack)		/* Expected id? */
 800f642:	7ceb      	ldrb	r3, [r5, #19]
 800f644:	42bb      	cmp	r3, r7
 800f646:	f040 8100 	bne.w	800f84a <fsm_input+0x336>
 800f64a:	7b2b      	ldrb	r3, [r5, #12]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f040 80fc 	bne.w	800f84a <fsm_input+0x336>
    ppp_pcb *pcb = f->pcb;
 800f652:	682c      	ldr	r4, [r5, #0]
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 800f654:	686b      	ldr	r3, [r5, #4]
 800f656:	68db      	ldr	r3, [r3, #12]
 800f658:	b1d3      	cbz	r3, 800f690 <fsm_input+0x17c>
 800f65a:	464a      	mov	r2, r9
 800f65c:	4641      	mov	r1, r8
 800f65e:	4628      	mov	r0, r5
 800f660:	4798      	blx	r3
 800f662:	fab0 f080 	clz	r0, r0
 800f666:	0940      	lsrs	r0, r0, #5
 800f668:	b9b8      	cbnz	r0, 800f69a <fsm_input+0x186>
    f->seen_ack = 1;
 800f66a:	2301      	movs	r3, #1
 800f66c:	732b      	strb	r3, [r5, #12]
    f->rnakloops = 0;
 800f66e:	2300      	movs	r3, #0
 800f670:	75ab      	strb	r3, [r5, #22]
    switch (f->state) {
 800f672:	7c2b      	ldrb	r3, [r5, #16]
 800f674:	3b02      	subs	r3, #2
 800f676:	2b07      	cmp	r3, #7
 800f678:	f200 80e7 	bhi.w	800f84a <fsm_input+0x336>
 800f67c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f680:	00130013 	.word	0x00130013
 800f684:	00e500e5 	.word	0x00e500e5
 800f688:	0020001b 	.word	0x0020001b
 800f68c:	003b002b 	.word	0x003b002b
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 800f690:	f1b9 0000 	subs.w	r0, r9, #0
 800f694:	bf18      	it	ne
 800f696:	2001      	movne	r0, #1
 800f698:	e7e6      	b.n	800f668 <fsm_input+0x154>
	ppp_error("Received bad configure-ack: %P", inp, len);
 800f69a:	464a      	mov	r2, r9
 800f69c:	4641      	mov	r1, r8
 800f69e:	488a      	ldr	r0, [pc, #552]	; (800f8c8 <fsm_input+0x3b4>)
 800f6a0:	f004 f8b4 	bl	801380c <ppp_error>
	return;
 800f6a4:	e0d1      	b.n	800f84a <fsm_input+0x336>
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	9300      	str	r3, [sp, #0]
 800f6aa:	463a      	mov	r2, r7
 800f6ac:	2106      	movs	r1, #6
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f7ff fdf4 	bl	800f29c <fsm_sdata>
	break;
 800f6b4:	e0c9      	b.n	800f84a <fsm_input+0x336>
	f->state = PPP_FSM_ACKRCVD;
 800f6b6:	2307      	movs	r3, #7
 800f6b8:	742b      	strb	r3, [r5, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800f6ba:	7963      	ldrb	r3, [r4, #5]
 800f6bc:	752b      	strb	r3, [r5, #20]
	break;
 800f6be:	e0c4      	b.n	800f84a <fsm_input+0x336>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f6c0:	4629      	mov	r1, r5
 800f6c2:	4880      	ldr	r0, [pc, #512]	; (800f8c4 <fsm_input+0x3b0>)
 800f6c4:	f7fe fc00 	bl	800dec8 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	f7ff fce4 	bl	800f098 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f6d0:	2306      	movs	r3, #6
 800f6d2:	742b      	strb	r3, [r5, #16]
	break;
 800f6d4:	e0b9      	b.n	800f84a <fsm_input+0x336>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	487a      	ldr	r0, [pc, #488]	; (800f8c4 <fsm_input+0x3b0>)
 800f6da:	f7fe fbf5 	bl	800dec8 <sys_untimeout>
	f->state = PPP_FSM_OPENED;
 800f6de:	2309      	movs	r3, #9
 800f6e0:	742b      	strb	r3, [r5, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800f6e2:	7963      	ldrb	r3, [r4, #5]
 800f6e4:	752b      	strb	r3, [r5, #20]
	if (f->callbacks->up)
 800f6e6:	686b      	ldr	r3, [r5, #4]
 800f6e8:	69db      	ldr	r3, [r3, #28]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f000 80ad 	beq.w	800f84a <fsm_input+0x336>
	    (*f->callbacks->up)(f);	/* Inform upper layers */
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	4798      	blx	r3
 800f6f4:	e0a9      	b.n	800f84a <fsm_input+0x336>
	if (f->callbacks->down)
 800f6f6:	686b      	ldr	r3, [r5, #4]
 800f6f8:	6a1b      	ldr	r3, [r3, #32]
 800f6fa:	b10b      	cbz	r3, 800f700 <fsm_input+0x1ec>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800f700:	2100      	movs	r1, #0
 800f702:	4628      	mov	r0, r5
 800f704:	f7ff fcc8 	bl	800f098 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f708:	2306      	movs	r3, #6
 800f70a:	742b      	strb	r3, [r5, #16]
	break;
 800f70c:	e09d      	b.n	800f84a <fsm_input+0x336>
    if (id != f->reqid || f->seen_ack)	/* Expected id? */
 800f70e:	7ceb      	ldrb	r3, [r5, #19]
 800f710:	42bb      	cmp	r3, r7
 800f712:	f040 809a 	bne.w	800f84a <fsm_input+0x336>
 800f716:	7b2b      	ldrb	r3, [r5, #12]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f040 8096 	bne.w	800f84a <fsm_input+0x336>
    if (code == CONFNAK) {
 800f71e:	2903      	cmp	r1, #3
 800f720:	d017      	beq.n	800f752 <fsm_input+0x23e>
	f->rnakloops = 0;
 800f722:	2300      	movs	r3, #0
 800f724:	75ab      	strb	r3, [r5, #22]
	if (f->callbacks->rejci == NULL
 800f726:	686b      	ldr	r3, [r5, #4]
 800f728:	695b      	ldr	r3, [r3, #20]
 800f72a:	b35b      	cbz	r3, 800f784 <fsm_input+0x270>
	    || !(ret = f->callbacks->rejci(f, inp, len))) {
 800f72c:	464a      	mov	r2, r9
 800f72e:	4641      	mov	r1, r8
 800f730:	4628      	mov	r0, r5
 800f732:	4798      	blx	r3
 800f734:	4604      	mov	r4, r0
 800f736:	b328      	cbz	r0, 800f784 <fsm_input+0x270>
    f->seen_ack = 1;
 800f738:	2301      	movs	r3, #1
 800f73a:	732b      	strb	r3, [r5, #12]
    switch (f->state) {
 800f73c:	7c2b      	ldrb	r3, [r5, #16]
 800f73e:	3b02      	subs	r3, #2
 800f740:	2b07      	cmp	r3, #7
 800f742:	f200 8082 	bhi.w	800f84a <fsm_input+0x336>
 800f746:	e8df f003 	tbb	[pc, r3]
 800f74a:	2323      	.short	0x2323
 800f74c:	392b8080 	.word	0x392b8080
 800f750:	442b      	.short	0x442b
	++f->rnakloops;
 800f752:	7dab      	ldrb	r3, [r5, #22]
 800f754:	3301      	adds	r3, #1
 800f756:	b2db      	uxtb	r3, r3
 800f758:	75ab      	strb	r3, [r5, #22]
	treat_as_reject = (f->rnakloops >= f->maxnakloops);
 800f75a:	7dea      	ldrb	r2, [r5, #23]
 800f75c:	429a      	cmp	r2, r3
 800f75e:	bf8c      	ite	hi
 800f760:	2300      	movhi	r3, #0
 800f762:	2301      	movls	r3, #1
	if (f->callbacks->nakci == NULL
 800f764:	686a      	ldr	r2, [r5, #4]
 800f766:	6914      	ldr	r4, [r2, #16]
 800f768:	b134      	cbz	r4, 800f778 <fsm_input+0x264>
	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
 800f76a:	464a      	mov	r2, r9
 800f76c:	4641      	mov	r1, r8
 800f76e:	4628      	mov	r0, r5
 800f770:	47a0      	blx	r4
 800f772:	4604      	mov	r4, r0
 800f774:	2800      	cmp	r0, #0
 800f776:	d1df      	bne.n	800f738 <fsm_input+0x224>
	    ppp_error("Received bad configure-nak: %P", inp, len);
 800f778:	464a      	mov	r2, r9
 800f77a:	4641      	mov	r1, r8
 800f77c:	4853      	ldr	r0, [pc, #332]	; (800f8cc <fsm_input+0x3b8>)
 800f77e:	f004 f845 	bl	801380c <ppp_error>
	    return;
 800f782:	e062      	b.n	800f84a <fsm_input+0x336>
	    ppp_error("Received bad configure-rej: %P", inp, len);
 800f784:	464a      	mov	r2, r9
 800f786:	4641      	mov	r1, r8
 800f788:	4851      	ldr	r0, [pc, #324]	; (800f8d0 <fsm_input+0x3bc>)
 800f78a:	f004 f83f 	bl	801380c <ppp_error>
	    return;
 800f78e:	e05c      	b.n	800f84a <fsm_input+0x336>
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800f790:	2300      	movs	r3, #0
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	463a      	mov	r2, r7
 800f796:	2106      	movs	r1, #6
 800f798:	4628      	mov	r0, r5
 800f79a:	f7ff fd7f 	bl	800f29c <fsm_sdata>
	break;
 800f79e:	e054      	b.n	800f84a <fsm_input+0x336>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f7a0:	4629      	mov	r1, r5
 800f7a2:	4848      	ldr	r0, [pc, #288]	; (800f8c4 <fsm_input+0x3b0>)
 800f7a4:	f7fe fb90 	bl	800dec8 <sys_untimeout>
	if (ret < 0)
 800f7a8:	2c00      	cmp	r4, #0
 800f7aa:	da02      	bge.n	800f7b2 <fsm_input+0x29e>
	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
 800f7ac:	2303      	movs	r3, #3
 800f7ae:	742b      	strb	r3, [r5, #16]
 800f7b0:	e04b      	b.n	800f84a <fsm_input+0x336>
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	f7ff fc6f 	bl	800f098 <fsm_sconfreq>
 800f7ba:	e046      	b.n	800f84a <fsm_input+0x336>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800f7bc:	4629      	mov	r1, r5
 800f7be:	4841      	ldr	r0, [pc, #260]	; (800f8c4 <fsm_input+0x3b0>)
 800f7c0:	f7fe fb82 	bl	800dec8 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	f7ff fc66 	bl	800f098 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f7cc:	2306      	movs	r3, #6
 800f7ce:	742b      	strb	r3, [r5, #16]
	break;
 800f7d0:	e03b      	b.n	800f84a <fsm_input+0x336>
	if (f->callbacks->down)
 800f7d2:	686b      	ldr	r3, [r5, #4]
 800f7d4:	6a1b      	ldr	r3, [r3, #32]
 800f7d6:	b10b      	cbz	r3, 800f7dc <fsm_input+0x2c8>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800f7d8:	4628      	mov	r0, r5
 800f7da:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800f7dc:	2100      	movs	r1, #0
 800f7de:	4628      	mov	r0, r5
 800f7e0:	f7ff fc5a 	bl	800f098 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f7e4:	2306      	movs	r3, #6
 800f7e6:	742b      	strb	r3, [r5, #16]
	break;
 800f7e8:	e02f      	b.n	800f84a <fsm_input+0x336>
    switch (f->state) {
 800f7ea:	2b08      	cmp	r3, #8
 800f7ec:	d924      	bls.n	800f838 <fsm_input+0x324>
 800f7ee:	2b09      	cmp	r3, #9
 800f7f0:	d124      	bne.n	800f83c <fsm_input+0x328>
    ppp_pcb *pcb = f->pcb;
 800f7f2:	682e      	ldr	r6, [r5, #0]
	if (len > 0) {
 800f7f4:	f1b9 0f00 	cmp.w	r9, #0
 800f7f8:	dd2d      	ble.n	800f856 <fsm_input+0x342>
	    ppp_info("%s terminated by peer (%0.*v)", PROTO_NAME(f), len, p);
 800f7fa:	6869      	ldr	r1, [r5, #4]
 800f7fc:	4643      	mov	r3, r8
 800f7fe:	464a      	mov	r2, r9
 800f800:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800f802:	4834      	ldr	r0, [pc, #208]	; (800f8d4 <fsm_input+0x3c0>)
 800f804:	f004 f82f 	bl	8013866 <ppp_info>
	f->retransmits = 0;
 800f808:	2300      	movs	r3, #0
 800f80a:	752b      	strb	r3, [r5, #20]
	f->state = PPP_FSM_STOPPING;
 800f80c:	2305      	movs	r3, #5
 800f80e:	742b      	strb	r3, [r5, #16]
	if (f->callbacks->down)
 800f810:	686b      	ldr	r3, [r5, #4]
 800f812:	6a1b      	ldr	r3, [r3, #32]
 800f814:	b10b      	cbz	r3, 800f81a <fsm_input+0x306>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800f816:	4628      	mov	r0, r5
 800f818:	4798      	blx	r3
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800f81a:	4c2a      	ldr	r4, [pc, #168]	; (800f8c4 <fsm_input+0x3b0>)
 800f81c:	4629      	mov	r1, r5
 800f81e:	4620      	mov	r0, r4
 800f820:	f7fe fb52 	bl	800dec8 <sys_untimeout>
 800f824:	7933      	ldrb	r3, [r6, #4]
 800f826:	462a      	mov	r2, r5
 800f828:	4621      	mov	r1, r4
 800f82a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f82e:	fb00 f003 	mul.w	r0, r0, r3
 800f832:	f7fe fae3 	bl	800ddfc <sys_timeout>
	break;
 800f836:	e001      	b.n	800f83c <fsm_input+0x328>
    switch (f->state) {
 800f838:	2b06      	cmp	r3, #6
 800f83a:	d809      	bhi.n	800f850 <fsm_input+0x33c>
    fsm_sdata(f, TERMACK, id, NULL, 0);
 800f83c:	2300      	movs	r3, #0
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	463a      	mov	r2, r7
 800f842:	2106      	movs	r1, #6
 800f844:	4628      	mov	r0, r5
 800f846:	f7ff fd29 	bl	800f29c <fsm_sdata>
}
 800f84a:	b004      	add	sp, #16
 800f84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
 800f850:	2306      	movs	r3, #6
 800f852:	742b      	strb	r3, [r5, #16]
	break;
 800f854:	e7f2      	b.n	800f83c <fsm_input+0x328>
	    ppp_info("%s terminated by peer", PROTO_NAME(f));
 800f856:	686b      	ldr	r3, [r5, #4]
 800f858:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800f85a:	481f      	ldr	r0, [pc, #124]	; (800f8d8 <fsm_input+0x3c4>)
 800f85c:	f004 f803 	bl	8013866 <ppp_info>
 800f860:	e7d2      	b.n	800f808 <fsm_input+0x2f4>
    switch (f->state) {
 800f862:	3b04      	subs	r3, #4
 800f864:	2b05      	cmp	r3, #5
 800f866:	d8f0      	bhi.n	800f84a <fsm_input+0x336>
 800f868:	a201      	add	r2, pc, #4	; (adr r2, 800f870 <fsm_input+0x35c>)
 800f86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f86e:	bf00      	nop
 800f870:	0800f889 	.word	0x0800f889
 800f874:	0800f8a3 	.word	0x0800f8a3
 800f878:	0800f84b 	.word	0x0800f84b
 800f87c:	0800f8bd 	.word	0x0800f8bd
 800f880:	0800f84b 	.word	0x0800f84b
 800f884:	0800f8dd 	.word	0x0800f8dd
	UNTIMEOUT(fsm_timeout, f);
 800f888:	4629      	mov	r1, r5
 800f88a:	480e      	ldr	r0, [pc, #56]	; (800f8c4 <fsm_input+0x3b0>)
 800f88c:	f7fe fb1c 	bl	800dec8 <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 800f890:	2302      	movs	r3, #2
 800f892:	742b      	strb	r3, [r5, #16]
	if( f->callbacks->finished )
 800f894:	686b      	ldr	r3, [r5, #4]
 800f896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d0d6      	beq.n	800f84a <fsm_input+0x336>
	    (*f->callbacks->finished)(f);
 800f89c:	4628      	mov	r0, r5
 800f89e:	4798      	blx	r3
 800f8a0:	e7d3      	b.n	800f84a <fsm_input+0x336>
	UNTIMEOUT(fsm_timeout, f);
 800f8a2:	4629      	mov	r1, r5
 800f8a4:	4807      	ldr	r0, [pc, #28]	; (800f8c4 <fsm_input+0x3b0>)
 800f8a6:	f7fe fb0f 	bl	800dec8 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800f8aa:	2303      	movs	r3, #3
 800f8ac:	742b      	strb	r3, [r5, #16]
	if( f->callbacks->finished )
 800f8ae:	686b      	ldr	r3, [r5, #4]
 800f8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d0c9      	beq.n	800f84a <fsm_input+0x336>
	    (*f->callbacks->finished)(f);
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	4798      	blx	r3
 800f8ba:	e7c6      	b.n	800f84a <fsm_input+0x336>
	f->state = PPP_FSM_REQSENT;
 800f8bc:	2306      	movs	r3, #6
 800f8be:	742b      	strb	r3, [r5, #16]
	break;
 800f8c0:	e7c3      	b.n	800f84a <fsm_input+0x336>
 800f8c2:	bf00      	nop
 800f8c4:	0800f329 	.word	0x0800f329
 800f8c8:	080192ec 	.word	0x080192ec
 800f8cc:	0801930c 	.word	0x0801930c
 800f8d0:	0801932c 	.word	0x0801932c
 800f8d4:	0801934c 	.word	0x0801934c
 800f8d8:	0801936c 	.word	0x0801936c
	if (f->callbacks->down)
 800f8dc:	686b      	ldr	r3, [r5, #4]
 800f8de:	6a1b      	ldr	r3, [r3, #32]
 800f8e0:	b10b      	cbz	r3, 800f8e6 <fsm_input+0x3d2>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800f8e2:	4628      	mov	r0, r5
 800f8e4:	4798      	blx	r3
	fsm_sconfreq(f, 0);
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	f7ff fbd5 	bl	800f098 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800f8ee:	2306      	movs	r3, #6
 800f8f0:	742b      	strb	r3, [r5, #16]
	break;
 800f8f2:	e7aa      	b.n	800f84a <fsm_input+0x336>
    if (len < HEADERLEN) {
 800f8f4:	f1b9 0f03 	cmp.w	r9, #3
 800f8f8:	dda7      	ble.n	800f84a <fsm_input+0x336>
    ppp_warn("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id);
 800f8fa:	6869      	ldr	r1, [r5, #4]
 800f8fc:	7963      	ldrb	r3, [r4, #5]
 800f8fe:	7922      	ldrb	r2, [r4, #4]
 800f900:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800f902:	4818      	ldr	r0, [pc, #96]	; (800f964 <fsm_input+0x450>)
 800f904:	f003 ff91 	bl	801382a <ppp_warn>
    if( f->state == PPP_FSM_ACKRCVD )
 800f908:	7c2b      	ldrb	r3, [r5, #16]
 800f90a:	2b07      	cmp	r3, #7
 800f90c:	d19d      	bne.n	800f84a <fsm_input+0x336>
	f->state = PPP_FSM_REQSENT;
 800f90e:	2306      	movs	r3, #6
 800f910:	742b      	strb	r3, [r5, #16]
 800f912:	e79a      	b.n	800f84a <fsm_input+0x336>
	if( !f->callbacks->extcode
 800f914:	686b      	ldr	r3, [r5, #4]
 800f916:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800f91a:	f1ba 0f00 	cmp.w	sl, #0
 800f91e:	d007      	beq.n	800f930 <fsm_input+0x41c>
	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
 800f920:	f8cd 9000 	str.w	r9, [sp]
 800f924:	4643      	mov	r3, r8
 800f926:	463a      	mov	r2, r7
 800f928:	4628      	mov	r0, r5
 800f92a:	47d0      	blx	sl
 800f92c:	2800      	cmp	r0, #0
 800f92e:	d18c      	bne.n	800f84a <fsm_input+0x336>
	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
 800f930:	7caa      	ldrb	r2, [r5, #18]
 800f932:	3201      	adds	r2, #1
 800f934:	b2d2      	uxtb	r2, r2
 800f936:	74aa      	strb	r2, [r5, #18]
 800f938:	9600      	str	r6, [sp, #0]
 800f93a:	4623      	mov	r3, r4
 800f93c:	2107      	movs	r1, #7
 800f93e:	4628      	mov	r0, r5
 800f940:	f7ff fcac 	bl	800f29c <fsm_sdata>
 800f944:	e781      	b.n	800f84a <fsm_input+0x336>
    fsm_sdata(f, code, id, inp, len);
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	4643      	mov	r3, r8
 800f94a:	463a      	mov	r2, r7
 800f94c:	2104      	movs	r1, #4
 800f94e:	4628      	mov	r0, r5
 800f950:	f7ff fca4 	bl	800f29c <fsm_sdata>
	if (f->state != PPP_FSM_ACKRCVD)
 800f954:	7c2b      	ldrb	r3, [r5, #16]
 800f956:	2b07      	cmp	r3, #7
 800f958:	f43f af77 	beq.w	800f84a <fsm_input+0x336>
	code = CONFREJ;			/* Reject all CI */
 800f95c:	2404      	movs	r4, #4
 800f95e:	e63f      	b.n	800f5e0 <fsm_input+0xcc>
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop
 800f964:	08019384 	.word	0x08019384

0800f968 <ipcp_cilen>:
/*
 * ipcp_cilen - Return length of our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static int ipcp_cilen(fsm *f) {
    ppp_pcb *pcb = f->pcb;
 800f968:	6803      	ldr	r3, [r0, #0]

    /*
     * First see if we want to change our options to the old
     * forms because we have received old forms from the peer.
     */
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 800f96a:	f241 221c 	movw	r2, #4636	; 0x121c
 800f96e:	5c9a      	ldrb	r2, [r3, r2]
 800f970:	f002 0103 	and.w	r1, r2, #3
 800f974:	2903      	cmp	r1, #3
 800f976:	d03b      	beq.n	800f9f0 <ipcp_cilen+0x88>
	go->neg_addr = 0;

#if VJ_SUPPORT
    if (wo->neg_vj && !go->neg_vj && !go->old_vj) {
 800f978:	f241 2204 	movw	r2, #4612	; 0x1204
 800f97c:	5c9a      	ldrb	r2, [r3, r2]
 800f97e:	f012 0f08 	tst.w	r2, #8
 800f982:	d00c      	beq.n	800f99e <ipcp_cilen+0x36>
 800f984:	f241 221c 	movw	r2, #4636	; 0x121c
 800f988:	5c9a      	ldrb	r2, [r3, r2]
 800f98a:	f012 0f18 	tst.w	r2, #24
 800f98e:	d106      	bne.n	800f99e <ipcp_cilen+0x36>
	/* try an older style of VJ negotiation */
	/* use the old style only if the peer did */
	if (ho->neg_vj && ho->old_vj) {
 800f990:	f241 224c 	movw	r2, #4684	; 0x124c
 800f994:	5c9a      	ldrb	r2, [r3, r2]
 800f996:	f002 0218 	and.w	r2, r2, #24
 800f99a:	2a18      	cmp	r2, #24
 800f99c:	d03e      	beq.n	800fa1c <ipcp_cilen+0xb4>
	    go->vj_protocol = ho->vj_protocol;
	}
    }
#endif /* VJ_SUPPORT */

    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800f99e:	f241 221c 	movw	r2, #4636	; 0x121c
 800f9a2:	5c9a      	ldrb	r2, [r3, r2]
 800f9a4:	f002 0103 	and.w	r1, r2, #3
 800f9a8:	2902      	cmp	r1, #2
 800f9aa:	bf0c      	ite	eq
 800f9ac:	200a      	moveq	r0, #10
 800f9ae:	2000      	movne	r0, #0
#if VJ_SUPPORT
	    LENCIVJ(go->neg_vj, go->old_vj) +
 800f9b0:	f012 0f08 	tst.w	r2, #8
 800f9b4:	d03f      	beq.n	800fa36 <ipcp_cilen+0xce>
 800f9b6:	f012 0f10 	tst.w	r2, #16
 800f9ba:	bf14      	ite	ne
 800f9bc:	2104      	movne	r1, #4
 800f9be:	2106      	moveq	r1, #6
    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800f9c0:	4408      	add	r0, r1
#endif /* VJ_SUPPORT */
	    LENCIADDR(go->neg_addr) +
 800f9c2:	f012 0f01 	tst.w	r2, #1
 800f9c6:	bf14      	ite	ne
 800f9c8:	2206      	movne	r2, #6
 800f9ca:	2200      	moveq	r2, #0
	    LENCIVJ(go->neg_vj, go->old_vj) +
 800f9cc:	4410      	add	r0, r2
#if LWIP_DNS
	    LENCIDNS(go->req_dns1) +
 800f9ce:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800f9d2:	331c      	adds	r3, #28
 800f9d4:	785b      	ldrb	r3, [r3, #1]
 800f9d6:	f013 0f01 	tst.w	r3, #1
 800f9da:	bf14      	ite	ne
 800f9dc:	2206      	movne	r2, #6
 800f9de:	2200      	moveq	r2, #0
	    LENCIADDR(go->neg_addr) +
 800f9e0:	4410      	add	r0, r2
	    LENCIDNS(go->req_dns2) +
 800f9e2:	f013 0f02 	tst.w	r3, #2
 800f9e6:	bf14      	ite	ne
 800f9e8:	2306      	movne	r3, #6
 800f9ea:	2300      	moveq	r3, #0
 800f9ec:	4418      	add	r0, r3
#if 0 /* UNUSED - WINS */
	    LENCIWINS(go->winsaddr[0]) +
	    LENCIWINS(go->winsaddr[1]) +
#endif /* UNUSED - WINS */
	    0);
}
 800f9ee:	4770      	bx	lr
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 800f9f0:	f241 214c 	movw	r1, #4684	; 0x124c
 800f9f4:	5c59      	ldrb	r1, [r3, r1]
 800f9f6:	f001 0103 	and.w	r1, r1, #3
 800f9fa:	2902      	cmp	r1, #2
 800f9fc:	d007      	beq.n	800fa0e <ipcp_cilen+0xa6>
    if (wo->neg_vj && !go->neg_vj && !go->old_vj) {
 800f9fe:	f241 2104 	movw	r1, #4612	; 0x1204
 800fa02:	5c59      	ldrb	r1, [r3, r1]
 800fa04:	f011 0f08 	tst.w	r1, #8
 800fa08:	d117      	bne.n	800fa3a <ipcp_cilen+0xd2>
    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800fa0a:	2000      	movs	r0, #0
 800fa0c:	e7d0      	b.n	800f9b0 <ipcp_cilen+0x48>
	go->neg_addr = 0;
 800fa0e:	f241 221c 	movw	r2, #4636	; 0x121c
 800fa12:	5c99      	ldrb	r1, [r3, r2]
 800fa14:	f36f 0100 	bfc	r1, #0, #1
 800fa18:	5499      	strb	r1, [r3, r2]
 800fa1a:	e7ad      	b.n	800f978 <ipcp_cilen+0x10>
	    go->neg_vj = 1;
 800fa1c:	f241 221c 	movw	r2, #4636	; 0x121c
 800fa20:	1898      	adds	r0, r3, r2
 800fa22:	5c99      	ldrb	r1, [r3, r2]
	    go->old_vj = 1;
 800fa24:	f041 0118 	orr.w	r1, r1, #24
 800fa28:	5499      	strb	r1, [r3, r2]
	    go->vj_protocol = ho->vj_protocol;
 800fa2a:	f503 5292 	add.w	r2, r3, #4672	; 0x1240
 800fa2e:	320c      	adds	r2, #12
 800fa30:	8a92      	ldrh	r2, [r2, #20]
 800fa32:	8282      	strh	r2, [r0, #20]
 800fa34:	e7b3      	b.n	800f99e <ipcp_cilen+0x36>
	    LENCIVJ(go->neg_vj, go->old_vj) +
 800fa36:	2100      	movs	r1, #0
 800fa38:	e7c2      	b.n	800f9c0 <ipcp_cilen+0x58>
    if (wo->neg_vj && !go->neg_vj && !go->old_vj) {
 800fa3a:	f241 221c 	movw	r2, #4636	; 0x121c
 800fa3e:	5c9a      	ldrb	r2, [r3, r2]
 800fa40:	f012 0f18 	tst.w	r2, #24
 800fa44:	d0a4      	beq.n	800f990 <ipcp_cilen+0x28>
    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800fa46:	f241 221c 	movw	r2, #4636	; 0x121c
 800fa4a:	5c9a      	ldrb	r2, [r3, r2]
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	e7af      	b.n	800f9b0 <ipcp_cilen+0x48>

0800fa50 <ipcp_close>:
static void ipcp_close(ppp_pcb *pcb, const char *reason) {
 800fa50:	b508      	push	{r3, lr}
    fsm_close(f, reason);
 800fa52:	f500 508f 	add.w	r0, r0, #4576	; 0x11e0
 800fa56:	3008      	adds	r0, #8
 800fa58:	f7ff fd08 	bl	800f46c <fsm_close>
}
 800fa5c:	bd08      	pop	{r3, pc}

0800fa5e <ipcp_open>:
static void ipcp_open(ppp_pcb *pcb) {
 800fa5e:	b510      	push	{r4, lr}
 800fa60:	4604      	mov	r4, r0
    fsm_open(f);
 800fa62:	f500 508f 	add.w	r0, r0, #4576	; 0x11e0
 800fa66:	3008      	adds	r0, #8
 800fa68:	f7ff fbea 	bl	800f240 <fsm_open>
    pcb->ipcp_is_open = 1;
 800fa6c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fa70:	f043 0302 	orr.w	r3, r3, #2
 800fa74:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
 800fa78:	bd10      	pop	{r4, pc}

0800fa7a <ipcp_lowerdown>:
static void ipcp_lowerdown(ppp_pcb *pcb) {
 800fa7a:	b508      	push	{r3, lr}
    fsm_lowerdown(f);
 800fa7c:	f500 508f 	add.w	r0, r0, #4576	; 0x11e0
 800fa80:	3008      	adds	r0, #8
 800fa82:	f7ff fbaf 	bl	800f1e4 <fsm_lowerdown>
}
 800fa86:	bd08      	pop	{r3, pc}

0800fa88 <ipcp_protrej>:
static void ipcp_protrej(ppp_pcb *pcb) {
 800fa88:	b508      	push	{r3, lr}
    fsm_lowerdown(f);
 800fa8a:	f500 508f 	add.w	r0, r0, #4576	; 0x11e0
 800fa8e:	3008      	adds	r0, #8
 800fa90:	f7ff fba8 	bl	800f1e4 <fsm_lowerdown>
}
 800fa94:	bd08      	pop	{r3, pc}

0800fa96 <ipcp_lowerup>:
static void ipcp_lowerup(ppp_pcb *pcb) {
 800fa96:	b508      	push	{r3, lr}
    fsm_lowerup(f);
 800fa98:	f500 508f 	add.w	r0, r0, #4576	; 0x11e0
 800fa9c:	3008      	adds	r0, #8
 800fa9e:	f7ff fb8a 	bl	800f1b6 <fsm_lowerup>
}
 800faa2:	bd08      	pop	{r3, pc}

0800faa4 <ipcp_input>:
static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800faa4:	b508      	push	{r3, lr}
    fsm_input(f, p, len);
 800faa6:	f500 508f 	add.w	r0, r0, #4576	; 0x11e0
 800faaa:	3008      	adds	r0, #8
 800faac:	f7ff fd32 	bl	800f514 <fsm_input>
}
 800fab0:	bd08      	pop	{r3, pc}
	...

0800fab4 <ipcp_init>:
static void ipcp_init(ppp_pcb *pcb) {
 800fab4:	b538      	push	{r3, r4, r5, lr}
 800fab6:	4604      	mov	r4, r0
    f->pcb = pcb;
 800fab8:	f241 13e8 	movw	r3, #4584	; 0x11e8
 800fabc:	18c5      	adds	r5, r0, r3
 800fabe:	50c0      	str	r0, [r0, r3]
    f->protocol = PPP_IPCP;
 800fac0:	f248 0321 	movw	r3, #32801	; 0x8021
 800fac4:	81eb      	strh	r3, [r5, #14]
    f->callbacks = &ipcp_callbacks;
 800fac6:	4b0d      	ldr	r3, [pc, #52]	; (800fafc <ipcp_init+0x48>)
 800fac8:	606b      	str	r3, [r5, #4]
    fsm_init(f);
 800faca:	4628      	mov	r0, r5
 800facc:	f7ff fb6a 	bl	800f1a4 <fsm_init>
    f->maxnakloops = 100;
 800fad0:	2364      	movs	r3, #100	; 0x64
 800fad2:	75eb      	strb	r3, [r5, #23]
    wo->neg_addr = wo->old_addrs = 1;
 800fad4:	f241 2304 	movw	r3, #4612	; 0x1204
 800fad8:	18e0      	adds	r0, r4, r3
 800fada:	5ce2      	ldrb	r2, [r4, r3]
    wo->vj_protocol = IPCP_VJ_COMP;
 800fadc:	212d      	movs	r1, #45	; 0x2d
 800fade:	8281      	strh	r1, [r0, #20]
    wo->maxslotindex = MAX_STATES - 1; /* really max index */
 800fae0:	210f      	movs	r1, #15
 800fae2:	7581      	strb	r1, [r0, #22]
    wo->cflag = 1;
 800fae4:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800fae8:	54e2      	strb	r2, [r4, r3]
    ao->neg_addr = ao->old_addrs = 1;
 800faea:	f241 2334 	movw	r3, #4660	; 0x1234
 800faee:	18e0      	adds	r0, r4, r3
 800faf0:	5ce2      	ldrb	r2, [r4, r3]
    ao->maxslotindex = MAX_STATES - 1;
 800faf2:	7581      	strb	r1, [r0, #22]
    ao->cflag = 1;
 800faf4:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800faf8:	54e2      	strb	r2, [r4, r3]
}
 800fafa:	bd38      	pop	{r3, r4, r5, pc}
 800fafc:	0801952c 	.word	0x0801952c

0800fb00 <ipcp_finished>:


/*
 * ipcp_finished - possibly shut down the lower layers.
 */
static void ipcp_finished(fsm *f) {
 800fb00:	b508      	push	{r3, lr}
	ppp_pcb *pcb = f->pcb;
 800fb02:	6800      	ldr	r0, [r0, #0]
	if (pcb->ipcp_is_open) {
 800fb04:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800fb08:	f013 0f02 	tst.w	r3, #2
 800fb0c:	d100      	bne.n	800fb10 <ipcp_finished+0x10>
		pcb->ipcp_is_open = 0;
		np_finished(pcb, PPP_IP);
	}
}
 800fb0e:	bd08      	pop	{r3, pc}
		pcb->ipcp_is_open = 0;
 800fb10:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800fb14:	f36f 0341 	bfc	r3, #1, #1
 800fb18:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
		np_finished(pcb, PPP_IP);
 800fb1c:	2121      	movs	r1, #33	; 0x21
 800fb1e:	f7ff faab 	bl	800f078 <np_finished>
}
 800fb22:	e7f4      	b.n	800fb0e <ipcp_finished+0xe>

0800fb24 <ipcp_down>:
static void ipcp_down(fsm *f) {
 800fb24:	b538      	push	{r3, r4, r5, lr}
    ppp_pcb *pcb = f->pcb;
 800fb26:	6804      	ldr	r4, [r0, #0]
    if (pcb->ipcp_is_up) {
 800fb28:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fb2c:	f013 0f04 	tst.w	r3, #4
 800fb30:	d117      	bne.n	800fb62 <ipcp_down+0x3e>
    sifvjcomp(pcb, 0, 0, 0);
 800fb32:	2300      	movs	r3, #0
 800fb34:	461a      	mov	r2, r3
 800fb36:	4619      	mov	r1, r3
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f002 ff63 	bl	8012a04 <sifvjcomp>
	sifdown(pcb);
 800fb3e:	4620      	mov	r0, r4
 800fb40:	f002 ff84 	bl	8012a4c <sifdown>
	ipcp_clear_addrs(pcb, go->ouraddr,
 800fb44:	f504 5392 	add.w	r3, r4, #4672	; 0x1240
 800fb48:	f504 5590 	add.w	r5, r4, #4608	; 0x1200
    cifaddr(pcb, ouraddr, hisaddr);
 800fb4c:	695a      	ldr	r2, [r3, #20]
 800fb4e:	6a29      	ldr	r1, [r5, #32]
 800fb50:	4620      	mov	r0, r4
 800fb52:	f002 ff1b 	bl	801298c <cifaddr>
	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
 800fb56:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800fb58:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f002 ff34 	bl	80129c8 <cdns>
}
 800fb60:	bd38      	pop	{r3, r4, r5, pc}
	pcb->ipcp_is_up = 0;
 800fb62:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fb66:	f36f 0382 	bfc	r3, #2, #1
 800fb6a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	np_down(pcb, PPP_IP);
 800fb6e:	2121      	movs	r1, #33	; 0x21
 800fb70:	4620      	mov	r0, r4
 800fb72:	f7ff fa74 	bl	800f05e <np_down>
 800fb76:	e7dc      	b.n	800fb32 <ipcp_down+0xe>

0800fb78 <ipcp_rejci>:
static int ipcp_rejci(fsm *f, u_char *p, int len) {
 800fb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	b089      	sub	sp, #36	; 0x24
 800fb7e:	4607      	mov	r7, r0
 800fb80:	460d      	mov	r5, r1
 800fb82:	4616      	mov	r6, r2
    ppp_pcb *pcb = f->pcb;
 800fb84:	6804      	ldr	r4, [r0, #0]
    try_ = *go;
 800fb86:	f241 291c 	movw	r9, #4636	; 0x121c
 800fb8a:	eb04 0809 	add.w	r8, r4, r9
 800fb8e:	f10d 0c08 	add.w	ip, sp, #8
 800fb92:	46c6      	mov	lr, r8
 800fb94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb9c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fba0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fba4:	f814 3009 	ldrb.w	r3, [r4, r9]
 800fba8:	f003 0901 	and.w	r9, r3, #1
 800fbac:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800fbb0:	9201      	str	r2, [sp, #4]
 800fbb2:	f3c3 0ac0 	ubfx	sl, r3, #3, #1
 800fbb6:	f898 8001 	ldrb.w	r8, [r8, #1]
 800fbba:	f008 0b01 	and.w	fp, r8, #1
 800fbbe:	f3c8 0840 	ubfx	r8, r8, #1, #1
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800fbc2:	f003 0303 	and.w	r3, r3, #3
 800fbc6:	2b02      	cmp	r3, #2
 800fbc8:	d031      	beq.n	800fc2e <ipcp_rejci+0xb6>
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
 800fbca:	f241 231c 	movw	r3, #4636	; 0x121c
 800fbce:	5ce3      	ldrb	r3, [r4, r3]
 800fbd0:	f013 0f08 	tst.w	r3, #8
 800fbd4:	d007      	beq.n	800fbe6 <ipcp_rejci+0x6e>
 800fbd6:	786a      	ldrb	r2, [r5, #1]
 800fbd8:	f013 0010 	ands.w	r0, r3, #16
 800fbdc:	bf14      	ite	ne
 800fbde:	2104      	movne	r1, #4
 800fbe0:	2106      	moveq	r1, #6
 800fbe2:	428a      	cmp	r2, r1
 800fbe4:	d057      	beq.n	800fc96 <ipcp_rejci+0x11e>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800fbe6:	f013 0f01 	tst.w	r3, #1
 800fbea:	f000 80af 	beq.w	800fd4c <ipcp_rejci+0x1d4>
 800fbee:	786b      	ldrb	r3, [r5, #1]
 800fbf0:	2b06      	cmp	r3, #6
 800fbf2:	d07c      	beq.n	800fcee <ipcp_rejci+0x176>
    REJCIDNS(CI_MS_DNS1, req_dns1, go->dnsaddr[0]);
 800fbf4:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fbf8:	331c      	adds	r3, #28
 800fbfa:	785b      	ldrb	r3, [r3, #1]
 800fbfc:	f013 0f01 	tst.w	r3, #1
 800fc00:	f040 80af 	bne.w	800fd62 <ipcp_rejci+0x1ea>
    REJCIDNS(CI_MS_DNS2, req_dns2, go->dnsaddr[1]);
 800fc04:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fc08:	331c      	adds	r3, #28
 800fc0a:	785b      	ldrb	r3, [r3, #1]
 800fc0c:	f013 0f02 	tst.w	r3, #2
 800fc10:	f000 80a7 	beq.w	800fd62 <ipcp_rejci+0x1ea>
 800fc14:	786b      	ldrb	r3, [r5, #1]
 800fc16:	2b06      	cmp	r3, #6
 800fc18:	f040 80a3 	bne.w	800fd62 <ipcp_rejci+0x1ea>
 800fc1c:	2e05      	cmp	r6, #5
 800fc1e:	f340 80a0 	ble.w	800fd62 <ipcp_rejci+0x1ea>
 800fc22:	782b      	ldrb	r3, [r5, #0]
 800fc24:	2b83      	cmp	r3, #131	; 0x83
 800fc26:	f000 80d9 	beq.w	800fddc <ipcp_rejci+0x264>
    return 0;
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	e0bc      	b.n	800fda8 <ipcp_rejci+0x230>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800fc2e:	786b      	ldrb	r3, [r5, #1]
 800fc30:	2b0a      	cmp	r3, #10
 800fc32:	d1ca      	bne.n	800fbca <ipcp_rejci+0x52>
 800fc34:	2e09      	cmp	r6, #9
 800fc36:	ddc8      	ble.n	800fbca <ipcp_rejci+0x52>
 800fc38:	782b      	ldrb	r3, [r5, #0]
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d1c5      	bne.n	800fbca <ipcp_rejci+0x52>
 800fc3e:	78aa      	ldrb	r2, [r5, #2]
 800fc40:	78eb      	ldrb	r3, [r5, #3]
 800fc42:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800fc46:	792b      	ldrb	r3, [r5, #4]
 800fc48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fc4c:	7968      	ldrb	r0, [r5, #5]
 800fc4e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800fc52:	f7f7 fdea 	bl	800782a <lwip_htonl>
 800fc56:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fc5a:	331c      	adds	r3, #28
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	4283      	cmp	r3, r0
 800fc60:	d001      	beq.n	800fc66 <ipcp_rejci+0xee>
    return 0;
 800fc62:	2000      	movs	r0, #0
 800fc64:	e0a0      	b.n	800fda8 <ipcp_rejci+0x230>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800fc66:	79aa      	ldrb	r2, [r5, #6]
 800fc68:	79eb      	ldrb	r3, [r5, #7]
 800fc6a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800fc6e:	7a2b      	ldrb	r3, [r5, #8]
 800fc70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fc74:	7a68      	ldrb	r0, [r5, #9]
 800fc76:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800fc7a:	f7f7 fdd6 	bl	800782a <lwip_htonl>
 800fc7e:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fc82:	331c      	adds	r3, #28
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	4283      	cmp	r3, r0
 800fc88:	f040 80be 	bne.w	800fe08 <ipcp_rejci+0x290>
 800fc8c:	3e0a      	subs	r6, #10
 800fc8e:	350a      	adds	r5, #10
 800fc90:	2300      	movs	r3, #0
 800fc92:	9301      	str	r3, [sp, #4]
 800fc94:	e799      	b.n	800fbca <ipcp_rejci+0x52>
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
 800fc96:	42b2      	cmp	r2, r6
 800fc98:	dca5      	bgt.n	800fbe6 <ipcp_rejci+0x6e>
 800fc9a:	7829      	ldrb	r1, [r5, #0]
 800fc9c:	2902      	cmp	r1, #2
 800fc9e:	d1a2      	bne.n	800fbe6 <ipcp_rejci+0x6e>
 800fca0:	1ab6      	subs	r6, r6, r2
 800fca2:	f895 c002 	ldrb.w	ip, [r5, #2]
 800fca6:	f504 5190 	add.w	r1, r4, #4608	; 0x1200
 800fcaa:	311c      	adds	r1, #28
 800fcac:	78ea      	ldrb	r2, [r5, #3]
 800fcae:	8a89      	ldrh	r1, [r1, #20]
 800fcb0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800fcb4:	4291      	cmp	r1, r2
 800fcb6:	f040 80a9 	bne.w	800fe0c <ipcp_rejci+0x294>
 800fcba:	b118      	cbz	r0, 800fcc4 <ipcp_rejci+0x14c>
 800fcbc:	3504      	adds	r5, #4
 800fcbe:	f04f 0a00 	mov.w	sl, #0
 800fcc2:	e790      	b.n	800fbe6 <ipcp_rejci+0x6e>
 800fcc4:	f504 5290 	add.w	r2, r4, #4608	; 0x1200
 800fcc8:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
 800fccc:	792a      	ldrb	r2, [r5, #4]
 800fcce:	4291      	cmp	r1, r2
 800fcd0:	f040 809e 	bne.w	800fe10 <ipcp_rejci+0x298>
 800fcd4:	f241 221c 	movw	r2, #4636	; 0x121c
 800fcd8:	5ca2      	ldrb	r2, [r4, r2]
 800fcda:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800fcde:	7969      	ldrb	r1, [r5, #5]
 800fce0:	428a      	cmp	r2, r1
 800fce2:	f040 8097 	bne.w	800fe14 <ipcp_rejci+0x29c>
 800fce6:	3506      	adds	r5, #6
 800fce8:	f04f 0a00 	mov.w	sl, #0
 800fcec:	e77b      	b.n	800fbe6 <ipcp_rejci+0x6e>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800fcee:	2e05      	cmp	r6, #5
 800fcf0:	f340 809c 	ble.w	800fe2c <ipcp_rejci+0x2b4>
 800fcf4:	782b      	ldrb	r3, [r5, #0]
 800fcf6:	2b03      	cmp	r3, #3
 800fcf8:	d012      	beq.n	800fd20 <ipcp_rejci+0x1a8>
    REJCIDNS(CI_MS_DNS1, req_dns1, go->dnsaddr[0]);
 800fcfa:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fcfe:	331c      	adds	r3, #28
 800fd00:	785b      	ldrb	r3, [r3, #1]
 800fd02:	f013 0f01 	tst.w	r3, #1
 800fd06:	f000 80a4 	beq.w	800fe52 <ipcp_rejci+0x2da>
 800fd0a:	782b      	ldrb	r3, [r5, #0]
 800fd0c:	2b81      	cmp	r3, #129	; 0x81
 800fd0e:	d04e      	beq.n	800fdae <ipcp_rejci+0x236>
    REJCIDNS(CI_MS_DNS2, req_dns2, go->dnsaddr[1]);
 800fd10:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fd14:	331c      	adds	r3, #28
 800fd16:	785b      	ldrb	r3, [r3, #1]
 800fd18:	f013 0f02 	tst.w	r3, #2
 800fd1c:	d181      	bne.n	800fc22 <ipcp_rejci+0xaa>
 800fd1e:	e020      	b.n	800fd62 <ipcp_rejci+0x1ea>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800fd20:	78a8      	ldrb	r0, [r5, #2]
 800fd22:	78eb      	ldrb	r3, [r5, #3]
 800fd24:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800fd28:	792b      	ldrb	r3, [r5, #4]
 800fd2a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800fd2e:	7968      	ldrb	r0, [r5, #5]
 800fd30:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800fd34:	f7f7 fd79 	bl	800782a <lwip_htonl>
 800fd38:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fd3c:	331c      	adds	r3, #28
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	4283      	cmp	r3, r0
 800fd42:	d169      	bne.n	800fe18 <ipcp_rejci+0x2a0>
 800fd44:	3e06      	subs	r6, #6
 800fd46:	3506      	adds	r5, #6
 800fd48:	f04f 0900 	mov.w	r9, #0
    REJCIDNS(CI_MS_DNS1, req_dns1, go->dnsaddr[0]);
 800fd4c:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fd50:	331c      	adds	r3, #28
 800fd52:	785b      	ldrb	r3, [r3, #1]
 800fd54:	f013 0f01 	tst.w	r3, #1
 800fd58:	f43f af54 	beq.w	800fc04 <ipcp_rejci+0x8c>
 800fd5c:	786b      	ldrb	r3, [r5, #1]
 800fd5e:	2b06      	cmp	r3, #6
 800fd60:	d06b      	beq.n	800fe3a <ipcp_rejci+0x2c2>
    if (len != 0)
 800fd62:	2e00      	cmp	r6, #0
 800fd64:	d15e      	bne.n	800fe24 <ipcp_rejci+0x2ac>
    if (f->state != PPP_FSM_OPENED)
 800fd66:	7c3b      	ldrb	r3, [r7, #16]
 800fd68:	2b09      	cmp	r3, #9
 800fd6a:	d05d      	beq.n	800fe28 <ipcp_rejci+0x2b0>
	*go = try_;
 800fd6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fd70:	f369 0300 	bfi	r3, r9, #0, #1
 800fd74:	9a01      	ldr	r2, [sp, #4]
 800fd76:	f362 0341 	bfi	r3, r2, #1, #1
 800fd7a:	f36a 03c3 	bfi	r3, sl, #3, #1
 800fd7e:	f88d 3008 	strb.w	r3, [sp, #8]
 800fd82:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800fd86:	f36b 0300 	bfi	r3, fp, #0, #1
 800fd8a:	f368 0341 	bfi	r3, r8, #1, #1
 800fd8e:	f88d 3009 	strb.w	r3, [sp, #9]
 800fd92:	f504 5490 	add.w	r4, r4, #4608	; 0x1200
 800fd96:	341c      	adds	r4, #28
 800fd98:	ad02      	add	r5, sp, #8
 800fd9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fda2:	e884 0003 	stmia.w	r4, {r0, r1}
    return 1;
 800fda6:	2001      	movs	r0, #1
}
 800fda8:	b009      	add	sp, #36	; 0x24
 800fdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    REJCIDNS(CI_MS_DNS1, req_dns1, go->dnsaddr[0]);
 800fdae:	78a8      	ldrb	r0, [r5, #2]
 800fdb0:	78eb      	ldrb	r3, [r5, #3]
 800fdb2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800fdb6:	792b      	ldrb	r3, [r5, #4]
 800fdb8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800fdbc:	7968      	ldrb	r0, [r5, #5]
 800fdbe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800fdc2:	f7f7 fd32 	bl	800782a <lwip_htonl>
 800fdc6:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fdca:	331c      	adds	r3, #28
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	4283      	cmp	r3, r0
 800fdd0:	d124      	bne.n	800fe1c <ipcp_rejci+0x2a4>
 800fdd2:	3e06      	subs	r6, #6
 800fdd4:	3506      	adds	r5, #6
 800fdd6:	f04f 0b00 	mov.w	fp, #0
 800fdda:	e713      	b.n	800fc04 <ipcp_rejci+0x8c>
    REJCIDNS(CI_MS_DNS2, req_dns2, go->dnsaddr[1]);
 800fddc:	78a8      	ldrb	r0, [r5, #2]
 800fdde:	78eb      	ldrb	r3, [r5, #3]
 800fde0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800fde4:	792b      	ldrb	r3, [r5, #4]
 800fde6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800fdea:	7968      	ldrb	r0, [r5, #5]
 800fdec:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800fdf0:	f7f7 fd1b 	bl	800782a <lwip_htonl>
 800fdf4:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fdf8:	331c      	adds	r3, #28
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	4283      	cmp	r3, r0
 800fdfe:	d10f      	bne.n	800fe20 <ipcp_rejci+0x2a8>
 800fe00:	3e06      	subs	r6, #6
 800fe02:	f04f 0800 	mov.w	r8, #0
 800fe06:	e7ac      	b.n	800fd62 <ipcp_rejci+0x1ea>
    return 0;
 800fe08:	2000      	movs	r0, #0
 800fe0a:	e7cd      	b.n	800fda8 <ipcp_rejci+0x230>
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	e7cb      	b.n	800fda8 <ipcp_rejci+0x230>
 800fe10:	2000      	movs	r0, #0
 800fe12:	e7c9      	b.n	800fda8 <ipcp_rejci+0x230>
 800fe14:	2000      	movs	r0, #0
 800fe16:	e7c7      	b.n	800fda8 <ipcp_rejci+0x230>
 800fe18:	2000      	movs	r0, #0
 800fe1a:	e7c5      	b.n	800fda8 <ipcp_rejci+0x230>
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	e7c3      	b.n	800fda8 <ipcp_rejci+0x230>
 800fe20:	2000      	movs	r0, #0
 800fe22:	e7c1      	b.n	800fda8 <ipcp_rejci+0x230>
 800fe24:	2000      	movs	r0, #0
 800fe26:	e7bf      	b.n	800fda8 <ipcp_rejci+0x230>
    return 1;
 800fe28:	2001      	movs	r0, #1
 800fe2a:	e7bd      	b.n	800fda8 <ipcp_rejci+0x230>
    REJCIDNS(CI_MS_DNS1, req_dns1, go->dnsaddr[0]);
 800fe2c:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fe30:	331c      	adds	r3, #28
 800fe32:	785b      	ldrb	r3, [r3, #1]
 800fe34:	f013 0f01 	tst.w	r3, #1
 800fe38:	d00b      	beq.n	800fe52 <ipcp_rejci+0x2da>
 800fe3a:	2e05      	cmp	r6, #5
 800fe3c:	f73f af65 	bgt.w	800fd0a <ipcp_rejci+0x192>
    REJCIDNS(CI_MS_DNS2, req_dns2, go->dnsaddr[1]);
 800fe40:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fe44:	331c      	adds	r3, #28
 800fe46:	785b      	ldrb	r3, [r3, #1]
 800fe48:	f013 0f02 	tst.w	r3, #2
 800fe4c:	f47f aee6 	bne.w	800fc1c <ipcp_rejci+0xa4>
 800fe50:	e787      	b.n	800fd62 <ipcp_rejci+0x1ea>
 800fe52:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 800fe56:	331c      	adds	r3, #28
 800fe58:	785b      	ldrb	r3, [r3, #1]
 800fe5a:	f013 0f02 	tst.w	r3, #2
 800fe5e:	f47f aedd 	bne.w	800fc1c <ipcp_rejci+0xa4>
 800fe62:	e77e      	b.n	800fd62 <ipcp_rejci+0x1ea>

0800fe64 <ipcp_ackci>:
static int ipcp_ackci(fsm *f, u_char *p, int len) {
 800fe64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe66:	460d      	mov	r5, r1
 800fe68:	4614      	mov	r4, r2
    ppp_pcb *pcb = f->pcb;
 800fe6a:	6806      	ldr	r6, [r0, #0]
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800fe6c:	f241 231c 	movw	r3, #4636	; 0x121c
 800fe70:	5cf3      	ldrb	r3, [r6, r3]
 800fe72:	f003 0303 	and.w	r3, r3, #3
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d032      	beq.n	800fee0 <ipcp_ackci+0x7c>
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
 800fe7a:	f241 231c 	movw	r3, #4636	; 0x121c
 800fe7e:	5cf3      	ldrb	r3, [r6, r3]
 800fe80:	f013 0f08 	tst.w	r3, #8
 800fe84:	d01d      	beq.n	800fec2 <ipcp_ackci+0x5e>
 800fe86:	f013 0010 	ands.w	r0, r3, #16
 800fe8a:	bf14      	ite	ne
 800fe8c:	2204      	movne	r2, #4
 800fe8e:	2206      	moveq	r2, #6
 800fe90:	1aa4      	subs	r4, r4, r2
 800fe92:	f100 80cd 	bmi.w	8010030 <ipcp_ackci+0x1cc>
 800fe96:	7869      	ldrb	r1, [r5, #1]
 800fe98:	4291      	cmp	r1, r2
 800fe9a:	f040 80cb 	bne.w	8010034 <ipcp_ackci+0x1d0>
 800fe9e:	782a      	ldrb	r2, [r5, #0]
 800fea0:	2a02      	cmp	r2, #2
 800fea2:	f040 80c9 	bne.w	8010038 <ipcp_ackci+0x1d4>
 800fea6:	78af      	ldrb	r7, [r5, #2]
 800fea8:	f506 5190 	add.w	r1, r6, #4608	; 0x1200
 800feac:	311c      	adds	r1, #28
 800feae:	78ea      	ldrb	r2, [r5, #3]
 800feb0:	8a89      	ldrh	r1, [r1, #20]
 800feb2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800feb6:	4291      	cmp	r1, r2
 800feb8:	f040 80c0 	bne.w	801003c <ipcp_ackci+0x1d8>
 800febc:	2800      	cmp	r0, #0
 800febe:	d043      	beq.n	800ff48 <ipcp_ackci+0xe4>
 800fec0:	3504      	adds	r5, #4
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800fec2:	f013 0f01 	tst.w	r3, #1
 800fec6:	d063      	beq.n	800ff90 <ipcp_ackci+0x12c>
 800fec8:	3c06      	subs	r4, #6
 800feca:	f100 80bd 	bmi.w	8010048 <ipcp_ackci+0x1e4>
 800fece:	786b      	ldrb	r3, [r5, #1]
 800fed0:	2b06      	cmp	r3, #6
 800fed2:	f040 80bb 	bne.w	801004c <ipcp_ackci+0x1e8>
 800fed6:	782b      	ldrb	r3, [r5, #0]
 800fed8:	2b03      	cmp	r3, #3
 800feda:	d046      	beq.n	800ff6a <ipcp_ackci+0x106>
    return (0);
 800fedc:	2000      	movs	r0, #0
 800fede:	e0a4      	b.n	801002a <ipcp_ackci+0x1c6>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800fee0:	3c0a      	subs	r4, #10
 800fee2:	f100 809f 	bmi.w	8010024 <ipcp_ackci+0x1c0>
 800fee6:	784b      	ldrb	r3, [r1, #1]
 800fee8:	2b0a      	cmp	r3, #10
 800feea:	f040 809d 	bne.w	8010028 <ipcp_ackci+0x1c4>
 800feee:	780b      	ldrb	r3, [r1, #0]
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d001      	beq.n	800fef8 <ipcp_ackci+0x94>
    return (0);
 800fef4:	2000      	movs	r0, #0
 800fef6:	e098      	b.n	801002a <ipcp_ackci+0x1c6>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800fef8:	7888      	ldrb	r0, [r1, #2]
 800fefa:	78cb      	ldrb	r3, [r1, #3]
 800fefc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800ff00:	790b      	ldrb	r3, [r1, #4]
 800ff02:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ff06:	7948      	ldrb	r0, [r1, #5]
 800ff08:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800ff0c:	f7f7 fc8d 	bl	800782a <lwip_htonl>
 800ff10:	f506 5390 	add.w	r3, r6, #4608	; 0x1200
 800ff14:	331c      	adds	r3, #28
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	4283      	cmp	r3, r0
 800ff1a:	d001      	beq.n	800ff20 <ipcp_ackci+0xbc>
    return (0);
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	e084      	b.n	801002a <ipcp_ackci+0x1c6>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800ff20:	79aa      	ldrb	r2, [r5, #6]
 800ff22:	79eb      	ldrb	r3, [r5, #7]
 800ff24:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800ff28:	7a2b      	ldrb	r3, [r5, #8]
 800ff2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ff2e:	7a68      	ldrb	r0, [r5, #9]
 800ff30:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800ff34:	f7f7 fc79 	bl	800782a <lwip_htonl>
 800ff38:	f506 5390 	add.w	r3, r6, #4608	; 0x1200
 800ff3c:	331c      	adds	r3, #28
 800ff3e:	689b      	ldr	r3, [r3, #8]
 800ff40:	4283      	cmp	r3, r0
 800ff42:	d173      	bne.n	801002c <ipcp_ackci+0x1c8>
 800ff44:	350a      	adds	r5, #10
 800ff46:	e798      	b.n	800fe7a <ipcp_ackci+0x16>
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
 800ff48:	f506 5290 	add.w	r2, r6, #4608	; 0x1200
 800ff4c:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
 800ff50:	792a      	ldrb	r2, [r5, #4]
 800ff52:	4291      	cmp	r1, r2
 800ff54:	d174      	bne.n	8010040 <ipcp_ackci+0x1dc>
 800ff56:	f241 221c 	movw	r2, #4636	; 0x121c
 800ff5a:	5cb2      	ldrb	r2, [r6, r2]
 800ff5c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800ff60:	7969      	ldrb	r1, [r5, #5]
 800ff62:	428a      	cmp	r2, r1
 800ff64:	d16e      	bne.n	8010044 <ipcp_ackci+0x1e0>
 800ff66:	3506      	adds	r5, #6
 800ff68:	e7ab      	b.n	800fec2 <ipcp_ackci+0x5e>
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800ff6a:	78a8      	ldrb	r0, [r5, #2]
 800ff6c:	78eb      	ldrb	r3, [r5, #3]
 800ff6e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800ff72:	792b      	ldrb	r3, [r5, #4]
 800ff74:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ff78:	7968      	ldrb	r0, [r5, #5]
 800ff7a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800ff7e:	f7f7 fc54 	bl	800782a <lwip_htonl>
 800ff82:	f506 5390 	add.w	r3, r6, #4608	; 0x1200
 800ff86:	331c      	adds	r3, #28
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	4283      	cmp	r3, r0
 800ff8c:	d160      	bne.n	8010050 <ipcp_ackci+0x1ec>
 800ff8e:	3506      	adds	r5, #6
    ACKCIDNS(CI_MS_DNS1, go->req_dns1, go->dnsaddr[0]);
 800ff90:	f506 5390 	add.w	r3, r6, #4608	; 0x1200
 800ff94:	331c      	adds	r3, #28
 800ff96:	785b      	ldrb	r3, [r3, #1]
 800ff98:	f013 0f01 	tst.w	r3, #1
 800ff9c:	d01c      	beq.n	800ffd8 <ipcp_ackci+0x174>
 800ff9e:	3c06      	subs	r4, #6
 800ffa0:	d458      	bmi.n	8010054 <ipcp_ackci+0x1f0>
 800ffa2:	786b      	ldrb	r3, [r5, #1]
 800ffa4:	2b06      	cmp	r3, #6
 800ffa6:	d157      	bne.n	8010058 <ipcp_ackci+0x1f4>
 800ffa8:	782b      	ldrb	r3, [r5, #0]
 800ffaa:	2b81      	cmp	r3, #129	; 0x81
 800ffac:	d001      	beq.n	800ffb2 <ipcp_ackci+0x14e>
    return (0);
 800ffae:	2000      	movs	r0, #0
 800ffb0:	e03b      	b.n	801002a <ipcp_ackci+0x1c6>
    ACKCIDNS(CI_MS_DNS1, go->req_dns1, go->dnsaddr[0]);
 800ffb2:	78aa      	ldrb	r2, [r5, #2]
 800ffb4:	78eb      	ldrb	r3, [r5, #3]
 800ffb6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800ffba:	792b      	ldrb	r3, [r5, #4]
 800ffbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ffc0:	7968      	ldrb	r0, [r5, #5]
 800ffc2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800ffc6:	f7f7 fc30 	bl	800782a <lwip_htonl>
 800ffca:	f506 5390 	add.w	r3, r6, #4608	; 0x1200
 800ffce:	331c      	adds	r3, #28
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	4283      	cmp	r3, r0
 800ffd4:	d142      	bne.n	801005c <ipcp_ackci+0x1f8>
 800ffd6:	3506      	adds	r5, #6
    ACKCIDNS(CI_MS_DNS2, go->req_dns2, go->dnsaddr[1]);
 800ffd8:	f506 5390 	add.w	r3, r6, #4608	; 0x1200
 800ffdc:	331c      	adds	r3, #28
 800ffde:	785b      	ldrb	r3, [r3, #1]
 800ffe0:	f013 0f02 	tst.w	r3, #2
 800ffe4:	d01a      	beq.n	801001c <ipcp_ackci+0x1b8>
 800ffe6:	3c06      	subs	r4, #6
 800ffe8:	d43a      	bmi.n	8010060 <ipcp_ackci+0x1fc>
 800ffea:	786b      	ldrb	r3, [r5, #1]
 800ffec:	2b06      	cmp	r3, #6
 800ffee:	d139      	bne.n	8010064 <ipcp_ackci+0x200>
 800fff0:	782b      	ldrb	r3, [r5, #0]
 800fff2:	2b83      	cmp	r3, #131	; 0x83
 800fff4:	d001      	beq.n	800fffa <ipcp_ackci+0x196>
    return (0);
 800fff6:	2000      	movs	r0, #0
 800fff8:	e017      	b.n	801002a <ipcp_ackci+0x1c6>
    ACKCIDNS(CI_MS_DNS2, go->req_dns2, go->dnsaddr[1]);
 800fffa:	78aa      	ldrb	r2, [r5, #2]
 800fffc:	78eb      	ldrb	r3, [r5, #3]
 800fffe:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8010002:	792b      	ldrb	r3, [r5, #4]
 8010004:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010008:	7968      	ldrb	r0, [r5, #5]
 801000a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801000e:	f7f7 fc0c 	bl	800782a <lwip_htonl>
 8010012:	f506 5690 	add.w	r6, r6, #4608	; 0x1200
 8010016:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8010018:	4283      	cmp	r3, r0
 801001a:	d125      	bne.n	8010068 <ipcp_ackci+0x204>
    if (len != 0)
 801001c:	fab4 f084 	clz	r0, r4
 8010020:	0940      	lsrs	r0, r0, #5
 8010022:	e002      	b.n	801002a <ipcp_ackci+0x1c6>
    return (0);
 8010024:	2000      	movs	r0, #0
 8010026:	e000      	b.n	801002a <ipcp_ackci+0x1c6>
 8010028:	2000      	movs	r0, #0
}
 801002a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
 801002c:	2000      	movs	r0, #0
 801002e:	e7fc      	b.n	801002a <ipcp_ackci+0x1c6>
 8010030:	2000      	movs	r0, #0
 8010032:	e7fa      	b.n	801002a <ipcp_ackci+0x1c6>
 8010034:	2000      	movs	r0, #0
 8010036:	e7f8      	b.n	801002a <ipcp_ackci+0x1c6>
 8010038:	2000      	movs	r0, #0
 801003a:	e7f6      	b.n	801002a <ipcp_ackci+0x1c6>
 801003c:	2000      	movs	r0, #0
 801003e:	e7f4      	b.n	801002a <ipcp_ackci+0x1c6>
 8010040:	2000      	movs	r0, #0
 8010042:	e7f2      	b.n	801002a <ipcp_ackci+0x1c6>
 8010044:	2000      	movs	r0, #0
 8010046:	e7f0      	b.n	801002a <ipcp_ackci+0x1c6>
 8010048:	2000      	movs	r0, #0
 801004a:	e7ee      	b.n	801002a <ipcp_ackci+0x1c6>
 801004c:	2000      	movs	r0, #0
 801004e:	e7ec      	b.n	801002a <ipcp_ackci+0x1c6>
 8010050:	2000      	movs	r0, #0
 8010052:	e7ea      	b.n	801002a <ipcp_ackci+0x1c6>
 8010054:	2000      	movs	r0, #0
 8010056:	e7e8      	b.n	801002a <ipcp_ackci+0x1c6>
 8010058:	2000      	movs	r0, #0
 801005a:	e7e6      	b.n	801002a <ipcp_ackci+0x1c6>
 801005c:	2000      	movs	r0, #0
 801005e:	e7e4      	b.n	801002a <ipcp_ackci+0x1c6>
 8010060:	2000      	movs	r0, #0
 8010062:	e7e2      	b.n	801002a <ipcp_ackci+0x1c6>
 8010064:	2000      	movs	r0, #0
 8010066:	e7e0      	b.n	801002a <ipcp_ackci+0x1c6>
 8010068:	2000      	movs	r0, #0
 801006a:	e7de      	b.n	801002a <ipcp_ackci+0x1c6>

0801006c <ipcp_addci>:
static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
 801006c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010070:	460d      	mov	r5, r1
 8010072:	4616      	mov	r6, r2
    ppp_pcb *pcb = f->pcb;
 8010074:	6804      	ldr	r4, [r0, #0]
    int len = *lenp;
 8010076:	6817      	ldr	r7, [r2, #0]
    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 8010078:	f241 231c 	movw	r3, #4636	; 0x121c
 801007c:	5ce3      	ldrb	r3, [r4, r3]
 801007e:	f003 0303 	and.w	r3, r3, #3
 8010082:	2b02      	cmp	r3, #2
 8010084:	d04c      	beq.n	8010120 <ipcp_addci+0xb4>
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
 8010086:	f241 231c 	movw	r3, #4636	; 0x121c
 801008a:	5ce3      	ldrb	r3, [r4, r3]
 801008c:	f013 0f08 	tst.w	r3, #8
 8010090:	d017      	beq.n	80100c2 <ipcp_addci+0x56>
 8010092:	f013 0f10 	tst.w	r3, #16
 8010096:	bf14      	ite	ne
 8010098:	2304      	movne	r3, #4
 801009a:	2306      	moveq	r3, #6
 801009c:	429f      	cmp	r7, r3
 801009e:	db72      	blt.n	8010186 <ipcp_addci+0x11a>
 80100a0:	2202      	movs	r2, #2
 80100a2:	702a      	strb	r2, [r5, #0]
 80100a4:	706b      	strb	r3, [r5, #1]
 80100a6:	f241 211c 	movw	r1, #4636	; 0x121c
 80100aa:	1860      	adds	r0, r4, r1
 80100ac:	8a82      	ldrh	r2, [r0, #20]
 80100ae:	0a12      	lsrs	r2, r2, #8
 80100b0:	70aa      	strb	r2, [r5, #2]
 80100b2:	8a82      	ldrh	r2, [r0, #20]
 80100b4:	70ea      	strb	r2, [r5, #3]
 80100b6:	5c62      	ldrb	r2, [r4, r1]
 80100b8:	f012 0f10 	tst.w	r2, #16
 80100bc:	d058      	beq.n	8010170 <ipcp_addci+0x104>
 80100be:	3504      	adds	r5, #4
 80100c0:	1aff      	subs	r7, r7, r3
    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 80100c2:	f241 231c 	movw	r3, #4636	; 0x121c
 80100c6:	5ce3      	ldrb	r3, [r4, r3]
 80100c8:	f013 0f01 	tst.w	r3, #1
 80100cc:	f000 8091 	beq.w	80101f2 <ipcp_addci+0x186>
 80100d0:	2f05      	cmp	r7, #5
 80100d2:	dc7c      	bgt.n	80101ce <ipcp_addci+0x162>
 80100d4:	f241 231c 	movw	r3, #4636	; 0x121c
 80100d8:	18e1      	adds	r1, r4, r3
 80100da:	5ce2      	ldrb	r2, [r4, r3]
 80100dc:	f36f 0200 	bfc	r2, #0, #1
 80100e0:	54e2      	strb	r2, [r4, r3]
    ADDCIDNS(CI_MS_DNS1, go->req_dns1, go->dnsaddr[0]);
 80100e2:	784b      	ldrb	r3, [r1, #1]
 80100e4:	f013 0f01 	tst.w	r3, #1
 80100e8:	d15d      	bne.n	80101a6 <ipcp_addci+0x13a>
    ADDCIDNS(CI_MS_DNS2, go->req_dns2, go->dnsaddr[1]);
 80100ea:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 80100ee:	331c      	adds	r3, #28
 80100f0:	785b      	ldrb	r3, [r3, #1]
 80100f2:	f013 0f02 	tst.w	r3, #2
 80100f6:	d065      	beq.n	80101c4 <ipcp_addci+0x158>
 80100f8:	2f05      	cmp	r7, #5
 80100fa:	dd5d      	ble.n	80101b8 <ipcp_addci+0x14c>
 80100fc:	2383      	movs	r3, #131	; 0x83
 80100fe:	702b      	strb	r3, [r5, #0]
 8010100:	2306      	movs	r3, #6
 8010102:	706b      	strb	r3, [r5, #1]
 8010104:	f504 5490 	add.w	r4, r4, #4608	; 0x1200
 8010108:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801010a:	f7f7 fb8e 	bl	800782a <lwip_htonl>
 801010e:	0e03      	lsrs	r3, r0, #24
 8010110:	70ab      	strb	r3, [r5, #2]
 8010112:	0c03      	lsrs	r3, r0, #16
 8010114:	70eb      	strb	r3, [r5, #3]
 8010116:	0a03      	lsrs	r3, r0, #8
 8010118:	712b      	strb	r3, [r5, #4]
 801011a:	7168      	strb	r0, [r5, #5]
 801011c:	3f06      	subs	r7, #6
 801011e:	e051      	b.n	80101c4 <ipcp_addci+0x158>
    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 8010120:	2f09      	cmp	r7, #9
 8010122:	dc06      	bgt.n	8010132 <ipcp_addci+0xc6>
 8010124:	f241 231c 	movw	r3, #4636	; 0x121c
 8010128:	5ce2      	ldrb	r2, [r4, r3]
 801012a:	f36f 0241 	bfc	r2, #1, #1
 801012e:	54e2      	strb	r2, [r4, r3]
 8010130:	e7a9      	b.n	8010086 <ipcp_addci+0x1a>
 8010132:	2301      	movs	r3, #1
 8010134:	700b      	strb	r3, [r1, #0]
 8010136:	230a      	movs	r3, #10
 8010138:	704b      	strb	r3, [r1, #1]
 801013a:	f504 5890 	add.w	r8, r4, #4608	; 0x1200
 801013e:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8010142:	f7f7 fb72 	bl	800782a <lwip_htonl>
 8010146:	0e03      	lsrs	r3, r0, #24
 8010148:	70ab      	strb	r3, [r5, #2]
 801014a:	0c03      	lsrs	r3, r0, #16
 801014c:	70eb      	strb	r3, [r5, #3]
 801014e:	0a03      	lsrs	r3, r0, #8
 8010150:	712b      	strb	r3, [r5, #4]
 8010152:	7168      	strb	r0, [r5, #5]
 8010154:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 8010158:	f7f7 fb67 	bl	800782a <lwip_htonl>
 801015c:	0e03      	lsrs	r3, r0, #24
 801015e:	71ab      	strb	r3, [r5, #6]
 8010160:	0c03      	lsrs	r3, r0, #16
 8010162:	71eb      	strb	r3, [r5, #7]
 8010164:	0a03      	lsrs	r3, r0, #8
 8010166:	722b      	strb	r3, [r5, #8]
 8010168:	7268      	strb	r0, [r5, #9]
 801016a:	3f0a      	subs	r7, #10
 801016c:	350a      	adds	r5, #10
 801016e:	e78a      	b.n	8010086 <ipcp_addci+0x1a>
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
 8010170:	f241 221c 	movw	r2, #4636	; 0x121c
 8010174:	18a1      	adds	r1, r4, r2
 8010176:	7d89      	ldrb	r1, [r1, #22]
 8010178:	7129      	strb	r1, [r5, #4]
 801017a:	5ca2      	ldrb	r2, [r4, r2]
 801017c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8010180:	716a      	strb	r2, [r5, #5]
 8010182:	3506      	adds	r5, #6
 8010184:	e79c      	b.n	80100c0 <ipcp_addci+0x54>
 8010186:	f241 221c 	movw	r2, #4636	; 0x121c
 801018a:	5ca3      	ldrb	r3, [r4, r2]
 801018c:	f36f 03c3 	bfc	r3, #3, #1
 8010190:	54a3      	strb	r3, [r4, r2]
    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 8010192:	f013 0f01 	tst.w	r3, #1
 8010196:	d19d      	bne.n	80100d4 <ipcp_addci+0x68>
    ADDCIDNS(CI_MS_DNS1, go->req_dns1, go->dnsaddr[0]);
 8010198:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 801019c:	331c      	adds	r3, #28
 801019e:	785b      	ldrb	r3, [r3, #1]
 80101a0:	f013 0f01 	tst.w	r3, #1
 80101a4:	d0a1      	beq.n	80100ea <ipcp_addci+0x7e>
 80101a6:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 80101aa:	7f5a      	ldrb	r2, [r3, #29]
 80101ac:	f36f 0200 	bfc	r2, #0, #1
 80101b0:	775a      	strb	r2, [r3, #29]
    ADDCIDNS(CI_MS_DNS2, go->req_dns2, go->dnsaddr[1]);
 80101b2:	f012 0f02 	tst.w	r2, #2
 80101b6:	d005      	beq.n	80101c4 <ipcp_addci+0x158>
 80101b8:	f504 5490 	add.w	r4, r4, #4608	; 0x1200
 80101bc:	7f63      	ldrb	r3, [r4, #29]
 80101be:	f36f 0341 	bfc	r3, #1, #1
 80101c2:	7763      	strb	r3, [r4, #29]
    *lenp -= len;
 80101c4:	6833      	ldr	r3, [r6, #0]
 80101c6:	1bdf      	subs	r7, r3, r7
 80101c8:	6037      	str	r7, [r6, #0]
}
 80101ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 80101ce:	2303      	movs	r3, #3
 80101d0:	702b      	strb	r3, [r5, #0]
 80101d2:	2306      	movs	r3, #6
 80101d4:	706b      	strb	r3, [r5, #1]
 80101d6:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 80101da:	6a18      	ldr	r0, [r3, #32]
 80101dc:	f7f7 fb25 	bl	800782a <lwip_htonl>
 80101e0:	0e03      	lsrs	r3, r0, #24
 80101e2:	70ab      	strb	r3, [r5, #2]
 80101e4:	0c03      	lsrs	r3, r0, #16
 80101e6:	70eb      	strb	r3, [r5, #3]
 80101e8:	0a03      	lsrs	r3, r0, #8
 80101ea:	712b      	strb	r3, [r5, #4]
 80101ec:	7168      	strb	r0, [r5, #5]
 80101ee:	3f06      	subs	r7, #6
 80101f0:	3506      	adds	r5, #6
    ADDCIDNS(CI_MS_DNS1, go->req_dns1, go->dnsaddr[0]);
 80101f2:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 80101f6:	331c      	adds	r3, #28
 80101f8:	785b      	ldrb	r3, [r3, #1]
 80101fa:	f013 0f01 	tst.w	r3, #1
 80101fe:	f43f af74 	beq.w	80100ea <ipcp_addci+0x7e>
 8010202:	2f05      	cmp	r7, #5
 8010204:	ddcf      	ble.n	80101a6 <ipcp_addci+0x13a>
 8010206:	2381      	movs	r3, #129	; 0x81
 8010208:	702b      	strb	r3, [r5, #0]
 801020a:	2306      	movs	r3, #6
 801020c:	706b      	strb	r3, [r5, #1]
 801020e:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010212:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010214:	f7f7 fb09 	bl	800782a <lwip_htonl>
 8010218:	0e03      	lsrs	r3, r0, #24
 801021a:	70ab      	strb	r3, [r5, #2]
 801021c:	0c03      	lsrs	r3, r0, #16
 801021e:	70eb      	strb	r3, [r5, #3]
 8010220:	0a03      	lsrs	r3, r0, #8
 8010222:	712b      	strb	r3, [r5, #4]
 8010224:	7168      	strb	r0, [r5, #5]
 8010226:	3f06      	subs	r7, #6
 8010228:	3506      	adds	r5, #6
 801022a:	e75e      	b.n	80100ea <ipcp_addci+0x7e>

0801022c <ipcp_nakci>:
static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 801022c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010230:	b099      	sub	sp, #100	; 0x64
 8010232:	9005      	str	r0, [sp, #20]
 8010234:	460c      	mov	r4, r1
 8010236:	4616      	mov	r6, r2
 8010238:	461d      	mov	r5, r3
    ppp_pcb *pcb = f->pcb;
 801023a:	6807      	ldr	r7, [r0, #0]
    BZERO(&no, sizeof(no));
 801023c:	2300      	movs	r3, #0
 801023e:	9312      	str	r3, [sp, #72]	; 0x48
 8010240:	9313      	str	r3, [sp, #76]	; 0x4c
 8010242:	9314      	str	r3, [sp, #80]	; 0x50
 8010244:	9315      	str	r3, [sp, #84]	; 0x54
 8010246:	9316      	str	r3, [sp, #88]	; 0x58
 8010248:	9317      	str	r3, [sp, #92]	; 0x5c
    try_ = *go;
 801024a:	f241 291c 	movw	r9, #4636	; 0x121c
 801024e:	eb07 0c09 	add.w	ip, r7, r9
 8010252:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8010256:	46e0      	mov	r8, ip
 8010258:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 801025c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010260:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010264:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010268:	f817 3009 	ldrb.w	r3, [r7, r9]
 801026c:	f003 0901 	and.w	r9, r3, #1
 8010270:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8010274:	9201      	str	r2, [sp, #4]
 8010276:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 801027a:	9206      	str	r2, [sp, #24]
 801027c:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8010280:	9207      	str	r2, [sp, #28]
 8010282:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8010286:	920a      	str	r2, [sp, #40]	; 0x28
 8010288:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801028c:	f002 0101 	and.w	r1, r2, #1
 8010290:	9102      	str	r1, [sp, #8]
 8010292:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8010296:	9203      	str	r2, [sp, #12]
 8010298:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 801029c:	f8d2 a000 	ldr.w	sl, [r2]
 80102a0:	f241 2224 	movw	r2, #4644	; 0x1224
 80102a4:	f857 b002 	ldr.w	fp, [r7, r2]
 80102a8:	f241 2228 	movw	r2, #4648	; 0x1228
 80102ac:	58ba      	ldr	r2, [r7, r2]
 80102ae:	9200      	str	r2, [sp, #0]
 80102b0:	f241 222c 	movw	r2, #4652	; 0x122c
 80102b4:	58ba      	ldr	r2, [r7, r2]
 80102b6:	9204      	str	r2, [sp, #16]
 80102b8:	f241 2230 	movw	r2, #4656	; 0x1230
 80102bc:	5aba      	ldrh	r2, [r7, r2]
 80102be:	9209      	str	r2, [sp, #36]	; 0x24
 80102c0:	f241 2232 	movw	r2, #4658	; 0x1232
 80102c4:	5cba      	ldrb	r2, [r7, r2]
 80102c6:	9208      	str	r2, [sp, #32]
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 80102c8:	f003 0303 	and.w	r3, r3, #3
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d04f      	beq.n	8010370 <ipcp_nakci+0x144>
    NAKCIVJ(CI_COMPRESSTYPE, neg_vj,
 80102d0:	f241 231c 	movw	r3, #4636	; 0x121c
 80102d4:	5cfb      	ldrb	r3, [r7, r3]
 80102d6:	f013 0f08 	tst.w	r3, #8
 80102da:	d005      	beq.n	80102e8 <ipcp_nakci+0xbc>
 80102dc:	7862      	ldrb	r2, [r4, #1]
 80102de:	f002 01fd 	and.w	r1, r2, #253	; 0xfd
 80102e2:	2904      	cmp	r1, #4
 80102e4:	f000 808d 	beq.w	8010402 <ipcp_nakci+0x1d6>
    NAKCIADDR(CI_ADDR, neg_addr,
 80102e8:	f013 0f01 	tst.w	r3, #1
 80102ec:	f000 8112 	beq.w	8010514 <ipcp_nakci+0x2e8>
 80102f0:	7863      	ldrb	r3, [r4, #1]
 80102f2:	2b06      	cmp	r3, #6
 80102f4:	f000 80cf 	beq.w	8010496 <ipcp_nakci+0x26a>
    NAKCIDNS(CI_MS_DNS1, req_dns1,
 80102f8:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80102fc:	331c      	adds	r3, #28
 80102fe:	785b      	ldrb	r3, [r3, #1]
 8010300:	f013 0f01 	tst.w	r3, #1
 8010304:	f040 8111 	bne.w	801052a <ipcp_nakci+0x2fe>
    NAKCIDNS(CI_MS_DNS2, req_dns2,
 8010308:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 801030c:	331c      	adds	r3, #28
 801030e:	785b      	ldrb	r3, [r3, #1]
 8010310:	f013 0f02 	tst.w	r3, #2
 8010314:	f000 8109 	beq.w	801052a <ipcp_nakci+0x2fe>
 8010318:	7863      	ldrb	r3, [r4, #1]
 801031a:	2b06      	cmp	r3, #6
 801031c:	f040 8105 	bne.w	801052a <ipcp_nakci+0x2fe>
 8010320:	2e05      	cmp	r6, #5
 8010322:	f340 8102 	ble.w	801052a <ipcp_nakci+0x2fe>
 8010326:	7823      	ldrb	r3, [r4, #0]
 8010328:	2b83      	cmp	r3, #131	; 0x83
 801032a:	f040 8101 	bne.w	8010530 <ipcp_nakci+0x304>
 801032e:	3e06      	subs	r6, #6
 8010330:	78a2      	ldrb	r2, [r4, #2]
 8010332:	78e3      	ldrb	r3, [r4, #3]
 8010334:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8010338:	7923      	ldrb	r3, [r4, #4]
 801033a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801033e:	f104 0806 	add.w	r8, r4, #6
 8010342:	7960      	ldrb	r0, [r4, #5]
 8010344:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8010348:	f7f7 fa6f 	bl	800782a <lwip_htonl>
 801034c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8010350:	f043 0302 	orr.w	r3, r3, #2
 8010354:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8010358:	9b04      	ldr	r3, [sp, #16]
 801035a:	2d00      	cmp	r5, #0
 801035c:	bf08      	it	eq
 801035e:	4603      	moveq	r3, r0
 8010360:	9304      	str	r3, [sp, #16]
 8010362:	4644      	mov	r4, r8
 8010364:	2d00      	cmp	r5, #0
 8010366:	9b03      	ldr	r3, [sp, #12]
 8010368:	bf18      	it	ne
 801036a:	2300      	movne	r3, #0
 801036c:	9303      	str	r3, [sp, #12]
 801036e:	e0dc      	b.n	801052a <ipcp_nakci+0x2fe>
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 8010370:	7863      	ldrb	r3, [r4, #1]
 8010372:	2b0a      	cmp	r3, #10
 8010374:	d1ac      	bne.n	80102d0 <ipcp_nakci+0xa4>
 8010376:	2e09      	cmp	r6, #9
 8010378:	dd02      	ble.n	8010380 <ipcp_nakci+0x154>
 801037a:	7823      	ldrb	r3, [r4, #0]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d003      	beq.n	8010388 <ipcp_nakci+0x15c>
    NAKCIVJ(CI_COMPRESSTYPE, neg_vj,
 8010380:	f241 231c 	movw	r3, #4636	; 0x121c
 8010384:	5cfb      	ldrb	r3, [r7, r3]
 8010386:	e7af      	b.n	80102e8 <ipcp_nakci+0xbc>
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 8010388:	3e0a      	subs	r6, #10
 801038a:	78a2      	ldrb	r2, [r4, #2]
 801038c:	78e3      	ldrb	r3, [r4, #3]
 801038e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8010392:	7923      	ldrb	r3, [r4, #4]
 8010394:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010398:	7960      	ldrb	r0, [r4, #5]
 801039a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801039e:	f7f7 fa44 	bl	800782a <lwip_htonl>
 80103a2:	4680      	mov	r8, r0
 80103a4:	79a2      	ldrb	r2, [r4, #6]
 80103a6:	79e3      	ldrb	r3, [r4, #7]
 80103a8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80103ac:	7a23      	ldrb	r3, [r4, #8]
 80103ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80103b2:	f104 020a 	add.w	r2, r4, #10
 80103b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80103b8:	7a60      	ldrb	r0, [r4, #9]
 80103ba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80103be:	f7f7 fa34 	bl	800782a <lwip_htonl>
 80103c2:	4603      	mov	r3, r0
 80103c4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80103c8:	f042 0202 	orr.w	r2, r2, #2
 80103cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 80103d0:	b99d      	cbnz	r5, 80103fa <ipcp_nakci+0x1ce>
 80103d2:	f241 221c 	movw	r2, #4636	; 0x121c
 80103d6:	5cba      	ldrb	r2, [r7, r2]
 80103d8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80103dc:	d003      	beq.n	80103e6 <ipcp_nakci+0x1ba>
 80103de:	f1b8 0f00 	cmp.w	r8, #0
 80103e2:	bf18      	it	ne
 80103e4:	46c2      	movne	sl, r8
 80103e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80103ea:	d101      	bne.n	80103f0 <ipcp_nakci+0x1c4>
 80103ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80103ee:	e76f      	b.n	80102d0 <ipcp_nakci+0xa4>
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	bf18      	it	ne
 80103f4:	469b      	movne	fp, r3
 80103f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80103f8:	e76a      	b.n	80102d0 <ipcp_nakci+0xa4>
 80103fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80103fc:	2300      	movs	r3, #0
 80103fe:	9301      	str	r3, [sp, #4]
 8010400:	e766      	b.n	80102d0 <ipcp_nakci+0xa4>
    NAKCIVJ(CI_COMPRESSTYPE, neg_vj,
 8010402:	42b2      	cmp	r2, r6
 8010404:	f73f af70 	bgt.w	80102e8 <ipcp_nakci+0xbc>
 8010408:	7821      	ldrb	r1, [r4, #0]
 801040a:	2902      	cmp	r1, #2
 801040c:	f47f af6c 	bne.w	80102e8 <ipcp_nakci+0xbc>
 8010410:	1ab6      	subs	r6, r6, r2
 8010412:	f894 e002 	ldrb.w	lr, [r4, #2]
 8010416:	f104 0c04 	add.w	ip, r4, #4
 801041a:	78e0      	ldrb	r0, [r4, #3]
 801041c:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8010420:	f041 0108 	orr.w	r1, r1, #8
 8010424:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
 8010428:	bb1d      	cbnz	r5, 8010472 <ipcp_nakci+0x246>
 801042a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
 801042e:	2a06      	cmp	r2, #6
 8010430:	d007      	beq.n	8010442 <ipcp_nakci+0x216>
 8010432:	282d      	cmp	r0, #45	; 0x2d
 8010434:	d025      	beq.n	8010482 <ipcp_nakci+0x256>
 8010436:	2837      	cmp	r0, #55	; 0x37
 8010438:	d028      	beq.n	801048c <ipcp_nakci+0x260>
 801043a:	4664      	mov	r4, ip
 801043c:	2200      	movs	r2, #0
 801043e:	9206      	str	r2, [sp, #24]
 8010440:	e752      	b.n	80102e8 <ipcp_nakci+0xbc>
 8010442:	1da2      	adds	r2, r4, #6
 8010444:	282d      	cmp	r0, #45	; 0x2d
 8010446:	d003      	beq.n	8010450 <ipcp_nakci+0x224>
 8010448:	4614      	mov	r4, r2
 801044a:	2200      	movs	r2, #0
 801044c:	9206      	str	r2, [sp, #24]
 801044e:	e74b      	b.n	80102e8 <ipcp_nakci+0xbc>
 8010450:	7920      	ldrb	r0, [r4, #4]
 8010452:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8010456:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
 801045a:	9908      	ldr	r1, [sp, #32]
 801045c:	4584      	cmp	ip, r0
 801045e:	bf88      	it	hi
 8010460:	4601      	movhi	r1, r0
 8010462:	9108      	str	r1, [sp, #32]
 8010464:	7961      	ldrb	r1, [r4, #5]
 8010466:	b941      	cbnz	r1, 801047a <ipcp_nakci+0x24e>
 8010468:	4614      	mov	r4, r2
 801046a:	2200      	movs	r2, #0
 801046c:	920a      	str	r2, [sp, #40]	; 0x28
 801046e:	9207      	str	r2, [sp, #28]
 8010470:	e73a      	b.n	80102e8 <ipcp_nakci+0xbc>
 8010472:	4664      	mov	r4, ip
 8010474:	2200      	movs	r2, #0
 8010476:	9206      	str	r2, [sp, #24]
 8010478:	e736      	b.n	80102e8 <ipcp_nakci+0xbc>
 801047a:	4614      	mov	r4, r2
 801047c:	2200      	movs	r2, #0
 801047e:	9207      	str	r2, [sp, #28]
 8010480:	e732      	b.n	80102e8 <ipcp_nakci+0xbc>
 8010482:	9009      	str	r0, [sp, #36]	; 0x24
 8010484:	4664      	mov	r4, ip
 8010486:	2201      	movs	r2, #1
 8010488:	9207      	str	r2, [sp, #28]
 801048a:	e72d      	b.n	80102e8 <ipcp_nakci+0xbc>
 801048c:	9009      	str	r0, [sp, #36]	; 0x24
 801048e:	4664      	mov	r4, ip
 8010490:	2201      	movs	r2, #1
 8010492:	9207      	str	r2, [sp, #28]
 8010494:	e728      	b.n	80102e8 <ipcp_nakci+0xbc>
    NAKCIADDR(CI_ADDR, neg_addr,
 8010496:	2e05      	cmp	r6, #5
 8010498:	f340 81b4 	ble.w	8010804 <ipcp_nakci+0x5d8>
 801049c:	7823      	ldrb	r3, [r4, #0]
 801049e:	2b03      	cmp	r3, #3
 80104a0:	d013      	beq.n	80104ca <ipcp_nakci+0x29e>
    NAKCIDNS(CI_MS_DNS1, req_dns1,
 80104a2:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80104a6:	331c      	adds	r3, #28
 80104a8:	785b      	ldrb	r3, [r3, #1]
 80104aa:	f013 0f01 	tst.w	r3, #1
 80104ae:	f000 81b1 	beq.w	8010814 <ipcp_nakci+0x5e8>
 80104b2:	7823      	ldrb	r3, [r4, #0]
 80104b4:	2b81      	cmp	r3, #129	; 0x81
 80104b6:	d04d      	beq.n	8010554 <ipcp_nakci+0x328>
    NAKCIDNS(CI_MS_DNS2, req_dns2,
 80104b8:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80104bc:	331c      	adds	r3, #28
 80104be:	785b      	ldrb	r3, [r3, #1]
 80104c0:	f013 0f02 	tst.w	r3, #2
 80104c4:	f47f af2f 	bne.w	8010326 <ipcp_nakci+0xfa>
 80104c8:	e02f      	b.n	801052a <ipcp_nakci+0x2fe>
    NAKCIADDR(CI_ADDR, neg_addr,
 80104ca:	3e06      	subs	r6, #6
 80104cc:	78a2      	ldrb	r2, [r4, #2]
 80104ce:	78e3      	ldrb	r3, [r4, #3]
 80104d0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80104d4:	7923      	ldrb	r3, [r4, #4]
 80104d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80104da:	f104 0806 	add.w	r8, r4, #6
 80104de:	7960      	ldrb	r0, [r4, #5]
 80104e0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80104e4:	f7f7 f9a1 	bl	800782a <lwip_htonl>
 80104e8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80104ec:	f042 0201 	orr.w	r2, r2, #1
 80104f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 80104f4:	b955      	cbnz	r5, 801050c <ipcp_nakci+0x2e0>
 80104f6:	f241 221c 	movw	r2, #4636	; 0x121c
 80104fa:	5cba      	ldrb	r2, [r7, r2]
 80104fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8010500:	d01b      	beq.n	801053a <ipcp_nakci+0x30e>
 8010502:	2800      	cmp	r0, #0
 8010504:	bf18      	it	ne
 8010506:	4682      	movne	sl, r0
 8010508:	4644      	mov	r4, r8
 801050a:	e003      	b.n	8010514 <ipcp_nakci+0x2e8>
 801050c:	4644      	mov	r4, r8
 801050e:	2300      	movs	r3, #0
 8010510:	9301      	str	r3, [sp, #4]
 8010512:	4699      	mov	r9, r3
    NAKCIDNS(CI_MS_DNS1, req_dns1,
 8010514:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8010518:	331c      	adds	r3, #28
 801051a:	785b      	ldrb	r3, [r3, #1]
 801051c:	f013 0f01 	tst.w	r3, #1
 8010520:	f43f aef2 	beq.w	8010308 <ipcp_nakci+0xdc>
 8010524:	7863      	ldrb	r3, [r4, #1]
 8010526:	2b06      	cmp	r3, #6
 8010528:	d009      	beq.n	801053e <ipcp_nakci+0x312>
    while (len >= CILEN_VOID) {
 801052a:	2e01      	cmp	r6, #1
 801052c:	f340 8112 	ble.w	8010754 <ipcp_nakci+0x528>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 8010530:	f507 5890 	add.w	r8, r7, #4608	; 0x1200
 8010534:	f108 081c 	add.w	r8, r8, #28
 8010538:	e047      	b.n	80105ca <ipcp_nakci+0x39e>
    NAKCIADDR(CI_ADDR, neg_addr,
 801053a:	4644      	mov	r4, r8
 801053c:	e7ea      	b.n	8010514 <ipcp_nakci+0x2e8>
    NAKCIDNS(CI_MS_DNS1, req_dns1,
 801053e:	2e05      	cmp	r6, #5
 8010540:	dcb7      	bgt.n	80104b2 <ipcp_nakci+0x286>
    NAKCIDNS(CI_MS_DNS2, req_dns2,
 8010542:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8010546:	331c      	adds	r3, #28
 8010548:	785b      	ldrb	r3, [r3, #1]
 801054a:	f013 0f02 	tst.w	r3, #2
 801054e:	f47f aee7 	bne.w	8010320 <ipcp_nakci+0xf4>
 8010552:	e7ea      	b.n	801052a <ipcp_nakci+0x2fe>
    NAKCIDNS(CI_MS_DNS1, req_dns1,
 8010554:	3e06      	subs	r6, #6
 8010556:	78a2      	ldrb	r2, [r4, #2]
 8010558:	78e3      	ldrb	r3, [r4, #3]
 801055a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801055e:	7923      	ldrb	r3, [r4, #4]
 8010560:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010564:	f104 0806 	add.w	r8, r4, #6
 8010568:	7960      	ldrb	r0, [r4, #5]
 801056a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801056e:	f7f7 f95c 	bl	800782a <lwip_htonl>
 8010572:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8010576:	f043 0301 	orr.w	r3, r3, #1
 801057a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 801057e:	9b00      	ldr	r3, [sp, #0]
 8010580:	2d00      	cmp	r5, #0
 8010582:	bf08      	it	eq
 8010584:	4603      	moveq	r3, r0
 8010586:	9300      	str	r3, [sp, #0]
 8010588:	4644      	mov	r4, r8
 801058a:	2d00      	cmp	r5, #0
 801058c:	9b02      	ldr	r3, [sp, #8]
 801058e:	bf18      	it	ne
 8010590:	2300      	movne	r3, #0
 8010592:	9302      	str	r3, [sp, #8]
 8010594:	e6b8      	b.n	8010308 <ipcp_nakci+0xdc>
	switch (citype) {
 8010596:	2b01      	cmp	r3, #1
 8010598:	d04d      	beq.n	8010636 <ipcp_nakci+0x40a>
 801059a:	2b02      	cmp	r3, #2
 801059c:	d111      	bne.n	80105c2 <ipcp_nakci+0x396>
	    if (go->neg_vj || no.neg_vj ||
 801059e:	f898 3000 	ldrb.w	r3, [r8]
 80105a2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80105a6:	430b      	orrs	r3, r1
 80105a8:	f013 0f08 	tst.w	r3, #8
 80105ac:	f040 8112 	bne.w	80107d4 <ipcp_nakci+0x5a8>
		(cilen != CILEN_VJ && cilen != CILEN_COMPRESS))
 80105b0:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80105b4:	2a04      	cmp	r2, #4
 80105b6:	f040 810f 	bne.w	80107d8 <ipcp_nakci+0x5ac>
	    no.neg_vj = 1;
 80105ba:	f041 0308 	orr.w	r3, r1, #8
 80105be:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    while (len >= CILEN_VOID) {
 80105c2:	2e01      	cmp	r6, #1
 80105c4:	f340 80c6 	ble.w	8010754 <ipcp_nakci+0x528>
 80105c8:	462c      	mov	r4, r5
	GETCHAR(citype, p);
 80105ca:	4625      	mov	r5, r4
 80105cc:	f815 3b02 	ldrb.w	r3, [r5], #2
	GETCHAR(cilen, p);
 80105d0:	7862      	ldrb	r2, [r4, #1]
	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
 80105d2:	2a01      	cmp	r2, #1
 80105d4:	f240 80f8 	bls.w	80107c8 <ipcp_nakci+0x59c>
 80105d8:	1ab6      	subs	r6, r6, r2
 80105da:	f100 80f9 	bmi.w	80107d0 <ipcp_nakci+0x5a4>
	next = p + cilen - 2;
 80105de:	1e91      	subs	r1, r2, #2
 80105e0:	440d      	add	r5, r1
	switch (citype) {
 80105e2:	2b03      	cmp	r3, #3
 80105e4:	d066      	beq.n	80106b4 <ipcp_nakci+0x488>
 80105e6:	d9d6      	bls.n	8010596 <ipcp_nakci+0x36a>
 80105e8:	2b81      	cmp	r3, #129	; 0x81
 80105ea:	f000 8093 	beq.w	8010714 <ipcp_nakci+0x4e8>
 80105ee:	2b83      	cmp	r3, #131	; 0x83
 80105f0:	d1e7      	bne.n	80105c2 <ipcp_nakci+0x396>
	    if (go->req_dns2 || no.req_dns2 || cilen != CILEN_ADDR)
 80105f2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80105f6:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
 80105fa:	430b      	orrs	r3, r1
 80105fc:	f013 0f02 	tst.w	r3, #2
 8010600:	f040 80fa 	bne.w	80107f8 <ipcp_nakci+0x5cc>
 8010604:	2a06      	cmp	r2, #6
 8010606:	f040 80f9 	bne.w	80107fc <ipcp_nakci+0x5d0>
	    GETLONG(l, p);
 801060a:	78a3      	ldrb	r3, [r4, #2]
 801060c:	78e0      	ldrb	r0, [r4, #3]
 801060e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8010612:	7923      	ldrb	r3, [r4, #4]
 8010614:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8010618:	7960      	ldrb	r0, [r4, #5]
	    try_.dnsaddr[1] = lwip_htonl(l);
 801061a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801061e:	f7f7 f904 	bl	800782a <lwip_htonl>
 8010622:	9004      	str	r0, [sp, #16]
	    no.req_dns2 = 1;
 8010624:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8010628:	f043 0302 	orr.w	r3, r3, #2
 801062c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	    try_.req_dns2 = 1;
 8010630:	2301      	movs	r3, #1
 8010632:	9303      	str	r3, [sp, #12]
	    break;
 8010634:	e7c5      	b.n	80105c2 <ipcp_nakci+0x396>
	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
 8010636:	f898 3000 	ldrb.w	r3, [r8]
 801063a:	f003 0303 	and.w	r3, r3, #3
 801063e:	2b02      	cmp	r3, #2
 8010640:	f000 80cc 	beq.w	80107dc <ipcp_nakci+0x5b0>
 8010644:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8010648:	f013 0f02 	tst.w	r3, #2
 801064c:	f040 80c8 	bne.w	80107e0 <ipcp_nakci+0x5b4>
		|| cilen != CILEN_ADDRS)
 8010650:	2a0a      	cmp	r2, #10
 8010652:	f040 80c7 	bne.w	80107e4 <ipcp_nakci+0x5b8>
	    GETLONG(l, p);
 8010656:	78a3      	ldrb	r3, [r4, #2]
 8010658:	78e0      	ldrb	r0, [r4, #3]
 801065a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801065e:	7923      	ldrb	r3, [r4, #4]
 8010660:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8010664:	7960      	ldrb	r0, [r4, #5]
	    ciaddr1 = lwip_htonl(l);
 8010666:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801066a:	f7f7 f8de 	bl	800782a <lwip_htonl>
	    if (ciaddr1 && go->accept_local)
 801066e:	b128      	cbz	r0, 801067c <ipcp_nakci+0x450>
 8010670:	f898 2000 	ldrb.w	r2, [r8]
		try_.ouraddr = ciaddr1;
 8010674:	f012 0f40 	tst.w	r2, #64	; 0x40
 8010678:	bf18      	it	ne
 801067a:	4682      	movne	sl, r0
	    GETLONG(l, p);
 801067c:	79a3      	ldrb	r3, [r4, #6]
 801067e:	79e0      	ldrb	r0, [r4, #7]
 8010680:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8010684:	7a23      	ldrb	r3, [r4, #8]
 8010686:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801068a:	7a60      	ldrb	r0, [r4, #9]
	    ciaddr2 = lwip_htonl(l);
 801068c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8010690:	f7f7 f8cb 	bl	800782a <lwip_htonl>
	    if (ciaddr2 && go->accept_remote)
 8010694:	b128      	cbz	r0, 80106a2 <ipcp_nakci+0x476>
 8010696:	f998 2000 	ldrsb.w	r2, [r8]
		try_.hisaddr = ciaddr2;
 801069a:	ea3b 0b22 	bics.w	fp, fp, r2, asr #32
 801069e:	bf28      	it	cs
 80106a0:	4683      	movcs	fp, r0
	    no.old_addrs = 1;
 80106a2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80106a6:	f043 0302 	orr.w	r3, r3, #2
 80106aa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	    try_.neg_addr = 0;
 80106ae:	f04f 0900 	mov.w	r9, #0
	    break;
 80106b2:	e786      	b.n	80105c2 <ipcp_nakci+0x396>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 80106b4:	f898 3000 	ldrb.w	r3, [r8]
 80106b8:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80106bc:	430b      	orrs	r3, r1
 80106be:	f013 0f01 	tst.w	r3, #1
 80106c2:	f040 8091 	bne.w	80107e8 <ipcp_nakci+0x5bc>
 80106c6:	2a06      	cmp	r2, #6
 80106c8:	f040 8090 	bne.w	80107ec <ipcp_nakci+0x5c0>
	    GETLONG(l, p);
 80106cc:	78a3      	ldrb	r3, [r4, #2]
 80106ce:	78e0      	ldrb	r0, [r4, #3]
 80106d0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80106d4:	7923      	ldrb	r3, [r4, #4]
 80106d6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80106da:	7960      	ldrb	r0, [r4, #5]
	    ciaddr1 = lwip_htonl(l);
 80106dc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80106e0:	f7f7 f8a3 	bl	800782a <lwip_htonl>
	    if (ciaddr1 && go->accept_local)
 80106e4:	b120      	cbz	r0, 80106f0 <ipcp_nakci+0x4c4>
 80106e6:	f898 2000 	ldrb.w	r2, [r8]
 80106ea:	f012 0f40 	tst.w	r2, #64	; 0x40
 80106ee:	d10d      	bne.n	801070c <ipcp_nakci+0x4e0>
		try_.neg_addr = 1;
 80106f0:	f1ba 0f00 	cmp.w	sl, #0
 80106f4:	bf18      	it	ne
 80106f6:	f04f 0901 	movne.w	r9, #1
	    no.neg_addr = 1;
 80106fa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80106fe:	f043 0301 	orr.w	r3, r3, #1
 8010702:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	    try_.old_addrs = 0;
 8010706:	2300      	movs	r3, #0
 8010708:	9301      	str	r3, [sp, #4]
	    break;
 801070a:	e75a      	b.n	80105c2 <ipcp_nakci+0x396>
		try_.ouraddr = ciaddr1;
 801070c:	4682      	mov	sl, r0
		try_.neg_addr = 1;
 801070e:	f04f 0901 	mov.w	r9, #1
 8010712:	e7f2      	b.n	80106fa <ipcp_nakci+0x4ce>
	    if (go->req_dns1 || no.req_dns1 || cilen != CILEN_ADDR)
 8010714:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010718:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
 801071c:	430b      	orrs	r3, r1
 801071e:	f013 0f01 	tst.w	r3, #1
 8010722:	d165      	bne.n	80107f0 <ipcp_nakci+0x5c4>
 8010724:	2a06      	cmp	r2, #6
 8010726:	d165      	bne.n	80107f4 <ipcp_nakci+0x5c8>
	    GETLONG(l, p);
 8010728:	78a3      	ldrb	r3, [r4, #2]
 801072a:	78e0      	ldrb	r0, [r4, #3]
 801072c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8010730:	7923      	ldrb	r3, [r4, #4]
 8010732:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8010736:	7960      	ldrb	r0, [r4, #5]
	    try_.dnsaddr[0] = lwip_htonl(l);
 8010738:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801073c:	f7f7 f875 	bl	800782a <lwip_htonl>
 8010740:	9000      	str	r0, [sp, #0]
	    no.req_dns1 = 1;
 8010742:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8010746:	f043 0301 	orr.w	r3, r3, #1
 801074a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	    try_.req_dns1 = 1;
 801074e:	2301      	movs	r3, #1
 8010750:	9302      	str	r3, [sp, #8]
	    break;
 8010752:	e736      	b.n	80105c2 <ipcp_nakci+0x396>
    if (f->state != PPP_FSM_OPENED)
 8010754:	9b05      	ldr	r3, [sp, #20]
 8010756:	7c1b      	ldrb	r3, [r3, #16]
 8010758:	2b09      	cmp	r3, #9
 801075a:	d051      	beq.n	8010800 <ipcp_nakci+0x5d4>
	*go = try_;
 801075c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010760:	f369 0300 	bfi	r3, r9, #0, #1
 8010764:	9a01      	ldr	r2, [sp, #4]
 8010766:	f362 0341 	bfi	r3, r2, #1, #1
 801076a:	9a06      	ldr	r2, [sp, #24]
 801076c:	f362 03c3 	bfi	r3, r2, #3, #1
 8010770:	9a07      	ldr	r2, [sp, #28]
 8010772:	f362 1304 	bfi	r3, r2, #4, #1
 8010776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010778:	f362 1345 	bfi	r3, r2, #5, #1
 801077c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8010780:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8010784:	9a02      	ldr	r2, [sp, #8]
 8010786:	f362 0300 	bfi	r3, r2, #0, #1
 801078a:	9a03      	ldr	r2, [sp, #12]
 801078c:	f362 0341 	bfi	r3, r2, #1, #1
 8010790:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8010794:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010798:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801079c:	9b00      	ldr	r3, [sp, #0]
 801079e:	930f      	str	r3, [sp, #60]	; 0x3c
 80107a0:	9b04      	ldr	r3, [sp, #16]
 80107a2:	9310      	str	r3, [sp, #64]	; 0x40
 80107a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107a6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80107aa:	9b08      	ldr	r3, [sp, #32]
 80107ac:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80107b0:	f507 5790 	add.w	r7, r7, #4608	; 0x1200
 80107b4:	371c      	adds	r7, #28
 80107b6:	ac0c      	add	r4, sp, #48	; 0x30
 80107b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107ba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80107bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80107c0:	e887 0003 	stmia.w	r7, {r0, r1}
    return 1;
 80107c4:	2001      	movs	r0, #1
 80107c6:	e000      	b.n	80107ca <ipcp_nakci+0x59e>
    return 0;
 80107c8:	2000      	movs	r0, #0
}
 80107ca:	b019      	add	sp, #100	; 0x64
 80107cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
 80107d0:	2000      	movs	r0, #0
 80107d2:	e7fa      	b.n	80107ca <ipcp_nakci+0x59e>
 80107d4:	2000      	movs	r0, #0
 80107d6:	e7f8      	b.n	80107ca <ipcp_nakci+0x59e>
 80107d8:	2000      	movs	r0, #0
 80107da:	e7f6      	b.n	80107ca <ipcp_nakci+0x59e>
 80107dc:	2000      	movs	r0, #0
 80107de:	e7f4      	b.n	80107ca <ipcp_nakci+0x59e>
 80107e0:	2000      	movs	r0, #0
 80107e2:	e7f2      	b.n	80107ca <ipcp_nakci+0x59e>
 80107e4:	2000      	movs	r0, #0
 80107e6:	e7f0      	b.n	80107ca <ipcp_nakci+0x59e>
 80107e8:	2000      	movs	r0, #0
 80107ea:	e7ee      	b.n	80107ca <ipcp_nakci+0x59e>
 80107ec:	2000      	movs	r0, #0
 80107ee:	e7ec      	b.n	80107ca <ipcp_nakci+0x59e>
 80107f0:	2000      	movs	r0, #0
 80107f2:	e7ea      	b.n	80107ca <ipcp_nakci+0x59e>
 80107f4:	2000      	movs	r0, #0
 80107f6:	e7e8      	b.n	80107ca <ipcp_nakci+0x59e>
 80107f8:	2000      	movs	r0, #0
 80107fa:	e7e6      	b.n	80107ca <ipcp_nakci+0x59e>
 80107fc:	2000      	movs	r0, #0
 80107fe:	e7e4      	b.n	80107ca <ipcp_nakci+0x59e>
    return 1;
 8010800:	2001      	movs	r0, #1
 8010802:	e7e2      	b.n	80107ca <ipcp_nakci+0x59e>
    NAKCIDNS(CI_MS_DNS1, req_dns1,
 8010804:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8010808:	331c      	adds	r3, #28
 801080a:	785b      	ldrb	r3, [r3, #1]
 801080c:	f013 0f01 	tst.w	r3, #1
 8010810:	f47f ae95 	bne.w	801053e <ipcp_nakci+0x312>
    NAKCIDNS(CI_MS_DNS2, req_dns2,
 8010814:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8010818:	331c      	adds	r3, #28
 801081a:	785b      	ldrb	r3, [r3, #1]
 801081c:	f013 0f02 	tst.w	r3, #2
 8010820:	f43f ae83 	beq.w	801052a <ipcp_nakci+0x2fe>
 8010824:	e57c      	b.n	8010320 <ipcp_nakci+0xf4>

08010826 <ipcp_resetci>:
static void ipcp_resetci(fsm *f) {
 8010826:	b470      	push	{r4, r5, r6}
    ppp_pcb *pcb = f->pcb;
 8010828:	6804      	ldr	r4, [r0, #0]
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 801082a:	f241 2304 	movw	r3, #4612	; 0x1204
 801082e:	5ce3      	ldrb	r3, [r4, r3]
 8010830:	f013 0f03 	tst.w	r3, #3
 8010834:	d048      	beq.n	80108c8 <ipcp_resetci+0xa2>
	(ao->neg_addr || ao->old_addrs);
 8010836:	f241 2334 	movw	r3, #4660	; 0x1234
 801083a:	5ce3      	ldrb	r3, [r4, r3]
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 801083c:	f013 0303 	ands.w	r3, r3, #3
 8010840:	bf18      	it	ne
 8010842:	2301      	movne	r3, #1
 8010844:	f241 2204 	movw	r2, #4612	; 0x1204
 8010848:	18a0      	adds	r0, r4, r2
 801084a:	5ca1      	ldrb	r1, [r4, r2]
 801084c:	f363 0182 	bfi	r1, r3, #2, #1
 8010850:	54a1      	strb	r1, [r4, r2]
    if (wo->ouraddr == 0)
 8010852:	6843      	ldr	r3, [r0, #4]
 8010854:	b91b      	cbnz	r3, 801085e <ipcp_resetci+0x38>
	wo->accept_local = 1;
 8010856:	b2cb      	uxtb	r3, r1
 8010858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801085c:	54a3      	strb	r3, [r4, r2]
    if (wo->hisaddr == 0)
 801085e:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010862:	3304      	adds	r3, #4
 8010864:	689b      	ldr	r3, [r3, #8]
 8010866:	b92b      	cbnz	r3, 8010874 <ipcp_resetci+0x4e>
	wo->accept_remote = 1;
 8010868:	f241 2204 	movw	r2, #4612	; 0x1204
 801086c:	5ca3      	ldrb	r3, [r4, r2]
 801086e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010872:	54a3      	strb	r3, [r4, r2]
    wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
 8010874:	7822      	ldrb	r2, [r4, #0]
 8010876:	f002 0201 	and.w	r2, r2, #1
 801087a:	f504 5590 	add.w	r5, r4, #4608	; 0x1200
 801087e:	796b      	ldrb	r3, [r5, #5]
 8010880:	f362 0341 	bfi	r3, r2, #1, #1
 8010884:	f362 0300 	bfi	r3, r2, #0, #1
 8010888:	716b      	strb	r3, [r5, #5]
 801088a:	3504      	adds	r5, #4
    *go = *wo;
 801088c:	f504 5690 	add.w	r6, r4, #4608	; 0x1200
 8010890:	361c      	adds	r6, #28
 8010892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010894:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010896:	e895 0003 	ldmia.w	r5, {r0, r1}
 801089a:	e886 0003 	stmia.w	r6, {r0, r1}
    if (!pcb->ask_for_local)
 801089e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80108a2:	f013 0f01 	tst.w	r3, #1
 80108a6:	d103      	bne.n	80108b0 <ipcp_resetci+0x8a>
	go->ouraddr = 0;
 80108a8:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 80108ac:	2200      	movs	r2, #0
 80108ae:	621a      	str	r2, [r3, #32]
    BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
 80108b0:	f241 214c 	movw	r1, #4684	; 0x124c
 80108b4:	1862      	adds	r2, r4, r1
 80108b6:	2300      	movs	r3, #0
 80108b8:	5063      	str	r3, [r4, r1]
 80108ba:	6053      	str	r3, [r2, #4]
 80108bc:	6093      	str	r3, [r2, #8]
 80108be:	60d3      	str	r3, [r2, #12]
 80108c0:	6113      	str	r3, [r2, #16]
 80108c2:	6153      	str	r3, [r2, #20]
}
 80108c4:	bc70      	pop	{r4, r5, r6}
 80108c6:	4770      	bx	lr
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 80108c8:	2300      	movs	r3, #0
 80108ca:	e7bb      	b.n	8010844 <ipcp_resetci+0x1e>

080108cc <ipcp_reqci>:
static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
 80108cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d0:	b087      	sub	sp, #28
 80108d2:	460c      	mov	r4, r1
 80108d4:	9100      	str	r1, [sp, #0]
 80108d6:	9203      	str	r2, [sp, #12]
 80108d8:	9301      	str	r3, [sp, #4]
    ppp_pcb *pcb = f->pcb;
 80108da:	f8d0 a000 	ldr.w	sl, [r0]
    int l = *len;		/* Length left */
 80108de:	6815      	ldr	r5, [r2, #0]
    BZERO(ho, sizeof(*ho));
 80108e0:	f241 214c 	movw	r1, #4684	; 0x124c
 80108e4:	eb0a 0201 	add.w	r2, sl, r1
 80108e8:	2300      	movs	r3, #0
 80108ea:	f84a 3001 	str.w	r3, [sl, r1]
 80108ee:	6053      	str	r3, [r2, #4]
 80108f0:	6093      	str	r3, [r2, #8]
 80108f2:	60d3      	str	r3, [r2, #12]
 80108f4:	6113      	str	r3, [r2, #16]
 80108f6:	6153      	str	r3, [r2, #20]
    while (l) {
 80108f8:	2d00      	cmp	r5, #0
 80108fa:	f000 81dd 	beq.w	8010cb8 <ipcp_reqci+0x3ec>
    u_char *ucp = inp;		/* Pointer to current output char */
 80108fe:	4627      	mov	r7, r4
    next = inp;
 8010900:	4626      	mov	r6, r4
    int rc = CONFACK;		/* Final packet return code */
 8010902:	f04f 0b02 	mov.w	fp, #2
	    if (!ao->neg_addr || ho->old_addrs ||
 8010906:	f50a 5391 	add.w	r3, sl, #4640	; 0x1220
 801090a:	3314      	adds	r3, #20
 801090c:	9302      	str	r3, [sp, #8]
 801090e:	e015      	b.n	801093c <ipcp_reqci+0x70>
	    cilen = l;			/* Reject till end of packet */
 8010910:	fa1f f885 	uxth.w	r8, r5
	    goto endswitch;
 8010914:	4634      	mov	r4, r6
	    l = 0;			/* Don't loop again */
 8010916:	2500      	movs	r5, #0
	if (orc == CONFREJ &&		/* Reject this CI */
 8010918:	f1bb 0f04 	cmp.w	fp, #4
	    ucp = inp;			/* Backup */
 801091c:	bf1c      	itt	ne
 801091e:	9f00      	ldrne	r7, [sp, #0]
	    rc = CONFREJ;
 8010920:	f04f 0b04 	movne.w	fp, #4
	if (ucp != cip)
 8010924:	42b7      	cmp	r7, r6
 8010926:	d004      	beq.n	8010932 <ipcp_reqci+0x66>
	    MEMCPY(ucp, cip, cilen);	/* Move it */
 8010928:	4642      	mov	r2, r8
 801092a:	4631      	mov	r1, r6
 801092c:	4638      	mov	r0, r7
 801092e:	f003 fd2f 	bl	8014390 <memcpy>
	INCPTR(cilen, ucp);
 8010932:	4447      	add	r7, r8
 8010934:	4626      	mov	r6, r4
    while (l) {
 8010936:	2d00      	cmp	r5, #0
 8010938:	f000 818a 	beq.w	8010c50 <ipcp_reqci+0x384>
	if (l < 2 ||			/* Not enough data for CI header or */
 801093c:	2d01      	cmp	r5, #1
 801093e:	dde7      	ble.n	8010910 <ipcp_reqci+0x44>
	    p[1] < 2 ||			/*  CI length too small or */
 8010940:	7874      	ldrb	r4, [r6, #1]
	if (l < 2 ||			/* Not enough data for CI header or */
 8010942:	2c01      	cmp	r4, #1
 8010944:	d9e4      	bls.n	8010910 <ipcp_reqci+0x44>
	    p[1] < 2 ||			/*  CI length too small or */
 8010946:	42ac      	cmp	r4, r5
 8010948:	dce2      	bgt.n	8010910 <ipcp_reqci+0x44>
	GETCHAR(citype, p);		/* Parse CI type */
 801094a:	f896 9000 	ldrb.w	r9, [r6]
	GETCHAR(cilen, p);		/* Parse CI length */
 801094e:	fa1f f884 	uxth.w	r8, r4
	l -= cilen;			/* Adjust remaining length */
 8010952:	1b2d      	subs	r5, r5, r4
	next += cilen;			/* Step to next CI */
 8010954:	4434      	add	r4, r6
	switch (citype) {		/* Check CI type */
 8010956:	f1b9 0f03 	cmp.w	r9, #3
 801095a:	f000 80c6 	beq.w	8010aea <ipcp_reqci+0x21e>
 801095e:	d82a      	bhi.n	80109b6 <ipcp_reqci+0xea>
 8010960:	f1b9 0f01 	cmp.w	r9, #1
 8010964:	d032      	beq.n	80109cc <ipcp_reqci+0x100>
 8010966:	f1b9 0f02 	cmp.w	r9, #2
 801096a:	bf18      	it	ne
 801096c:	f04f 0904 	movne.w	r9, #4
 8010970:	d128      	bne.n	80109c4 <ipcp_reqci+0xf8>
	    if (!ao->neg_vj ||
 8010972:	9b02      	ldr	r3, [sp, #8]
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	f013 0f08 	tst.w	r3, #8
 801097a:	d0cd      	beq.n	8010918 <ipcp_reqci+0x4c>
 801097c:	f1b8 0f06 	cmp.w	r8, #6
 8010980:	f000 81b1 	beq.w	8010ce6 <ipcp_reqci+0x41a>
		(cilen != CILEN_VJ && cilen != CILEN_COMPRESS)) {
 8010984:	f1b8 0f04 	cmp.w	r8, #4
 8010988:	d1c6      	bne.n	8010918 <ipcp_reqci+0x4c>
	    GETSHORT(cishort, p);
 801098a:	78b2      	ldrb	r2, [r6, #2]
 801098c:	78f3      	ldrb	r3, [r6, #3]
 801098e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	    if (!(cishort == IPCP_VJ_COMP ||
 8010992:	2b2d      	cmp	r3, #45	; 0x2d
 8010994:	f000 81da 	beq.w	8010d4c <ipcp_reqci+0x480>
 8010998:	2b37      	cmp	r3, #55	; 0x37
 801099a:	d1bd      	bne.n	8010918 <ipcp_reqci+0x4c>
	    ho->neg_vj = 1;
 801099c:	f241 234c 	movw	r3, #4684	; 0x124c
 80109a0:	eb0a 0103 	add.w	r1, sl, r3
 80109a4:	f81a 2003 	ldrb.w	r2, [sl, r3]
 80109a8:	f042 0208 	orr.w	r2, r2, #8
 80109ac:	f80a 2003 	strb.w	r2, [sl, r3]
	    ho->vj_protocol = cishort;
 80109b0:	2337      	movs	r3, #55	; 0x37
 80109b2:	828b      	strh	r3, [r1, #20]
	    if (cilen == CILEN_VJ) {
 80109b4:	e1d6      	b.n	8010d64 <ipcp_reqci+0x498>
	switch (citype) {		/* Check CI type */
 80109b6:	f009 03fd 	and.w	r3, r9, #253	; 0xfd
 80109ba:	2b81      	cmp	r3, #129	; 0x81
 80109bc:	f000 80eb 	beq.w	8010b96 <ipcp_reqci+0x2ca>
 80109c0:	f04f 0904 	mov.w	r9, #4
	if (orc == CONFREJ &&		/* Reject this CI */
 80109c4:	f1b9 0f04 	cmp.w	r9, #4
 80109c8:	d1ac      	bne.n	8010924 <ipcp_reqci+0x58>
 80109ca:	e7a5      	b.n	8010918 <ipcp_reqci+0x4c>
	    if (!ao->old_addrs || ho->neg_addr ||
 80109cc:	9b02      	ldr	r3, [sp, #8]
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	f013 0f02 	tst.w	r3, #2
 80109d4:	d0a0      	beq.n	8010918 <ipcp_reqci+0x4c>
 80109d6:	f241 234c 	movw	r3, #4684	; 0x124c
 80109da:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80109de:	f013 0f01 	tst.w	r3, #1
 80109e2:	d199      	bne.n	8010918 <ipcp_reqci+0x4c>
 80109e4:	f1b8 0f0a 	cmp.w	r8, #10
 80109e8:	d196      	bne.n	8010918 <ipcp_reqci+0x4c>
	    GETLONG(tl, p);		/* Parse source address (his) */
 80109ea:	78b2      	ldrb	r2, [r6, #2]
 80109ec:	78f3      	ldrb	r3, [r6, #3]
 80109ee:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80109f2:	7933      	ldrb	r3, [r6, #4]
 80109f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80109f8:	7970      	ldrb	r0, [r6, #5]
	    ciaddr1 = lwip_htonl(tl);
 80109fa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80109fe:	f7f6 ff14 	bl	800782a <lwip_htonl>
 8010a02:	4602      	mov	r2, r0
 8010a04:	9004      	str	r0, [sp, #16]
	    if (ciaddr1 != wo->hisaddr
 8010a06:	f50a 5390 	add.w	r3, sl, #4608	; 0x1200
 8010a0a:	68d8      	ldr	r0, [r3, #12]
 8010a0c:	4290      	cmp	r0, r2
 8010a0e:	f000 8163 	beq.w	8010cd8 <ipcp_reqci+0x40c>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 8010a12:	b12a      	cbz	r2, 8010a20 <ipcp_reqci+0x154>
 8010a14:	f241 2304 	movw	r3, #4612	; 0x1204
 8010a18:	f91a 3003 	ldrsb.w	r3, [sl, r3]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	db50      	blt.n	8010ac2 <ipcp_reqci+0x1f6>
		if (!reject_if_disagree) {
 8010a20:	9b01      	ldr	r3, [sp, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d038      	beq.n	8010a98 <ipcp_reqci+0x1cc>
		orc = CONFNAK;
 8010a26:	f04f 0903 	mov.w	r9, #3
	    GETLONG(tl, p);		/* Parse desination address (ours) */
 8010a2a:	79b2      	ldrb	r2, [r6, #6]
 8010a2c:	79f3      	ldrb	r3, [r6, #7]
 8010a2e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8010a32:	7a33      	ldrb	r3, [r6, #8]
 8010a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010a38:	7a70      	ldrb	r0, [r6, #9]
	    ciaddr2 = lwip_htonl(tl);
 8010a3a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8010a3e:	f7f6 fef4 	bl	800782a <lwip_htonl>
 8010a42:	4602      	mov	r2, r0
 8010a44:	9005      	str	r0, [sp, #20]
	    if (ciaddr2 != wo->ouraddr) {
 8010a46:	f50a 5390 	add.w	r3, sl, #4608	; 0x1200
 8010a4a:	6898      	ldr	r0, [r3, #8]
 8010a4c:	4290      	cmp	r0, r2
 8010a4e:	d00b      	beq.n	8010a68 <ipcp_reqci+0x19c>
		if (ciaddr2 == 0 || !wo->accept_local) {
 8010a50:	b132      	cbz	r2, 8010a60 <ipcp_reqci+0x194>
 8010a52:	f241 2304 	movw	r3, #4612	; 0x1204
 8010a56:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010a5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010a5e:	d13f      	bne.n	8010ae0 <ipcp_reqci+0x214>
		    if (!reject_if_disagree) {
 8010a60:	9b01      	ldr	r3, [sp, #4]
 8010a62:	b38b      	cbz	r3, 8010ac8 <ipcp_reqci+0x1fc>
		    orc = CONFNAK;
 8010a64:	f04f 0903 	mov.w	r9, #3
	    ho->old_addrs = 1;
 8010a68:	f241 234c 	movw	r3, #4684	; 0x124c
 8010a6c:	eb0a 0103 	add.w	r1, sl, r3
 8010a70:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010a74:	f042 0202 	orr.w	r2, r2, #2
 8010a78:	f80a 2003 	strb.w	r2, [sl, r3]
	    ho->hisaddr = ciaddr1;
 8010a7c:	9b04      	ldr	r3, [sp, #16]
 8010a7e:	608b      	str	r3, [r1, #8]
	    ho->ouraddr = ciaddr2;
 8010a80:	9b05      	ldr	r3, [sp, #20]
 8010a82:	604b      	str	r3, [r1, #4]
	if (orc == CONFACK &&		/* Good CI */
 8010a84:	f1b9 0f02 	cmp.w	r9, #2
 8010a88:	f040 80cd 	bne.w	8010c26 <ipcp_reqci+0x35a>
 8010a8c:	f1bb 0f02 	cmp.w	fp, #2
 8010a90:	f43f af48 	beq.w	8010924 <ipcp_reqci+0x58>
 8010a94:	4626      	mov	r6, r4
 8010a96:	e74e      	b.n	8010936 <ipcp_reqci+0x6a>
		    tl = lwip_ntohl(wo->hisaddr);
 8010a98:	f7f6 fec7 	bl	800782a <lwip_htonl>
		    PUTLONG(tl, p);
 8010a9c:	0e02      	lsrs	r2, r0, #24
 8010a9e:	70b2      	strb	r2, [r6, #2]
 8010aa0:	0c02      	lsrs	r2, r0, #16
 8010aa2:	70f2      	strb	r2, [r6, #3]
 8010aa4:	0a02      	lsrs	r2, r0, #8
 8010aa6:	7132      	strb	r2, [r6, #4]
 8010aa8:	7170      	strb	r0, [r6, #5]
		orc = CONFNAK;
 8010aaa:	f04f 0903 	mov.w	r9, #3
 8010aae:	e7bc      	b.n	8010a2a <ipcp_reqci+0x15e>
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 8010ab0:	f241 2304 	movw	r3, #4612	; 0x1204
 8010ab4:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010ab8:	f36f 0282 	bfc	r2, #2, #1
 8010abc:	f80a 2003 	strb.w	r2, [sl, r3]
		break;
 8010ac0:	e72a      	b.n	8010918 <ipcp_reqci+0x4c>
	orc = CONFACK;			/* Assume success */
 8010ac2:	f04f 0902 	mov.w	r9, #2
 8010ac6:	e7b0      	b.n	8010a2a <ipcp_reqci+0x15e>
			tl = lwip_ntohl(wo->ouraddr);
 8010ac8:	f7f6 feaf 	bl	800782a <lwip_htonl>
			PUTLONG(tl, p);
 8010acc:	0e02      	lsrs	r2, r0, #24
 8010ace:	71b2      	strb	r2, [r6, #6]
 8010ad0:	0c02      	lsrs	r2, r0, #16
 8010ad2:	71f2      	strb	r2, [r6, #7]
 8010ad4:	0a02      	lsrs	r2, r0, #8
 8010ad6:	7232      	strb	r2, [r6, #8]
 8010ad8:	7270      	strb	r0, [r6, #9]
		    orc = CONFNAK;
 8010ada:	f04f 0903 	mov.w	r9, #3
 8010ade:	e7c3      	b.n	8010a68 <ipcp_reqci+0x19c>
		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
 8010ae0:	f50a 5390 	add.w	r3, sl, #4608	; 0x1200
 8010ae4:	9a05      	ldr	r2, [sp, #20]
 8010ae6:	609a      	str	r2, [r3, #8]
 8010ae8:	e7be      	b.n	8010a68 <ipcp_reqci+0x19c>
	    if (!ao->neg_addr || ho->old_addrs ||
 8010aea:	9b02      	ldr	r3, [sp, #8]
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	f013 0f01 	tst.w	r3, #1
 8010af2:	f43f af11 	beq.w	8010918 <ipcp_reqci+0x4c>
 8010af6:	f241 234c 	movw	r3, #4684	; 0x124c
 8010afa:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010afe:	f013 0f02 	tst.w	r3, #2
 8010b02:	f47f af09 	bne.w	8010918 <ipcp_reqci+0x4c>
 8010b06:	f1b8 0f06 	cmp.w	r8, #6
 8010b0a:	f47f af05 	bne.w	8010918 <ipcp_reqci+0x4c>
	    GETLONG(tl, p);	/* Parse source address (his) */
 8010b0e:	78b2      	ldrb	r2, [r6, #2]
 8010b10:	78f3      	ldrb	r3, [r6, #3]
 8010b12:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8010b16:	7933      	ldrb	r3, [r6, #4]
 8010b18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010b1c:	7970      	ldrb	r0, [r6, #5]
	    ciaddr1 = lwip_htonl(tl);
 8010b1e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8010b22:	f7f6 fe82 	bl	800782a <lwip_htonl>
 8010b26:	4602      	mov	r2, r0
 8010b28:	9004      	str	r0, [sp, #16]
	    if (ciaddr1 != wo->hisaddr
 8010b2a:	f50a 5390 	add.w	r3, sl, #4608	; 0x1200
 8010b2e:	68d8      	ldr	r0, [r3, #12]
 8010b30:	4290      	cmp	r0, r2
 8010b32:	f000 8124 	beq.w	8010d7e <ipcp_reqci+0x4b2>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 8010b36:	b12a      	cbz	r2, 8010b44 <ipcp_reqci+0x278>
 8010b38:	f241 2304 	movw	r3, #4612	; 0x1204
 8010b3c:	f91a 3003 	ldrsb.w	r3, [sl, r3]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	db25      	blt.n	8010b90 <ipcp_reqci+0x2c4>
		if (!reject_if_disagree) {
 8010b44:	9b01      	ldr	r3, [sp, #4]
 8010b46:	b173      	cbz	r3, 8010b66 <ipcp_reqci+0x29a>
		orc = CONFNAK;
 8010b48:	f04f 0903 	mov.w	r9, #3
	    ho->neg_addr = 1;
 8010b4c:	f241 234c 	movw	r3, #4684	; 0x124c
 8010b50:	eb0a 0103 	add.w	r1, sl, r3
 8010b54:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010b58:	f042 0201 	orr.w	r2, r2, #1
 8010b5c:	f80a 2003 	strb.w	r2, [sl, r3]
	    ho->hisaddr = ciaddr1;
 8010b60:	9b04      	ldr	r3, [sp, #16]
 8010b62:	608b      	str	r3, [r1, #8]
	    break;
 8010b64:	e78e      	b.n	8010a84 <ipcp_reqci+0x1b8>
		    tl = lwip_ntohl(wo->hisaddr);
 8010b66:	f7f6 fe60 	bl	800782a <lwip_htonl>
		    PUTLONG(tl, p);
 8010b6a:	0e02      	lsrs	r2, r0, #24
 8010b6c:	70b2      	strb	r2, [r6, #2]
 8010b6e:	0c02      	lsrs	r2, r0, #16
 8010b70:	70f2      	strb	r2, [r6, #3]
 8010b72:	0a02      	lsrs	r2, r0, #8
 8010b74:	7132      	strb	r2, [r6, #4]
 8010b76:	7170      	strb	r0, [r6, #5]
		orc = CONFNAK;
 8010b78:	f04f 0903 	mov.w	r9, #3
 8010b7c:	e7e6      	b.n	8010b4c <ipcp_reqci+0x280>
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 8010b7e:	f241 2304 	movw	r3, #4612	; 0x1204
 8010b82:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010b86:	f36f 0282 	bfc	r2, #2, #1
 8010b8a:	f80a 2003 	strb.w	r2, [sl, r3]
		break;
 8010b8e:	e6c3      	b.n	8010918 <ipcp_reqci+0x4c>
	orc = CONFACK;			/* Assume success */
 8010b90:	f04f 0902 	mov.w	r9, #2
 8010b94:	e7da      	b.n	8010b4c <ipcp_reqci+0x280>
	    d = citype == CI_MS_DNS2;
 8010b96:	f1b9 0f83 	cmp.w	r9, #131	; 0x83
 8010b9a:	bf14      	ite	ne
 8010b9c:	f04f 0900 	movne.w	r9, #0
 8010ba0:	f04f 0901 	moveq.w	r9, #1
 8010ba4:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
	    if (ao->dnsaddr[d] == 0 ||
 8010ba8:	f509 5392 	add.w	r3, r9, #4672	; 0x1240
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	f43f aeb2 	beq.w	8010918 <ipcp_reqci+0x4c>
 8010bb4:	f1b8 0f06 	cmp.w	r8, #6
 8010bb8:	f47f aeae 	bne.w	8010918 <ipcp_reqci+0x4c>
	    GETLONG(tl, p);
 8010bbc:	78b2      	ldrb	r2, [r6, #2]
 8010bbe:	78f3      	ldrb	r3, [r6, #3]
 8010bc0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8010bc4:	7933      	ldrb	r3, [r6, #4]
 8010bc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010bca:	7970      	ldrb	r0, [r6, #5]
	    if (lwip_htonl(tl) != ao->dnsaddr[d]) {
 8010bcc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8010bd0:	f7f6 fe2b 	bl	800782a <lwip_htonl>
 8010bd4:	f509 5992 	add.w	r9, r9, #4672	; 0x1240
 8010bd8:	f8d9 3000 	ldr.w	r3, [r9]
 8010bdc:	4298      	cmp	r0, r3
 8010bde:	f43f af55 	beq.w	8010a8c <ipcp_reqci+0x1c0>
		tl = lwip_ntohl(ao->dnsaddr[d]);
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7f6 fe21 	bl	800782a <lwip_htonl>
		PUTLONG(tl, p);
 8010be8:	0e03      	lsrs	r3, r0, #24
 8010bea:	70b3      	strb	r3, [r6, #2]
 8010bec:	0c03      	lsrs	r3, r0, #16
 8010bee:	70f3      	strb	r3, [r6, #3]
 8010bf0:	0a03      	lsrs	r3, r0, #8
 8010bf2:	7133      	strb	r3, [r6, #4]
 8010bf4:	7170      	strb	r0, [r6, #5]
	if (orc == CONFACK &&		/* Good CI */
 8010bf6:	e01a      	b.n	8010c2e <ipcp_reqci+0x362>
		    if (!reject_if_disagree){
 8010bf8:	9901      	ldr	r1, [sp, #4]
 8010bfa:	b919      	cbnz	r1, 8010c04 <ipcp_reqci+0x338>
			PUTCHAR(ao->maxslotindex, p);
 8010bfc:	7133      	strb	r3, [r6, #4]
		    orc = CONFNAK;
 8010bfe:	f04f 0903 	mov.w	r9, #3
 8010c02:	e08b      	b.n	8010d1c <ipcp_reqci+0x450>
 8010c04:	f04f 0903 	mov.w	r9, #3
 8010c08:	e088      	b.n	8010d1c <ipcp_reqci+0x450>
		    orc = CONFNAK;
 8010c0a:	f04f 0903 	mov.w	r9, #3
		ho->maxslotindex = maxslotindex;
 8010c0e:	f241 234c 	movw	r3, #4684	; 0x124c
 8010c12:	eb0a 0003 	add.w	r0, sl, r3
 8010c16:	7582      	strb	r2, [r0, #22]
		ho->cflag = cflag;
 8010c18:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010c1c:	f361 1245 	bfi	r2, r1, #5, #1
 8010c20:	f80a 2003 	strb.w	r2, [sl, r3]
 8010c24:	e72e      	b.n	8010a84 <ipcp_reqci+0x1b8>
	if (orc == CONFNAK) {		/* Nak this CI? */
 8010c26:	f1b9 0f03 	cmp.w	r9, #3
 8010c2a:	f47f aecb 	bne.w	80109c4 <ipcp_reqci+0xf8>
	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
 8010c2e:	9b01      	ldr	r3, [sp, #4]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f47f ae71 	bne.w	8010918 <ipcp_reqci+0x4c>
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 8010c36:	f1bb 0f04 	cmp.w	fp, #4
 8010c3a:	d007      	beq.n	8010c4c <ipcp_reqci+0x380>
		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
 8010c3c:	f1bb 0f02 	cmp.w	fp, #2
 8010c40:	f47f ae70 	bne.w	8010924 <ipcp_reqci+0x58>
		    ucp = inp;		/* Backup */
 8010c44:	9f00      	ldr	r7, [sp, #0]
		    rc = CONFNAK;	/* Not anymore... */
 8010c46:	f04f 0b03 	mov.w	fp, #3
 8010c4a:	e66b      	b.n	8010924 <ipcp_reqci+0x58>
 8010c4c:	4626      	mov	r6, r4
 8010c4e:	e672      	b.n	8010936 <ipcp_reqci+0x6a>
    if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
 8010c50:	f1bb 0f04 	cmp.w	fp, #4
 8010c54:	d028      	beq.n	8010ca8 <ipcp_reqci+0x3dc>
 8010c56:	f241 234c 	movw	r3, #4684	; 0x124c
 8010c5a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010c5e:	f013 0f03 	tst.w	r3, #3
 8010c62:	d121      	bne.n	8010ca8 <ipcp_reqci+0x3dc>
 8010c64:	f241 2304 	movw	r3, #4612	; 0x1204
 8010c68:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010c6c:	f013 0f04 	tst.w	r3, #4
 8010c70:	d01a      	beq.n	8010ca8 <ipcp_reqci+0x3dc>
	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
 8010c72:	9b01      	ldr	r3, [sp, #4]
 8010c74:	b9c3      	cbnz	r3, 8010ca8 <ipcp_reqci+0x3dc>
 8010c76:	f89a 3000 	ldrb.w	r3, [sl]
 8010c7a:	f013 0f04 	tst.w	r3, #4
 8010c7e:	d113      	bne.n	8010ca8 <ipcp_reqci+0x3dc>
	if (rc == CONFACK) {
 8010c80:	f1bb 0f02 	cmp.w	fp, #2
 8010c84:	d01c      	beq.n	8010cc0 <ipcp_reqci+0x3f4>
	PUTCHAR(CI_ADDR, ucp);
 8010c86:	2303      	movs	r3, #3
 8010c88:	703b      	strb	r3, [r7, #0]
	PUTCHAR(CILEN_ADDR, ucp);
 8010c8a:	2306      	movs	r3, #6
 8010c8c:	707b      	strb	r3, [r7, #1]
	tl = lwip_ntohl(wo->hisaddr);
 8010c8e:	f50a 5390 	add.w	r3, sl, #4608	; 0x1200
 8010c92:	68d8      	ldr	r0, [r3, #12]
 8010c94:	f7f6 fdc9 	bl	800782a <lwip_htonl>
	PUTLONG(tl, ucp);
 8010c98:	0e03      	lsrs	r3, r0, #24
 8010c9a:	70bb      	strb	r3, [r7, #2]
 8010c9c:	0c03      	lsrs	r3, r0, #16
 8010c9e:	70fb      	strb	r3, [r7, #3]
 8010ca0:	0a03      	lsrs	r3, r0, #8
 8010ca2:	713b      	strb	r3, [r7, #4]
 8010ca4:	7178      	strb	r0, [r7, #5]
 8010ca6:	3706      	adds	r7, #6
    *len = ucp - inp;			/* Compute output length */
 8010ca8:	9b00      	ldr	r3, [sp, #0]
 8010caa:	1aff      	subs	r7, r7, r3
 8010cac:	9b03      	ldr	r3, [sp, #12]
 8010cae:	601f      	str	r7, [r3, #0]
}
 8010cb0:	4658      	mov	r0, fp
 8010cb2:	b007      	add	sp, #28
 8010cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    u_char *ucp = inp;		/* Pointer to current output char */
 8010cb8:	9f00      	ldr	r7, [sp, #0]
    int rc = CONFACK;		/* Final packet return code */
 8010cba:	f04f 0b02 	mov.w	fp, #2
 8010cbe:	e7ca      	b.n	8010c56 <ipcp_reqci+0x38a>
	    wo->req_addr = 0;		/* don't ask again */
 8010cc0:	f241 2304 	movw	r3, #4612	; 0x1204
 8010cc4:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010cc8:	f36f 0282 	bfc	r2, #2, #1
 8010ccc:	f80a 2003 	strb.w	r2, [sl, r3]
	    ucp = inp;			/* reset pointer */
 8010cd0:	9f00      	ldr	r7, [sp, #0]
	    rc = CONFNAK;
 8010cd2:	f04f 0b03 	mov.w	fp, #3
 8010cd6:	e7d6      	b.n	8010c86 <ipcp_reqci+0x3ba>
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 8010cd8:	9b04      	ldr	r3, [sp, #16]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	f43f aee8 	beq.w	8010ab0 <ipcp_reqci+0x1e4>
	orc = CONFACK;			/* Assume success */
 8010ce0:	f04f 0902 	mov.w	r9, #2
 8010ce4:	e6a1      	b.n	8010a2a <ipcp_reqci+0x15e>
	    GETSHORT(cishort, p);
 8010ce6:	78b2      	ldrb	r2, [r6, #2]
 8010ce8:	78f3      	ldrb	r3, [r6, #3]
	    if (!(cishort == IPCP_VJ_COMP ||
 8010cea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010cee:	2b2d      	cmp	r3, #45	; 0x2d
 8010cf0:	f47f ae12 	bne.w	8010918 <ipcp_reqci+0x4c>
	    ho->neg_vj = 1;
 8010cf4:	f241 234c 	movw	r3, #4684	; 0x124c
 8010cf8:	eb0a 0103 	add.w	r1, sl, r3
 8010cfc:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010d00:	f042 0208 	orr.w	r2, r2, #8
 8010d04:	f80a 2003 	strb.w	r2, [sl, r3]
	    ho->vj_protocol = cishort;
 8010d08:	232d      	movs	r3, #45	; 0x2d
 8010d0a:	828b      	strh	r3, [r1, #20]
		GETCHAR(maxslotindex, p);
 8010d0c:	7932      	ldrb	r2, [r6, #4]
		if (maxslotindex > ao->maxslotindex) { 
 8010d0e:	9b02      	ldr	r3, [sp, #8]
 8010d10:	7d9b      	ldrb	r3, [r3, #22]
 8010d12:	4293      	cmp	r3, r2
 8010d14:	f4ff af70 	bcc.w	8010bf8 <ipcp_reqci+0x32c>
	orc = CONFACK;			/* Assume success */
 8010d18:	f04f 0902 	mov.w	r9, #2
		GETCHAR(cflag, p);
 8010d1c:	7971      	ldrb	r1, [r6, #5]
		if (cflag && !ao->cflag) {
 8010d1e:	2900      	cmp	r1, #0
 8010d20:	f43f af75 	beq.w	8010c0e <ipcp_reqci+0x342>
 8010d24:	9b02      	ldr	r3, [sp, #8]
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	f013 0f20 	tst.w	r3, #32
 8010d2c:	f47f af6f 	bne.w	8010c0e <ipcp_reqci+0x342>
		    if (!reject_if_disagree){
 8010d30:	9b01      	ldr	r3, [sp, #4]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	f47f af69 	bne.w	8010c0a <ipcp_reqci+0x33e>
			PUTCHAR(wo->cflag, p);
 8010d38:	f241 2304 	movw	r3, #4612	; 0x1204
 8010d3c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010d40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010d44:	7173      	strb	r3, [r6, #5]
		    orc = CONFNAK;
 8010d46:	f04f 0903 	mov.w	r9, #3
 8010d4a:	e760      	b.n	8010c0e <ipcp_reqci+0x342>
	    ho->neg_vj = 1;
 8010d4c:	f241 234c 	movw	r3, #4684	; 0x124c
 8010d50:	eb0a 0103 	add.w	r1, sl, r3
 8010d54:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010d58:	f042 0208 	orr.w	r2, r2, #8
 8010d5c:	f80a 2003 	strb.w	r2, [sl, r3]
	    ho->vj_protocol = cishort;
 8010d60:	232d      	movs	r3, #45	; 0x2d
 8010d62:	828b      	strh	r3, [r1, #20]
		ho->old_vj = 1;
 8010d64:	f241 234c 	movw	r3, #4684	; 0x124c
 8010d68:	eb0a 0103 	add.w	r1, sl, r3
 8010d6c:	f81a 2003 	ldrb.w	r2, [sl, r3]
		ho->maxslotindex = MAX_STATES - 1;
 8010d70:	200f      	movs	r0, #15
 8010d72:	7588      	strb	r0, [r1, #22]
		ho->cflag = 1;
 8010d74:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8010d78:	f80a 2003 	strb.w	r2, [sl, r3]
 8010d7c:	e686      	b.n	8010a8c <ipcp_reqci+0x1c0>
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 8010d7e:	9b04      	ldr	r3, [sp, #16]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	f43f aefc 	beq.w	8010b7e <ipcp_reqci+0x2b2>
	orc = CONFACK;			/* Assume success */
 8010d86:	f04f 0902 	mov.w	r9, #2
 8010d8a:	e6df      	b.n	8010b4c <ipcp_reqci+0x280>

08010d8c <ipcp_up>:
static void ipcp_up(fsm *f) {
 8010d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d8e:	4605      	mov	r5, r0
    ppp_pcb *pcb = f->pcb;
 8010d90:	6804      	ldr	r4, [r0, #0]
    if (!ho->neg_addr && !ho->old_addrs)
 8010d92:	f241 234c 	movw	r3, #4684	; 0x124c
 8010d96:	5ce3      	ldrb	r3, [r4, r3]
 8010d98:	f013 0f03 	tst.w	r3, #3
 8010d9c:	d106      	bne.n	8010dac <ipcp_up+0x20>
	ho->hisaddr = wo->hisaddr;
 8010d9e:	f504 5392 	add.w	r3, r4, #4672	; 0x1240
 8010da2:	f504 5290 	add.w	r2, r4, #4608	; 0x1200
 8010da6:	3204      	adds	r2, #4
 8010da8:	6892      	ldr	r2, [r2, #8]
 8010daa:	615a      	str	r2, [r3, #20]
    if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
 8010dac:	f241 231c 	movw	r3, #4636	; 0x121c
 8010db0:	5ce3      	ldrb	r3, [r4, r3]
 8010db2:	f013 0f03 	tst.w	r3, #3
 8010db6:	d10c      	bne.n	8010dd2 <ipcp_up+0x46>
 8010db8:	f241 2304 	movw	r3, #4612	; 0x1204
 8010dbc:	5ce3      	ldrb	r3, [r4, r3]
 8010dbe:	f013 0f03 	tst.w	r3, #3
 8010dc2:	d006      	beq.n	8010dd2 <ipcp_up+0x46>
	&& wo->ouraddr != 0) {
 8010dc4:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010dc8:	3304      	adds	r3, #4
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f040 8085 	bne.w	8010edc <ipcp_up+0x150>
    if (go->ouraddr == 0) {
 8010dd2:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010dd6:	331c      	adds	r3, #28
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	f000 8089 	beq.w	8010ef2 <ipcp_up+0x166>
    if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
 8010de0:	f504 5392 	add.w	r3, r4, #4672	; 0x1240
 8010de4:	330c      	adds	r3, #12
 8010de6:	689b      	ldr	r3, [r3, #8]
 8010de8:	b923      	cbnz	r3, 8010df4 <ipcp_up+0x68>
 8010dea:	7823      	ldrb	r3, [r4, #0]
 8010dec:	f013 0f04 	tst.w	r3, #4
 8010df0:	f000 808b 	beq.w	8010f0a <ipcp_up+0x17e>
    if (!go->req_dns1)
 8010df4:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010df8:	331c      	adds	r3, #28
 8010dfa:	785b      	ldrb	r3, [r3, #1]
 8010dfc:	f013 0f01 	tst.w	r3, #1
 8010e00:	d103      	bne.n	8010e0a <ipcp_up+0x7e>
	    go->dnsaddr[0] = 0;
 8010e02:	f504 5290 	add.w	r2, r4, #4608	; 0x1200
 8010e06:	2100      	movs	r1, #0
 8010e08:	6291      	str	r1, [r2, #40]	; 0x28
    if (!go->req_dns2)
 8010e0a:	f013 0f02 	tst.w	r3, #2
 8010e0e:	d103      	bne.n	8010e18 <ipcp_up+0x8c>
	    go->dnsaddr[1] = 0;
 8010e10:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010e14:	2200      	movs	r2, #0
 8010e16:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pcb->settings.usepeerdns && (go->dnsaddr[0] || go->dnsaddr[1])) {
 8010e18:	7823      	ldrb	r3, [r4, #0]
 8010e1a:	f013 0f01 	tst.w	r3, #1
 8010e1e:	d00e      	beq.n	8010e3e <ipcp_up+0xb2>
 8010e20:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010e24:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010e26:	b921      	cbnz	r1, 8010e32 <ipcp_up+0xa6>
 8010e28:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010e2c:	331c      	adds	r3, #28
 8010e2e:	691b      	ldr	r3, [r3, #16]
 8010e30:	b12b      	cbz	r3, 8010e3e <ipcp_up+0xb2>
	sdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
 8010e32:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e38:	4620      	mov	r0, r4
 8010e3a:	f001 fdb5 	bl	80129a8 <sdns>
    if (ho->hisaddr != 0) {
 8010e3e:	f504 5392 	add.w	r3, r4, #4672	; 0x1240
 8010e42:	6958      	ldr	r0, [r3, #20]
 8010e44:	b148      	cbz	r0, 8010e5a <ipcp_up+0xce>
	u32_t addr = lwip_ntohl(ho->hisaddr);
 8010e46:	f7f6 fcf0 	bl	800782a <lwip_htonl>
	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
 8010e4a:	0e03      	lsrs	r3, r0, #24
 8010e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8010e4e:	d067      	beq.n	8010f20 <ipcp_up+0x194>
	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
 8010e50:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
 8010e54:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
 8010e58:	d062      	beq.n	8010f20 <ipcp_up+0x194>
    sifvjcomp(pcb, ho->neg_vj, ho->cflag, ho->maxslotindex);
 8010e5a:	f241 234c 	movw	r3, #4684	; 0x124c
 8010e5e:	18e7      	adds	r7, r4, r3
 8010e60:	5ce1      	ldrb	r1, [r4, r3]
 8010e62:	7dbb      	ldrb	r3, [r7, #22]
 8010e64:	f3c1 1240 	ubfx	r2, r1, #5, #1
 8010e68:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f001 fdc9 	bl	8012a04 <sifvjcomp>
	mask = get_mask(go->ouraddr);
 8010e72:	f504 5690 	add.w	r6, r4, #4608	; 0x1200
 8010e76:	6a30      	ldr	r0, [r6, #32]
 8010e78:	f001 fdf4 	bl	8012a64 <get_mask>
 8010e7c:	4603      	mov	r3, r0
	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
 8010e7e:	68ba      	ldr	r2, [r7, #8]
 8010e80:	6a31      	ldr	r1, [r6, #32]
 8010e82:	4620      	mov	r0, r4
 8010e84:	f001 fd72 	bl	801296c <sifaddr>
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	d056      	beq.n	8010f3a <ipcp_up+0x1ae>
	if (!sifup(pcb)) {
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f001 fdc7 	bl	8012a20 <sifup>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	d059      	beq.n	8010f4a <ipcp_up+0x1be>
	wo->ouraddr = go->ouraddr;
 8010e96:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010e9a:	6a19      	ldr	r1, [r3, #32]
 8010e9c:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010ea0:	6099      	str	r1, [r3, #8]
	ppp_notice("local  IP address %I", go->ouraddr);
 8010ea2:	4834      	ldr	r0, [pc, #208]	; (8010f74 <ipcp_up+0x1e8>)
 8010ea4:	f002 fcd0 	bl	8013848 <ppp_notice>
	if (ho->hisaddr != 0)
 8010ea8:	f504 5392 	add.w	r3, r4, #4672	; 0x1240
 8010eac:	6959      	ldr	r1, [r3, #20]
 8010eae:	2900      	cmp	r1, #0
 8010eb0:	d153      	bne.n	8010f5a <ipcp_up+0x1ce>
	if (go->dnsaddr[0])
 8010eb2:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010eb6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010eb8:	2900      	cmp	r1, #0
 8010eba:	d152      	bne.n	8010f62 <ipcp_up+0x1d6>
	if (go->dnsaddr[1])
 8010ebc:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8010ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010ec2:	2900      	cmp	r1, #0
 8010ec4:	d151      	bne.n	8010f6a <ipcp_up+0x1de>
    np_up(pcb, PPP_IP);
 8010ec6:	2121      	movs	r1, #33	; 0x21
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f7fe f8b9 	bl	800f040 <np_up>
    pcb->ipcp_is_up = 1;
 8010ece:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8010ed2:	f043 0304 	orr.w	r3, r3, #4
 8010ed6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
 8010eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ppp_error("Peer refused to agree to our IP address");
 8010edc:	4826      	ldr	r0, [pc, #152]	; (8010f78 <ipcp_up+0x1ec>)
 8010ede:	f002 fc95 	bl	801380c <ppp_error>
    fsm *f = &pcb->ipcp_fsm;
 8010ee2:	6828      	ldr	r0, [r5, #0]
    fsm_close(f, reason);
 8010ee4:	4925      	ldr	r1, [pc, #148]	; (8010f7c <ipcp_up+0x1f0>)
 8010ee6:	f500 508f 	add.w	r0, r0, #4576	; 0x11e0
 8010eea:	3008      	adds	r0, #8
 8010eec:	f7fe fabe 	bl	800f46c <fsm_close>
}
 8010ef0:	e7f3      	b.n	8010eda <ipcp_up+0x14e>
	ppp_error("Could not determine local IP address");
 8010ef2:	4c23      	ldr	r4, [pc, #140]	; (8010f80 <ipcp_up+0x1f4>)
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f002 fc89 	bl	801380c <ppp_error>
    fsm *f = &pcb->ipcp_fsm;
 8010efa:	6828      	ldr	r0, [r5, #0]
    fsm_close(f, reason);
 8010efc:	4621      	mov	r1, r4
 8010efe:	f500 508f 	add.w	r0, r0, #4576	; 0x11e0
 8010f02:	3008      	adds	r0, #8
 8010f04:	f7fe fab2 	bl	800f46c <fsm_close>
}
 8010f08:	e7e7      	b.n	8010eda <ipcp_up+0x14e>
	ho->hisaddr = lwip_htonl(0x0a404040);
 8010f0a:	481e      	ldr	r0, [pc, #120]	; (8010f84 <ipcp_up+0x1f8>)
 8010f0c:	f7f6 fc8d 	bl	800782a <lwip_htonl>
 8010f10:	4601      	mov	r1, r0
 8010f12:	f504 5392 	add.w	r3, r4, #4672	; 0x1240
 8010f16:	6158      	str	r0, [r3, #20]
	ppp_warn("Could not determine remote IP address: defaulting to %I",
 8010f18:	481b      	ldr	r0, [pc, #108]	; (8010f88 <ipcp_up+0x1fc>)
 8010f1a:	f002 fc86 	bl	801382a <ppp_warn>
 8010f1e:	e769      	b.n	8010df4 <ipcp_up+0x68>
		ppp_error("Peer is not authorized to use remote address %I", ho->hisaddr);
 8010f20:	f504 5392 	add.w	r3, r4, #4672	; 0x1240
 8010f24:	6959      	ldr	r1, [r3, #20]
 8010f26:	4819      	ldr	r0, [pc, #100]	; (8010f8c <ipcp_up+0x200>)
 8010f28:	f002 fc70 	bl	801380c <ppp_error>
    fsm_close(f, reason);
 8010f2c:	4918      	ldr	r1, [pc, #96]	; (8010f90 <ipcp_up+0x204>)
 8010f2e:	f504 508f 	add.w	r0, r4, #4576	; 0x11e0
 8010f32:	3008      	adds	r0, #8
 8010f34:	f7fe fa9a 	bl	800f46c <fsm_close>
}
 8010f38:	e7cf      	b.n	8010eda <ipcp_up+0x14e>
    fsm *f = &pcb->ipcp_fsm;
 8010f3a:	6828      	ldr	r0, [r5, #0]
    fsm_close(f, reason);
 8010f3c:	4915      	ldr	r1, [pc, #84]	; (8010f94 <ipcp_up+0x208>)
 8010f3e:	f500 508f 	add.w	r0, r0, #4576	; 0x11e0
 8010f42:	3008      	adds	r0, #8
 8010f44:	f7fe fa92 	bl	800f46c <fsm_close>
}
 8010f48:	e7c7      	b.n	8010eda <ipcp_up+0x14e>
    fsm *f = &pcb->ipcp_fsm;
 8010f4a:	6828      	ldr	r0, [r5, #0]
    fsm_close(f, reason);
 8010f4c:	4911      	ldr	r1, [pc, #68]	; (8010f94 <ipcp_up+0x208>)
 8010f4e:	f500 508f 	add.w	r0, r0, #4576	; 0x11e0
 8010f52:	3008      	adds	r0, #8
 8010f54:	f7fe fa8a 	bl	800f46c <fsm_close>
}
 8010f58:	e7bf      	b.n	8010eda <ipcp_up+0x14e>
	    ppp_notice("remote IP address %I", ho->hisaddr);
 8010f5a:	480f      	ldr	r0, [pc, #60]	; (8010f98 <ipcp_up+0x20c>)
 8010f5c:	f002 fc74 	bl	8013848 <ppp_notice>
 8010f60:	e7a7      	b.n	8010eb2 <ipcp_up+0x126>
	    ppp_notice("primary   DNS address %I", go->dnsaddr[0]);
 8010f62:	480e      	ldr	r0, [pc, #56]	; (8010f9c <ipcp_up+0x210>)
 8010f64:	f002 fc70 	bl	8013848 <ppp_notice>
 8010f68:	e7a8      	b.n	8010ebc <ipcp_up+0x130>
	    ppp_notice("secondary DNS address %I", go->dnsaddr[1]);
 8010f6a:	480d      	ldr	r0, [pc, #52]	; (8010fa0 <ipcp_up+0x214>)
 8010f6c:	f002 fc6c 	bl	8013848 <ppp_notice>
 8010f70:	e7a9      	b.n	8010ec6 <ipcp_up+0x13a>
 8010f72:	bf00      	nop
 8010f74:	080194bc 	.word	0x080194bc
 8010f78:	080193ac 	.word	0x080193ac
 8010f7c:	080193d4 	.word	0x080193d4
 8010f80:	080193ec 	.word	0x080193ec
 8010f84:	0a404040 	.word	0x0a404040
 8010f88:	08019414 	.word	0x08019414
 8010f8c:	0801944c 	.word	0x0801944c
 8010f90:	0801947c 	.word	0x0801947c
 8010f94:	0801949c 	.word	0x0801949c
 8010f98:	080194d4 	.word	0x080194d4
 8010f9c:	080194ec 	.word	0x080194ec
 8010fa0:	08019508 	.word	0x08019508

08010fa4 <lcp_cilen>:


/*
 * lcp_cilen - Return length of our CI.
 */
static int lcp_cilen(fsm *f) {
 8010fa4:	b430      	push	{r4, r5}
    ppp_pcb *pcb = f->pcb;
 8010fa6:	6801      	ldr	r1, [r0, #0]
    /*
     * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
     * accept more than one.  We prefer EAP first, then CHAP, then
     * PAP.
     */
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 8010fa8:	f891 3068 	ldrb.w	r3, [r1, #104]	; 0x68
 8010fac:	f013 0f04 	tst.w	r3, #4
 8010fb0:	d035      	beq.n	801101e <lcp_cilen+0x7a>
 8010fb2:	f8b1 206a 	ldrh.w	r2, [r1, #106]	; 0x6a
 8010fb6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8010fba:	4282      	cmp	r2, r0
 8010fbc:	bf14      	ite	ne
 8010fbe:	2204      	movne	r2, #4
 8010fc0:	2200      	moveq	r2, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 8010fc2:	f013 0f08 	tst.w	r3, #8
 8010fc6:	d02c      	beq.n	8011022 <lcp_cilen+0x7e>
 8010fc8:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
 8010fca:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010fce:	bf0c      	ite	eq
 8010fd0:	2000      	moveq	r0, #0
 8010fd2:	2006      	movne	r0, #6
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 8010fd4:	4402      	add	r2, r0
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
	    LENCILQR(go->neg_lqr) +
#endif /* LQR_SUPPORT */
	    LENCICBCP(go->neg_cbcp) +
 8010fd6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010fda:	bf14      	ite	ne
 8010fdc:	2003      	movne	r0, #3
 8010fde:	2000      	moveq	r0, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 8010fe0:	4402      	add	r2, r0
	    LENCILONG(go->neg_magicnumber) +
 8010fe2:	f013 0f10 	tst.w	r3, #16
 8010fe6:	bf14      	ite	ne
 8010fe8:	2506      	movne	r5, #6
 8010fea:	2500      	moveq	r5, #0
	    LENCIVOID(go->neg_pcompression) +
	    LENCIVOID(go->neg_accompression) +
#ifdef HAVE_MULTILINK
	    LENCISHORT(go->neg_mrru) +
#endif /* HAVE_MULTILINK */
	    LENCIVOID(go->neg_ssnhf) +
 8010fec:	f891 4069 	ldrb.w	r4, [r1, #105]	; 0x69
	    LENCIVOID(go->neg_pcompression) +
 8010ff0:	0918      	lsrs	r0, r3, #4
 8010ff2:	f000 0002 	and.w	r0, r0, #2
	    LENCICBCP(go->neg_cbcp) +
 8010ff6:	442a      	add	r2, r5
	    LENCILONG(go->neg_magicnumber) +
 8010ff8:	4410      	add	r0, r2
	    LENCIVOID(go->neg_accompression) +
 8010ffa:	095b      	lsrs	r3, r3, #5
 8010ffc:	f003 0302 	and.w	r3, r3, #2
	    LENCIVOID(go->neg_pcompression) +
 8011000:	4403      	add	r3, r0
	    LENCIVOID(go->neg_ssnhf) +
 8011002:	0060      	lsls	r0, r4, #1
 8011004:	f000 0002 	and.w	r0, r0, #2
	    LENCIVOID(go->neg_accompression) +
 8011008:	4403      	add	r3, r0
	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
 801100a:	f014 0f02 	tst.w	r4, #2
 801100e:	bf1a      	itte	ne
 8011010:	f891 0076 	ldrbne.w	r0, [r1, #118]	; 0x76
 8011014:	3003      	addne	r0, #3
 8011016:	2000      	moveq	r0, #0
}
 8011018:	4418      	add	r0, r3
 801101a:	bc30      	pop	{r4, r5}
 801101c:	4770      	bx	lr
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 801101e:	2200      	movs	r2, #0
 8011020:	e7cf      	b.n	8010fc2 <lcp_cilen+0x1e>
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 8011022:	2000      	movs	r0, #0
 8011024:	e7d6      	b.n	8010fd4 <lcp_cilen+0x30>

08011026 <lcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int lcp_ackci(fsm *f, u_char *p, int len) {
 8011026:	b470      	push	{r4, r5, r6}
    ppp_pcb *pcb = f->pcb;
 8011028:	6800      	ldr	r0, [r0, #0]
	    if (cichar != val[i]) \
		goto bad; \
	} \
    }

    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 801102a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 801102e:	f013 0f04 	tst.w	r3, #4
 8011032:	d018      	beq.n	8011066 <lcp_ackci+0x40>
 8011034:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 8011038:	f240 55dc 	movw	r5, #1500	; 0x5dc
 801103c:	42ac      	cmp	r4, r5
 801103e:	d012      	beq.n	8011066 <lcp_ackci+0x40>
 8011040:	3a04      	subs	r2, #4
 8011042:	f100 80a6 	bmi.w	8011192 <lcp_ackci+0x16c>
 8011046:	784d      	ldrb	r5, [r1, #1]
 8011048:	2d04      	cmp	r5, #4
 801104a:	f040 80a4 	bne.w	8011196 <lcp_ackci+0x170>
 801104e:	780d      	ldrb	r5, [r1, #0]
 8011050:	2d01      	cmp	r5, #1
 8011052:	f040 80a3 	bne.w	801119c <lcp_ackci+0x176>
 8011056:	788e      	ldrb	r6, [r1, #2]
 8011058:	78cd      	ldrb	r5, [r1, #3]
 801105a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 801105e:	42ac      	cmp	r4, r5
 8011060:	f040 809e 	bne.w	80111a0 <lcp_ackci+0x17a>
 8011064:	3104      	adds	r1, #4
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 8011066:	f013 0f08 	tst.w	r3, #8
 801106a:	d01c      	beq.n	80110a6 <lcp_ackci+0x80>
 801106c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 801106e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011072:	d018      	beq.n	80110a6 <lcp_ackci+0x80>
 8011074:	3a06      	subs	r2, #6
 8011076:	f100 8095 	bmi.w	80111a4 <lcp_ackci+0x17e>
 801107a:	784d      	ldrb	r5, [r1, #1]
 801107c:	2d06      	cmp	r5, #6
 801107e:	f040 8093 	bne.w	80111a8 <lcp_ackci+0x182>
 8011082:	780d      	ldrb	r5, [r1, #0]
 8011084:	2d02      	cmp	r5, #2
 8011086:	f040 8091 	bne.w	80111ac <lcp_ackci+0x186>
 801108a:	788d      	ldrb	r5, [r1, #2]
 801108c:	78ce      	ldrb	r6, [r1, #3]
 801108e:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 8011092:	790d      	ldrb	r5, [r1, #4]
 8011094:	ea45 2606 	orr.w	r6, r5, r6, lsl #8
 8011098:	794d      	ldrb	r5, [r1, #5]
 801109a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 801109e:	42ac      	cmp	r4, r5
 80110a0:	f040 8086 	bne.w	80111b0 <lcp_ackci+0x18a>
 80110a4:	3106      	adds	r1, #6
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 80110a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80110aa:	d165      	bne.n	8011178 <lcp_ackci+0x152>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 80110ac:	f013 0f10 	tst.w	r3, #16
 80110b0:	d018      	beq.n	80110e4 <lcp_ackci+0xbe>
 80110b2:	3a06      	subs	r2, #6
 80110b4:	f100 8086 	bmi.w	80111c4 <lcp_ackci+0x19e>
 80110b8:	784c      	ldrb	r4, [r1, #1]
 80110ba:	2c06      	cmp	r4, #6
 80110bc:	f040 8084 	bne.w	80111c8 <lcp_ackci+0x1a2>
 80110c0:	780c      	ldrb	r4, [r1, #0]
 80110c2:	2c05      	cmp	r4, #5
 80110c4:	f040 8082 	bne.w	80111cc <lcp_ackci+0x1a6>
 80110c8:	788c      	ldrb	r4, [r1, #2]
 80110ca:	78cd      	ldrb	r5, [r1, #3]
 80110cc:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
 80110d0:	790c      	ldrb	r4, [r1, #4]
 80110d2:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 80110d6:	794c      	ldrb	r4, [r1, #5]
 80110d8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80110dc:	6f05      	ldr	r5, [r0, #112]	; 0x70
 80110de:	42a5      	cmp	r5, r4
 80110e0:	d176      	bne.n	80111d0 <lcp_ackci+0x1aa>
 80110e2:	3106      	adds	r1, #6
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 80110e4:	f013 0f20 	tst.w	r3, #32
 80110e8:	d008      	beq.n	80110fc <lcp_ackci+0xd6>
 80110ea:	3a02      	subs	r2, #2
 80110ec:	d472      	bmi.n	80111d4 <lcp_ackci+0x1ae>
 80110ee:	780d      	ldrb	r5, [r1, #0]
 80110f0:	784c      	ldrb	r4, [r1, #1]
 80110f2:	2c02      	cmp	r4, #2
 80110f4:	d170      	bne.n	80111d8 <lcp_ackci+0x1b2>
 80110f6:	2d07      	cmp	r5, #7
 80110f8:	d170      	bne.n	80111dc <lcp_ackci+0x1b6>
 80110fa:	3102      	adds	r1, #2
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 80110fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011100:	d008      	beq.n	8011114 <lcp_ackci+0xee>
 8011102:	3a02      	subs	r2, #2
 8011104:	d46c      	bmi.n	80111e0 <lcp_ackci+0x1ba>
 8011106:	780c      	ldrb	r4, [r1, #0]
 8011108:	784b      	ldrb	r3, [r1, #1]
 801110a:	2b02      	cmp	r3, #2
 801110c:	d16a      	bne.n	80111e4 <lcp_ackci+0x1be>
 801110e:	2c08      	cmp	r4, #8
 8011110:	d16a      	bne.n	80111e8 <lcp_ackci+0x1c2>
 8011112:	3102      	adds	r1, #2
#ifdef HAVE_MULTILINK
    ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 8011114:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8011118:	f013 0f01 	tst.w	r3, #1
 801111c:	d008      	beq.n	8011130 <lcp_ackci+0x10a>
 801111e:	3a02      	subs	r2, #2
 8011120:	d464      	bmi.n	80111ec <lcp_ackci+0x1c6>
 8011122:	780d      	ldrb	r5, [r1, #0]
 8011124:	784c      	ldrb	r4, [r1, #1]
 8011126:	2c02      	cmp	r4, #2
 8011128:	d162      	bne.n	80111f0 <lcp_ackci+0x1ca>
 801112a:	2d12      	cmp	r5, #18
 801112c:	d162      	bne.n	80111f4 <lcp_ackci+0x1ce>
 801112e:	3102      	adds	r1, #2
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 8011130:	f013 0f02 	tst.w	r3, #2
 8011134:	d01c      	beq.n	8011170 <lcp_ackci+0x14a>
 8011136:	f890 5076 	ldrb.w	r5, [r0, #118]	; 0x76
 801113a:	1ceb      	adds	r3, r5, #3
 801113c:	1ad2      	subs	r2, r2, r3
 801113e:	d45b      	bmi.n	80111f8 <lcp_ackci+0x1d2>
 8011140:	784c      	ldrb	r4, [r1, #1]
 8011142:	42a3      	cmp	r3, r4
 8011144:	d15a      	bne.n	80111fc <lcp_ackci+0x1d6>
 8011146:	780b      	ldrb	r3, [r1, #0]
 8011148:	2b13      	cmp	r3, #19
 801114a:	d159      	bne.n	8011200 <lcp_ackci+0x1da>
 801114c:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
 8011150:	788b      	ldrb	r3, [r1, #2]
 8011152:	429c      	cmp	r4, r3
 8011154:	d156      	bne.n	8011204 <lcp_ackci+0x1de>
 8011156:	b15d      	cbz	r5, 8011170 <lcp_ackci+0x14a>
 8011158:	1ccc      	adds	r4, r1, #3
 801115a:	3076      	adds	r0, #118	; 0x76
 801115c:	1ceb      	adds	r3, r5, #3
 801115e:	440b      	add	r3, r1
 8011160:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011168:	428d      	cmp	r5, r1
 801116a:	d14d      	bne.n	8011208 <lcp_ackci+0x1e2>
 801116c:	429c      	cmp	r4, r3
 801116e:	d1f7      	bne.n	8011160 <lcp_ackci+0x13a>
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 8011170:	fab2 f082 	clz	r0, r2
 8011174:	0940      	lsrs	r0, r0, #5
 8011176:	e00f      	b.n	8011198 <lcp_ackci+0x172>
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 8011178:	3a03      	subs	r2, #3
 801117a:	d41b      	bmi.n	80111b4 <lcp_ackci+0x18e>
 801117c:	784c      	ldrb	r4, [r1, #1]
 801117e:	2c03      	cmp	r4, #3
 8011180:	d11a      	bne.n	80111b8 <lcp_ackci+0x192>
 8011182:	780c      	ldrb	r4, [r1, #0]
 8011184:	2c0d      	cmp	r4, #13
 8011186:	d119      	bne.n	80111bc <lcp_ackci+0x196>
 8011188:	788c      	ldrb	r4, [r1, #2]
 801118a:	2c06      	cmp	r4, #6
 801118c:	d118      	bne.n	80111c0 <lcp_ackci+0x19a>
 801118e:	3103      	adds	r1, #3
 8011190:	e78c      	b.n	80110ac <lcp_ackci+0x86>
	goto bad;
    return (1);
bad:
    LCPDEBUG(("lcp_acki: received bad Ack!"));
    return (0);
 8011192:	2000      	movs	r0, #0
 8011194:	e000      	b.n	8011198 <lcp_ackci+0x172>
 8011196:	2000      	movs	r0, #0
}
 8011198:	bc70      	pop	{r4, r5, r6}
 801119a:	4770      	bx	lr
    return (0);
 801119c:	2000      	movs	r0, #0
 801119e:	e7fb      	b.n	8011198 <lcp_ackci+0x172>
 80111a0:	2000      	movs	r0, #0
 80111a2:	e7f9      	b.n	8011198 <lcp_ackci+0x172>
 80111a4:	2000      	movs	r0, #0
 80111a6:	e7f7      	b.n	8011198 <lcp_ackci+0x172>
 80111a8:	2000      	movs	r0, #0
 80111aa:	e7f5      	b.n	8011198 <lcp_ackci+0x172>
 80111ac:	2000      	movs	r0, #0
 80111ae:	e7f3      	b.n	8011198 <lcp_ackci+0x172>
 80111b0:	2000      	movs	r0, #0
 80111b2:	e7f1      	b.n	8011198 <lcp_ackci+0x172>
 80111b4:	2000      	movs	r0, #0
 80111b6:	e7ef      	b.n	8011198 <lcp_ackci+0x172>
 80111b8:	2000      	movs	r0, #0
 80111ba:	e7ed      	b.n	8011198 <lcp_ackci+0x172>
 80111bc:	2000      	movs	r0, #0
 80111be:	e7eb      	b.n	8011198 <lcp_ackci+0x172>
 80111c0:	2000      	movs	r0, #0
 80111c2:	e7e9      	b.n	8011198 <lcp_ackci+0x172>
 80111c4:	2000      	movs	r0, #0
 80111c6:	e7e7      	b.n	8011198 <lcp_ackci+0x172>
 80111c8:	2000      	movs	r0, #0
 80111ca:	e7e5      	b.n	8011198 <lcp_ackci+0x172>
 80111cc:	2000      	movs	r0, #0
 80111ce:	e7e3      	b.n	8011198 <lcp_ackci+0x172>
 80111d0:	2000      	movs	r0, #0
 80111d2:	e7e1      	b.n	8011198 <lcp_ackci+0x172>
 80111d4:	2000      	movs	r0, #0
 80111d6:	e7df      	b.n	8011198 <lcp_ackci+0x172>
 80111d8:	2000      	movs	r0, #0
 80111da:	e7dd      	b.n	8011198 <lcp_ackci+0x172>
 80111dc:	2000      	movs	r0, #0
 80111de:	e7db      	b.n	8011198 <lcp_ackci+0x172>
 80111e0:	2000      	movs	r0, #0
 80111e2:	e7d9      	b.n	8011198 <lcp_ackci+0x172>
 80111e4:	2000      	movs	r0, #0
 80111e6:	e7d7      	b.n	8011198 <lcp_ackci+0x172>
 80111e8:	2000      	movs	r0, #0
 80111ea:	e7d5      	b.n	8011198 <lcp_ackci+0x172>
 80111ec:	2000      	movs	r0, #0
 80111ee:	e7d3      	b.n	8011198 <lcp_ackci+0x172>
 80111f0:	2000      	movs	r0, #0
 80111f2:	e7d1      	b.n	8011198 <lcp_ackci+0x172>
 80111f4:	2000      	movs	r0, #0
 80111f6:	e7cf      	b.n	8011198 <lcp_ackci+0x172>
 80111f8:	2000      	movs	r0, #0
 80111fa:	e7cd      	b.n	8011198 <lcp_ackci+0x172>
 80111fc:	2000      	movs	r0, #0
 80111fe:	e7cb      	b.n	8011198 <lcp_ackci+0x172>
 8011200:	2000      	movs	r0, #0
 8011202:	e7c9      	b.n	8011198 <lcp_ackci+0x172>
 8011204:	2000      	movs	r0, #0
 8011206:	e7c7      	b.n	8011198 <lcp_ackci+0x172>
 8011208:	2000      	movs	r0, #0
 801120a:	e7c5      	b.n	8011198 <lcp_ackci+0x172>

0801120c <lcp_rejci>:
 *
 * Returns:
 *	0 - Reject was bad.
 *	1 - Reject was good.
 */
static int lcp_rejci(fsm *f, u_char *p, int len) {
 801120c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011210:	b08d      	sub	sp, #52	; 0x34
 8011212:	4607      	mov	r7, r0
 8011214:	460e      	mov	r6, r1
 8011216:	4615      	mov	r5, r2
    ppp_pcb *pcb = f->pcb;
 8011218:	6804      	ldr	r4, [r0, #0]
    u_char cichar;
    u_short cishort;
    u32_t cilong;
    lcp_options try_;		/* options to request next time */

    try_ = *go;
 801121a:	f10d 0c0c 	add.w	ip, sp, #12
 801121e:	f104 0e68 	add.w	lr, r4, #104	; 0x68
 8011222:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011226:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801122a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801122e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011232:	f8de 3000 	ldr.w	r3, [lr]
 8011236:	f8cc 3000 	str.w	r3, [ip]
 801123a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 801123e:	f3c3 0980 	ubfx	r9, r3, #2, #1
 8011242:	f3c3 08c0 	ubfx	r8, r3, #3, #1
 8011246:	f3c3 1b00 	ubfx	fp, r3, #4, #1
 801124a:	f3c3 1e40 	ubfx	lr, r3, #5, #1
 801124e:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8011252:	ea4f 1ad3 	mov.w	sl, r3, lsr #7
 8011256:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 801125a:	f002 0c01 	and.w	ip, r2, #1
 801125e:	f3c2 0240 	ubfx	r2, r2, #1, #1
		goto bad; \
	} \
	try_.neg = 0; \
    }

    REJCISHORT(CI_MRU, neg_mru, go->mru);
 8011262:	f013 0f04 	tst.w	r3, #4
 8011266:	d004      	beq.n	8011272 <lcp_rejci+0x66>
 8011268:	2d03      	cmp	r5, #3
 801126a:	dd02      	ble.n	8011272 <lcp_rejci+0x66>
 801126c:	7870      	ldrb	r0, [r6, #1]
 801126e:	2804      	cmp	r0, #4
 8011270:	d018      	beq.n	80112a4 <lcp_rejci+0x98>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 8011272:	f013 0f08 	tst.w	r3, #8
 8011276:	d043      	beq.n	8011300 <lcp_rejci+0xf4>
 8011278:	2d05      	cmp	r5, #5
 801127a:	dd41      	ble.n	8011300 <lcp_rejci+0xf4>
 801127c:	7870      	ldrb	r0, [r6, #1]
 801127e:	2806      	cmp	r0, #6
 8011280:	d026      	beq.n	80112d0 <lcp_rejci+0xc4>
    }
#endif /* EAP_SUPPORT */
#if LQR_SUPPORT
    REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 8011282:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011286:	d169      	bne.n	801135c <lcp_rejci+0x150>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 8011288:	f013 0f10 	tst.w	r3, #16
 801128c:	d040      	beq.n	8011310 <lcp_rejci+0x104>
 801128e:	7870      	ldrb	r0, [r6, #1]
 8011290:	2806      	cmp	r0, #6
 8011292:	d071      	beq.n	8011378 <lcp_rejci+0x16c>
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8011294:	f013 0f20 	tst.w	r3, #32
 8011298:	f040 8086 	bne.w	80113a8 <lcp_rejci+0x19c>
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 801129c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80112a0:	d03f      	beq.n	8011322 <lcp_rejci+0x116>
 80112a2:	e0a7      	b.n	80113f4 <lcp_rejci+0x1e8>
    REJCISHORT(CI_MRU, neg_mru, go->mru);
 80112a4:	7830      	ldrb	r0, [r6, #0]
 80112a6:	2801      	cmp	r0, #1
 80112a8:	d1e3      	bne.n	8011272 <lcp_rejci+0x66>
 80112aa:	f896 9002 	ldrb.w	r9, [r6, #2]
 80112ae:	78f0      	ldrb	r0, [r6, #3]
 80112b0:	9000      	str	r0, [sp, #0]
 80112b2:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
 80112b6:	9001      	str	r0, [sp, #4]
 80112b8:	9800      	ldr	r0, [sp, #0]
 80112ba:	ea40 2909 	orr.w	r9, r0, r9, lsl #8
 80112be:	9801      	ldr	r0, [sp, #4]
 80112c0:	4548      	cmp	r0, r9
 80112c2:	f040 80c4 	bne.w	801144e <lcp_rejci+0x242>
 80112c6:	3d04      	subs	r5, #4
 80112c8:	3604      	adds	r6, #4
 80112ca:	f04f 0900 	mov.w	r9, #0
 80112ce:	e7d0      	b.n	8011272 <lcp_rejci+0x66>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 80112d0:	7830      	ldrb	r0, [r6, #0]
 80112d2:	2802      	cmp	r0, #2
 80112d4:	d1d5      	bne.n	8011282 <lcp_rejci+0x76>
 80112d6:	f896 8002 	ldrb.w	r8, [r6, #2]
 80112da:	78f0      	ldrb	r0, [r6, #3]
 80112dc:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 80112e0:	f896 8004 	ldrb.w	r8, [r6, #4]
 80112e4:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
 80112e8:	f896 8005 	ldrb.w	r8, [r6, #5]
 80112ec:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
 80112f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80112f2:	4540      	cmp	r0, r8
 80112f4:	f040 80ad 	bne.w	8011452 <lcp_rejci+0x246>
 80112f8:	3d06      	subs	r5, #6
 80112fa:	3606      	adds	r6, #6
 80112fc:	f04f 0800 	mov.w	r8, #0
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 8011300:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011304:	d128      	bne.n	8011358 <lcp_rejci+0x14c>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 8011306:	f013 0f10 	tst.w	r3, #16
 801130a:	d001      	beq.n	8011310 <lcp_rejci+0x104>
 801130c:	2d05      	cmp	r5, #5
 801130e:	dcbe      	bgt.n	801128e <lcp_rejci+0x82>
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8011310:	f013 0f20 	tst.w	r3, #32
 8011314:	d069      	beq.n	80113ea <lcp_rejci+0x1de>
 8011316:	2d01      	cmp	r5, #1
 8011318:	dc46      	bgt.n	80113a8 <lcp_rejci+0x19c>
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 801131a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801131e:	f040 80a8 	bne.w	8011472 <lcp_rejci+0x266>
#ifdef HAVE_MULTILINK
    REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 8011322:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8011326:	f013 0f01 	tst.w	r3, #1
 801132a:	f000 80a4 	beq.w	8011476 <lcp_rejci+0x26a>
 801132e:	2d01      	cmp	r5, #1
 8011330:	f340 80a1 	ble.w	8011476 <lcp_rejci+0x26a>
 8011334:	7870      	ldrb	r0, [r6, #1]
 8011336:	2802      	cmp	r0, #2
 8011338:	d04b      	beq.n	80113d2 <lcp_rejci+0x1c6>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 801133a:	f013 0f02 	tst.w	r3, #2
 801133e:	f000 8096 	beq.w	801146e <lcp_rejci+0x262>
 8011342:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8011346:	1c98      	adds	r0, r3, #2
 8011348:	42a8      	cmp	r0, r5
 801134a:	f280 8098 	bge.w	801147e <lcp_rejci+0x272>
 801134e:	7832      	ldrb	r2, [r6, #0]
 8011350:	2a13      	cmp	r2, #19
 8011352:	d05c      	beq.n	801140e <lcp_rejci+0x202>
	*go = try_;
    return 1;

bad:
    LCPDEBUG(("lcp_rejci: received bad Reject!"));
    return 0;
 8011354:	2000      	movs	r0, #0
 8011356:	e0b8      	b.n	80114ca <lcp_rejci+0x2be>
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 8011358:	2d02      	cmp	r5, #2
 801135a:	ddd4      	ble.n	8011306 <lcp_rejci+0xfa>
 801135c:	7870      	ldrb	r0, [r6, #1]
 801135e:	2803      	cmp	r0, #3
 8011360:	d1d1      	bne.n	8011306 <lcp_rejci+0xfa>
 8011362:	7830      	ldrb	r0, [r6, #0]
 8011364:	280d      	cmp	r0, #13
 8011366:	d1ce      	bne.n	8011306 <lcp_rejci+0xfa>
 8011368:	78b0      	ldrb	r0, [r6, #2]
 801136a:	2806      	cmp	r0, #6
 801136c:	d173      	bne.n	8011456 <lcp_rejci+0x24a>
 801136e:	3d03      	subs	r5, #3
 8011370:	3603      	adds	r6, #3
 8011372:	f04f 0a00 	mov.w	sl, #0
 8011376:	e7c6      	b.n	8011306 <lcp_rejci+0xfa>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 8011378:	7830      	ldrb	r0, [r6, #0]
 801137a:	2805      	cmp	r0, #5
 801137c:	d18a      	bne.n	8011294 <lcp_rejci+0x88>
 801137e:	f896 b002 	ldrb.w	fp, [r6, #2]
 8011382:	78f0      	ldrb	r0, [r6, #3]
 8011384:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
 8011388:	f896 b004 	ldrb.w	fp, [r6, #4]
 801138c:	ea4b 2000 	orr.w	r0, fp, r0, lsl #8
 8011390:	f896 b005 	ldrb.w	fp, [r6, #5]
 8011394:	ea4b 2b00 	orr.w	fp, fp, r0, lsl #8
 8011398:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801139a:	4558      	cmp	r0, fp
 801139c:	d15d      	bne.n	801145a <lcp_rejci+0x24e>
 801139e:	3d06      	subs	r5, #6
 80113a0:	3606      	adds	r6, #6
 80113a2:	f04f 0b00 	mov.w	fp, #0
 80113a6:	e7b3      	b.n	8011310 <lcp_rejci+0x104>
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 80113a8:	7870      	ldrb	r0, [r6, #1]
 80113aa:	2802      	cmp	r0, #2
 80113ac:	d003      	beq.n	80113b6 <lcp_rejci+0x1aa>
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 80113ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80113b2:	d0b6      	beq.n	8011322 <lcp_rejci+0x116>
 80113b4:	e01e      	b.n	80113f4 <lcp_rejci+0x1e8>
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 80113b6:	7830      	ldrb	r0, [r6, #0]
 80113b8:	2807      	cmp	r0, #7
 80113ba:	d012      	beq.n	80113e2 <lcp_rejci+0x1d6>
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 80113bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80113c0:	d0af      	beq.n	8011322 <lcp_rejci+0x116>
 80113c2:	7833      	ldrb	r3, [r6, #0]
 80113c4:	2b08      	cmp	r3, #8
 80113c6:	d01e      	beq.n	8011406 <lcp_rejci+0x1fa>
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 80113c8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80113cc:	f013 0f01 	tst.w	r3, #1
 80113d0:	d051      	beq.n	8011476 <lcp_rejci+0x26a>
 80113d2:	7830      	ldrb	r0, [r6, #0]
 80113d4:	2812      	cmp	r0, #18
 80113d6:	d1b0      	bne.n	801133a <lcp_rejci+0x12e>
 80113d8:	3d02      	subs	r5, #2
 80113da:	3602      	adds	r6, #2
 80113dc:	f04f 0c00 	mov.w	ip, #0
 80113e0:	e049      	b.n	8011476 <lcp_rejci+0x26a>
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 80113e2:	3d02      	subs	r5, #2
 80113e4:	3602      	adds	r6, #2
 80113e6:	f04f 0e00 	mov.w	lr, #0
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 80113ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80113ee:	d098      	beq.n	8011322 <lcp_rejci+0x116>
 80113f0:	2d01      	cmp	r5, #1
 80113f2:	dd3e      	ble.n	8011472 <lcp_rejci+0x266>
 80113f4:	7873      	ldrb	r3, [r6, #1]
 80113f6:	2b02      	cmp	r3, #2
 80113f8:	d0e3      	beq.n	80113c2 <lcp_rejci+0x1b6>
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 80113fa:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80113fe:	f013 0f01 	tst.w	r3, #1
 8011402:	d038      	beq.n	8011476 <lcp_rejci+0x26a>
 8011404:	e799      	b.n	801133a <lcp_rejci+0x12e>
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8011406:	3d02      	subs	r5, #2
 8011408:	3602      	adds	r6, #2
 801140a:	2100      	movs	r1, #0
 801140c:	e789      	b.n	8011322 <lcp_rejci+0x116>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 801140e:	1cda      	adds	r2, r3, #3
 8011410:	7870      	ldrb	r0, [r6, #1]
 8011412:	4290      	cmp	r0, r2
 8011414:	d001      	beq.n	801141a <lcp_rejci+0x20e>
    return 0;
 8011416:	2000      	movs	r0, #0
 8011418:	e057      	b.n	80114ca <lcp_rejci+0x2be>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 801141a:	1aad      	subs	r5, r5, r2
 801141c:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
 8011420:	78b2      	ldrb	r2, [r6, #2]
 8011422:	4290      	cmp	r0, r2
 8011424:	d11b      	bne.n	801145e <lcp_rejci+0x252>
 8011426:	b183      	cbz	r3, 801144a <lcp_rejci+0x23e>
 8011428:	1cf2      	adds	r2, r6, #3
 801142a:	f104 0076 	add.w	r0, r4, #118	; 0x76
 801142e:	3303      	adds	r3, #3
 8011430:	441e      	add	r6, r3
 8011432:	9100      	str	r1, [sp, #0]
 8011434:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8011438:	f812 3b01 	ldrb.w	r3, [r2], #1
 801143c:	4299      	cmp	r1, r3
 801143e:	d110      	bne.n	8011462 <lcp_rejci+0x256>
 8011440:	4296      	cmp	r6, r2
 8011442:	d1f7      	bne.n	8011434 <lcp_rejci+0x228>
 8011444:	9900      	ldr	r1, [sp, #0]
 8011446:	2200      	movs	r2, #0
 8011448:	e019      	b.n	801147e <lcp_rejci+0x272>
 801144a:	2200      	movs	r2, #0
 801144c:	e017      	b.n	801147e <lcp_rejci+0x272>
    return 0;
 801144e:	2000      	movs	r0, #0
 8011450:	e03b      	b.n	80114ca <lcp_rejci+0x2be>
 8011452:	2000      	movs	r0, #0
 8011454:	e039      	b.n	80114ca <lcp_rejci+0x2be>
 8011456:	2000      	movs	r0, #0
 8011458:	e037      	b.n	80114ca <lcp_rejci+0x2be>
 801145a:	2000      	movs	r0, #0
 801145c:	e035      	b.n	80114ca <lcp_rejci+0x2be>
 801145e:	2000      	movs	r0, #0
 8011460:	e033      	b.n	80114ca <lcp_rejci+0x2be>
 8011462:	2000      	movs	r0, #0
 8011464:	e031      	b.n	80114ca <lcp_rejci+0x2be>
 8011466:	2000      	movs	r0, #0
 8011468:	e02f      	b.n	80114ca <lcp_rejci+0x2be>
    return 1;
 801146a:	2001      	movs	r0, #1
 801146c:	e02d      	b.n	80114ca <lcp_rejci+0x2be>
    return 0;
 801146e:	2000      	movs	r0, #0
 8011470:	e02b      	b.n	80114ca <lcp_rejci+0x2be>
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 8011472:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 8011476:	f013 0f02 	tst.w	r3, #2
 801147a:	f47f af62 	bne.w	8011342 <lcp_rejci+0x136>
    if (len != 0)
 801147e:	2d00      	cmp	r5, #0
 8011480:	d1f1      	bne.n	8011466 <lcp_rejci+0x25a>
    if (f->state != PPP_FSM_OPENED)
 8011482:	7c3b      	ldrb	r3, [r7, #16]
 8011484:	2b09      	cmp	r3, #9
 8011486:	d0f0      	beq.n	801146a <lcp_rejci+0x25e>
	*go = try_;
 8011488:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801148c:	f369 0382 	bfi	r3, r9, #2, #1
 8011490:	f368 03c3 	bfi	r3, r8, #3, #1
 8011494:	f36b 1304 	bfi	r3, fp, #4, #1
 8011498:	f36e 1345 	bfi	r3, lr, #5, #1
 801149c:	f361 1386 	bfi	r3, r1, #6, #1
 80114a0:	f36a 13c7 	bfi	r3, sl, #7, #1
 80114a4:	f88d 300c 	strb.w	r3, [sp, #12]
 80114a8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80114ac:	f36c 0300 	bfi	r3, ip, #0, #1
 80114b0:	f362 0341 	bfi	r3, r2, #1, #1
 80114b4:	f88d 300d 	strb.w	r3, [sp, #13]
 80114b8:	3468      	adds	r4, #104	; 0x68
 80114ba:	ad03      	add	r5, sp, #12
 80114bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114c4:	682b      	ldr	r3, [r5, #0]
 80114c6:	6023      	str	r3, [r4, #0]
    return 1;
 80114c8:	2001      	movs	r0, #1
}
 80114ca:	b00d      	add	sp, #52	; 0x34
 80114cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080114d0 <lcp_addci>:
static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
 80114d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ppp_pcb *pcb = f->pcb;
 80114d2:	6800      	ldr	r0, [r0, #0]
    ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 80114d4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80114d8:	f013 0f04 	tst.w	r3, #4
 80114dc:	d013      	beq.n	8011506 <lcp_addci+0x36>
 80114de:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 80114e2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80114e6:	429c      	cmp	r4, r3
 80114e8:	f000 8088 	beq.w	80115fc <lcp_addci+0x12c>
 80114ec:	2301      	movs	r3, #1
 80114ee:	700b      	strb	r3, [r1, #0]
 80114f0:	2304      	movs	r3, #4
 80114f2:	704b      	strb	r3, [r1, #1]
 80114f4:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80114f8:	0a1b      	lsrs	r3, r3, #8
 80114fa:	708b      	strb	r3, [r1, #2]
 80114fc:	1d0b      	adds	r3, r1, #4
 80114fe:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 8011502:	70cc      	strb	r4, [r1, #3]
 8011504:	e000      	b.n	8011508 <lcp_addci+0x38>
 8011506:	460b      	mov	r3, r1
    ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 8011508:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
 801150c:	f014 0f08 	tst.w	r4, #8
 8011510:	d013      	beq.n	801153a <lcp_addci+0x6a>
 8011512:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8011514:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011518:	d00f      	beq.n	801153a <lcp_addci+0x6a>
 801151a:	2402      	movs	r4, #2
 801151c:	701c      	strb	r4, [r3, #0]
 801151e:	2406      	movs	r4, #6
 8011520:	705c      	strb	r4, [r3, #1]
 8011522:	f890 406f 	ldrb.w	r4, [r0, #111]	; 0x6f
 8011526:	709c      	strb	r4, [r3, #2]
 8011528:	f8b0 406e 	ldrh.w	r4, [r0, #110]	; 0x6e
 801152c:	70dc      	strb	r4, [r3, #3]
 801152e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8011530:	0a24      	lsrs	r4, r4, #8
 8011532:	711c      	strb	r4, [r3, #4]
 8011534:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8011536:	715c      	strb	r4, [r3, #5]
 8011538:	3306      	adds	r3, #6
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 801153a:	f990 4068 	ldrsb.w	r4, [r0, #104]	; 0x68
 801153e:	2c00      	cmp	r4, #0
 8011540:	db5e      	blt.n	8011600 <lcp_addci+0x130>
    ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 8011542:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
 8011546:	f014 0f10 	tst.w	r4, #16
 801154a:	d00f      	beq.n	801156c <lcp_addci+0x9c>
 801154c:	2405      	movs	r4, #5
 801154e:	701c      	strb	r4, [r3, #0]
 8011550:	2406      	movs	r4, #6
 8011552:	705c      	strb	r4, [r3, #1]
 8011554:	f890 4073 	ldrb.w	r4, [r0, #115]	; 0x73
 8011558:	709c      	strb	r4, [r3, #2]
 801155a:	f8b0 4072 	ldrh.w	r4, [r0, #114]	; 0x72
 801155e:	70dc      	strb	r4, [r3, #3]
 8011560:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8011562:	0a24      	lsrs	r4, r4, #8
 8011564:	711c      	strb	r4, [r3, #4]
 8011566:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8011568:	715c      	strb	r4, [r3, #5]
 801156a:	3306      	adds	r3, #6
    ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 801156c:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
 8011570:	f014 0f20 	tst.w	r4, #32
 8011574:	d006      	beq.n	8011584 <lcp_addci+0xb4>
 8011576:	461c      	mov	r4, r3
 8011578:	2507      	movs	r5, #7
 801157a:	f804 5b02 	strb.w	r5, [r4], #2
 801157e:	2502      	movs	r5, #2
 8011580:	705d      	strb	r5, [r3, #1]
 8011582:	4623      	mov	r3, r4
    ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 8011584:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
 8011588:	f014 0f40 	tst.w	r4, #64	; 0x40
 801158c:	d006      	beq.n	801159c <lcp_addci+0xcc>
 801158e:	461c      	mov	r4, r3
 8011590:	2508      	movs	r5, #8
 8011592:	f804 5b02 	strb.w	r5, [r4], #2
 8011596:	2502      	movs	r5, #2
 8011598:	705d      	strb	r5, [r3, #1]
 801159a:	4623      	mov	r3, r4
    ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
 801159c:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
 80115a0:	f014 0f01 	tst.w	r4, #1
 80115a4:	d006      	beq.n	80115b4 <lcp_addci+0xe4>
 80115a6:	461c      	mov	r4, r3
 80115a8:	2512      	movs	r5, #18
 80115aa:	f804 5b02 	strb.w	r5, [r4], #2
 80115ae:	2502      	movs	r5, #2
 80115b0:	705d      	strb	r5, [r3, #1]
 80115b2:	4623      	mov	r3, r4
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 80115b4:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
 80115b8:	f014 0f02 	tst.w	r4, #2
 80115bc:	d019      	beq.n	80115f2 <lcp_addci+0x122>
 80115be:	2413      	movs	r4, #19
 80115c0:	701c      	strb	r4, [r3, #0]
 80115c2:	f890 4076 	ldrb.w	r4, [r0, #118]	; 0x76
 80115c6:	3403      	adds	r4, #3
 80115c8:	705c      	strb	r4, [r3, #1]
 80115ca:	1cdd      	adds	r5, r3, #3
 80115cc:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
 80115d0:	709c      	strb	r4, [r3, #2]
 80115d2:	f890 4076 	ldrb.w	r4, [r0, #118]	; 0x76
 80115d6:	b1dc      	cbz	r4, 8011610 <lcp_addci+0x140>
 80115d8:	f100 0676 	add.w	r6, r0, #118	; 0x76
 80115dc:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 80115e0:	f805 4b01 	strb.w	r4, [r5], #1
 80115e4:	f890 7076 	ldrb.w	r7, [r0, #118]	; 0x76
 80115e8:	1eec      	subs	r4, r5, #3
 80115ea:	1ae4      	subs	r4, r4, r3
 80115ec:	42a7      	cmp	r7, r4
 80115ee:	dcf5      	bgt.n	80115dc <lcp_addci+0x10c>
 80115f0:	462b      	mov	r3, r5
    if (ucp - start_ucp != *lenp) {
 80115f2:	1a5b      	subs	r3, r3, r1
 80115f4:	6812      	ldr	r2, [r2, #0]
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d10c      	bne.n	8011614 <lcp_addci+0x144>
}
 80115fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115fc:	460b      	mov	r3, r1
 80115fe:	e783      	b.n	8011508 <lcp_addci+0x38>
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 8011600:	240d      	movs	r4, #13
 8011602:	701c      	strb	r4, [r3, #0]
 8011604:	2403      	movs	r4, #3
 8011606:	705c      	strb	r4, [r3, #1]
 8011608:	2406      	movs	r4, #6
 801160a:	709c      	strb	r4, [r3, #2]
 801160c:	3303      	adds	r3, #3
 801160e:	e798      	b.n	8011542 <lcp_addci+0x72>
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 8011610:	462b      	mov	r3, r5
 8011612:	e7ee      	b.n	80115f2 <lcp_addci+0x122>
	ppp_error("Bug in lcp_addci: wrong length");
 8011614:	4801      	ldr	r0, [pc, #4]	; (801161c <lcp_addci+0x14c>)
 8011616:	f002 f8f9 	bl	801380c <ppp_error>
}
 801161a:	e7ee      	b.n	80115fa <lcp_addci+0x12a>
 801161c:	08019588 	.word	0x08019588

08011620 <lcp_protrej>:
static void lcp_protrej(ppp_pcb *pcb) {
 8011620:	b510      	push	{r4, lr}
 8011622:	4604      	mov	r4, r0
    ppp_error("Received Protocol-Reject for LCP!");
 8011624:	4803      	ldr	r0, [pc, #12]	; (8011634 <lcp_protrej+0x14>)
 8011626:	f002 f8f1 	bl	801380c <ppp_error>
    fsm_protreject(&pcb->lcp_fsm);
 801162a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801162e:	f7fd ff45 	bl	800f4bc <fsm_protreject>
}
 8011632:	bd10      	pop	{r4, pc}
 8011634:	080195a8 	.word	0x080195a8

08011638 <lcp_delayed_up>:
static void lcp_delayed_up(void *arg) {
 8011638:	b508      	push	{r3, lr}
    if (f->flags & DELAYED_UP) {
 801163a:	7c42      	ldrb	r2, [r0, #17]
 801163c:	f990 3011 	ldrsb.w	r3, [r0, #17]
 8011640:	2b00      	cmp	r3, #0
 8011642:	db00      	blt.n	8011646 <lcp_delayed_up+0xe>
}
 8011644:	bd08      	pop	{r3, pc}
	f->flags &= ~DELAYED_UP;
 8011646:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801164a:	7442      	strb	r2, [r0, #17]
	fsm_lowerup(f);
 801164c:	f7fd fdb3 	bl	800f1b6 <fsm_lowerup>
}
 8011650:	e7f8      	b.n	8011644 <lcp_delayed_up+0xc>
	...

08011654 <lcp_input>:
static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
 8011654:	b570      	push	{r4, r5, r6, lr}
 8011656:	460c      	mov	r4, r1
 8011658:	4615      	mov	r5, r2
    fsm *f = &pcb->lcp_fsm;
 801165a:	f100 0628 	add.w	r6, r0, #40	; 0x28
    if (f->flags & DELAYED_UP) {
 801165e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8011662:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 8011666:	2b00      	cmp	r3, #0
 8011668:	db05      	blt.n	8011676 <lcp_input+0x22>
    fsm_input(f, p, len);
 801166a:	462a      	mov	r2, r5
 801166c:	4621      	mov	r1, r4
 801166e:	4630      	mov	r0, r6
 8011670:	f7fd ff50 	bl	800f514 <fsm_input>
}
 8011674:	bd70      	pop	{r4, r5, r6, pc}
	f->flags &= ~DELAYED_UP;
 8011676:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801167a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
	UNTIMEOUT(lcp_delayed_up, f);
 801167e:	4631      	mov	r1, r6
 8011680:	4803      	ldr	r0, [pc, #12]	; (8011690 <lcp_input+0x3c>)
 8011682:	f7fc fc21 	bl	800dec8 <sys_untimeout>
	fsm_lowerup(f);
 8011686:	4630      	mov	r0, r6
 8011688:	f7fd fd95 	bl	800f1b6 <fsm_lowerup>
 801168c:	e7ed      	b.n	801166a <lcp_input+0x16>
 801168e:	bf00      	nop
 8011690:	08011639 	.word	0x08011639

08011694 <lcp_init>:
static void lcp_init(ppp_pcb *pcb) {
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	4604      	mov	r4, r0
    f->pcb = pcb;
 8011698:	6280      	str	r0, [r0, #40]	; 0x28
    f->protocol = PPP_LCP;
 801169a:	f24c 0321 	movw	r3, #49185	; 0xc021
 801169e:	86c3      	strh	r3, [r0, #54]	; 0x36
    f->callbacks = &lcp_callbacks;
 80116a0:	4b10      	ldr	r3, [pc, #64]	; (80116e4 <lcp_init+0x50>)
 80116a2:	62c3      	str	r3, [r0, #44]	; 0x2c
    fsm_init(f);
 80116a4:	3028      	adds	r0, #40	; 0x28
 80116a6:	f7fd fd7d 	bl	800f1a4 <fsm_init>
    BZERO(wo, sizeof(*wo));
 80116aa:	2624      	movs	r6, #36	; 0x24
 80116ac:	4632      	mov	r2, r6
 80116ae:	2100      	movs	r1, #0
 80116b0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80116b4:	f002 fe94 	bl	80143e0 <memset>
    wo->mru = PPP_DEFMRU;
 80116b8:	f240 55dc 	movw	r5, #1500	; 0x5dc
 80116bc:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
    wo->neg_accompression = 1;
 80116c0:	237c      	movs	r3, #124	; 0x7c
 80116c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    BZERO(ao, sizeof(*ao));
 80116c6:	4632      	mov	r2, r6
 80116c8:	2100      	movs	r1, #0
 80116ca:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80116ce:	f002 fe87 	bl	80143e0 <memset>
    ao->mru = PPP_MAXMRU;
 80116d2:	f8a4 508e 	strh.w	r5, [r4, #142]	; 0x8e
    ao->neg_accompression = 1;
 80116d6:	237c      	movs	r3, #124	; 0x7c
 80116d8:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    ao->neg_endpoint = 1;
 80116dc:	2302      	movs	r3, #2
 80116de:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
}
 80116e2:	bd70      	pop	{r4, r5, r6, pc}
 80116e4:	08019748 	.word	0x08019748

080116e8 <lcp_extcode>:
static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
 80116e8:	b530      	push	{r4, r5, lr}
 80116ea:	b083      	sub	sp, #12
 80116ec:	4604      	mov	r4, r0
    ppp_pcb *pcb = f->pcb;
 80116ee:	6800      	ldr	r0, [r0, #0]
    switch( code ){
 80116f0:	3908      	subs	r1, #8
 80116f2:	2905      	cmp	r1, #5
 80116f4:	d867      	bhi.n	80117c6 <lcp_extcode+0xde>
 80116f6:	e8df f001 	tbb	[pc, r1]
 80116fa:	2806      	.short	0x2806
 80116fc:	03030341 	.word	0x03030341
    ppp_pcb *pcb = f->pcb;
 8011700:	2001      	movs	r0, #1
}
 8011702:	b003      	add	sp, #12
 8011704:	bd30      	pop	{r4, r5, pc}
    if (len < 2) {
 8011706:	9a06      	ldr	r2, [sp, #24]
 8011708:	2a01      	cmp	r2, #1
 801170a:	dd5e      	ble.n	80117ca <lcp_extcode+0xe2>
    if( f->state != PPP_FSM_OPENED ){
 801170c:	7c22      	ldrb	r2, [r4, #16]
 801170e:	2a09      	cmp	r2, #9
 8011710:	d15d      	bne.n	80117ce <lcp_extcode+0xe6>
    GETSHORT(prot, inp);
 8011712:	781a      	ldrb	r2, [r3, #0]
 8011714:	7859      	ldrb	r1, [r3, #1]
 8011716:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 801171a:	4b2e      	ldr	r3, [pc, #184]	; (80117d4 <lcp_extcode+0xec>)
 801171c:	681d      	ldr	r5, [r3, #0]
 801171e:	b13d      	cbz	r5, 8011730 <lcp_extcode+0x48>
 8011720:	461a      	mov	r2, r3
	if (protp->protocol == prot) {
 8011722:	882b      	ldrh	r3, [r5, #0]
 8011724:	428b      	cmp	r3, r1
 8011726:	d008      	beq.n	801173a <lcp_extcode+0x52>
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8011728:	f852 5f04 	ldr.w	r5, [r2, #4]!
 801172c:	2d00      	cmp	r5, #0
 801172e:	d1f8      	bne.n	8011722 <lcp_extcode+0x3a>
	ppp_warn("Protocol-Reject for unsupported protocol 0x%x", prot);
 8011730:	4829      	ldr	r0, [pc, #164]	; (80117d8 <lcp_extcode+0xf0>)
 8011732:	f002 f87a 	bl	801382a <ppp_warn>
    return 1;
 8011736:	2001      	movs	r0, #1
 8011738:	e7e3      	b.n	8011702 <lcp_extcode+0x1a>
		ppp_dbglog("Protocol-Reject for 0x%x received", prot);
 801173a:	4828      	ldr	r0, [pc, #160]	; (80117dc <lcp_extcode+0xf4>)
 801173c:	f002 f8a2 	bl	8013884 <ppp_dbglog>
	    (*protp->protrej)(f->pcb);
 8011740:	68eb      	ldr	r3, [r5, #12]
 8011742:	6820      	ldr	r0, [r4, #0]
 8011744:	4798      	blx	r3
    return 1;
 8011746:	2001      	movs	r0, #1
	    return;
 8011748:	e7db      	b.n	8011702 <lcp_extcode+0x1a>
	if (f->state != PPP_FSM_OPENED)
 801174a:	7c21      	ldrb	r1, [r4, #16]
 801174c:	2909      	cmp	r1, #9
 801174e:	d001      	beq.n	8011754 <lcp_extcode+0x6c>
    return 1;
 8011750:	2001      	movs	r0, #1
 8011752:	e7d6      	b.n	8011702 <lcp_extcode+0x1a>
	PUTLONG(go->magicnumber, magp);
 8011754:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8011758:	7019      	strb	r1, [r3, #0]
 801175a:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
 801175e:	7059      	strb	r1, [r3, #1]
 8011760:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8011762:	0a09      	lsrs	r1, r1, #8
 8011764:	7099      	strb	r1, [r3, #2]
 8011766:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8011768:	70d9      	strb	r1, [r3, #3]
	fsm_sdata(f, ECHOREP, id, inp, len);
 801176a:	9906      	ldr	r1, [sp, #24]
 801176c:	9100      	str	r1, [sp, #0]
 801176e:	b2d2      	uxtb	r2, r2
 8011770:	210a      	movs	r1, #10
 8011772:	4620      	mov	r0, r4
 8011774:	f7fd fd92 	bl	800f29c <fsm_sdata>
    return 1;
 8011778:	2001      	movs	r0, #1
	break;
 801177a:	e7c2      	b.n	8011702 <lcp_extcode+0x1a>
    lcp_options *go = &pcb->lcp_gotoptions;
    u32_t magic_val;
    LWIP_UNUSED_ARG(id);

    /* Check the magic number - don't count replies from ourselves. */
    if (len < 4) {
 801177c:	9a06      	ldr	r2, [sp, #24]
 801177e:	2a03      	cmp	r2, #3
 8011780:	dd16      	ble.n	80117b0 <lcp_extcode+0xc8>
	ppp_dbglog("lcp: received short Echo-Reply, length %d", len);
	return;
    }
    GETLONG(magic_val, inp);
    if (go->neg_magicnumber
 8011782:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 8011786:	f012 0f10 	tst.w	r2, #16
 801178a:	d00c      	beq.n	80117a6 <lcp_extcode+0xbe>
    GETLONG(magic_val, inp);
 801178c:	7819      	ldrb	r1, [r3, #0]
 801178e:	785a      	ldrb	r2, [r3, #1]
 8011790:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8011794:	789a      	ldrb	r2, [r3, #2]
 8011796:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801179a:	78db      	ldrb	r3, [r3, #3]
 801179c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	&& magic_val == go->magicnumber) {
 80117a0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d00a      	beq.n	80117bc <lcp_extcode+0xd4>
	ppp_warn("appear to have received our own echo-reply!");
	return;
    }

    /* Reset the number of outstanding echo frames */
    pcb->lcp_echos_pending = 0;
 80117a6:	2300      	movs	r3, #0
 80117a8:	f880 30d6 	strb.w	r3, [r0, #214]	; 0xd6
    return 1;
 80117ac:	2001      	movs	r0, #1
 80117ae:	e7a8      	b.n	8011702 <lcp_extcode+0x1a>
	ppp_dbglog("lcp: received short Echo-Reply, length %d", len);
 80117b0:	4611      	mov	r1, r2
 80117b2:	480b      	ldr	r0, [pc, #44]	; (80117e0 <lcp_extcode+0xf8>)
 80117b4:	f002 f866 	bl	8013884 <ppp_dbglog>
    return 1;
 80117b8:	2001      	movs	r0, #1
	return;
 80117ba:	e7a2      	b.n	8011702 <lcp_extcode+0x1a>
	ppp_warn("appear to have received our own echo-reply!");
 80117bc:	4809      	ldr	r0, [pc, #36]	; (80117e4 <lcp_extcode+0xfc>)
 80117be:	f002 f834 	bl	801382a <ppp_warn>
    return 1;
 80117c2:	2001      	movs	r0, #1
	return;
 80117c4:	e79d      	b.n	8011702 <lcp_extcode+0x1a>
	return 0;
 80117c6:	2000      	movs	r0, #0
 80117c8:	e79b      	b.n	8011702 <lcp_extcode+0x1a>
    return 1;
 80117ca:	2001      	movs	r0, #1
 80117cc:	e799      	b.n	8011702 <lcp_extcode+0x1a>
 80117ce:	2001      	movs	r0, #1
 80117d0:	e797      	b.n	8011702 <lcp_extcode+0x1a>
 80117d2:	bf00      	nop
 80117d4:	08019888 	.word	0x08019888
 80117d8:	080195f0 	.word	0x080195f0
 80117dc:	080195cc 	.word	0x080195cc
 80117e0:	08019620 	.word	0x08019620
 80117e4:	0801964c 	.word	0x0801964c

080117e8 <lcp_finished>:
static void lcp_finished(fsm *f) {
 80117e8:	b508      	push	{r3, lr}
    link_terminated(pcb);
 80117ea:	6800      	ldr	r0, [r0, #0]
 80117ec:	f7fd fb8c 	bl	800ef08 <link_terminated>
}
 80117f0:	bd08      	pop	{r3, pc}

080117f2 <lcp_starting>:
static void lcp_starting(fsm *f) {
 80117f2:	b508      	push	{r3, lr}
    link_required(pcb);
 80117f4:	6800      	ldr	r0, [r0, #0]
 80117f6:	f7fd fb85 	bl	800ef04 <link_required>
}
 80117fa:	bd08      	pop	{r3, pc}

080117fc <lcp_down>:
static void lcp_down(fsm *f) {
 80117fc:	b510      	push	{r4, lr}
 80117fe:	b082      	sub	sp, #8
    ppp_pcb *pcb = f->pcb;
 8011800:	6804      	ldr	r4, [r0, #0]
 */

static void lcp_echo_lowerdown(ppp_pcb *pcb) {
    fsm *f = &pcb->lcp_fsm;

    if (pcb->lcp_echo_timer_running != 0) {
 8011802:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8011806:	f013 0f10 	tst.w	r3, #16
 801180a:	d125      	bne.n	8011858 <lcp_down+0x5c>
    link_down(pcb);
 801180c:	4620      	mov	r0, r4
 801180e:	f7fd fbbd 	bl	800ef8c <link_down>
    ppp_send_config(pcb, PPP_MRU, 0xffffffff, 0, 0);
 8011812:	2300      	movs	r3, #0
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	f04f 32ff 	mov.w	r2, #4294967295
 801181a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 801181e:	4620      	mov	r0, r4
 8011820:	f001 f88c 	bl	801293c <ppp_send_config>
		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011824:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    ppp_recv_config(pcb, PPP_MRU,
 8011828:	f013 0f08 	tst.w	r3, #8
 801182c:	bf14      	ite	ne
 801182e:	6ee2      	ldrne	r2, [r4, #108]	; 0x6c
 8011830:	f04f 32ff 	moveq.w	r2, #4294967295
		    go->neg_pcompression, go->neg_accompression);
 8011834:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    ppp_recv_config(pcb, PPP_MRU,
 8011838:	f3c3 1180 	ubfx	r1, r3, #6, #1
 801183c:	9100      	str	r1, [sp, #0]
 801183e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011842:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011846:	4620      	mov	r0, r4
 8011848:	f001 f884 	bl	8012954 <ppp_recv_config>
    pcb->peer_mru = PPP_MRU;
 801184c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8011850:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
}
 8011854:	b002      	add	sp, #8
 8011856:	bd10      	pop	{r4, pc}
        UNTIMEOUT (LcpEchoTimeout, f);
 8011858:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801185c:	4804      	ldr	r0, [pc, #16]	; (8011870 <lcp_down+0x74>)
 801185e:	f7fc fb33 	bl	800dec8 <sys_untimeout>
        pcb->lcp_echo_timer_running = 0;
 8011862:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8011866:	f36f 1304 	bfc	r3, #4, #1
 801186a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 801186e:	e7cd      	b.n	801180c <lcp_down+0x10>
 8011870:	08011e61 	.word	0x08011e61

08011874 <lcp_lowerup>:
void lcp_lowerup(ppp_pcb *pcb) {
 8011874:	b570      	push	{r4, r5, r6, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	4604      	mov	r4, r0
    if (ppp_send_config(pcb, PPP_MRU, 0xffffffff, 0, 0) < 0
 801187a:	2300      	movs	r3, #0
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	f04f 32ff 	mov.w	r2, #4294967295
 8011882:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011886:	f001 f859 	bl	801293c <ppp_send_config>
 801188a:	2800      	cmp	r0, #0
 801188c:	db2a      	blt.n	80118e4 <lcp_lowerup+0x70>
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 801188e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
	|| ppp_recv_config(pcb, PPP_MRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 8011892:	7822      	ldrb	r2, [r4, #0]
 8011894:	f082 0208 	eor.w	r2, r2, #8
 8011898:	f3c3 1180 	ubfx	r1, r3, #6, #1
 801189c:	9100      	str	r1, [sp, #0]
 801189e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80118a2:	f342 02c0 	sbfx	r2, r2, #3, #1
 80118a6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80118aa:	4620      	mov	r0, r4
 80118ac:	f001 f852 	bl	8012954 <ppp_recv_config>
 80118b0:	2800      	cmp	r0, #0
 80118b2:	db17      	blt.n	80118e4 <lcp_lowerup+0x70>
    fsm *f = &pcb->lcp_fsm;
 80118b4:	f104 0528 	add.w	r5, r4, #40	; 0x28
    pcb->peer_mru = PPP_MRU;
 80118b8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80118bc:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
    if (pcb->settings.listen_time != 0) {
 80118c0:	8863      	ldrh	r3, [r4, #2]
 80118c2:	b18b      	cbz	r3, 80118e8 <lcp_lowerup+0x74>
	f->flags |= DELAYED_UP;
 80118c4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80118c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
 80118d0:	4e07      	ldr	r6, [pc, #28]	; (80118f0 <lcp_lowerup+0x7c>)
 80118d2:	4629      	mov	r1, r5
 80118d4:	4630      	mov	r0, r6
 80118d6:	f7fc faf7 	bl	800dec8 <sys_untimeout>
 80118da:	462a      	mov	r2, r5
 80118dc:	4631      	mov	r1, r6
 80118de:	8860      	ldrh	r0, [r4, #2]
 80118e0:	f7fc fa8c 	bl	800ddfc <sys_timeout>
}
 80118e4:	b002      	add	sp, #8
 80118e6:	bd70      	pop	{r4, r5, r6, pc}
	fsm_lowerup(f);
 80118e8:	4628      	mov	r0, r5
 80118ea:	f7fd fc64 	bl	800f1b6 <fsm_lowerup>
 80118ee:	e7f9      	b.n	80118e4 <lcp_lowerup+0x70>
 80118f0:	08011639 	.word	0x08011639

080118f4 <lcp_resetci>:
static void lcp_resetci(fsm *f) {
 80118f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ppp_pcb *pcb = f->pcb;
 80118f6:	6806      	ldr	r6, [r0, #0]
    wo->magicnumber = magic();
 80118f8:	f000 fdfa 	bl	80124f0 <magic>
 80118fc:	64f0      	str	r0, [r6, #76]	; 0x4c
    wo->numloops = 0;
 80118fe:	2700      	movs	r7, #0
 8011900:	f886 7050 	strb.w	r7, [r6, #80]	; 0x50
    *go = *wo;
 8011904:	f106 0468 	add.w	r4, r6, #104	; 0x68
 8011908:	f106 0544 	add.w	r5, r6, #68	; 0x44
 801190c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801190e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011914:	682b      	ldr	r3, [r5, #0]
 8011916:	6023      	str	r3, [r4, #0]
	go->neg_ssnhf = 0;
 8011918:	f896 3069 	ldrb.w	r3, [r6, #105]	; 0x69
	go->neg_endpoint = 0;
 801191c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8011920:	f367 0341 	bfi	r3, r7, #1, #1
 8011924:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
    if (pcb->settings.noendpoint)
 8011928:	7833      	ldrb	r3, [r6, #0]
 801192a:	f013 0f10 	tst.w	r3, #16
 801192e:	d005      	beq.n	801193c <lcp_resetci+0x48>
	ao->neg_endpoint = 0;
 8011930:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
 8011934:	f36f 0341 	bfc	r3, #1, #1
 8011938:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    pcb->peer_mru = PPP_MRU;
 801193c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8011940:	f8a6 30d4 	strh.w	r3, [r6, #212]	; 0xd4
}
 8011944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011948 <lcp_reqci>:
static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	b087      	sub	sp, #28
 801194e:	9101      	str	r1, [sp, #4]
 8011950:	9202      	str	r2, [sp, #8]
 8011952:	9303      	str	r3, [sp, #12]
    ppp_pcb *pcb = f->pcb;
 8011954:	f8d0 b000 	ldr.w	fp, [r0]
    int l = *lenp;		/* Length left */
 8011958:	6814      	ldr	r4, [r2, #0]
    BZERO(ho, sizeof(*ho));
 801195a:	2224      	movs	r2, #36	; 0x24
 801195c:	2100      	movs	r1, #0
 801195e:	f10b 00b0 	add.w	r0, fp, #176	; 0xb0
 8011962:	f002 fd3d 	bl	80143e0 <memset>
    nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_MAX_SIZE), PPP_CTRL_PBUF_TYPE);
 8011966:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801196a:	f44f 7114 	mov.w	r1, #592	; 0x250
 801196e:	2000      	movs	r0, #0
 8011970:	f7f7 fc18 	bl	80091a4 <pbuf_alloc>
    if(NULL == nakp)
 8011974:	2800      	cmp	r0, #0
 8011976:	f000 8181 	beq.w	8011c7c <lcp_reqci+0x334>
 801197a:	4607      	mov	r7, r0
    if(nakp->tot_len != nakp->len) {
 801197c:	8902      	ldrh	r2, [r0, #8]
 801197e:	8943      	ldrh	r3, [r0, #10]
 8011980:	429a      	cmp	r2, r3
 8011982:	d10a      	bne.n	801199a <lcp_reqci+0x52>
    nakoutp = (u_char*)nakp->payload;
 8011984:	6843      	ldr	r3, [r0, #4]
 8011986:	9305      	str	r3, [sp, #20]
    while (l) {
 8011988:	2c00      	cmp	r4, #0
 801198a:	f000 815f 	beq.w	8011c4c <lcp_reqci+0x304>
    rejp = inp;
 801198e:	9d01      	ldr	r5, [sp, #4]
 8011990:	46aa      	mov	sl, r5
    int rc = CONFACK;		/* Final packet return code */
 8011992:	f04f 0802 	mov.w	r8, #2
		ppp_dbglog("No auth is possible");
 8011996:	9004      	str	r0, [sp, #16]
 8011998:	e0a2      	b.n	8011ae0 <lcp_reqci+0x198>
        pbuf_free(nakp);
 801199a:	f7f7 fb99 	bl	80090d0 <pbuf_free>
        return 0;
 801199e:	f04f 0800 	mov.w	r8, #0
 80119a2:	e14f      	b.n	8011c44 <lcp_reqci+0x2fc>
	    if (!ao->neg_mru ||		/* Allow option? */
 80119a4:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80119a8:	f013 0f04 	tst.w	r3, #4
 80119ac:	f000 817f 	beq.w	8011cae <lcp_reqci+0x366>
 80119b0:	2e04      	cmp	r6, #4
 80119b2:	d002      	beq.n	80119ba <lcp_reqci+0x72>
	l -= cilen;			/* Adjust remaining length */
 80119b4:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 80119b6:	4634      	mov	r4, r6
 80119b8:	e165      	b.n	8011c86 <lcp_reqci+0x33e>
	    GETSHORT(cishort, p);	/* Parse MRU */
 80119ba:	78aa      	ldrb	r2, [r5, #2]
 80119bc:	78eb      	ldrb	r3, [r5, #3]
 80119be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	    if (cishort < PPP_MINMRU) {
 80119c2:	2b7f      	cmp	r3, #127	; 0x7f
 80119c4:	d811      	bhi.n	80119ea <lcp_reqci+0xa2>
		PUTCHAR(CI_MRU, nakoutp);
 80119c6:	2301      	movs	r3, #1
 80119c8:	9a05      	ldr	r2, [sp, #20]
 80119ca:	7013      	strb	r3, [r2, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
 80119cc:	f04f 0104 	mov.w	r1, #4
 80119d0:	7051      	strb	r1, [r2, #1]
		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
 80119d2:	f04f 0100 	mov.w	r1, #0
 80119d6:	7091      	strb	r1, [r2, #2]
 80119d8:	2380      	movs	r3, #128	; 0x80
 80119da:	70d3      	strb	r3, [r2, #3]
 80119dc:	1d13      	adds	r3, r2, #4
 80119de:	9305      	str	r3, [sp, #20]
	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
 80119e0:	9b03      	ldr	r3, [sp, #12]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f040 8151 	bne.w	8011c8a <lcp_reqci+0x342>
 80119e8:	e0c6      	b.n	8011b78 <lcp_reqci+0x230>
	    ho->neg_mru = 1;		/* Remember he sent MRU */
 80119ea:	f89b 20b0 	ldrb.w	r2, [fp, #176]	; 0xb0
 80119ee:	f042 0204 	orr.w	r2, r2, #4
 80119f2:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
	    ho->mru = cishort;		/* And remember value */
 80119f6:	f8ab 30b2 	strh.w	r3, [fp, #178]	; 0xb2
	    break;
 80119fa:	e06d      	b.n	8011ad8 <lcp_reqci+0x190>
	    if (!ao->neg_asyncmap ||
 80119fc:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8011a00:	f013 0f08 	tst.w	r3, #8
 8011a04:	f000 8156 	beq.w	8011cb4 <lcp_reqci+0x36c>
 8011a08:	2e06      	cmp	r6, #6
 8011a0a:	d002      	beq.n	8011a12 <lcp_reqci+0xca>
	l -= cilen;			/* Adjust remaining length */
 8011a0c:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011a0e:	4634      	mov	r4, r6
 8011a10:	e139      	b.n	8011c86 <lcp_reqci+0x33e>
	    GETLONG(cilong, p);
 8011a12:	78aa      	ldrb	r2, [r5, #2]
 8011a14:	78eb      	ldrb	r3, [r5, #3]
 8011a16:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8011a1a:	792b      	ldrb	r3, [r5, #4]
 8011a1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011a20:	796a      	ldrb	r2, [r5, #5]
 8011a22:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	    if ((ao->asyncmap & ~cilong) != 0) {
 8011a26:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8011a2a:	439a      	bics	r2, r3
 8011a2c:	d01a      	beq.n	8011a64 <lcp_reqci+0x11c>
		PUTCHAR(CI_ASYNCMAP, nakoutp);
 8011a2e:	2202      	movs	r2, #2
 8011a30:	9905      	ldr	r1, [sp, #20]
 8011a32:	700a      	strb	r2, [r1, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 8011a34:	2206      	movs	r2, #6
 8011a36:	704a      	strb	r2, [r1, #1]
		PUTLONG(ao->asyncmap | cilong, nakoutp);
 8011a38:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8011a3c:	431a      	orrs	r2, r3
 8011a3e:	0e12      	lsrs	r2, r2, #24
 8011a40:	708a      	strb	r2, [r1, #2]
 8011a42:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8011a46:	431a      	orrs	r2, r3
 8011a48:	0c12      	lsrs	r2, r2, #16
 8011a4a:	70ca      	strb	r2, [r1, #3]
 8011a4c:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8011a50:	431a      	orrs	r2, r3
 8011a52:	0a12      	lsrs	r2, r2, #8
 8011a54:	710a      	strb	r2, [r1, #4]
 8011a56:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	714b      	strb	r3, [r1, #5]
 8011a5e:	1d8b      	adds	r3, r1, #6
 8011a60:	9305      	str	r3, [sp, #20]
		break;
 8011a62:	e7bd      	b.n	80119e0 <lcp_reqci+0x98>
	    ho->neg_asyncmap = 1;
 8011a64:	f89b 20b0 	ldrb.w	r2, [fp, #176]	; 0xb0
 8011a68:	f042 0208 	orr.w	r2, r2, #8
 8011a6c:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
	    ho->asyncmap = cilong;
 8011a70:	f8cb 30b4 	str.w	r3, [fp, #180]	; 0xb4
	    break;
 8011a74:	e030      	b.n	8011ad8 <lcp_reqci+0x190>
		ppp_dbglog("No auth is possible");
 8011a76:	489a      	ldr	r0, [pc, #616]	; (8011ce0 <lcp_reqci+0x398>)
 8011a78:	f001 ff04 	bl	8013884 <ppp_dbglog>
	l -= cilen;			/* Adjust remaining length */
 8011a7c:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011a7e:	4634      	mov	r4, r6
		break;
 8011a80:	e101      	b.n	8011c86 <lcp_reqci+0x33e>
	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
 8011a82:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8011a86:	f013 0f10 	tst.w	r3, #16
 8011a8a:	d105      	bne.n	8011a98 <lcp_reqci+0x150>
 8011a8c:	f89b 3068 	ldrb.w	r3, [fp, #104]	; 0x68
 8011a90:	f013 0f10 	tst.w	r3, #16
 8011a94:	f000 8111 	beq.w	8011cba <lcp_reqci+0x372>
 8011a98:	2e06      	cmp	r6, #6
 8011a9a:	d002      	beq.n	8011aa2 <lcp_reqci+0x15a>
	l -= cilen;			/* Adjust remaining length */
 8011a9c:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011a9e:	4634      	mov	r4, r6
 8011aa0:	e0f1      	b.n	8011c86 <lcp_reqci+0x33e>
	    GETLONG(cilong, p);
 8011aa2:	78ab      	ldrb	r3, [r5, #2]
 8011aa4:	78ea      	ldrb	r2, [r5, #3]
 8011aa6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8011aaa:	792b      	ldrb	r3, [r5, #4]
 8011aac:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8011ab0:	796b      	ldrb	r3, [r5, #5]
 8011ab2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	    if (go->neg_magicnumber &&
 8011ab6:	f89b 2068 	ldrb.w	r2, [fp, #104]	; 0x68
 8011aba:	f012 0f10 	tst.w	r2, #16
 8011abe:	d003      	beq.n	8011ac8 <lcp_reqci+0x180>
 8011ac0:	f8db 2070 	ldr.w	r2, [fp, #112]	; 0x70
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d047      	beq.n	8011b58 <lcp_reqci+0x210>
	    ho->neg_magicnumber = 1;
 8011ac8:	f89b 20b0 	ldrb.w	r2, [fp, #176]	; 0xb0
 8011acc:	f042 0210 	orr.w	r2, r2, #16
 8011ad0:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
	    ho->magicnumber = cilong;
 8011ad4:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
	if (orc == CONFACK &&		/* Good CI */
 8011ad8:	463d      	mov	r5, r7
    while (l) {
 8011ada:	2c00      	cmp	r4, #0
 8011adc:	f000 80a5 	beq.w	8011c2a <lcp_reqci+0x2e2>
	if (l < 2 ||			/* Not enough data for CI header or */
 8011ae0:	2c01      	cmp	r4, #1
 8011ae2:	f340 80ce 	ble.w	8011c82 <lcp_reqci+0x33a>
	    p[1] < 2 ||			/*  CI length too small or */
 8011ae6:	786e      	ldrb	r6, [r5, #1]
	if (l < 2 ||			/* Not enough data for CI header or */
 8011ae8:	2e01      	cmp	r6, #1
 8011aea:	f240 80da 	bls.w	8011ca2 <lcp_reqci+0x35a>
	    p[1] > l) {			/*  CI length too big? */
 8011aee:	46b1      	mov	r9, r6
	    p[1] < 2 ||			/*  CI length too small or */
 8011af0:	42a6      	cmp	r6, r4
 8011af2:	f300 80d9 	bgt.w	8011ca8 <lcp_reqci+0x360>
	l -= cilen;			/* Adjust remaining length */
 8011af6:	1ba4      	subs	r4, r4, r6
	next += cilen;			/* Step to next CI */
 8011af8:	19af      	adds	r7, r5, r6
	switch (citype) {		/* Check CI type */
 8011afa:	782b      	ldrb	r3, [r5, #0]
 8011afc:	3b01      	subs	r3, #1
 8011afe:	2b12      	cmp	r3, #18
 8011b00:	f200 80c3 	bhi.w	8011c8a <lcp_reqci+0x342>
 8011b04:	a201      	add	r2, pc, #4	; (adr r2, 8011b0c <lcp_reqci+0x1c4>)
 8011b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b0a:	bf00      	nop
 8011b0c:	080119a5 	.word	0x080119a5
 8011b10:	080119fd 	.word	0x080119fd
 8011b14:	08011a77 	.word	0x08011a77
 8011b18:	08011c8b 	.word	0x08011c8b
 8011b1c:	08011a83 	.word	0x08011a83
 8011b20:	08011c8b 	.word	0x08011c8b
 8011b24:	08011b87 	.word	0x08011b87
 8011b28:	08011bab 	.word	0x08011bab
 8011b2c:	08011c8b 	.word	0x08011c8b
 8011b30:	08011c8b 	.word	0x08011c8b
 8011b34:	08011c8b 	.word	0x08011c8b
 8011b38:	08011c8b 	.word	0x08011c8b
 8011b3c:	08011c8b 	.word	0x08011c8b
 8011b40:	08011c8b 	.word	0x08011c8b
 8011b44:	08011c8b 	.word	0x08011c8b
 8011b48:	08011c8b 	.word	0x08011c8b
 8011b4c:	08011c8b 	.word	0x08011c8b
 8011b50:	08011bcf 	.word	0x08011bcf
 8011b54:	08011bf1 	.word	0x08011bf1
		cilong = magic();	/* Don't put magic() inside macro! */
 8011b58:	f000 fcca 	bl	80124f0 <magic>
		PUTCHAR(CI_MAGICNUMBER, nakoutp);
 8011b5c:	2205      	movs	r2, #5
 8011b5e:	9905      	ldr	r1, [sp, #20]
 8011b60:	700a      	strb	r2, [r1, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 8011b62:	2206      	movs	r2, #6
 8011b64:	704a      	strb	r2, [r1, #1]
		PUTLONG(cilong, nakoutp);
 8011b66:	0e02      	lsrs	r2, r0, #24
 8011b68:	708a      	strb	r2, [r1, #2]
 8011b6a:	0c02      	lsrs	r2, r0, #16
 8011b6c:	70ca      	strb	r2, [r1, #3]
 8011b6e:	0a02      	lsrs	r2, r0, #8
 8011b70:	710a      	strb	r2, [r1, #4]
 8011b72:	7148      	strb	r0, [r1, #5]
 8011b74:	1d8b      	adds	r3, r1, #6
 8011b76:	9305      	str	r3, [sp, #20]
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 8011b78:	f1b8 0f04 	cmp.w	r8, #4
 8011b7c:	d053      	beq.n	8011c26 <lcp_reqci+0x2de>
 8011b7e:	463d      	mov	r5, r7
		rc = CONFNAK;
 8011b80:	f04f 0803 	mov.w	r8, #3
 8011b84:	e7a9      	b.n	8011ada <lcp_reqci+0x192>
	    if (!ao->neg_pcompression ||
 8011b86:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8011b8a:	f013 0f20 	tst.w	r3, #32
 8011b8e:	f000 8097 	beq.w	8011cc0 <lcp_reqci+0x378>
 8011b92:	2e02      	cmp	r6, #2
 8011b94:	d002      	beq.n	8011b9c <lcp_reqci+0x254>
	l -= cilen;			/* Adjust remaining length */
 8011b96:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011b98:	4634      	mov	r4, r6
 8011b9a:	e074      	b.n	8011c86 <lcp_reqci+0x33e>
	    ho->neg_pcompression = 1;
 8011b9c:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8011ba0:	f043 0320 	orr.w	r3, r3, #32
 8011ba4:	f88b 30b0 	strb.w	r3, [fp, #176]	; 0xb0
	    break;
 8011ba8:	e796      	b.n	8011ad8 <lcp_reqci+0x190>
	    if (!ao->neg_accompression ||
 8011baa:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8011bae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011bb2:	f000 8088 	beq.w	8011cc6 <lcp_reqci+0x37e>
 8011bb6:	2e02      	cmp	r6, #2
 8011bb8:	d002      	beq.n	8011bc0 <lcp_reqci+0x278>
	l -= cilen;			/* Adjust remaining length */
 8011bba:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011bbc:	4634      	mov	r4, r6
 8011bbe:	e062      	b.n	8011c86 <lcp_reqci+0x33e>
	    ho->neg_accompression = 1;
 8011bc0:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8011bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bc8:	f88b 30b0 	strb.w	r3, [fp, #176]	; 0xb0
	    break;
 8011bcc:	e784      	b.n	8011ad8 <lcp_reqci+0x190>
	    if (!ao->neg_ssnhf
 8011bce:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8011bd2:	f013 0f01 	tst.w	r3, #1
 8011bd6:	d079      	beq.n	8011ccc <lcp_reqci+0x384>
		|| cilen != CILEN_VOID) {
 8011bd8:	2e02      	cmp	r6, #2
 8011bda:	d002      	beq.n	8011be2 <lcp_reqci+0x29a>
	l -= cilen;			/* Adjust remaining length */
 8011bdc:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011bde:	4634      	mov	r4, r6
 8011be0:	e051      	b.n	8011c86 <lcp_reqci+0x33e>
	    ho->neg_ssnhf = 1;
 8011be2:	f89b 30b1 	ldrb.w	r3, [fp, #177]	; 0xb1
 8011be6:	f043 0301 	orr.w	r3, r3, #1
 8011bea:	f88b 30b1 	strb.w	r3, [fp, #177]	; 0xb1
	    break;
 8011bee:	e773      	b.n	8011ad8 <lcp_reqci+0x190>
	    if (!ao->neg_endpoint ||
 8011bf0:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8011bf4:	f013 0f02 	tst.w	r3, #2
 8011bf8:	d06b      	beq.n	8011cd2 <lcp_reqci+0x38a>
 8011bfa:	1ef3      	subs	r3, r6, #3
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	2b14      	cmp	r3, #20
 8011c00:	d86a      	bhi.n	8011cd8 <lcp_reqci+0x390>
	    GETCHAR(cichar, p);
 8011c02:	78a9      	ldrb	r1, [r5, #2]
	    ho->neg_endpoint = 1;
 8011c04:	f89b 20b1 	ldrb.w	r2, [fp, #177]	; 0xb1
 8011c08:	f042 0202 	orr.w	r2, r2, #2
 8011c0c:	f88b 20b1 	strb.w	r2, [fp, #177]	; 0xb1
	    ho->endpoint.class_ = cichar;
 8011c10:	f88b 10bd 	strb.w	r1, [fp, #189]	; 0xbd
	    ho->endpoint.length = cilen;
 8011c14:	f88b 30be 	strb.w	r3, [fp, #190]	; 0xbe
	    MEMCPY(ho->endpoint.value, p, cilen);
 8011c18:	1ef2      	subs	r2, r6, #3
 8011c1a:	1ce9      	adds	r1, r5, #3
 8011c1c:	f10b 00bf 	add.w	r0, fp, #191	; 0xbf
 8011c20:	f002 fbb6 	bl	8014390 <memcpy>
	    break;
 8011c24:	e758      	b.n	8011ad8 <lcp_reqci+0x190>
 8011c26:	463d      	mov	r5, r7
 8011c28:	e757      	b.n	8011ada <lcp_reqci+0x192>
 8011c2a:	9f04      	ldr	r7, [sp, #16]
    switch (rc) {
 8011c2c:	f1b8 0f03 	cmp.w	r8, #3
 8011c30:	d014      	beq.n	8011c5c <lcp_reqci+0x314>
 8011c32:	f1b8 0f04 	cmp.w	r8, #4
 8011c36:	d01b      	beq.n	8011c70 <lcp_reqci+0x328>
 8011c38:	f1b8 0f02 	cmp.w	r8, #2
 8011c3c:	d009      	beq.n	8011c52 <lcp_reqci+0x30a>
    pbuf_free(nakp);
 8011c3e:	4638      	mov	r0, r7
 8011c40:	f7f7 fa46 	bl	80090d0 <pbuf_free>
}
 8011c44:	4640      	mov	r0, r8
 8011c46:	b007      	add	sp, #28
 8011c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = inp;
 8011c4c:	9d01      	ldr	r5, [sp, #4]
    int rc = CONFACK;		/* Final packet return code */
 8011c4e:	f04f 0802 	mov.w	r8, #2
	*lenp = next - inp;
 8011c52:	9b01      	ldr	r3, [sp, #4]
 8011c54:	1aed      	subs	r5, r5, r3
 8011c56:	9b02      	ldr	r3, [sp, #8]
 8011c58:	601d      	str	r5, [r3, #0]
	break;
 8011c5a:	e7f0      	b.n	8011c3e <lcp_reqci+0x2f6>
	*lenp = nakoutp - (u_char*)nakp->payload;
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	9b05      	ldr	r3, [sp, #20]
 8011c60:	1a9a      	subs	r2, r3, r2
 8011c62:	9b02      	ldr	r3, [sp, #8]
 8011c64:	601a      	str	r2, [r3, #0]
	MEMCPY(inp, nakp->payload, *lenp);
 8011c66:	6879      	ldr	r1, [r7, #4]
 8011c68:	9801      	ldr	r0, [sp, #4]
 8011c6a:	f002 fb91 	bl	8014390 <memcpy>
	break;
 8011c6e:	e7e6      	b.n	8011c3e <lcp_reqci+0x2f6>
	*lenp = rejp - inp;
 8011c70:	9b01      	ldr	r3, [sp, #4]
 8011c72:	ebaa 0103 	sub.w	r1, sl, r3
 8011c76:	9b02      	ldr	r3, [sp, #8]
 8011c78:	6019      	str	r1, [r3, #0]
	break;
 8011c7a:	e7e0      	b.n	8011c3e <lcp_reqci+0x2f6>
        return 0;
 8011c7c:	f04f 0800 	mov.w	r8, #0
 8011c80:	e7e0      	b.n	8011c44 <lcp_reqci+0x2fc>
 8011c82:	462f      	mov	r7, r5
	    l = 0;			/* Don't loop again */
 8011c84:	2300      	movs	r3, #0
		PUTLONG(cilong, nakoutp);
 8011c86:	46a1      	mov	r9, r4
 8011c88:	461c      	mov	r4, r3
	    if (cip != rejp)		/* Need to move rejected CI? */
 8011c8a:	4555      	cmp	r5, sl
 8011c8c:	d004      	beq.n	8011c98 <lcp_reqci+0x350>
		MEMCPY(rejp, cip, cilen); /* Move it */
 8011c8e:	464a      	mov	r2, r9
 8011c90:	4629      	mov	r1, r5
 8011c92:	4650      	mov	r0, sl
 8011c94:	f002 fb7c 	bl	8014390 <memcpy>
	    INCPTR(cilen, rejp);	/* Update output pointer */
 8011c98:	44ca      	add	sl, r9
 8011c9a:	463d      	mov	r5, r7
	    rc = CONFREJ;
 8011c9c:	f04f 0804 	mov.w	r8, #4
 8011ca0:	e71b      	b.n	8011ada <lcp_reqci+0x192>
 8011ca2:	462f      	mov	r7, r5
	    l = 0;			/* Don't loop again */
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	e7ee      	b.n	8011c86 <lcp_reqci+0x33e>
 8011ca8:	462f      	mov	r7, r5
 8011caa:	2300      	movs	r3, #0
 8011cac:	e7eb      	b.n	8011c86 <lcp_reqci+0x33e>
	l -= cilen;			/* Adjust remaining length */
 8011cae:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011cb0:	4634      	mov	r4, r6
 8011cb2:	e7e8      	b.n	8011c86 <lcp_reqci+0x33e>
	l -= cilen;			/* Adjust remaining length */
 8011cb4:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011cb6:	4634      	mov	r4, r6
 8011cb8:	e7e5      	b.n	8011c86 <lcp_reqci+0x33e>
	l -= cilen;			/* Adjust remaining length */
 8011cba:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011cbc:	4634      	mov	r4, r6
 8011cbe:	e7e2      	b.n	8011c86 <lcp_reqci+0x33e>
	l -= cilen;			/* Adjust remaining length */
 8011cc0:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011cc2:	4634      	mov	r4, r6
 8011cc4:	e7df      	b.n	8011c86 <lcp_reqci+0x33e>
	l -= cilen;			/* Adjust remaining length */
 8011cc6:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011cc8:	4634      	mov	r4, r6
 8011cca:	e7dc      	b.n	8011c86 <lcp_reqci+0x33e>
	l -= cilen;			/* Adjust remaining length */
 8011ccc:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011cce:	4634      	mov	r4, r6
 8011cd0:	e7d9      	b.n	8011c86 <lcp_reqci+0x33e>
	l -= cilen;			/* Adjust remaining length */
 8011cd2:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011cd4:	4634      	mov	r4, r6
 8011cd6:	e7d6      	b.n	8011c86 <lcp_reqci+0x33e>
	l -= cilen;			/* Adjust remaining length */
 8011cd8:	4623      	mov	r3, r4
	GETCHAR(cilen, p);		/* Parse CI length */
 8011cda:	4634      	mov	r4, r6
 8011cdc:	e7d3      	b.n	8011c86 <lcp_reqci+0x33e>
 8011cde:	bf00      	nop
 8011ce0:	08019678 	.word	0x08019678

08011ce4 <lcp_open>:
void lcp_open(ppp_pcb *pcb) {
 8011ce4:	b508      	push	{r3, lr}
 8011ce6:	4603      	mov	r3, r0
    fsm *f = &pcb->lcp_fsm;
 8011ce8:	3028      	adds	r0, #40	; 0x28
    f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
 8011cea:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8011cee:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8011cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    if (wo->passive)
 8011cf6:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8011cfa:	f011 0f01 	tst.w	r1, #1
	f->flags |= OPT_PASSIVE;
 8011cfe:	bf1c      	itt	ne
 8011d00:	f042 0201 	orrne.w	r2, r2, #1
 8011d04:	f883 2039 	strbne.w	r2, [r3, #57]	; 0x39
    if (wo->silent)
 8011d08:	f011 0f02 	tst.w	r1, #2
 8011d0c:	d005      	beq.n	8011d1a <lcp_open+0x36>
	f->flags |= OPT_SILENT;
 8011d0e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8011d12:	f042 0204 	orr.w	r2, r2, #4
 8011d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    fsm_open(f);
 8011d1a:	f7fd fa91 	bl	800f240 <fsm_open>
}
 8011d1e:	bd08      	pop	{r3, pc}

08011d20 <lcp_close>:
void lcp_close(ppp_pcb *pcb, const char *reason) {
 8011d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d22:	4604      	mov	r4, r0
 8011d24:	460d      	mov	r5, r1
    fsm *f = &pcb->lcp_fsm;
 8011d26:	f100 0628 	add.w	r6, r0, #40	; 0x28
    if (pcb->phase != PPP_PHASE_DEAD
 8011d2a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011d2e:	b963      	cbnz	r3, 8011d4a <lcp_close+0x2a>
    if (f->flags & DELAYED_UP) {
 8011d30:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	db0c      	blt.n	8011d52 <lcp_close+0x32>
    oldstate = f->state;
 8011d38:	f894 7038 	ldrb.w	r7, [r4, #56]	; 0x38
    fsm_close(f, reason);
 8011d3c:	4629      	mov	r1, r5
 8011d3e:	4630      	mov	r0, r6
 8011d40:	f7fd fb94 	bl	800f46c <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 8011d44:	2f03      	cmp	r7, #3
 8011d46:	d00f      	beq.n	8011d68 <lcp_close+0x48>
}
 8011d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_phase(pcb, PPP_PHASE_TERMINATE);
 8011d4a:	210b      	movs	r1, #11
 8011d4c:	f000 fced 	bl	801272a <new_phase>
 8011d50:	e7ee      	b.n	8011d30 <lcp_close+0x10>
	UNTIMEOUT(lcp_delayed_up, f);
 8011d52:	4631      	mov	r1, r6
 8011d54:	480b      	ldr	r0, [pc, #44]	; (8011d84 <lcp_close+0x64>)
 8011d56:	f7fc f8b7 	bl	800dec8 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 8011d5a:	2303      	movs	r3, #3
 8011d5c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    fsm_close(f, reason);
 8011d60:	4629      	mov	r1, r5
 8011d62:	4630      	mov	r0, r6
 8011d64:	f7fd fb82 	bl	800f46c <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 8011d68:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011d6c:	f013 0f85 	tst.w	r3, #133	; 0x85
 8011d70:	d0ea      	beq.n	8011d48 <lcp_close+0x28>
	f->flags &= ~DELAYED_UP;
 8011d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lcp_finished(f);
 8011d7a:	4630      	mov	r0, r6
 8011d7c:	f7ff fd34 	bl	80117e8 <lcp_finished>
}
 8011d80:	e7e2      	b.n	8011d48 <lcp_close+0x28>
 8011d82:	bf00      	nop
 8011d84:	08011639 	.word	0x08011639

08011d88 <LcpEchoCheck>:
static void LcpEchoCheck(fsm *f) {
 8011d88:	b570      	push	{r4, r5, r6, lr}
 8011d8a:	b084      	sub	sp, #16
 8011d8c:	4604      	mov	r4, r0
    ppp_pcb *pcb = f->pcb;
 8011d8e:	6805      	ldr	r5, [r0, #0]
    if (pcb->settings.lcp_echo_fails != 0) {
 8011d90:	7aab      	ldrb	r3, [r5, #10]
 8011d92:	b11b      	cbz	r3, 8011d9c <LcpEchoCheck+0x14>
        if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
 8011d94:	f895 10d6 	ldrb.w	r1, [r5, #214]	; 0xd6
 8011d98:	428b      	cmp	r3, r1
 8011d9a:	d920      	bls.n	8011dde <LcpEchoCheck+0x56>
    if (f->state == PPP_FSM_OPENED) {
 8011d9c:	7c23      	ldrb	r3, [r4, #16]
 8011d9e:	2b09      	cmp	r3, #9
 8011da0:	d032      	beq.n	8011e08 <LcpEchoCheck+0x80>
    if (f->state != PPP_FSM_OPENED)
 8011da2:	7c23      	ldrb	r3, [r4, #16]
 8011da4:	2b09      	cmp	r3, #9
 8011da6:	d118      	bne.n	8011dda <LcpEchoCheck+0x52>
    if (pcb->lcp_echo_timer_running)
 8011da8:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8011dac:	f013 0f10 	tst.w	r3, #16
 8011db0:	d148      	bne.n	8011e44 <LcpEchoCheck+0xbc>
    TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
 8011db2:	4e26      	ldr	r6, [pc, #152]	; (8011e4c <LcpEchoCheck+0xc4>)
 8011db4:	4621      	mov	r1, r4
 8011db6:	4630      	mov	r0, r6
 8011db8:	f7fc f886 	bl	800dec8 <sys_untimeout>
 8011dbc:	7a6b      	ldrb	r3, [r5, #9]
 8011dbe:	4622      	mov	r2, r4
 8011dc0:	4631      	mov	r1, r6
 8011dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011dc6:	fb00 f003 	mul.w	r0, r0, r3
 8011dca:	f7fc f817 	bl	800ddfc <sys_timeout>
    pcb->lcp_echo_timer_running = 1;
 8011dce:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8011dd2:	f043 0310 	orr.w	r3, r3, #16
 8011dd6:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
 8011dda:	b004      	add	sp, #16
 8011ddc:	bd70      	pop	{r4, r5, r6, pc}
    if (f->state == PPP_FSM_OPENED) {
 8011dde:	7c03      	ldrb	r3, [r0, #16]
 8011de0:	2b09      	cmp	r3, #9
 8011de2:	d003      	beq.n	8011dec <LcpEchoCheck+0x64>
            pcb->lcp_echos_pending = 0;
 8011de4:	2300      	movs	r3, #0
 8011de6:	f885 30d6 	strb.w	r3, [r5, #214]	; 0xd6
 8011dea:	e7d7      	b.n	8011d9c <LcpEchoCheck+0x14>
	ppp_info("No response to %d echo-requests", pcb->lcp_echos_pending);
 8011dec:	4818      	ldr	r0, [pc, #96]	; (8011e50 <LcpEchoCheck+0xc8>)
 8011dee:	f001 fd3a 	bl	8013866 <ppp_info>
        ppp_notice("Serial link appears to be disconnected.");
 8011df2:	4818      	ldr	r0, [pc, #96]	; (8011e54 <LcpEchoCheck+0xcc>)
 8011df4:	f001 fd28 	bl	8013848 <ppp_notice>
	pcb->err_code = PPPERR_PEERDEAD;
 8011df8:	2309      	movs	r3, #9
 8011dfa:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	lcp_close(pcb, "Peer not responding");
 8011dfe:	4916      	ldr	r1, [pc, #88]	; (8011e58 <LcpEchoCheck+0xd0>)
 8011e00:	4628      	mov	r0, r5
 8011e02:	f7ff ff8d 	bl	8011d20 <lcp_close>
 8011e06:	e7ed      	b.n	8011de4 <LcpEchoCheck+0x5c>
        lcp_magic = go->magicnumber;
 8011e08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
	PUTLONG(lcp_magic, pktp);
 8011e0a:	0e1a      	lsrs	r2, r3, #24
 8011e0c:	f88d 200c 	strb.w	r2, [sp, #12]
 8011e10:	0c1a      	lsrs	r2, r3, #16
 8011e12:	f88d 200d 	strb.w	r2, [sp, #13]
 8011e16:	0a1a      	lsrs	r2, r3, #8
 8011e18:	f88d 200e 	strb.w	r2, [sp, #14]
 8011e1c:	f88d 300f 	strb.w	r3, [sp, #15]
        fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
 8011e20:	f895 20d7 	ldrb.w	r2, [r5, #215]	; 0xd7
 8011e24:	1c53      	adds	r3, r2, #1
 8011e26:	f885 30d7 	strb.w	r3, [r5, #215]	; 0xd7
 8011e2a:	2304      	movs	r3, #4
 8011e2c:	9300      	str	r3, [sp, #0]
 8011e2e:	ab03      	add	r3, sp, #12
 8011e30:	2109      	movs	r1, #9
 8011e32:	4620      	mov	r0, r4
 8011e34:	f7fd fa32 	bl	800f29c <fsm_sdata>
	++pcb->lcp_echos_pending;
 8011e38:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	f885 30d6 	strb.w	r3, [r5, #214]	; 0xd6
 8011e42:	e7ae      	b.n	8011da2 <LcpEchoCheck+0x1a>
	ppp_warn("assertion lcp_echo_timer_running==0 failed");
 8011e44:	4805      	ldr	r0, [pc, #20]	; (8011e5c <LcpEchoCheck+0xd4>)
 8011e46:	f001 fcf0 	bl	801382a <ppp_warn>
 8011e4a:	e7b2      	b.n	8011db2 <LcpEchoCheck+0x2a>
 8011e4c:	08011e61 	.word	0x08011e61
 8011e50:	0801968c 	.word	0x0801968c
 8011e54:	080196ac 	.word	0x080196ac
 8011e58:	080196d4 	.word	0x080196d4
 8011e5c:	080196e8 	.word	0x080196e8

08011e60 <LcpEchoTimeout>:
static void LcpEchoTimeout(void *arg) {
 8011e60:	b508      	push	{r3, lr}
    ppp_pcb *pcb = f->pcb;
 8011e62:	6803      	ldr	r3, [r0, #0]
    if (pcb->lcp_echo_timer_running != 0) {
 8011e64:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8011e68:	f012 0f10 	tst.w	r2, #16
 8011e6c:	d100      	bne.n	8011e70 <LcpEchoTimeout+0x10>
}
 8011e6e:	bd08      	pop	{r3, pc}
        pcb->lcp_echo_timer_running = 0;
 8011e70:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8011e74:	f36f 1204 	bfc	r2, #4, #1
 8011e78:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        LcpEchoCheck ((fsm *) arg);
 8011e7c:	f7ff ff84 	bl	8011d88 <LcpEchoCheck>
}
 8011e80:	e7f5      	b.n	8011e6e <LcpEchoTimeout+0xe>

08011e82 <lcp_up>:
static void lcp_up(fsm *f) {
 8011e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e84:	b083      	sub	sp, #12
 8011e86:	4605      	mov	r5, r0
    ppp_pcb *pcb = f->pcb;
 8011e88:	6804      	ldr	r4, [r0, #0]
    if (!go->neg_magicnumber)
 8011e8a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8011e8e:	f013 0f10 	tst.w	r3, #16
	go->magicnumber = 0;
 8011e92:	bf04      	itt	eq
 8011e94:	2200      	moveq	r2, #0
 8011e96:	6722      	streq	r2, [r4, #112]	; 0x70
    if (!ho->neg_magicnumber)
 8011e98:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
 8011e9c:	f012 0f10 	tst.w	r2, #16
	ho->magicnumber = 0;
 8011ea0:	bf04      	itt	eq
 8011ea2:	2100      	moveq	r1, #0
 8011ea4:	f8c4 10b8 	streq.w	r1, [r4, #184]	; 0xb8
    mtu = ho->neg_mru? ho->mru: PPP_MRU;
 8011ea8:	f012 0f04 	tst.w	r2, #4
 8011eac:	bf14      	ite	ne
 8011eae:	f8b4 70b2 	ldrhne.w	r7, [r4, #178]	; 0xb2
 8011eb2:	f240 57dc 	movweq	r7, #1500	; 0x5dc
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_MRU;
 8011eb6:	f013 0f04 	tst.w	r3, #4
 8011eba:	d030      	beq.n	8011f1e <lcp_up+0x9c>
 8011ebc:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 8011ec0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8011ec4:	429e      	cmp	r6, r3
 8011ec6:	bf38      	it	cc
 8011ec8:	461e      	movcc	r6, r3
	netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
 8011eca:	f8b4 108e 	ldrh.w	r1, [r4, #142]	; 0x8e
 8011ece:	42b9      	cmp	r1, r7
 8011ed0:	bfa8      	it	ge
 8011ed2:	4639      	movge	r1, r7
 8011ed4:	42b1      	cmp	r1, r6
 8011ed6:	bfa8      	it	ge
 8011ed8:	4631      	movge	r1, r6
 8011eda:	4620      	mov	r0, r4
 8011edc:	f000 fdc5 	bl	8012a6a <netif_set_mtu>
		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 8011ee0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    ppp_send_config(pcb, mtu,
 8011ee4:	f013 0f08 	tst.w	r3, #8
 8011ee8:	bf14      	ite	ne
 8011eea:	f8d4 20b4 	ldrne.w	r2, [r4, #180]	; 0xb4
 8011eee:	f04f 32ff 	moveq.w	r2, #4294967295
		    ho->neg_pcompression, ho->neg_accompression);
 8011ef2:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    ppp_send_config(pcb, mtu,
 8011ef6:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8011efa:	9100      	str	r1, [sp, #0]
 8011efc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011f00:	4639      	mov	r1, r7
 8011f02:	4620      	mov	r0, r4
 8011f04:	f000 fd1a 	bl	801293c <ppp_send_config>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011f08:	7823      	ldrb	r3, [r4, #0]
    ppp_recv_config(pcb, mru,
 8011f0a:	f013 0f08 	tst.w	r3, #8
 8011f0e:	d109      	bne.n	8011f24 <lcp_up+0xa2>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011f10:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8011f14:	f013 0f08 	tst.w	r3, #8
 8011f18:	d02c      	beq.n	8011f74 <lcp_up+0xf2>
 8011f1a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011f1c:	e003      	b.n	8011f26 <lcp_up+0xa4>
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_MRU;
 8011f1e:	f240 56dc 	movw	r6, #1500	; 0x5dc
 8011f22:	e7d2      	b.n	8011eca <lcp_up+0x48>
    ppp_recv_config(pcb, mru,
 8011f24:	2200      	movs	r2, #0
		    go->neg_pcompression, go->neg_accompression);
 8011f26:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    ppp_recv_config(pcb, mru,
 8011f2a:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8011f2e:	9100      	str	r1, [sp, #0]
 8011f30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011f34:	4631      	mov	r1, r6
 8011f36:	4620      	mov	r0, r4
 8011f38:	f000 fd0c 	bl	8012954 <ppp_recv_config>
    if (ho->neg_mru)
 8011f3c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8011f40:	f013 0f04 	tst.w	r3, #4
	pcb->peer_mru = ho->mru;
 8011f44:	bf1c      	itt	ne
 8011f46:	f8b4 30b2 	ldrhne.w	r3, [r4, #178]	; 0xb2
 8011f4a:	f8a4 30d4 	strhne.w	r3, [r4, #212]	; 0xd4
    lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
 8011f4e:	6828      	ldr	r0, [r5, #0]
    pcb->lcp_echos_pending      = 0;
 8011f50:	2300      	movs	r3, #0
 8011f52:	f880 30d6 	strb.w	r3, [r0, #214]	; 0xd6
    pcb->lcp_echo_number        = 0;
 8011f56:	f880 30d7 	strb.w	r3, [r0, #215]	; 0xd7
    pcb->lcp_echo_timer_running = 0;
 8011f5a:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8011f5e:	f363 1204 	bfi	r2, r3, #4, #1
 8011f62:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    if (pcb->settings.lcp_echo_interval != 0)
 8011f66:	7a43      	ldrb	r3, [r0, #9]
 8011f68:	b93b      	cbnz	r3, 8011f7a <lcp_up+0xf8>
    link_established(pcb);
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	f7fd f84c 	bl	800f008 <link_established>
}
 8011f70:	b003      	add	sp, #12
 8011f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011f74:	f04f 32ff 	mov.w	r2, #4294967295
 8011f78:	e7d5      	b.n	8011f26 <lcp_up+0xa4>
        LcpEchoCheck (f);
 8011f7a:	3028      	adds	r0, #40	; 0x28
 8011f7c:	f7ff ff04 	bl	8011d88 <LcpEchoCheck>
 8011f80:	e7f3      	b.n	8011f6a <lcp_up+0xe8>
	...

08011f84 <lcp_nakci>:
static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 8011f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f88:	b0a3      	sub	sp, #140	; 0x8c
 8011f8a:	9008      	str	r0, [sp, #32]
 8011f8c:	460d      	mov	r5, r1
 8011f8e:	4614      	mov	r4, r2
    ppp_pcb *pcb = f->pcb;
 8011f90:	6806      	ldr	r6, [r0, #0]
    BZERO(&no, sizeof(no));
 8011f92:	2224      	movs	r2, #36	; 0x24
 8011f94:	2100      	movs	r1, #0
 8011f96:	a819      	add	r0, sp, #100	; 0x64
 8011f98:	f002 fa22 	bl	80143e0 <memset>
    try_ = *go;
 8011f9c:	af10      	add	r7, sp, #64	; 0x40
 8011f9e:	f106 0c68 	add.w	ip, r6, #104	; 0x68
 8011fa2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fa6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011fa8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011fae:	f8dc 3000 	ldr.w	r3, [ip]
 8011fb2:	603b      	str	r3, [r7, #0]
 8011fb4:	f896 2068 	ldrb.w	r2, [r6, #104]	; 0x68
 8011fb8:	f3c2 0a80 	ubfx	sl, r2, #2, #1
 8011fbc:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8011fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8011fc2:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8011fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8011fc8:	09d3      	lsrs	r3, r2, #7
 8011fca:	930c      	str	r3, [sp, #48]	; 0x30
 8011fcc:	f896 3069 	ldrb.w	r3, [r6, #105]	; 0x69
 8011fd0:	f003 0101 	and.w	r1, r3, #1
 8011fd4:	9101      	str	r1, [sp, #4]
 8011fd6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fdc:	f8b6 906a 	ldrh.w	r9, [r6, #106]	; 0x6a
 8011fe0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8011fe2:	9307      	str	r3, [sp, #28]
 8011fe4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8011fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8011fe8:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 8011fec:	930f      	str	r3, [sp, #60]	; 0x3c
    if (go->neg_mru && go->mru != PPP_DEFMRU) {
 8011fee:	4611      	mov	r1, r2
 8011ff0:	f012 0f04 	tst.w	r2, #4
 8011ff4:	d008      	beq.n	8012008 <lcp_nakci+0x84>
 8011ff6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8011ffa:	4599      	cmp	r9, r3
 8011ffc:	d004      	beq.n	8012008 <lcp_nakci+0x84>
	NAKCISHORT(CI_MRU, neg_mru,
 8011ffe:	2c03      	cmp	r4, #3
 8012000:	dd02      	ble.n	8012008 <lcp_nakci+0x84>
 8012002:	786b      	ldrb	r3, [r5, #1]
 8012004:	2b04      	cmp	r3, #4
 8012006:	d023      	beq.n	8012050 <lcp_nakci+0xcc>
    if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
 8012008:	f012 0f08 	tst.w	r2, #8
 801200c:	d055      	beq.n	80120ba <lcp_nakci+0x136>
 801200e:	9b07      	ldr	r3, [sp, #28]
 8012010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012014:	d051      	beq.n	80120ba <lcp_nakci+0x136>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 8012016:	2c05      	cmp	r4, #5
 8012018:	dd4f      	ble.n	80120ba <lcp_nakci+0x136>
 801201a:	786b      	ldrb	r3, [r5, #1]
 801201c:	2b06      	cmp	r3, #6
 801201e:	d034      	beq.n	801208a <lcp_nakci+0x106>
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 8012020:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012024:	f040 8087 	bne.w	8012136 <lcp_nakci+0x1b2>
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 8012028:	f012 0f10 	tst.w	r2, #16
 801202c:	f000 821e 	beq.w	801246c <lcp_nakci+0x4e8>
 8012030:	786b      	ldrb	r3, [r5, #1]
 8012032:	2b06      	cmp	r3, #6
 8012034:	f000 8096 	beq.w	8012164 <lcp_nakci+0x1e0>
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8012038:	f012 0020 	ands.w	r0, r2, #32
 801203c:	f040 80a4 	bne.w	8012188 <lcp_nakci+0x204>
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8012040:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8012044:	f040 8102 	bne.w	801224c <lcp_nakci+0x2c8>
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8012048:	4610      	mov	r0, r2
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 801204a:	2300      	movs	r3, #0
 801204c:	930e      	str	r3, [sp, #56]	; 0x38
 801204e:	e0a3      	b.n	8012198 <lcp_nakci+0x214>
	NAKCISHORT(CI_MRU, neg_mru,
 8012050:	782b      	ldrb	r3, [r5, #0]
 8012052:	2b01      	cmp	r3, #1
 8012054:	d1d8      	bne.n	8012008 <lcp_nakci+0x84>
 8012056:	3c04      	subs	r4, #4
 8012058:	78a8      	ldrb	r0, [r5, #2]
 801205a:	1d2f      	adds	r7, r5, #4
 801205c:	78eb      	ldrb	r3, [r5, #3]
 801205e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8012062:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8012066:	f040 0004 	orr.w	r0, r0, #4
 801206a:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
 801206e:	f8b6 0046 	ldrh.w	r0, [r6, #70]	; 0x46
 8012072:	4298      	cmp	r0, r3
 8012074:	d206      	bcs.n	8012084 <lcp_nakci+0x100>
 8012076:	f240 50dc 	movw	r0, #1500	; 0x5dc
 801207a:	4283      	cmp	r3, r0
 801207c:	bf98      	it	ls
 801207e:	4699      	movls	r9, r3
 8012080:	463d      	mov	r5, r7
 8012082:	e7c1      	b.n	8012008 <lcp_nakci+0x84>
 8012084:	4699      	mov	r9, r3
 8012086:	463d      	mov	r5, r7
 8012088:	e7be      	b.n	8012008 <lcp_nakci+0x84>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 801208a:	782b      	ldrb	r3, [r5, #0]
 801208c:	2b02      	cmp	r3, #2
 801208e:	d1c7      	bne.n	8012020 <lcp_nakci+0x9c>
 8012090:	3c06      	subs	r4, #6
 8012092:	78a8      	ldrb	r0, [r5, #2]
 8012094:	78eb      	ldrb	r3, [r5, #3]
 8012096:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801209a:	7928      	ldrb	r0, [r5, #4]
 801209c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80120a0:	796b      	ldrb	r3, [r5, #5]
 80120a2:	9f07      	ldr	r7, [sp, #28]
 80120a4:	433b      	orrs	r3, r7
 80120a6:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 80120aa:	f047 0708 	orr.w	r7, r7, #8
 80120ae:	f88d 7064 	strb.w	r7, [sp, #100]	; 0x64
 80120b2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80120b6:	9307      	str	r3, [sp, #28]
 80120b8:	3506      	adds	r5, #6
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 80120ba:	f012 0f80 	tst.w	r2, #128	; 0x80
 80120be:	d138      	bne.n	8012132 <lcp_nakci+0x1ae>
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 80120c0:	f012 0f10 	tst.w	r2, #16
 80120c4:	d148      	bne.n	8012158 <lcp_nakci+0x1d4>
    int looped_back = 0;
 80120c6:	2300      	movs	r3, #0
 80120c8:	930e      	str	r3, [sp, #56]	; 0x38
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 80120ca:	f896 1068 	ldrb.w	r1, [r6, #104]	; 0x68
 80120ce:	f011 0020 	ands.w	r0, r1, #32
 80120d2:	d001      	beq.n	80120d8 <lcp_nakci+0x154>
 80120d4:	2c01      	cmp	r4, #1
 80120d6:	dc59      	bgt.n	801218c <lcp_nakci+0x208>
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 80120d8:	f011 0240 	ands.w	r2, r1, #64	; 0x40
 80120dc:	d05c      	beq.n	8012198 <lcp_nakci+0x214>
 80120de:	2c01      	cmp	r4, #1
 80120e0:	f300 80b6 	bgt.w	8012250 <lcp_nakci+0x2cc>
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 80120e4:	f896 7069 	ldrb.w	r7, [r6, #105]	; 0x69
 80120e8:	f017 0c01 	ands.w	ip, r7, #1
 80120ec:	d059      	beq.n	80121a2 <lcp_nakci+0x21e>
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 80120ee:	f017 0802 	ands.w	r8, r7, #2
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 80120f2:	bf18      	it	ne
 80120f4:	f04f 0c01 	movne.w	ip, #1
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 80120f8:	d156      	bne.n	80121a8 <lcp_nakci+0x224>
    if (f->state != PPP_FSM_OPENED) {
 80120fa:	9b08      	ldr	r3, [sp, #32]
 80120fc:	7c1b      	ldrb	r3, [r3, #16]
 80120fe:	2b09      	cmp	r3, #9
 8012100:	f000 81b2 	beq.w	8012468 <lcp_nakci+0x4e4>
	if (looped_back) {
 8012104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012106:	2b00      	cmp	r3, #0
 8012108:	f000 8166 	beq.w	80123d8 <lcp_nakci+0x454>
	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
 801210c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801210e:	3401      	adds	r4, #1
 8012110:	b2e4      	uxtb	r4, r4
 8012112:	7a33      	ldrb	r3, [r6, #8]
 8012114:	42a3      	cmp	r3, r4
 8012116:	f200 8160 	bhi.w	80123da <lcp_nakci+0x456>
		ppp_notice("Serial line is looped back.");
 801211a:	48ad      	ldr	r0, [pc, #692]	; (80123d0 <lcp_nakci+0x44c>)
 801211c:	f001 fb94 	bl	8013848 <ppp_notice>
		pcb->err_code = PPPERR_LOOPBACK;
 8012120:	230c      	movs	r3, #12
 8012122:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
		lcp_close(f->pcb, "Loopback detected");
 8012126:	49ab      	ldr	r1, [pc, #684]	; (80123d4 <lcp_nakci+0x450>)
 8012128:	9b08      	ldr	r3, [sp, #32]
 801212a:	6818      	ldr	r0, [r3, #0]
 801212c:	f7ff fdf8 	bl	8011d20 <lcp_close>
 8012130:	e153      	b.n	80123da <lcp_nakci+0x456>
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 8012132:	2c02      	cmp	r4, #2
 8012134:	ddc4      	ble.n	80120c0 <lcp_nakci+0x13c>
 8012136:	786b      	ldrb	r3, [r5, #1]
 8012138:	2b03      	cmp	r3, #3
 801213a:	d1c1      	bne.n	80120c0 <lcp_nakci+0x13c>
 801213c:	782b      	ldrb	r3, [r5, #0]
 801213e:	2b0d      	cmp	r3, #13
 8012140:	d1be      	bne.n	80120c0 <lcp_nakci+0x13c>
 8012142:	3c03      	subs	r4, #3
 8012144:	3503      	adds	r5, #3
 8012146:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801214a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801214e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012152:	2300      	movs	r3, #0
 8012154:	930c      	str	r3, [sp, #48]	; 0x30
 8012156:	e7b3      	b.n	80120c0 <lcp_nakci+0x13c>
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 8012158:	2c05      	cmp	r4, #5
 801215a:	f73f af69 	bgt.w	8012030 <lcp_nakci+0xac>
    int looped_back = 0;
 801215e:	2300      	movs	r3, #0
 8012160:	930e      	str	r3, [sp, #56]	; 0x38
 8012162:	e7b2      	b.n	80120ca <lcp_nakci+0x146>
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 8012164:	782b      	ldrb	r3, [r5, #0]
 8012166:	2b05      	cmp	r3, #5
 8012168:	f47f af66 	bne.w	8012038 <lcp_nakci+0xb4>
 801216c:	3c06      	subs	r4, #6
 801216e:	3506      	adds	r5, #6
 8012170:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8012174:	f043 0310 	orr.w	r3, r3, #16
 8012178:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 801217c:	f000 f9b8 	bl	80124f0 <magic>
 8012180:	900d      	str	r0, [sp, #52]	; 0x34
 8012182:	2301      	movs	r3, #1
 8012184:	930e      	str	r3, [sp, #56]	; 0x38
 8012186:	e7a0      	b.n	80120ca <lcp_nakci+0x146>
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8012188:	2300      	movs	r3, #0
 801218a:	930e      	str	r3, [sp, #56]	; 0x38
 801218c:	786b      	ldrb	r3, [r5, #1]
 801218e:	2b02      	cmp	r3, #2
 8012190:	d033      	beq.n	80121fa <lcp_nakci+0x276>
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8012192:	f011 0240 	ands.w	r2, r1, #64	; 0x40
 8012196:	d15b      	bne.n	8012250 <lcp_nakci+0x2cc>
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 8012198:	f896 7069 	ldrb.w	r7, [r6, #105]	; 0x69
 801219c:	f017 0c01 	ands.w	ip, r7, #1
 80121a0:	d16a      	bne.n	8012278 <lcp_nakci+0x2f4>
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 80121a2:	f017 0802 	ands.w	r8, r7, #2
 80121a6:	d175      	bne.n	8012294 <lcp_nakci+0x310>
    while (len >= CILEN_VOID) {
 80121a8:	2c01      	cmp	r4, #1
 80121aa:	dda6      	ble.n	80120fa <lcp_nakci+0x176>
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 80121ac:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 80121b0:	f003 0e01 	and.w	lr, r3, #1
 80121b4:	ea4c 070e 	orr.w	r7, ip, lr
 80121b8:	9705      	str	r7, [sp, #20]
	    if (go->neg_accompression || no.neg_accompression
 80121ba:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80121be:	f00c 0e40 	and.w	lr, ip, #64	; 0x40
 80121c2:	ea42 020e 	orr.w	r2, r2, lr
 80121c6:	9206      	str	r2, [sp, #24]
	    if (go->neg_pcompression || no.neg_pcompression
 80121c8:	f00c 0220 	and.w	r2, ip, #32
 80121cc:	4302      	orrs	r2, r0
 80121ce:	9204      	str	r2, [sp, #16]
 80121d0:	ea4c 0e01 	orr.w	lr, ip, r1
 80121d4:	f00e 0e10 	and.w	lr, lr, #16
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 80121d8:	f00c 0208 	and.w	r2, ip, #8
 80121dc:	9203      	str	r2, [sp, #12]
		|| no.neg_mru || cilen != CILEN_SHORT)
 80121de:	f00c 0c04 	and.w	ip, ip, #4
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 80121e2:	f003 0302 	and.w	r3, r3, #2
 80121e6:	ea48 0703 	orr.w	r7, r8, r3
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 80121ea:	f001 0308 	and.w	r3, r1, #8
 80121ee:	9302      	str	r3, [sp, #8]
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 80121f0:	f001 0104 	and.w	r1, r1, #4
	    if (cishort < PPP_DEFMRU) {
 80121f4:	f240 58db 	movw	r8, #1499	; 0x5db
 80121f8:	e07f      	b.n	80122fa <lcp_nakci+0x376>
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 80121fa:	782b      	ldrb	r3, [r5, #0]
 80121fc:	2b07      	cmp	r3, #7
 80121fe:	d01a      	beq.n	8012236 <lcp_nakci+0x2b2>
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8012200:	f011 0240 	ands.w	r2, r1, #64	; 0x40
 8012204:	d0c8      	beq.n	8012198 <lcp_nakci+0x214>
 8012206:	782b      	ldrb	r3, [r5, #0]
 8012208:	2b08      	cmp	r3, #8
 801220a:	d02a      	beq.n	8012262 <lcp_nakci+0x2de>
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 801220c:	f896 7069 	ldrb.w	r7, [r6, #105]	; 0x69
 8012210:	f017 0c01 	ands.w	ip, r7, #1
 8012214:	d0c5      	beq.n	80121a2 <lcp_nakci+0x21e>
 8012216:	782b      	ldrb	r3, [r5, #0]
 8012218:	2b12      	cmp	r3, #18
 801221a:	d133      	bne.n	8012284 <lcp_nakci+0x300>
 801221c:	3c02      	subs	r4, #2
 801221e:	3502      	adds	r5, #2
 8012220:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 8012224:	f043 0301 	orr.w	r3, r3, #1
 8012228:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 801222c:	f04f 0c01 	mov.w	ip, #1
 8012230:	2300      	movs	r3, #0
 8012232:	9301      	str	r3, [sp, #4]
 8012234:	e7b5      	b.n	80121a2 <lcp_nakci+0x21e>
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8012236:	3c02      	subs	r4, #2
 8012238:	3502      	adds	r5, #2
 801223a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801223e:	f043 0320 	orr.w	r3, r3, #32
 8012242:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012246:	2300      	movs	r3, #0
 8012248:	9309      	str	r3, [sp, #36]	; 0x24
 801224a:	e745      	b.n	80120d8 <lcp_nakci+0x154>
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 801224c:	2300      	movs	r3, #0
 801224e:	930e      	str	r3, [sp, #56]	; 0x38
 8012250:	786b      	ldrb	r3, [r5, #1]
 8012252:	2b02      	cmp	r3, #2
 8012254:	d0d7      	beq.n	8012206 <lcp_nakci+0x282>
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 8012256:	f896 7069 	ldrb.w	r7, [r6, #105]	; 0x69
 801225a:	f017 0c01 	ands.w	ip, r7, #1
 801225e:	d111      	bne.n	8012284 <lcp_nakci+0x300>
 8012260:	e79f      	b.n	80121a2 <lcp_nakci+0x21e>
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8012262:	3c02      	subs	r4, #2
 8012264:	3502      	adds	r5, #2
 8012266:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801226a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801226e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012272:	2300      	movs	r3, #0
 8012274:	930a      	str	r3, [sp, #40]	; 0x28
 8012276:	e78f      	b.n	8012198 <lcp_nakci+0x214>
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 8012278:	2c01      	cmp	r4, #1
 801227a:	f77f af38 	ble.w	80120ee <lcp_nakci+0x16a>
 801227e:	786b      	ldrb	r3, [r5, #1]
 8012280:	2b02      	cmp	r3, #2
 8012282:	d0c8      	beq.n	8012216 <lcp_nakci+0x292>
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 8012284:	f017 0802 	ands.w	r8, r7, #2
 8012288:	d102      	bne.n	8012290 <lcp_nakci+0x30c>
 801228a:	f04f 0c01 	mov.w	ip, #1
 801228e:	e78d      	b.n	80121ac <lcp_nakci+0x228>
 8012290:	f04f 0c01 	mov.w	ip, #1
 8012294:	2c02      	cmp	r4, #2
 8012296:	dd87      	ble.n	80121a8 <lcp_nakci+0x224>
 8012298:	782b      	ldrb	r3, [r5, #0]
 801229a:	2b13      	cmp	r3, #19
 801229c:	d186      	bne.n	80121ac <lcp_nakci+0x228>
 801229e:	786b      	ldrb	r3, [r5, #1]
 80122a0:	2b02      	cmp	r3, #2
 80122a2:	d983      	bls.n	80121ac <lcp_nakci+0x228>
 80122a4:	42a3      	cmp	r3, r4
 80122a6:	dc81      	bgt.n	80121ac <lcp_nakci+0x228>
 80122a8:	1ae4      	subs	r4, r4, r3
 80122aa:	441d      	add	r5, r3
 80122ac:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 80122b0:	f043 0302 	orr.w	r3, r3, #2
 80122b4:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 80122b8:	2300      	movs	r3, #0
 80122ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80122bc:	e774      	b.n	80121a8 <lcp_nakci+0x224>
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 80122be:	b131      	cbz	r1, 80122ce <lcp_nakci+0x34a>
 80122c0:	f8b6 206a 	ldrh.w	r2, [r6, #106]	; 0x6a
 80122c4:	f240 5bdc 	movw	fp, #1500	; 0x5dc
 80122c8:	455a      	cmp	r2, fp
 80122ca:	f040 80b7 	bne.w	801243c <lcp_nakci+0x4b8>
		|| no.neg_mru || cilen != CILEN_SHORT)
 80122ce:	f1bc 0f00 	cmp.w	ip, #0
 80122d2:	f040 80b5 	bne.w	8012440 <lcp_nakci+0x4bc>
 80122d6:	2b04      	cmp	r3, #4
 80122d8:	f040 80b4 	bne.w	8012444 <lcp_nakci+0x4c0>
	    GETSHORT(cishort, p);
 80122dc:	78ab      	ldrb	r3, [r5, #2]
 80122de:	78ea      	ldrb	r2, [r5, #3]
 80122e0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		try_.mru = cishort;
 80122e4:	4543      	cmp	r3, r8
 80122e6:	bf98      	it	ls
 80122e8:	4699      	movls	r9, r3
 80122ea:	4543      	cmp	r3, r8
 80122ec:	bf98      	it	ls
 80122ee:	f04f 0a01 	movls.w	sl, #1
    while (len >= CILEN_VOID) {
 80122f2:	2c01      	cmp	r4, #1
 80122f4:	f77f af01 	ble.w	80120fa <lcp_nakci+0x176>
 80122f8:	4605      	mov	r5, r0
	GETCHAR(citype, p);
 80122fa:	4628      	mov	r0, r5
 80122fc:	f810 2b02 	ldrb.w	r2, [r0], #2
	GETCHAR(cilen, p);
 8012300:	786b      	ldrb	r3, [r5, #1]
	if (cilen < CILEN_VOID || (len -= cilen) < 0)
 8012302:	2b01      	cmp	r3, #1
 8012304:	f340 8094 	ble.w	8012430 <lcp_nakci+0x4ac>
 8012308:	1ae4      	subs	r4, r4, r3
 801230a:	f100 8095 	bmi.w	8012438 <lcp_nakci+0x4b4>
	next = p + cilen - 2;
 801230e:	f1a3 0b02 	sub.w	fp, r3, #2
 8012312:	4458      	add	r0, fp
	switch (citype) {
 8012314:	3a01      	subs	r2, #1
 8012316:	2a12      	cmp	r2, #18
 8012318:	d8eb      	bhi.n	80122f2 <lcp_nakci+0x36e>
 801231a:	f20f 0b08 	addw	fp, pc, #8
 801231e:	f85b f022 	ldr.w	pc, [fp, r2, lsl #2]
 8012322:	bf00      	nop
 8012324:	080122bf 	.word	0x080122bf
 8012328:	08012371 	.word	0x08012371
 801232c:	080122f3 	.word	0x080122f3
 8012330:	080122f3 	.word	0x080122f3
 8012334:	0801238b 	.word	0x0801238b
 8012338:	080122f3 	.word	0x080122f3
 801233c:	08012399 	.word	0x08012399
 8012340:	080123a7 	.word	0x080123a7
 8012344:	080122f3 	.word	0x080122f3
 8012348:	080122f3 	.word	0x080122f3
 801234c:	080122f3 	.word	0x080122f3
 8012350:	080122f3 	.word	0x080122f3
 8012354:	080122f3 	.word	0x080122f3
 8012358:	080122f3 	.word	0x080122f3
 801235c:	080122f3 	.word	0x080122f3
 8012360:	080122f3 	.word	0x080122f3
 8012364:	080122f3 	.word	0x080122f3
 8012368:	080123b5 	.word	0x080123b5
 801236c:	080123c5 	.word	0x080123c5
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 8012370:	9a02      	ldr	r2, [sp, #8]
 8012372:	b11a      	cbz	r2, 801237c <lcp_nakci+0x3f8>
 8012374:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 8012376:	f1b2 3fff 	cmp.w	r2, #4294967295
 801237a:	d165      	bne.n	8012448 <lcp_nakci+0x4c4>
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 801237c:	9a03      	ldr	r2, [sp, #12]
 801237e:	2a00      	cmp	r2, #0
 8012380:	d164      	bne.n	801244c <lcp_nakci+0x4c8>
 8012382:	2b06      	cmp	r3, #6
 8012384:	d0b5      	beq.n	80122f2 <lcp_nakci+0x36e>
    return 0;
 8012386:	2000      	movs	r0, #0
 8012388:	e053      	b.n	8012432 <lcp_nakci+0x4ae>
	    if (go->neg_magicnumber || no.neg_magicnumber ||
 801238a:	f1be 0f00 	cmp.w	lr, #0
 801238e:	d15f      	bne.n	8012450 <lcp_nakci+0x4cc>
 8012390:	2b06      	cmp	r3, #6
 8012392:	d0ae      	beq.n	80122f2 <lcp_nakci+0x36e>
    return 0;
 8012394:	2000      	movs	r0, #0
 8012396:	e04c      	b.n	8012432 <lcp_nakci+0x4ae>
	    if (go->neg_pcompression || no.neg_pcompression
 8012398:	9a04      	ldr	r2, [sp, #16]
 801239a:	2a00      	cmp	r2, #0
 801239c:	d15a      	bne.n	8012454 <lcp_nakci+0x4d0>
		|| cilen != CILEN_VOID)
 801239e:	2b02      	cmp	r3, #2
 80123a0:	d0a7      	beq.n	80122f2 <lcp_nakci+0x36e>
    return 0;
 80123a2:	2000      	movs	r0, #0
 80123a4:	e045      	b.n	8012432 <lcp_nakci+0x4ae>
	    if (go->neg_accompression || no.neg_accompression
 80123a6:	9a06      	ldr	r2, [sp, #24]
 80123a8:	2a00      	cmp	r2, #0
 80123aa:	d155      	bne.n	8012458 <lcp_nakci+0x4d4>
		|| cilen != CILEN_VOID)
 80123ac:	2b02      	cmp	r3, #2
 80123ae:	d0a0      	beq.n	80122f2 <lcp_nakci+0x36e>
    return 0;
 80123b0:	2000      	movs	r0, #0
 80123b2:	e03e      	b.n	8012432 <lcp_nakci+0x4ae>
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 80123b4:	9a05      	ldr	r2, [sp, #20]
 80123b6:	2a00      	cmp	r2, #0
 80123b8:	d150      	bne.n	801245c <lcp_nakci+0x4d8>
 80123ba:	2b02      	cmp	r3, #2
 80123bc:	d150      	bne.n	8012460 <lcp_nakci+0x4dc>
	    try_.neg_ssnhf = 1;
 80123be:	2301      	movs	r3, #1
 80123c0:	9301      	str	r3, [sp, #4]
 80123c2:	e796      	b.n	80122f2 <lcp_nakci+0x36e>
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 80123c4:	2f00      	cmp	r7, #0
 80123c6:	d14d      	bne.n	8012464 <lcp_nakci+0x4e0>
 80123c8:	2b02      	cmp	r3, #2
 80123ca:	dc92      	bgt.n	80122f2 <lcp_nakci+0x36e>
    return 0;
 80123cc:	2000      	movs	r0, #0
 80123ce:	e030      	b.n	8012432 <lcp_nakci+0x4ae>
 80123d0:	08019714 	.word	0x08019714
 80123d4:	08019730 	.word	0x08019730
	    try_.numloops = 0;
 80123d8:	2400      	movs	r4, #0
	*go = try_;
 80123da:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80123de:	f36a 0382 	bfi	r3, sl, #2, #1
 80123e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123e4:	f362 1345 	bfi	r3, r2, #5, #1
 80123e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123ea:	f362 1386 	bfi	r3, r2, #6, #1
 80123ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123f0:	f362 13c7 	bfi	r3, r2, #7, #1
 80123f4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80123f8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80123fc:	9a01      	ldr	r2, [sp, #4]
 80123fe:	f362 0300 	bfi	r3, r2, #0, #1
 8012402:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012404:	f362 0341 	bfi	r3, r2, #1, #1
 8012408:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 801240c:	f8ad 9042 	strh.w	r9, [sp, #66]	; 0x42
 8012410:	9b07      	ldr	r3, [sp, #28]
 8012412:	9311      	str	r3, [sp, #68]	; 0x44
 8012414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012416:	9312      	str	r3, [sp, #72]	; 0x48
 8012418:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
 801241c:	3668      	adds	r6, #104	; 0x68
 801241e:	ac10      	add	r4, sp, #64	; 0x40
 8012420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012422:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012426:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012428:	6823      	ldr	r3, [r4, #0]
 801242a:	6033      	str	r3, [r6, #0]
    return 1;
 801242c:	2001      	movs	r0, #1
 801242e:	e000      	b.n	8012432 <lcp_nakci+0x4ae>
    return 0;
 8012430:	2000      	movs	r0, #0
}
 8012432:	b023      	add	sp, #140	; 0x8c
 8012434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
 8012438:	2000      	movs	r0, #0
 801243a:	e7fa      	b.n	8012432 <lcp_nakci+0x4ae>
 801243c:	2000      	movs	r0, #0
 801243e:	e7f8      	b.n	8012432 <lcp_nakci+0x4ae>
 8012440:	2000      	movs	r0, #0
 8012442:	e7f6      	b.n	8012432 <lcp_nakci+0x4ae>
 8012444:	2000      	movs	r0, #0
 8012446:	e7f4      	b.n	8012432 <lcp_nakci+0x4ae>
 8012448:	2000      	movs	r0, #0
 801244a:	e7f2      	b.n	8012432 <lcp_nakci+0x4ae>
 801244c:	2000      	movs	r0, #0
 801244e:	e7f0      	b.n	8012432 <lcp_nakci+0x4ae>
 8012450:	2000      	movs	r0, #0
 8012452:	e7ee      	b.n	8012432 <lcp_nakci+0x4ae>
 8012454:	2000      	movs	r0, #0
 8012456:	e7ec      	b.n	8012432 <lcp_nakci+0x4ae>
 8012458:	2000      	movs	r0, #0
 801245a:	e7ea      	b.n	8012432 <lcp_nakci+0x4ae>
 801245c:	2000      	movs	r0, #0
 801245e:	e7e8      	b.n	8012432 <lcp_nakci+0x4ae>
 8012460:	2000      	movs	r0, #0
 8012462:	e7e6      	b.n	8012432 <lcp_nakci+0x4ae>
 8012464:	2000      	movs	r0, #0
 8012466:	e7e4      	b.n	8012432 <lcp_nakci+0x4ae>
    return 1;
 8012468:	2001      	movs	r0, #1
 801246a:	e7e2      	b.n	8012432 <lcp_nakci+0x4ae>
    int looped_back = 0;
 801246c:	2300      	movs	r3, #0
 801246e:	930e      	str	r3, [sp, #56]	; 0x38
 8012470:	e62b      	b.n	80120ca <lcp_nakci+0x146>
 8012472:	bf00      	nop

08012474 <lcp_lowerdown>:
void lcp_lowerdown(ppp_pcb *pcb) {
 8012474:	b508      	push	{r3, lr}
 8012476:	4603      	mov	r3, r0
    fsm *f = &pcb->lcp_fsm;
 8012478:	3028      	adds	r0, #40	; 0x28
    if (f->flags & DELAYED_UP) {
 801247a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801247e:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8012482:	2900      	cmp	r1, #0
 8012484:	db02      	blt.n	801248c <lcp_lowerdown+0x18>
	fsm_lowerdown(f);
 8012486:	f7fc fead 	bl	800f1e4 <fsm_lowerdown>
}
 801248a:	bd08      	pop	{r3, pc}
	f->flags &= ~DELAYED_UP;
 801248c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	UNTIMEOUT(lcp_delayed_up, f);
 8012494:	4601      	mov	r1, r0
 8012496:	4802      	ldr	r0, [pc, #8]	; (80124a0 <lcp_lowerdown+0x2c>)
 8012498:	f7fb fd16 	bl	800dec8 <sys_untimeout>
 801249c:	e7f5      	b.n	801248a <lcp_lowerdown+0x16>
 801249e:	bf00      	nop
 80124a0:	08011639 	.word	0x08011639

080124a4 <lcp_sprotrej>:
void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
 80124a4:	b510      	push	{r4, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	460b      	mov	r3, r1
 80124aa:	4611      	mov	r1, r2
    fsm_sdata(f, PROTREJ, ++f->id,
 80124ac:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80124b0:	3401      	adds	r4, #1
 80124b2:	b2e2      	uxtb	r2, r4
 80124b4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
 80124b8:	9100      	str	r1, [sp, #0]
 80124ba:	2108      	movs	r1, #8
 80124bc:	3028      	adds	r0, #40	; 0x28
 80124be:	f7fc feed 	bl	800f29c <fsm_sdata>
}
 80124c2:	b002      	add	sp, #8
 80124c4:	bd10      	pop	{r4, pc}
	...

080124c8 <magic_init>:
 * in startup(), then the idle counter and timer values may
 * repeat after each boot and the real time clock may not be
 * operational.  Thus we call it again on the first random
 * event.
 */
void magic_init(void) {
 80124c8:	b508      	push	{r3, lr}
  magic_randomseed += sys_jiffies();
 80124ca:	f001 ff2b 	bl	8014324 <sys_jiffies>
 80124ce:	4a02      	ldr	r2, [pc, #8]	; (80124d8 <magic_init+0x10>)
 80124d0:	6813      	ldr	r3, [r2, #0]
 80124d2:	4403      	add	r3, r0
 80124d4:	6013      	str	r3, [r2, #0]
#ifndef LWIP_RAND
  /* Initialize the Borland random number generator. */
  srand((unsigned)magic_randomseed);
#endif /* LWIP_RAND */
}
 80124d6:	bd08      	pop	{r3, pc}
 80124d8:	20000fdc 	.word	0x20000fdc

080124dc <magic_randomize>:
 * this function is called at *truely random* times by the polling
 * and network functions.  Here we only get 16 bits of new random
 * value but we use the previous value to randomize the other 16
 * bits.
 */
void magic_randomize(void) {
 80124dc:	b508      	push	{r3, lr}
    magic_randomized = !0;
    magic_init();
    /* The initialization function also updates the seed. */
  } else {
#endif /* LWIP_RAND */
    magic_randomseed += sys_jiffies();
 80124de:	f001 ff21 	bl	8014324 <sys_jiffies>
 80124e2:	4a02      	ldr	r2, [pc, #8]	; (80124ec <magic_randomize+0x10>)
 80124e4:	6813      	ldr	r3, [r2, #0]
 80124e6:	4403      	add	r3, r0
 80124e8:	6013      	str	r3, [r2, #0]
#ifndef LWIP_RAND
  }
#endif /* LWIP_RAND */
}
 80124ea:	bd08      	pop	{r3, pc}
 80124ec:	20000fdc 	.word	0x20000fdc

080124f0 <magic>:
 * seed which is randomized by truely random events.
 * Thus the numbers will be truely random unless there have been no
 * operator or network events in which case it will be pseudo random
 * seeded by the real time clock.
 */
u32_t magic(void) {
 80124f0:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  return LWIP_RAND() + magic_randomseed;
 80124f2:	f001 ff09 	bl	8014308 <sys_rand>
 80124f6:	4b02      	ldr	r3, [pc, #8]	; (8012500 <magic+0x10>)
 80124f8:	681b      	ldr	r3, [r3, #0]
#else /* LWIP_RAND */
  return ((u32_t)rand() << 16) + (u32_t)rand() + magic_randomseed;
#endif /* LWIP_RAND */
}
 80124fa:	4418      	add	r0, r3
 80124fc:	bd08      	pop	{r3, pc}
 80124fe:	bf00      	nop
 8012500:	20000fdc 	.word	0x20000fdc

08012504 <ppp_netif_init_cb>:

/*
 * ppp_netif_init_cb - netif init callback
 */
static err_t ppp_netif_init_cb(struct netif *netif) {
  netif->name[0] = 'p';
 8012504:	2370      	movs	r3, #112	; 0x70
 8012506:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  netif->name[1] = 'p';
 801250a:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
#if PPP_IPV4_SUPPORT
  netif->output = ppp_netif_output_ip4;
 801250e:	4b03      	ldr	r3, [pc, #12]	; (801251c <ppp_netif_init_cb+0x18>)
 8012510:	6143      	str	r3, [r0, #20]
#endif /* PPP_IPV4_SUPPORT */
#if PPP_IPV6_SUPPORT
  netif->output_ip6 = ppp_netif_output_ip6;
#endif /* PPP_IPV6_SUPPORT */
  netif->flags = NETIF_FLAG_UP;
 8012512:	2301      	movs	r3, #1
 8012514:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
#if LWIP_NETIF_HOSTNAME
  /* @todo: Initialize interface hostname */
  /* netif_set_hostname(netif, "lwip"); */
#endif /* LWIP_NETIF_HOSTNAME */
  return ERR_OK;
}
 8012518:	2000      	movs	r0, #0
 801251a:	4770      	bx	lr
 801251c:	08012521 	.word	0x08012521

08012520 <ppp_netif_output_ip4>:

#if PPP_IPV4_SUPPORT
/*
 * Send an IPv4 packet on the given connection.
 */
static err_t ppp_netif_output_ip4(struct netif *netif, struct pbuf *pb, const ip4_addr_t *ipaddr) {
 8012520:	b570      	push	{r4, r5, r6, lr}
 8012522:	b082      	sub	sp, #8
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IP);
 8012524:	9101      	str	r1, [sp, #4]
  return ppp_netif_output(netif, pb, PPP_IPV6);
}
#endif /* PPP_IPV6_SUPPORT */

static err_t ppp_netif_output(struct netif *netif, struct pbuf *pb, u16_t protocol) {
  ppp_pcb *pcb = (ppp_pcb*)netif->state;
 8012526:	6a44      	ldr	r4, [r0, #36]	; 0x24
  struct pbuf *fpb = NULL;

  /* Check that the link is up. */
  if (0
#if PPP_IPV4_SUPPORT
      || (protocol == PPP_IP && !pcb->if4_up)
 8012528:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801252c:	f013 0f08 	tst.w	r3, #8
 8012530:	d02c      	beq.n	801258c <ppp_netif_output_ip4+0x6c>
#if VJ_SUPPORT
  /*
   * Attempt Van Jacobson header compression if VJ is configured and
   * this is an IP packet.
   */
  if (protocol == PPP_IP && pcb->vj_enabled) {
 8012532:	f013 0f20 	tst.w	r3, #32
 8012536:	d108      	bne.n	801254a <ppp_netif_output_ip4+0x2a>
    PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: bad CCP transmit method\n", pcb->netif->num));
    goto err_rte_drop; /* Cannot really happen, we only negotiate what we are able to do */
  }
#endif /* CCP_SUPPORT */

  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 8012538:	68e3      	ldr	r3, [r4, #12]
 801253a:	691d      	ldr	r5, [r3, #16]
 801253c:	2321      	movs	r3, #33	; 0x21
 801253e:	460a      	mov	r2, r1
 8012540:	6921      	ldr	r1, [r4, #16]
 8012542:	4620      	mov	r0, r4
 8012544:	47a8      	blx	r5
 8012546:	4604      	mov	r4, r0
  err = ERR_RTE;
  LINK_STATS_INC(link.rterr);
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
err:
  if (fpb) {
 8012548:	e01a      	b.n	8012580 <ppp_netif_output_ip4+0x60>
    switch (vj_compress_tcp(&pcb->vj_comp, &pb)) {
 801254a:	a901      	add	r1, sp, #4
 801254c:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8012550:	f001 f9c4 	bl	80138dc <vj_compress_tcp>
 8012554:	2870      	cmp	r0, #112	; 0x70
 8012556:	d016      	beq.n	8012586 <ppp_netif_output_ip4+0x66>
 8012558:	2880      	cmp	r0, #128	; 0x80
 801255a:	d004      	beq.n	8012566 <ppp_netif_output_ip4+0x46>
 801255c:	2840      	cmp	r0, #64	; 0x40
 801255e:	d018      	beq.n	8012592 <ppp_netif_output_ip4+0x72>
 8012560:	f06f 0405 	mvn.w	r4, #5
 8012564:	e00c      	b.n	8012580 <ppp_netif_output_ip4+0x60>
        fpb = pb;
 8012566:	9d01      	ldr	r5, [sp, #4]
        protocol = PPP_VJC_COMP;
 8012568:	232d      	movs	r3, #45	; 0x2d
  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 801256a:	68e2      	ldr	r2, [r4, #12]
 801256c:	6916      	ldr	r6, [r2, #16]
 801256e:	9a01      	ldr	r2, [sp, #4]
 8012570:	6921      	ldr	r1, [r4, #16]
 8012572:	4620      	mov	r0, r4
 8012574:	47b0      	blx	r6
 8012576:	4604      	mov	r4, r0
  if (fpb) {
 8012578:	b115      	cbz	r5, 8012580 <ppp_netif_output_ip4+0x60>
    pbuf_free(fpb);
 801257a:	4628      	mov	r0, r5
 801257c:	f7f6 fda8 	bl	80090d0 <pbuf_free>
}
 8012580:	4620      	mov	r0, r4
 8012582:	b002      	add	sp, #8
 8012584:	bd70      	pop	{r4, r5, r6, pc}
        fpb = pb;
 8012586:	9d01      	ldr	r5, [sp, #4]
        protocol = PPP_VJC_UNCOMP;
 8012588:	232f      	movs	r3, #47	; 0x2f
        break;
 801258a:	e7ee      	b.n	801256a <ppp_netif_output_ip4+0x4a>
  err = ERR_RTE;
 801258c:	f06f 0403 	mvn.w	r4, #3
 8012590:	e7f6      	b.n	8012580 <ppp_netif_output_ip4+0x60>
  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 8012592:	68e3      	ldr	r3, [r4, #12]
 8012594:	691d      	ldr	r5, [r3, #16]
 8012596:	2321      	movs	r3, #33	; 0x21
 8012598:	9a01      	ldr	r2, [sp, #4]
 801259a:	6921      	ldr	r1, [r4, #16]
 801259c:	4620      	mov	r0, r4
 801259e:	47a8      	blx	r5
 80125a0:	4604      	mov	r4, r0
  return ppp_netif_output(netif, pb, PPP_IP);
 80125a2:	e7ed      	b.n	8012580 <ppp_netif_output_ip4+0x60>

080125a4 <ppp_set_notify_phase_callback>:
void ppp_set_notify_phase_callback(ppp_pcb *pcb, ppp_notify_phase_cb_fn notify_phase_cb) {
 80125a4:	b510      	push	{r4, lr}
 80125a6:	460c      	mov	r4, r1
  pcb->notify_phase_cb = notify_phase_cb;
 80125a8:	6181      	str	r1, [r0, #24]
  notify_phase_cb(pcb, pcb->phase, pcb->ctx_cb);
 80125aa:	69c2      	ldr	r2, [r0, #28]
 80125ac:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 80125b0:	47a0      	blx	r4
}
 80125b2:	bd10      	pop	{r4, pc}

080125b4 <ppp_free>:
err_t ppp_free(ppp_pcb *pcb) {
 80125b4:	b538      	push	{r3, r4, r5, lr}
  if (pcb->phase != PPP_PHASE_DEAD) {
 80125b6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80125ba:	b97b      	cbnz	r3, 80125dc <ppp_free+0x28>
 80125bc:	4604      	mov	r4, r0
  netif_remove(pcb->netif);
 80125be:	6a00      	ldr	r0, [r0, #32]
 80125c0:	f7f6 fc2e 	bl	8008e20 <netif_remove>
  err = pcb->link_cb->free(pcb, pcb->link_ctx_cb);
 80125c4:	68e3      	ldr	r3, [r4, #12]
 80125c6:	689b      	ldr	r3, [r3, #8]
 80125c8:	6921      	ldr	r1, [r4, #16]
 80125ca:	4620      	mov	r0, r4
 80125cc:	4798      	blx	r3
 80125ce:	4605      	mov	r5, r0
  LWIP_MEMPOOL_FREE(PPP_PCB, pcb);
 80125d0:	4621      	mov	r1, r4
 80125d2:	4804      	ldr	r0, [pc, #16]	; (80125e4 <ppp_free+0x30>)
 80125d4:	f7f6 fab4 	bl	8008b40 <memp_free_pool>
}
 80125d8:	4628      	mov	r0, r5
 80125da:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_CONN;
 80125dc:	f06f 050a 	mvn.w	r5, #10
 80125e0:	e7fa      	b.n	80125d8 <ppp_free+0x24>
 80125e2:	bf00      	nop
 80125e4:	08019878 	.word	0x08019878

080125e8 <ppp_init>:
/*** PRIVATE FUNCTION DEFINITIONS ***/
/************************************/

/* Initialize the PPP subsystem. */
int ppp_init(void)
{
 80125e8:	b508      	push	{r3, lr}
#if PPPOS_SUPPORT
  LWIP_MEMPOOL_INIT(PPPOS_PCB);
 80125ea:	4805      	ldr	r0, [pc, #20]	; (8012600 <ppp_init+0x18>)
 80125ec:	f7f6 fa54 	bl	8008a98 <memp_init_pool>
#endif
#if LWIP_PPP_API && LWIP_MPU_COMPATIBLE
  LWIP_MEMPOOL_INIT(PPPAPI_MSG);
#endif

  LWIP_MEMPOOL_INIT(PPP_PCB);
 80125f0:	4804      	ldr	r0, [pc, #16]	; (8012604 <ppp_init+0x1c>)
 80125f2:	f7f6 fa51 	bl	8008a98 <memp_init_pool>

  /*
   * Initialize magic number generator now so that protocols may
   * use magic numbers in initialization.
   */
  magic_init();
 80125f6:	f7ff ff67 	bl	80124c8 <magic_init>

  return 0;
}
 80125fa:	2000      	movs	r0, #0
 80125fc:	bd08      	pop	{r3, pc}
 80125fe:	bf00      	nop
 8012600:	08019aa0 	.word	0x08019aa0
 8012604:	08019878 	.word	0x08019878

08012608 <ppp_input>:

/*
 * Pass the processed input packet to the appropriate handler.
 * This function and all handlers run in the context of the tcpip_thread
 */
void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {
 8012608:	b570      	push	{r4, r5, r6, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	4605      	mov	r5, r0
 801260e:	9101      	str	r1, [sp, #4]
  u16_t protocol;
#if PPP_DEBUG && PPP_PROTOCOLNAME
    const char *pname;
#endif /* PPP_DEBUG && PPP_PROTOCOLNAME */

  magic_randomize();
 8012610:	f7ff ff64 	bl	80124dc <magic_randomize>

  if (pb->len < 2) {
 8012614:	9801      	ldr	r0, [sp, #4]
 8012616:	8943      	ldrh	r3, [r0, #10]
 8012618:	2b01      	cmp	r3, #1
 801261a:	d932      	bls.n	8012682 <ppp_input+0x7a>
    PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
    goto drop;
  }
  protocol = (((u8_t *)pb->payload)[0] << 8) | ((u8_t*)pb->payload)[1];
 801261c:	6843      	ldr	r3, [r0, #4]
 801261e:	781a      	ldrb	r2, [r3, #0]
 8012620:	7859      	ldrb	r1, [r3, #1]
 8012622:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8012626:	b20e      	sxth	r6, r1
 8012628:	460c      	mov	r4, r1

#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "rcvd", (unsigned char *)pb->payload, pb->len);
#endif /* PRINTPKT_SUPPORT */

  pbuf_remove_header(pb, sizeof(protocol));
 801262a:	2102      	movs	r1, #2
 801262c:	f7f6 fd10 	bl	8009050 <pbuf_remove_header>
  MIB2_STATS_NETIF_ADD(pcb->netif, ifinoctets, pb->tot_len);

  /*
   * Toss all non-LCP packets unless LCP is OPEN.
   */
  if (protocol != PPP_LCP && pcb->lcp_fsm.state != PPP_FSM_OPENED) {
 8012630:	f24c 0321 	movw	r3, #49185	; 0xc021
 8012634:	429c      	cmp	r4, r3
 8012636:	d007      	beq.n	8012648 <ppp_input+0x40>
 8012638:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 801263c:	2b09      	cmp	r3, #9
 801263e:	d11d      	bne.n	801267c <ppp_input+0x74>

  /*
   * Until we get past the authentication phase, toss all packets
   * except LCP, LQR and authentication packets.
   */
  if (pcb->phase <= PPP_PHASE_AUTHENTICATE
 8012640:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8012644:	2a07      	cmp	r2, #7
 8012646:	d921      	bls.n	801268c <ppp_input+0x84>
      pbuf_remove_header(pb, 2);
    }
  }
#endif /* CCP_SUPPORT */

  switch(protocol) {
 8012648:	2e2d      	cmp	r6, #45	; 0x2d
 801264a:	d029      	beq.n	80126a0 <ppp_input+0x98>
 801264c:	2e2f      	cmp	r6, #47	; 0x2f
 801264e:	d038      	beq.n	80126c2 <ppp_input+0xba>
 8012650:	2e21      	cmp	r6, #33	; 0x21
 8012652:	d020      	beq.n	8012696 <ppp_input+0x8e>

      /*
       * Upcall the proper protocol input routine.
       */
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
        if (protp->protocol == protocol) {
 8012654:	4b2a      	ldr	r3, [pc, #168]	; (8012700 <ppp_input+0xf8>)
 8012656:	881b      	ldrh	r3, [r3, #0]
 8012658:	42a3      	cmp	r3, r4
 801265a:	d043      	beq.n	80126e4 <ppp_input+0xdc>
 801265c:	4b29      	ldr	r3, [pc, #164]	; (8012704 <ppp_input+0xfc>)
 801265e:	881b      	ldrh	r3, [r3, #0]
 8012660:	42a3      	cmp	r3, r4
 8012662:	d04b      	beq.n	80126fc <ppp_input+0xf4>
        ppp_warn("Unsupported protocol '%s' (0x%x) received", pname, protocol);
      } else
#endif /* PPP_PROTOCOLNAME */
        ppp_warn("Unsupported protocol 0x%x received", protocol);
#endif /* PPP_DEBUG */
        if (pbuf_add_header(pb, sizeof(protocol))) {
 8012664:	2102      	movs	r1, #2
 8012666:	9801      	ldr	r0, [sp, #4]
 8012668:	f7f6 fcec 	bl	8009044 <pbuf_add_header>
 801266c:	b948      	cbnz	r0, 8012682 <ppp_input+0x7a>
          PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
          goto drop;
        }
        lcp_sprotrej(pcb, (u8_t*)pb->payload, pb->len);
 801266e:	9b01      	ldr	r3, [sp, #4]
 8012670:	895a      	ldrh	r2, [r3, #10]
 8012672:	6859      	ldr	r1, [r3, #4]
 8012674:	4628      	mov	r0, r5
 8012676:	f7ff ff15 	bl	80124a4 <lcp_sprotrej>
      }
      break;
 801267a:	e002      	b.n	8012682 <ppp_input+0x7a>
    ppp_dbglog("Discarded non-LCP packet when LCP not open");
 801267c:	4822      	ldr	r0, [pc, #136]	; (8012708 <ppp_input+0x100>)
 801267e:	f001 f901 	bl	8013884 <ppp_dbglog>
drop:
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pcb->netif, ifindiscards);

out:
  pbuf_free(pb);
 8012682:	9801      	ldr	r0, [sp, #4]
 8012684:	f7f6 fd24 	bl	80090d0 <pbuf_free>
}
 8012688:	b002      	add	sp, #8
 801268a:	bd70      	pop	{r4, r5, r6, pc}
    ppp_dbglog("discarding proto 0x%x in phase %d", protocol, pcb->phase);
 801268c:	4621      	mov	r1, r4
 801268e:	481f      	ldr	r0, [pc, #124]	; (801270c <ppp_input+0x104>)
 8012690:	f001 f8f8 	bl	8013884 <ppp_dbglog>
    goto drop;
 8012694:	e7f5      	b.n	8012682 <ppp_input+0x7a>
      ip4_input(pb, pcb->netif);
 8012696:	6a29      	ldr	r1, [r5, #32]
 8012698:	9801      	ldr	r0, [sp, #4]
 801269a:	f7fc f97f 	bl	800e99c <ip4_input>
      return;
 801269e:	e7f3      	b.n	8012688 <ppp_input+0x80>
      if (pcb->vj_enabled && vj_uncompress_tcp(&pb, &pcb->vj_comp) >= 0) {
 80126a0:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 80126a4:	f013 0f20 	tst.w	r3, #32
 80126a8:	d0eb      	beq.n	8012682 <ppp_input+0x7a>
 80126aa:	f105 01dc 	add.w	r1, r5, #220	; 0xdc
 80126ae:	a801      	add	r0, sp, #4
 80126b0:	f001 fb96 	bl	8013de0 <vj_uncompress_tcp>
 80126b4:	2800      	cmp	r0, #0
 80126b6:	dbe4      	blt.n	8012682 <ppp_input+0x7a>
        ip4_input(pb, pcb->netif);
 80126b8:	6a29      	ldr	r1, [r5, #32]
 80126ba:	9801      	ldr	r0, [sp, #4]
 80126bc:	f7fc f96e 	bl	800e99c <ip4_input>
        return;
 80126c0:	e7e2      	b.n	8012688 <ppp_input+0x80>
      if (pcb->vj_enabled && vj_uncompress_uncomp(pb, &pcb->vj_comp) >= 0) {
 80126c2:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 80126c6:	f013 0f20 	tst.w	r3, #32
 80126ca:	d0da      	beq.n	8012682 <ppp_input+0x7a>
 80126cc:	f105 01dc 	add.w	r1, r5, #220	; 0xdc
 80126d0:	9801      	ldr	r0, [sp, #4]
 80126d2:	f001 fb40 	bl	8013d56 <vj_uncompress_uncomp>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	dbd3      	blt.n	8012682 <ppp_input+0x7a>
        ip4_input(pb, pcb->netif);
 80126da:	6a29      	ldr	r1, [r5, #32]
 80126dc:	9801      	ldr	r0, [sp, #4]
 80126de:	f7fc f95d 	bl	800e99c <ip4_input>
        return;
 80126e2:	e7d1      	b.n	8012688 <ppp_input+0x80>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80126e4:	4c06      	ldr	r4, [pc, #24]	; (8012700 <ppp_input+0xf8>)
          pb = pbuf_coalesce(pb, PBUF_RAW);
 80126e6:	2100      	movs	r1, #0
 80126e8:	9801      	ldr	r0, [sp, #4]
 80126ea:	f7f7 f8b3 	bl	8009854 <pbuf_coalesce>
 80126ee:	9001      	str	r0, [sp, #4]
          (*protp->input)(pcb, (u8_t*)pb->payload, pb->len);
 80126f0:	68a3      	ldr	r3, [r4, #8]
 80126f2:	8942      	ldrh	r2, [r0, #10]
 80126f4:	6841      	ldr	r1, [r0, #4]
 80126f6:	4628      	mov	r0, r5
 80126f8:	4798      	blx	r3
          goto out;
 80126fa:	e7c2      	b.n	8012682 <ppp_input+0x7a>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80126fc:	4c01      	ldr	r4, [pc, #4]	; (8012704 <ppp_input+0xfc>)
 80126fe:	e7f2      	b.n	80126e6 <ppp_input+0xde>
 8012700:	08019784 	.word	0x08019784
 8012704:	08019568 	.word	0x08019568
 8012708:	080197a4 	.word	0x080197a4
 801270c:	080197d0 	.word	0x080197d0

08012710 <ppp_write>:
 *
 * IPv4 and IPv6 packets from lwIP are sent, respectively,
 * with ppp_netif_output_ip4() and ppp_netif_output_ip6()
 * functions (which are callbacks of the netif PPP interface).
 */
err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {
 8012710:	b510      	push	{r4, lr}
 8012712:	460a      	mov	r2, r1
#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "sent", (unsigned char *)p->payload+2, p->len-2);
#endif /* PRINTPKT_SUPPORT */
  return pcb->link_cb->write(pcb, pcb->link_ctx_cb, p);
 8012714:	68c1      	ldr	r1, [r0, #12]
 8012716:	68cc      	ldr	r4, [r1, #12]
 8012718:	6901      	ldr	r1, [r0, #16]
 801271a:	47a0      	blx	r4
}
 801271c:	bd10      	pop	{r4, pc}

0801271e <ppp_link_terminated>:

void ppp_link_terminated(ppp_pcb *pcb) {
 801271e:	b508      	push	{r3, lr}
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
  pcb->link_cb->disconnect(pcb, pcb->link_ctx_cb);
 8012720:	68c2      	ldr	r2, [r0, #12]
 8012722:	6852      	ldr	r2, [r2, #4]
 8012724:	6901      	ldr	r1, [r0, #16]
 8012726:	4790      	blx	r2
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
}
 8012728:	bd08      	pop	{r3, pc}

0801272a <new_phase>:
 */

/*
 * new_phase - signal the start of a new phase of pppd's operation.
 */
void new_phase(ppp_pcb *pcb, int p) {
 801272a:	b508      	push	{r3, lr}
  pcb->phase = p;
 801272c:	b2c9      	uxtb	r1, r1
 801272e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  PPPDEBUG(LOG_DEBUG, ("ppp phase changed[%d]: phase=%d\n", pcb->netif->num, pcb->phase));
#if PPP_NOTIFY_PHASE
  if (pcb->notify_phase_cb != NULL) {
 8012732:	6983      	ldr	r3, [r0, #24]
 8012734:	b10b      	cbz	r3, 801273a <new_phase+0x10>
    pcb->notify_phase_cb(pcb, p, pcb->ctx_cb);
 8012736:	69c2      	ldr	r2, [r0, #28]
 8012738:	4798      	blx	r3
  }
#endif /* PPP_NOTIFY_PHASE */
}
 801273a:	bd08      	pop	{r3, pc}

0801273c <ppp_do_connect>:
static void ppp_do_connect(void *arg) {
 801273c:	b510      	push	{r4, lr}
 801273e:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF", pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF);
 8012740:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012744:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8012748:	d006      	beq.n	8012758 <ppp_do_connect+0x1c>
 801274a:	4b08      	ldr	r3, [pc, #32]	; (801276c <ppp_do_connect+0x30>)
 801274c:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
 8012750:	4907      	ldr	r1, [pc, #28]	; (8012770 <ppp_do_connect+0x34>)
 8012752:	4808      	ldr	r0, [pc, #32]	; (8012774 <ppp_do_connect+0x38>)
 8012754:	f001 fdb0 	bl	80142b8 <app_debug_rtt_raw>
  new_phase(pcb, PPP_PHASE_INITIALIZE);
 8012758:	2103      	movs	r1, #3
 801275a:	4620      	mov	r0, r4
 801275c:	f7ff ffe5 	bl	801272a <new_phase>
  pcb->link_cb->connect(pcb, pcb->link_ctx_cb);
 8012760:	68e3      	ldr	r3, [r4, #12]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	6921      	ldr	r1, [r4, #16]
 8012766:	4620      	mov	r0, r4
 8012768:	4798      	blx	r3
}
 801276a:	bd10      	pop	{r4, pc}
 801276c:	080197f4 	.word	0x080197f4
 8012770:	08019820 	.word	0x08019820
 8012774:	08016a38 	.word	0x08016a38

08012778 <ppp_connect>:
err_t ppp_connect(ppp_pcb *pcb, u16_t holdoff) {
 8012778:	b538      	push	{r3, r4, r5, lr}
  if (pcb->phase != PPP_PHASE_DEAD) {
 801277a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801277e:	b9bb      	cbnz	r3, 80127b0 <ppp_connect+0x38>
 8012780:	4604      	mov	r4, r0
 8012782:	460d      	mov	r5, r1
  magic_randomize();
 8012784:	f7ff feaa 	bl	80124dc <magic_randomize>
  if (holdoff == 0) {
 8012788:	b16d      	cbz	r5, 80127a6 <ppp_connect+0x2e>
  new_phase(pcb, PPP_PHASE_HOLDOFF);
 801278a:	2102      	movs	r1, #2
 801278c:	4620      	mov	r0, r4
 801278e:	f7ff ffcc 	bl	801272a <new_phase>
  sys_timeout((u32_t)(holdoff*1000), ppp_do_connect, pcb);
 8012792:	4622      	mov	r2, r4
 8012794:	4908      	ldr	r1, [pc, #32]	; (80127b8 <ppp_connect+0x40>)
 8012796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801279a:	fb00 f005 	mul.w	r0, r0, r5
 801279e:	f7fb fb2d 	bl	800ddfc <sys_timeout>
  return ERR_OK;
 80127a2:	2000      	movs	r0, #0
}
 80127a4:	bd38      	pop	{r3, r4, r5, pc}
    ppp_do_connect(pcb);
 80127a6:	4620      	mov	r0, r4
 80127a8:	f7ff ffc8 	bl	801273c <ppp_do_connect>
    return ERR_OK;
 80127ac:	2000      	movs	r0, #0
 80127ae:	e7f9      	b.n	80127a4 <ppp_connect+0x2c>
    return ERR_ALREADY;
 80127b0:	f06f 0008 	mvn.w	r0, #8
 80127b4:	e7f6      	b.n	80127a4 <ppp_connect+0x2c>
 80127b6:	bf00      	nop
 80127b8:	0801273d 	.word	0x0801273d

080127bc <ppp_close>:
{
 80127bc:	b538      	push	{r3, r4, r5, lr}
 80127be:	4604      	mov	r4, r0
 80127c0:	460d      	mov	r5, r1
  pcb->err_code = PPPERR_USER;
 80127c2:	2305      	movs	r3, #5
 80127c4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  if (pcb->phase == PPP_PHASE_HOLDOFF) {
 80127c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80127cc:	2b02      	cmp	r3, #2
 80127ce:	d00f      	beq.n	80127f0 <ppp_close+0x34>
  if (pcb->phase == PPP_PHASE_DEAD) {
 80127d0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80127d4:	b1ab      	cbz	r3, 8012802 <ppp_close+0x46>
  if (pcb->phase >= PPP_PHASE_TERMINATE) {
 80127d6:	2b0a      	cmp	r3, #10
 80127d8:	d82c      	bhi.n	8012834 <ppp_close+0x78>
  if (pcb->phase < PPP_PHASE_ESTABLISH) {
 80127da:	2b05      	cmp	r3, #5
 80127dc:	d919      	bls.n	8012812 <ppp_close+0x56>
  if (nocarrier && pcb->phase == PPP_PHASE_RUNNING) {
 80127de:	b10d      	cbz	r5, 80127e4 <ppp_close+0x28>
 80127e0:	2b0a      	cmp	r3, #10
 80127e2:	d01f      	beq.n	8012824 <ppp_close+0x68>
  lcp_close(pcb, "User request");
 80127e4:	4915      	ldr	r1, [pc, #84]	; (801283c <ppp_close+0x80>)
 80127e6:	4620      	mov	r0, r4
 80127e8:	f7ff fa9a 	bl	8011d20 <lcp_close>
  return ERR_OK;
 80127ec:	2000      	movs	r0, #0
}
 80127ee:	bd38      	pop	{r3, r4, r5, pc}
    sys_untimeout(ppp_do_connect, pcb);
 80127f0:	4601      	mov	r1, r0
 80127f2:	4813      	ldr	r0, [pc, #76]	; (8012840 <ppp_close+0x84>)
 80127f4:	f7fb fb68 	bl	800dec8 <sys_untimeout>
    new_phase(pcb, PPP_PHASE_DEAD);
 80127f8:	2100      	movs	r1, #0
 80127fa:	4620      	mov	r0, r4
 80127fc:	f7ff ff95 	bl	801272a <new_phase>
 8012800:	e7e6      	b.n	80127d0 <ppp_close+0x14>
    pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 8012802:	6963      	ldr	r3, [r4, #20]
 8012804:	69e2      	ldr	r2, [r4, #28]
 8012806:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 801280a:	4620      	mov	r0, r4
 801280c:	4798      	blx	r3
    return ERR_OK;
 801280e:	2000      	movs	r0, #0
 8012810:	e7ed      	b.n	80127ee <ppp_close+0x32>
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 8012812:	210c      	movs	r1, #12
 8012814:	4620      	mov	r0, r4
 8012816:	f7ff ff88 	bl	801272a <new_phase>
    ppp_link_terminated(pcb);
 801281a:	4620      	mov	r0, r4
 801281c:	f7ff ff7f 	bl	801271e <ppp_link_terminated>
    return ERR_OK;
 8012820:	2000      	movs	r0, #0
 8012822:	e7e4      	b.n	80127ee <ppp_close+0x32>
    lcp_lowerdown(pcb);
 8012824:	4620      	mov	r0, r4
 8012826:	f7ff fe25 	bl	8012474 <lcp_lowerdown>
    link_terminated(pcb);
 801282a:	4620      	mov	r0, r4
 801282c:	f7fc fb6c 	bl	800ef08 <link_terminated>
    return ERR_OK;
 8012830:	2000      	movs	r0, #0
 8012832:	e7dc      	b.n	80127ee <ppp_close+0x32>
    return ERR_INPROGRESS;
 8012834:	f06f 0004 	mvn.w	r0, #4
 8012838:	e7d9      	b.n	80127ee <ppp_close+0x32>
 801283a:	bf00      	nop
 801283c:	08019860 	.word	0x08019860
 8012840:	0801273d 	.word	0x0801273d

08012844 <ppp_new>:
ppp_pcb *ppp_new(struct netif *pppif, const struct link_callbacks *callbacks, void *link_ctx_cb, ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
 8012844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012848:	b084      	sub	sp, #16
  if (link_status_cb == NULL) {
 801284a:	2b00      	cmp	r3, #0
 801284c:	d045      	beq.n	80128da <ppp_new+0x96>
 801284e:	4605      	mov	r5, r0
 8012850:	460f      	mov	r7, r1
 8012852:	4616      	mov	r6, r2
 8012854:	4698      	mov	r8, r3
  pcb = (ppp_pcb*)LWIP_MEMPOOL_ALLOC(PPP_PCB);
 8012856:	4822      	ldr	r0, [pc, #136]	; (80128e0 <ppp_new+0x9c>)
 8012858:	f7f6 f942 	bl	8008ae0 <memp_malloc_pool>
  if (pcb == NULL) {
 801285c:	4604      	mov	r4, r0
 801285e:	2800      	cmp	r0, #0
 8012860:	d031      	beq.n	80128c6 <ppp_new+0x82>
  memset(pcb, 0, sizeof(ppp_pcb));
 8012862:	f241 2264 	movw	r2, #4708	; 0x1264
 8012866:	2100      	movs	r1, #0
 8012868:	f001 fdba 	bl	80143e0 <memset>
  pcb->settings.lcp_loopbackfail = LCP_DEFLOOPBACKFAIL;
 801286c:	220a      	movs	r2, #10
 801286e:	7222      	strb	r2, [r4, #8]
  pcb->settings.lcp_echo_interval = LCP_ECHOINTERVAL;
 8012870:	2300      	movs	r3, #0
 8012872:	7263      	strb	r3, [r4, #9]
  pcb->settings.lcp_echo_fails = LCP_MAXECHOFAILS;
 8012874:	2103      	movs	r1, #3
 8012876:	72a1      	strb	r1, [r4, #10]
  pcb->settings.fsm_timeout_time = FSM_DEFTIMEOUT;
 8012878:	2106      	movs	r1, #6
 801287a:	7121      	strb	r1, [r4, #4]
  pcb->settings.fsm_max_conf_req_transmits = FSM_DEFMAXCONFREQS;
 801287c:	7162      	strb	r2, [r4, #5]
  pcb->settings.fsm_max_term_transmits = FSM_DEFMAXTERMREQS;
 801287e:	2202      	movs	r2, #2
 8012880:	71a2      	strb	r2, [r4, #6]
  pcb->settings.fsm_max_nak_loops = FSM_DEFMAXNAKLOOPS;
 8012882:	2205      	movs	r2, #5
 8012884:	71e2      	strb	r2, [r4, #7]
  pcb->netif = pppif;
 8012886:	6225      	str	r5, [r4, #32]
  if (!netif_add(pcb->netif,
 8012888:	4916      	ldr	r1, [pc, #88]	; (80128e4 <ppp_new+0xa0>)
 801288a:	9302      	str	r3, [sp, #8]
 801288c:	4b16      	ldr	r3, [pc, #88]	; (80128e8 <ppp_new+0xa4>)
 801288e:	9301      	str	r3, [sp, #4]
 8012890:	9400      	str	r4, [sp, #0]
 8012892:	460b      	mov	r3, r1
 8012894:	4a15      	ldr	r2, [pc, #84]	; (80128ec <ppp_new+0xa8>)
 8012896:	4628      	mov	r0, r5
 8012898:	f7f6 fa04 	bl	8008ca4 <netif_add>
 801289c:	4605      	mov	r5, r0
 801289e:	b1b0      	cbz	r0, 80128ce <ppp_new+0x8a>
  pcb->link_cb = callbacks;
 80128a0:	60e7      	str	r7, [r4, #12]
  pcb->link_ctx_cb = link_ctx_cb;
 80128a2:	6126      	str	r6, [r4, #16]
  pcb->link_status_cb = link_status_cb;
 80128a4:	f8c4 8014 	str.w	r8, [r4, #20]
  pcb->ctx_cb = ctx_cb;
 80128a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128aa:	61e3      	str	r3, [r4, #28]
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80128ac:	4d10      	ldr	r5, [pc, #64]	; (80128f0 <ppp_new+0xac>)
 80128ae:	4b11      	ldr	r3, [pc, #68]	; (80128f4 <ppp_new+0xb0>)
      (*protp->init)(pcb);
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	4620      	mov	r0, r4
 80128b4:	4798      	blx	r3
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80128b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d1f8      	bne.n	80128b0 <ppp_new+0x6c>
  new_phase(pcb, PPP_PHASE_DEAD);
 80128be:	2100      	movs	r1, #0
 80128c0:	4620      	mov	r0, r4
 80128c2:	f7ff ff32 	bl	801272a <new_phase>
}
 80128c6:	4620      	mov	r0, r4
 80128c8:	b004      	add	sp, #16
 80128ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEMPOOL_FREE(PPP_PCB, pcb);
 80128ce:	4621      	mov	r1, r4
 80128d0:	4803      	ldr	r0, [pc, #12]	; (80128e0 <ppp_new+0x9c>)
 80128d2:	f7f6 f935 	bl	8008b40 <memp_free_pool>
    return NULL;
 80128d6:	462c      	mov	r4, r5
 80128d8:	e7f5      	b.n	80128c6 <ppp_new+0x82>
    return NULL;
 80128da:	2400      	movs	r4, #0
 80128dc:	e7f3      	b.n	80128c6 <ppp_new+0x82>
 80128de:	bf00      	nop
 80128e0:	08019878 	.word	0x08019878
 80128e4:	08019224 	.word	0x08019224
 80128e8:	08012505 	.word	0x08012505
 80128ec:	08019228 	.word	0x08019228
 80128f0:	0801988c 	.word	0x0801988c
 80128f4:	08019784 	.word	0x08019784

080128f8 <ppp_start>:
void ppp_start(ppp_pcb *pcb) {
 80128f8:	b510      	push	{r4, lr}
 80128fa:	4604      	mov	r4, r0
  vj_compress_init(&pcb->vj_comp);
 80128fc:	30dc      	adds	r0, #220	; 0xdc
 80128fe:	f000 ffd0 	bl	80138a2 <vj_compress_init>
  new_phase(pcb, PPP_PHASE_ESTABLISH);
 8012902:	2106      	movs	r1, #6
 8012904:	4620      	mov	r0, r4
 8012906:	f7ff ff10 	bl	801272a <new_phase>
  lcp_open(pcb);
 801290a:	4620      	mov	r0, r4
 801290c:	f7ff f9ea 	bl	8011ce4 <lcp_open>
  lcp_lowerup(pcb);
 8012910:	4620      	mov	r0, r4
 8012912:	f7fe ffaf 	bl	8011874 <lcp_lowerup>
}
 8012916:	bd10      	pop	{r4, pc}

08012918 <ppp_link_end>:
void ppp_link_end(ppp_pcb *pcb) {
 8012918:	b510      	push	{r4, lr}
 801291a:	4604      	mov	r4, r0
  new_phase(pcb, PPP_PHASE_DEAD);
 801291c:	2100      	movs	r1, #0
 801291e:	f7ff ff04 	bl	801272a <new_phase>
  if (pcb->err_code == PPPERR_NONE) {
 8012922:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012926:	b913      	cbnz	r3, 801292e <ppp_link_end+0x16>
    pcb->err_code = PPPERR_CONNECT;
 8012928:	2306      	movs	r3, #6
 801292a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 801292e:	6963      	ldr	r3, [r4, #20]
 8012930:	69e2      	ldr	r2, [r4, #28]
 8012932:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8012936:	4620      	mov	r0, r4
 8012938:	4798      	blx	r3
}
 801293a:	bd10      	pop	{r4, pc}

0801293c <ppp_send_config>:

/*
 * ppp_send_config - configure the transmit-side characteristics of
 * the ppp interface.
 */
int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {
 801293c:	b510      	push	{r4, lr}
 801293e:	b082      	sub	sp, #8
  LWIP_UNUSED_ARG(mtu);
  /* pcb->mtu = mtu; -- set correctly with netif_set_mtu */

  if (pcb->link_cb->send_config) {
 8012940:	68c1      	ldr	r1, [r0, #12]
 8012942:	694c      	ldr	r4, [r1, #20]
 8012944:	b11c      	cbz	r4, 801294e <ppp_send_config+0x12>
    pcb->link_cb->send_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 8012946:	9904      	ldr	r1, [sp, #16]
 8012948:	9100      	str	r1, [sp, #0]
 801294a:	6901      	ldr	r1, [r0, #16]
 801294c:	47a0      	blx	r4
  }

  PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num) );
  return 0;
}
 801294e:	2000      	movs	r0, #0
 8012950:	b002      	add	sp, #8
 8012952:	bd10      	pop	{r4, pc}

08012954 <ppp_recv_config>:

/*
 * ppp_recv_config - configure the receive-side characteristics of
 * the ppp interface.
 */
int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {
 8012954:	b510      	push	{r4, lr}
 8012956:	b082      	sub	sp, #8
  LWIP_UNUSED_ARG(mru);

  if (pcb->link_cb->recv_config) {
 8012958:	68c1      	ldr	r1, [r0, #12]
 801295a:	698c      	ldr	r4, [r1, #24]
 801295c:	b11c      	cbz	r4, 8012966 <ppp_recv_config+0x12>
    pcb->link_cb->recv_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 801295e:	9904      	ldr	r1, [sp, #16]
 8012960:	9100      	str	r1, [sp, #0]
 8012962:	6901      	ldr	r1, [r0, #16]
 8012964:	47a0      	blx	r4
  }

  PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));
  return 0;
}
 8012966:	2000      	movs	r0, #0
 8012968:	b002      	add	sp, #8
 801296a:	bd10      	pop	{r4, pc}

0801296c <sifaddr>:

#if PPP_IPV4_SUPPORT
/*
 * sifaddr - Config the interface IP addresses and netmask.
 */
int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {
 801296c:	b500      	push	{lr}
 801296e:	b085      	sub	sp, #20
  ip4_addr_t ip, nm, gw;

  ip4_addr_set_u32(&ip, our_adr);
 8012970:	9103      	str	r1, [sp, #12]
  ip4_addr_set_u32(&nm, netmask);
 8012972:	9302      	str	r3, [sp, #8]
  ip4_addr_set_u32(&gw, his_adr);
 8012974:	9201      	str	r2, [sp, #4]
  netif_set_addr(pcb->netif, &ip, &nm, &gw);
 8012976:	ab01      	add	r3, sp, #4
 8012978:	aa02      	add	r2, sp, #8
 801297a:	a903      	add	r1, sp, #12
 801297c:	6a00      	ldr	r0, [r0, #32]
 801297e:	f7f6 f961 	bl	8008c44 <netif_set_addr>
  return 1;
}
 8012982:	2001      	movs	r0, #1
 8012984:	b005      	add	sp, #20
 8012986:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801298c <cifaddr>:
/********************************************************************
 *
 * cifaddr - Clear the interface IP addresses, and delete routes
 * through the interface if possible.
 */
int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {
 801298c:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(our_adr);
  LWIP_UNUSED_ARG(his_adr);

  netif_set_addr(pcb->netif, IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4);
 801298e:	4904      	ldr	r1, [pc, #16]	; (80129a0 <cifaddr+0x14>)
 8012990:	460b      	mov	r3, r1
 8012992:	4a04      	ldr	r2, [pc, #16]	; (80129a4 <cifaddr+0x18>)
 8012994:	6a00      	ldr	r0, [r0, #32]
 8012996:	f7f6 f955 	bl	8008c44 <netif_set_addr>
  return 1;
}
 801299a:	2001      	movs	r0, #1
 801299c:	bd08      	pop	{r3, pc}
 801299e:	bf00      	nop
 80129a0:	08019224 	.word	0x08019224
 80129a4:	08019228 	.word	0x08019228

080129a8 <sdns>:

#if LWIP_DNS
/*
 * sdns - Config the DNS servers
 */
int sdns(ppp_pcb *pcb, u32_t ns1, u32_t ns2) {
 80129a8:	b510      	push	{r4, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	4614      	mov	r4, r2
  ip_addr_t ns;
  LWIP_UNUSED_ARG(pcb);

  ip_addr_set_ip4_u32_val(ns, ns1);
 80129ae:	9101      	str	r1, [sp, #4]
  dns_setserver(0, &ns);
 80129b0:	a901      	add	r1, sp, #4
 80129b2:	2000      	movs	r0, #0
 80129b4:	f7f5 faee 	bl	8007f94 <dns_setserver>
  ip_addr_set_ip4_u32_val(ns, ns2);
 80129b8:	9401      	str	r4, [sp, #4]
  dns_setserver(1, &ns);
 80129ba:	a901      	add	r1, sp, #4
 80129bc:	2001      	movs	r0, #1
 80129be:	f7f5 fae9 	bl	8007f94 <dns_setserver>
  return 1;
}
 80129c2:	2001      	movs	r0, #1
 80129c4:	b002      	add	sp, #8
 80129c6:	bd10      	pop	{r4, pc}

080129c8 <cdns>:

/********************************************************************
 *
 * cdns - Clear the DNS servers
 */
int cdns(ppp_pcb *pcb, u32_t ns1, u32_t ns2) {
 80129c8:	b538      	push	{r3, r4, r5, lr}
 80129ca:	460d      	mov	r5, r1
 80129cc:	4614      	mov	r4, r2
  const ip_addr_t *nsa;
  ip_addr_t nsb;
  LWIP_UNUSED_ARG(pcb);

  nsa = dns_getserver(0);
 80129ce:	2000      	movs	r0, #0
 80129d0:	f7f5 faf4 	bl	8007fbc <dns_getserver>
  ip_addr_set_ip4_u32_val(nsb, ns1);
  if (ip_addr_cmp(nsa, &nsb)) {
 80129d4:	6803      	ldr	r3, [r0, #0]
 80129d6:	42ab      	cmp	r3, r5
 80129d8:	d007      	beq.n	80129ea <cdns+0x22>
    dns_setserver(0, IP_ADDR_ANY);
  }
  nsa = dns_getserver(1);
 80129da:	2001      	movs	r0, #1
 80129dc:	f7f5 faee 	bl	8007fbc <dns_getserver>
  ip_addr_set_ip4_u32_val(nsb, ns2);
  if (ip_addr_cmp(nsa, &nsb)) {
 80129e0:	6803      	ldr	r3, [r0, #0]
 80129e2:	42a3      	cmp	r3, r4
 80129e4:	d006      	beq.n	80129f4 <cdns+0x2c>
    dns_setserver(1, IP_ADDR_ANY);
  }
  return 1;
}
 80129e6:	2001      	movs	r0, #1
 80129e8:	bd38      	pop	{r3, r4, r5, pc}
    dns_setserver(0, IP_ADDR_ANY);
 80129ea:	4905      	ldr	r1, [pc, #20]	; (8012a00 <cdns+0x38>)
 80129ec:	2000      	movs	r0, #0
 80129ee:	f7f5 fad1 	bl	8007f94 <dns_setserver>
 80129f2:	e7f2      	b.n	80129da <cdns+0x12>
    dns_setserver(1, IP_ADDR_ANY);
 80129f4:	4902      	ldr	r1, [pc, #8]	; (8012a00 <cdns+0x38>)
 80129f6:	2001      	movs	r0, #1
 80129f8:	f7f5 facc 	bl	8007f94 <dns_setserver>
 80129fc:	e7f3      	b.n	80129e6 <cdns+0x1e>
 80129fe:	bf00      	nop
 8012a00:	08019224 	.word	0x08019224

08012a04 <sifvjcomp>:
#if VJ_SUPPORT
/********************************************************************
 *
 * sifvjcomp - config tcp header compression
 */
int sifvjcomp(ppp_pcb *pcb, int vjcomp, int cidcomp, int maxcid) {
 8012a04:	b410      	push	{r4}
  pcb->vj_enabled = vjcomp;
 8012a06:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
 8012a0a:	f361 1445 	bfi	r4, r1, #5, #1
 8012a0e:	f880 4026 	strb.w	r4, [r0, #38]	; 0x26
  pcb->vj_comp.compressSlot = cidcomp;
 8012a12:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
  pcb->vj_comp.maxSlotIndex = maxcid;
 8012a16:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
  PPPDEBUG(LOG_INFO, ("sifvjcomp[%d]: VJ compress enable=%d slot=%d max slot=%d\n",
            pcb->netif->num, vjcomp, cidcomp, maxcid));
  return 0;
}
 8012a1a:	2000      	movs	r0, #0
 8012a1c:	bc10      	pop	{r4}
 8012a1e:	4770      	bx	lr

08012a20 <sifup>:
#endif /* VJ_SUPPORT */

/*
 * sifup - Config the interface up and enable IP packets to pass.
 */
int sifup(ppp_pcb *pcb) {
 8012a20:	b510      	push	{r4, lr}
 8012a22:	4604      	mov	r4, r0
  pcb->if4_up = 1;
 8012a24:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8012a28:	f043 0308 	orr.w	r3, r3, #8
 8012a2c:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
  pcb->err_code = PPPERR_NONE;
 8012a30:	2300      	movs	r3, #0
 8012a32:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  netif_set_link_up(pcb->netif);
 8012a36:	6a00      	ldr	r0, [r0, #32]
 8012a38:	f7f6 fa28 	bl	8008e8c <netif_set_link_up>

  PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 8012a3c:	6963      	ldr	r3, [r4, #20]
 8012a3e:	69e2      	ldr	r2, [r4, #28]
 8012a40:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8012a44:	4620      	mov	r0, r4
 8012a46:	4798      	blx	r3
  return 1;
}
 8012a48:	2001      	movs	r0, #1
 8012a4a:	bd10      	pop	{r4, pc}

08012a4c <sifdown>:
/********************************************************************
 *
 * sifdown - Disable the indicated protocol and config the interface
 *           down if there are no remaining protocols.
 */
int sifdown(ppp_pcb *pcb) {
 8012a4c:	b508      	push	{r3, lr}

  pcb->if4_up = 0;
 8012a4e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8012a52:	f36f 03c3 	bfc	r3, #3, #1
 8012a56:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   /* set the interface down if IPv6 is down as well */
   && !pcb->if6_up
#endif /* PPP_IPV6_SUPPORT */
  ) {
    /* make sure the netif link callback is called */
    netif_set_link_down(pcb->netif);
 8012a5a:	6a00      	ldr	r0, [r0, #32]
 8012a5c:	f7f6 fa3a 	bl	8008ed4 <netif_set_link_down>
  }
  PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  return 1;
}
 8012a60:	2001      	movs	r0, #1
 8012a62:	bd08      	pop	{r3, pc}

08012a64 <get_mask>:
  /* return mask; */
  return mask;
#endif /* 0 */
  LWIP_UNUSED_ARG(addr);
  return IPADDR_BROADCAST;
}
 8012a64:	f04f 30ff 	mov.w	r0, #4294967295
 8012a68:	4770      	bx	lr

08012a6a <netif_set_mtu>:
/*
 * netif_set_mtu - set the MTU on the PPP network interface.
 */
void netif_set_mtu(ppp_pcb *pcb, int mtu) {

  pcb->netif->mtu = mtu;
 8012a6a:	6a03      	ldr	r3, [r0, #32]
 8012a6c:	8519      	strh	r1, [r3, #40]	; 0x28
  PPPDEBUG(LOG_INFO, ("netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
}
 8012a6e:	4770      	bx	lr

08012a70 <pppos_send_config>:
{
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
  LWIP_UNUSED_ARG(ppp);

  pppos->pcomp = pcomp;
 8012a70:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 8012a74:	f363 0041 	bfi	r0, r3, #1, #1
  pppos->accomp = accomp;
 8012a78:	9b00      	ldr	r3, [sp, #0]
 8012a7a:	f363 0082 	bfi	r0, r3, #2, #1
 8012a7e:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c

  /* Load the ACCM bits for the 32 control codes. */
  for (i = 0; i < 32/8; i++) {
    pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
 8012a82:	730a      	strb	r2, [r1, #12]
 8012a84:	0a13      	lsrs	r3, r2, #8
 8012a86:	734b      	strb	r3, [r1, #13]
 8012a88:	0c13      	lsrs	r3, r2, #16
 8012a8a:	738b      	strb	r3, [r1, #14]
 8012a8c:	0e12      	lsrs	r2, r2, #24
 8012a8e:	73ca      	strb	r2, [r1, #15]
  }

  PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
}
 8012a90:	4770      	bx	lr

08012a92 <pppos_recv_config>:
  LWIP_UNUSED_ARG(accomp);

  /* Load the ACCM bits for the 32 control codes. */
  PPPOS_PROTECT(lev);
  for (i = 0; i < 32 / 8; i++) {
    pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
 8012a92:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
 8012a96:	0a13      	lsrs	r3, r2, #8
 8012a98:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
 8012a9c:	0c13      	lsrs	r3, r2, #16
 8012a9e:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
 8012aa2:	0e12      	lsrs	r2, r2, #24
 8012aa4:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
}
 8012aa8:	4770      	bx	lr
	...

08012aac <pppos_output_append>:
 * If pbuf is full, send the pbuf and reuse it.
 * Return the current pbuf.
 */
static err_t
pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
{
 8012aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ab0:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8012ab4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  if (err != ERR_OK) {
 8012ab8:	4688      	mov	r8, r1
 8012aba:	2900      	cmp	r1, #0
 8012abc:	d13f      	bne.n	8012b3e <pppos_output_append+0x92>
 8012abe:	4681      	mov	r9, r0
 8012ac0:	4614      	mov	r4, r2
 8012ac2:	461d      	mov	r5, r3
  }

  /* Make sure there is room for the character and an escape code.
   * Sure we don't quite fill the buffer if the character doesn't
   * get escaped but is one character worth complicating this? */
  if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
 8012ac4:	8952      	ldrh	r2, [r2, #10]
 8012ac6:	f5c2 7314 	rsb	r3, r2, #592	; 0x250
 8012aca:	2b01      	cmp	r3, #1
 8012acc:	d926      	bls.n	8012b1c <pppos_output_append+0x70>
    }
    nb->len = 0;
  }

  /* Update FCS before checking for special characters. */
  if (fcs) {
 8012ace:	f1ba 0f00 	cmp.w	sl, #0
 8012ad2:	d00b      	beq.n	8012aec <pppos_output_append+0x40>
    *fcs = PPP_FCS(*fcs, c);
 8012ad4:	f8ba 1000 	ldrh.w	r1, [sl]
 8012ad8:	ea81 0205 	eor.w	r2, r1, r5
 8012adc:	b2d2      	uxtb	r2, r2
 8012ade:	4b1b      	ldr	r3, [pc, #108]	; (8012b4c <pppos_output_append+0xa0>)
 8012ae0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012ae4:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8012ae8:	f8aa 3000 	strh.w	r3, [sl]
  }

  /* Copy to output buffer escaping special characters. */
  if (accm && ESCAPE_P(pppos->out_accm, c)) {
 8012aec:	b317      	cbz	r7, 8012b34 <pppos_output_append+0x88>
 8012aee:	eb09 00d5 	add.w	r0, r9, r5, lsr #3
 8012af2:	7b03      	ldrb	r3, [r0, #12]
 8012af4:	f005 0207 	and.w	r2, r5, #7
 8012af8:	4113      	asrs	r3, r2
 8012afa:	f013 0f01 	tst.w	r3, #1
 8012afe:	d019      	beq.n	8012b34 <pppos_output_append+0x88>
    *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
 8012b00:	6862      	ldr	r2, [r4, #4]
 8012b02:	8963      	ldrh	r3, [r4, #10]
 8012b04:	1c59      	adds	r1, r3, #1
 8012b06:	8161      	strh	r1, [r4, #10]
 8012b08:	217d      	movs	r1, #125	; 0x7d
 8012b0a:	54d1      	strb	r1, [r2, r3]
    *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
 8012b0c:	6861      	ldr	r1, [r4, #4]
 8012b0e:	8962      	ldrh	r2, [r4, #10]
 8012b10:	1c53      	adds	r3, r2, #1
 8012b12:	8163      	strh	r3, [r4, #10]
 8012b14:	f085 0520 	eor.w	r5, r5, #32
 8012b18:	548d      	strb	r5, [r1, r2]
 8012b1a:	e010      	b.n	8012b3e <pppos_output_append+0x92>
    u32_t l = pppos->output_cb(pppos->ppp, (u8_t*)nb->payload, nb->len, pppos->ppp->ctx_cb);
 8012b1c:	6800      	ldr	r0, [r0, #0]
 8012b1e:	69c3      	ldr	r3, [r0, #28]
 8012b20:	6861      	ldr	r1, [r4, #4]
 8012b22:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8012b26:	47b0      	blx	r6
    if (l != nb->len) {
 8012b28:	8963      	ldrh	r3, [r4, #10]
 8012b2a:	4283      	cmp	r3, r0
 8012b2c:	d10a      	bne.n	8012b44 <pppos_output_append+0x98>
    nb->len = 0;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	8163      	strh	r3, [r4, #10]
 8012b32:	e7cc      	b.n	8012ace <pppos_output_append+0x22>
  } else {
    *((u8_t*)nb->payload + nb->len++) = c;
 8012b34:	6862      	ldr	r2, [r4, #4]
 8012b36:	8963      	ldrh	r3, [r4, #10]
 8012b38:	1c59      	adds	r1, r3, #1
 8012b3a:	8161      	strh	r1, [r4, #10]
 8012b3c:	54d5      	strb	r5, [r2, r3]
  }

  return ERR_OK;
}
 8012b3e:	4640      	mov	r0, r8
 8012b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return ERR_IF;
 8012b44:	f06f 080b 	mvn.w	r8, #11
 8012b48:	e7f9      	b.n	8012b3e <pppos_output_append+0x92>
 8012b4a:	bf00      	nop
 8012b4c:	080198a0 	.word	0x080198a0

08012b50 <pppos_destroy>:
{
 8012b50:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 8012b52:	4802      	ldr	r0, [pc, #8]	; (8012b5c <pppos_destroy+0xc>)
 8012b54:	f7f5 fff4 	bl	8008b40 <memp_free_pool>
}
 8012b58:	2000      	movs	r0, #0
 8012b5a:	bd08      	pop	{r3, pc}
 8012b5c:	08019aa0 	.word	0x08019aa0

08012b60 <pppos_output_last>:

static err_t
pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
{
 8012b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b64:	b083      	sub	sp, #12
 8012b66:	4605      	mov	r5, r0
 8012b68:	4614      	mov	r4, r2
 8012b6a:	461f      	mov	r7, r3
  ppp_pcb *ppp = pppos->ppp;
 8012b6c:	f8d0 9000 	ldr.w	r9, [r0]

  /* Add FCS and trailing flag. */
  err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	43db      	mvns	r3, r3
 8012b74:	2600      	movs	r6, #0
 8012b76:	9601      	str	r6, [sp, #4]
 8012b78:	f04f 0801 	mov.w	r8, #1
 8012b7c:	f8cd 8000 	str.w	r8, [sp]
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	f7ff ff93 	bl	8012aac <pppos_output_append>
 8012b86:	4601      	mov	r1, r0
  err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
 8012b88:	883b      	ldrh	r3, [r7, #0]
 8012b8a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8012b8e:	9601      	str	r6, [sp, #4]
 8012b90:	f8cd 8000 	str.w	r8, [sp]
 8012b94:	b2db      	uxtb	r3, r3
 8012b96:	4622      	mov	r2, r4
 8012b98:	4628      	mov	r0, r5
 8012b9a:	f7ff ff87 	bl	8012aac <pppos_output_append>
 8012b9e:	4601      	mov	r1, r0
  err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8012ba0:	9601      	str	r6, [sp, #4]
 8012ba2:	9600      	str	r6, [sp, #0]
 8012ba4:	237e      	movs	r3, #126	; 0x7e
 8012ba6:	4622      	mov	r2, r4
 8012ba8:	4628      	mov	r0, r5
 8012baa:	f7ff ff7f 	bl	8012aac <pppos_output_append>

  if (err != ERR_OK) {
 8012bae:	4607      	mov	r7, r0
 8012bb0:	b998      	cbnz	r0, 8012bda <pppos_output_last+0x7a>
    goto failed;
  }

  /* Send remaining buffer if not empty */
  if (nb->len > 0) {
 8012bb2:	8962      	ldrh	r2, [r4, #10]
 8012bb4:	b142      	cbz	r2, 8012bc8 <pppos_output_last+0x68>
    u32_t l = pppos->output_cb(ppp, (u8_t*)nb->payload, nb->len, ppp->ctx_cb);
 8012bb6:	686e      	ldr	r6, [r5, #4]
 8012bb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012bbc:	6861      	ldr	r1, [r4, #4]
 8012bbe:	4648      	mov	r0, r9
 8012bc0:	47b0      	blx	r6
    if (l != nb->len) {
 8012bc2:	8963      	ldrh	r3, [r4, #10]
 8012bc4:	4283      	cmp	r3, r0
 8012bc6:	d106      	bne.n	8012bd6 <pppos_output_last+0x76>
      err = ERR_IF;
      goto failed;
    }
  }

  pppos->last_xmit = sys_now();
 8012bc8:	f001 fba8 	bl	801431c <sys_now>
 8012bcc:	60a8      	str	r0, [r5, #8]
  MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
  LINK_STATS_INC(link.xmit);
  pbuf_free(nb);
 8012bce:	4620      	mov	r0, r4
 8012bd0:	f7f6 fa7e 	bl	80090d0 <pbuf_free>
  return ERR_OK;
 8012bd4:	e006      	b.n	8012be4 <pppos_output_last+0x84>
      err = ERR_IF;
 8012bd6:	f06f 070b 	mvn.w	r7, #11

failed:
  pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
 8012bda:	2300      	movs	r3, #0
 8012bdc:	60ab      	str	r3, [r5, #8]
  LINK_STATS_INC(link.err);
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
  pbuf_free(nb);
 8012bde:	4620      	mov	r0, r4
 8012be0:	f7f6 fa76 	bl	80090d0 <pbuf_free>
  return err;
}
 8012be4:	4638      	mov	r0, r7
 8012be6:	b003      	add	sp, #12
 8012be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012bec <pppos_netif_output>:
{
 8012bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bf0:	b084      	sub	sp, #16
 8012bf2:	460e      	mov	r6, r1
 8012bf4:	4692      	mov	sl, r2
 8012bf6:	461d      	mov	r5, r3
  nb = pbuf_alloc(PBUF_RAW, 0, PBUF_POOL);
 8012bf8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8012bfc:	2100      	movs	r1, #0
 8012bfe:	4608      	mov	r0, r1
 8012c00:	f7f6 fad0 	bl	80091a4 <pbuf_alloc>
  if (nb == NULL) {
 8012c04:	2800      	cmp	r0, #0
 8012c06:	d07c      	beq.n	8012d02 <pppos_netif_output+0x116>
 8012c08:	4607      	mov	r7, r0
  nb->tot_len = pb->tot_len;
 8012c0a:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8012c0e:	8103      	strh	r3, [r0, #8]
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 8012c10:	f001 fb84 	bl	801431c <sys_now>
 8012c14:	68b3      	ldr	r3, [r6, #8]
 8012c16:	1ac3      	subs	r3, r0, r3
 8012c18:	2b63      	cmp	r3, #99	; 0x63
 8012c1a:	d82b      	bhi.n	8012c74 <pppos_netif_output+0x88>
  err = ERR_OK;
 8012c1c:	2100      	movs	r1, #0
  fcs_out = PPP_INITFCS;
 8012c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c22:	f8ad 300e 	strh.w	r3, [sp, #14]
  if (!pppos->accomp) {
 8012c26:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8012c2a:	f013 0f04 	tst.w	r3, #4
 8012c2e:	d02b      	beq.n	8012c88 <pppos_netif_output+0x9c>
  if (!pppos->pcomp || protocol > 0xFF) {
 8012c30:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8012c34:	f013 0f02 	tst.w	r3, #2
 8012c38:	d001      	beq.n	8012c3e <pppos_netif_output+0x52>
 8012c3a:	2dff      	cmp	r5, #255	; 0xff
 8012c3c:	d90a      	bls.n	8012c54 <pppos_netif_output+0x68>
    err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
 8012c3e:	f10d 030e 	add.w	r3, sp, #14
 8012c42:	9301      	str	r3, [sp, #4]
 8012c44:	2301      	movs	r3, #1
 8012c46:	9300      	str	r3, [sp, #0]
 8012c48:	0a2b      	lsrs	r3, r5, #8
 8012c4a:	463a      	mov	r2, r7
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	f7ff ff2d 	bl	8012aac <pppos_output_append>
 8012c52:	4601      	mov	r1, r0
  err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
 8012c54:	f10d 030e 	add.w	r3, sp, #14
 8012c58:	9301      	str	r3, [sp, #4]
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	9300      	str	r3, [sp, #0]
 8012c5e:	b2eb      	uxtb	r3, r5
 8012c60:	463a      	mov	r2, r7
 8012c62:	4630      	mov	r0, r6
 8012c64:	f7ff ff22 	bl	8012aac <pppos_output_append>
 8012c68:	4601      	mov	r1, r0
      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 8012c6a:	f10d 090e 	add.w	r9, sp, #14
 8012c6e:	f04f 0801 	mov.w	r8, #1
 8012c72:	e025      	b.n	8012cc0 <pppos_netif_output+0xd4>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8012c74:	2100      	movs	r1, #0
 8012c76:	9101      	str	r1, [sp, #4]
 8012c78:	9100      	str	r1, [sp, #0]
 8012c7a:	237e      	movs	r3, #126	; 0x7e
 8012c7c:	463a      	mov	r2, r7
 8012c7e:	4630      	mov	r0, r6
 8012c80:	f7ff ff14 	bl	8012aac <pppos_output_append>
 8012c84:	4601      	mov	r1, r0
 8012c86:	e7ca      	b.n	8012c1e <pppos_netif_output+0x32>
    err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
 8012c88:	f10d 040e 	add.w	r4, sp, #14
 8012c8c:	9401      	str	r4, [sp, #4]
 8012c8e:	f04f 0801 	mov.w	r8, #1
 8012c92:	f8cd 8000 	str.w	r8, [sp]
 8012c96:	23ff      	movs	r3, #255	; 0xff
 8012c98:	463a      	mov	r2, r7
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f7ff ff06 	bl	8012aac <pppos_output_append>
 8012ca0:	4601      	mov	r1, r0
    err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
 8012ca2:	9401      	str	r4, [sp, #4]
 8012ca4:	f8cd 8000 	str.w	r8, [sp]
 8012ca8:	2303      	movs	r3, #3
 8012caa:	463a      	mov	r2, r7
 8012cac:	4630      	mov	r0, r6
 8012cae:	f7ff fefd 	bl	8012aac <pppos_output_append>
 8012cb2:	4601      	mov	r1, r0
 8012cb4:	e7bc      	b.n	8012c30 <pppos_netif_output+0x44>
  for(p = pb; p; p = p->next) {
 8012cb6:	f8da a000 	ldr.w	sl, [sl]
 8012cba:	f1ba 0f00 	cmp.w	sl, #0
 8012cbe:	d017      	beq.n	8012cf0 <pppos_netif_output+0x104>
    u16_t n = p->len;
 8012cc0:	f8ba 300a 	ldrh.w	r3, [sl, #10]
    u8_t *s = (u8_t*)p->payload;
 8012cc4:	f8da 4004 	ldr.w	r4, [sl, #4]
    while (n-- > 0) {
 8012cc8:	1e5d      	subs	r5, r3, #1
 8012cca:	b2ad      	uxth	r5, r5
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d0f2      	beq.n	8012cb6 <pppos_netif_output+0xca>
 8012cd0:	3501      	adds	r5, #1
 8012cd2:	4425      	add	r5, r4
      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 8012cd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012cd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8012cdc:	f8cd 8000 	str.w	r8, [sp]
 8012ce0:	463a      	mov	r2, r7
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	f7ff fee2 	bl	8012aac <pppos_output_append>
 8012ce8:	4601      	mov	r1, r0
    while (n-- > 0) {
 8012cea:	42a5      	cmp	r5, r4
 8012cec:	d1f2      	bne.n	8012cd4 <pppos_netif_output+0xe8>
 8012cee:	e7e2      	b.n	8012cb6 <pppos_netif_output+0xca>
  err = pppos_output_last(pppos, err, nb, &fcs_out);
 8012cf0:	f10d 030e 	add.w	r3, sp, #14
 8012cf4:	463a      	mov	r2, r7
 8012cf6:	4630      	mov	r0, r6
 8012cf8:	f7ff ff32 	bl	8012b60 <pppos_output_last>
}
 8012cfc:	b004      	add	sp, #16
 8012cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8012d02:	f04f 30ff 	mov.w	r0, #4294967295
 8012d06:	e7f9      	b.n	8012cfc <pppos_netif_output+0x110>

08012d08 <pppos_write>:
{
 8012d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d0c:	b084      	sub	sp, #16
 8012d0e:	460e      	mov	r6, r1
 8012d10:	4692      	mov	sl, r2
  nb = pbuf_alloc(PBUF_RAW, 0, PBUF_POOL);
 8012d12:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8012d16:	2100      	movs	r1, #0
 8012d18:	4608      	mov	r0, r1
 8012d1a:	f7f6 fa43 	bl	80091a4 <pbuf_alloc>
  if (nb == NULL) {
 8012d1e:	b3b0      	cbz	r0, 8012d8e <pppos_write+0x86>
 8012d20:	4607      	mov	r7, r0
  nb->tot_len = p->len;
 8012d22:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012d26:	8103      	strh	r3, [r0, #8]
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 8012d28:	f001 faf8 	bl	801431c <sys_now>
 8012d2c:	68b3      	ldr	r3, [r6, #8]
 8012d2e:	1ac0      	subs	r0, r0, r3
 8012d30:	2863      	cmp	r0, #99	; 0x63
 8012d32:	d832      	bhi.n	8012d9a <pppos_write+0x92>
  err = ERR_OK;
 8012d34:	2100      	movs	r1, #0
  fcs_out = PPP_INITFCS;
 8012d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d3a:	f8ad 300e 	strh.w	r3, [sp, #14]
  s = (u8_t*)p->payload;
 8012d3e:	f8da 4004 	ldr.w	r4, [sl, #4]
  n = p->len;
 8012d42:	f8ba 300a 	ldrh.w	r3, [sl, #10]
  while (n-- > 0) {
 8012d46:	1e5d      	subs	r5, r3, #1
 8012d48:	b2ad      	uxth	r5, r5
 8012d4a:	b193      	cbz	r3, 8012d72 <pppos_write+0x6a>
 8012d4c:	3501      	adds	r5, #1
 8012d4e:	4425      	add	r5, r4
    err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 8012d50:	f10d 090e 	add.w	r9, sp, #14
 8012d54:	f04f 0801 	mov.w	r8, #1
 8012d58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012d5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012d60:	f8cd 8000 	str.w	r8, [sp]
 8012d64:	463a      	mov	r2, r7
 8012d66:	4630      	mov	r0, r6
 8012d68:	f7ff fea0 	bl	8012aac <pppos_output_append>
 8012d6c:	4601      	mov	r1, r0
  while (n-- > 0) {
 8012d6e:	42ac      	cmp	r4, r5
 8012d70:	d1f2      	bne.n	8012d58 <pppos_write+0x50>
  err = pppos_output_last(pppos, err, nb, &fcs_out);
 8012d72:	f10d 030e 	add.w	r3, sp, #14
 8012d76:	463a      	mov	r2, r7
 8012d78:	4630      	mov	r0, r6
 8012d7a:	f7ff fef1 	bl	8012b60 <pppos_output_last>
 8012d7e:	4604      	mov	r4, r0
  pbuf_free(p);
 8012d80:	4650      	mov	r0, sl
 8012d82:	f7f6 f9a5 	bl	80090d0 <pbuf_free>
}
 8012d86:	4620      	mov	r0, r4
 8012d88:	b004      	add	sp, #16
 8012d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 8012d8e:	4650      	mov	r0, sl
 8012d90:	f7f6 f99e 	bl	80090d0 <pbuf_free>
    return ERR_MEM;
 8012d94:	f04f 34ff 	mov.w	r4, #4294967295
 8012d98:	e7f5      	b.n	8012d86 <pppos_write+0x7e>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8012d9a:	2100      	movs	r1, #0
 8012d9c:	9101      	str	r1, [sp, #4]
 8012d9e:	9100      	str	r1, [sp, #0]
 8012da0:	237e      	movs	r3, #126	; 0x7e
 8012da2:	463a      	mov	r2, r7
 8012da4:	4630      	mov	r0, r6
 8012da6:	f7ff fe81 	bl	8012aac <pppos_output_append>
 8012daa:	4601      	mov	r1, r0
 8012dac:	e7c3      	b.n	8012d36 <pppos_write+0x2e>

08012dae <pppos_input_free_current_packet>:
{
 8012dae:	b510      	push	{r4, lr}
 8012db0:	4604      	mov	r4, r0
  if (pppos->in_head != NULL) {
 8012db2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012db4:	b153      	cbz	r3, 8012dcc <pppos_input_free_current_packet+0x1e>
    if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
 8012db6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8012db8:	b118      	cbz	r0, 8012dc2 <pppos_input_free_current_packet+0x14>
 8012dba:	4283      	cmp	r3, r0
 8012dbc:	d001      	beq.n	8012dc2 <pppos_input_free_current_packet+0x14>
      pbuf_free(pppos->in_tail);
 8012dbe:	f7f6 f987 	bl	80090d0 <pbuf_free>
    pbuf_free(pppos->in_head);
 8012dc2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8012dc4:	f7f6 f984 	bl	80090d0 <pbuf_free>
    pppos->in_head = NULL;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	6523      	str	r3, [r4, #80]	; 0x50
  pppos->in_tail = NULL;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	6563      	str	r3, [r4, #84]	; 0x54
}
 8012dd0:	bd10      	pop	{r4, pc}

08012dd2 <pppos_disconnect>:
{
 8012dd2:	b510      	push	{r4, lr}
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	4608      	mov	r0, r1
  pppos->open = 0;
 8012dd8:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8012ddc:	f36f 0300 	bfc	r3, #0, #1
 8012de0:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
  pppos_input_free_current_packet(pppos);
 8012de4:	f7ff ffe3 	bl	8012dae <pppos_input_free_current_packet>
  ppp_link_end(ppp); /* notify upper layers */
 8012de8:	4620      	mov	r0, r4
 8012dea:	f7ff fd95 	bl	8012918 <ppp_link_end>
}
 8012dee:	bd10      	pop	{r4, pc}

08012df0 <pppos_connect>:
{
 8012df0:	b538      	push	{r3, r4, r5, lr}
 8012df2:	4605      	mov	r5, r0
 8012df4:	460c      	mov	r4, r1
  memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
 8012df6:	2258      	movs	r2, #88	; 0x58
 8012df8:	2100      	movs	r1, #0
 8012dfa:	f104 0008 	add.w	r0, r4, #8
 8012dfe:	f001 faef 	bl	80143e0 <memset>
  pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
 8012e02:	2360      	movs	r3, #96	; 0x60
 8012e04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  pppos->out_accm[15] = 0x60;
 8012e08:	76e3      	strb	r3, [r4, #27]
  pppos->open = 1;
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  ppp_start(ppp); /* notify upper layers */
 8012e10:	4628      	mov	r0, r5
 8012e12:	f7ff fd71 	bl	80128f8 <ppp_start>
}
 8012e16:	bd38      	pop	{r3, r4, r5, pc}

08012e18 <pppos_input_drop>:
{
 8012e18:	b510      	push	{r4, lr}
 8012e1a:	4604      	mov	r4, r0
  pppos_input_free_current_packet(pppos);
 8012e1c:	f7ff ffc7 	bl	8012dae <pppos_input_free_current_packet>
  vj_uncompress_err(&pppos->ppp->vj_comp);
 8012e20:	6820      	ldr	r0, [r4, #0]
 8012e22:	30dc      	adds	r0, #220	; 0xdc
 8012e24:	f000 ff92 	bl	8013d4c <vj_uncompress_err>
}
 8012e28:	bd10      	pop	{r4, pc}
	...

08012e2c <pppos_create>:
{
 8012e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e30:	b082      	sub	sp, #8
 8012e32:	4605      	mov	r5, r0
 8012e34:	4688      	mov	r8, r1
 8012e36:	4616      	mov	r6, r2
 8012e38:	461f      	mov	r7, r3
  pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
 8012e3a:	4811      	ldr	r0, [pc, #68]	; (8012e80 <pppos_create+0x54>)
 8012e3c:	f7f5 fe50 	bl	8008ae0 <memp_malloc_pool>
  if (pppos == NULL) {
 8012e40:	4604      	mov	r4, r0
 8012e42:	b1d0      	cbz	r0, 8012e7a <pppos_create+0x4e>
  ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
 8012e44:	9700      	str	r7, [sp, #0]
 8012e46:	4633      	mov	r3, r6
 8012e48:	4602      	mov	r2, r0
 8012e4a:	490e      	ldr	r1, [pc, #56]	; (8012e84 <pppos_create+0x58>)
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	f7ff fcf9 	bl	8012844 <ppp_new>
  if (ppp == NULL) {
 8012e52:	4605      	mov	r5, r0
 8012e54:	b160      	cbz	r0, 8012e70 <pppos_create+0x44>
  memset(pppos, 0, sizeof(pppos_pcb));
 8012e56:	2258      	movs	r2, #88	; 0x58
 8012e58:	2100      	movs	r1, #0
 8012e5a:	f104 0008 	add.w	r0, r4, #8
 8012e5e:	f001 fabf 	bl	80143e0 <memset>
  pppos->ppp = ppp;
 8012e62:	6025      	str	r5, [r4, #0]
  pppos->output_cb = output_cb;
 8012e64:	f8c4 8004 	str.w	r8, [r4, #4]
}
 8012e68:	4628      	mov	r0, r5
 8012e6a:	b002      	add	sp, #8
 8012e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 8012e70:	4621      	mov	r1, r4
 8012e72:	4803      	ldr	r0, [pc, #12]	; (8012e80 <pppos_create+0x54>)
 8012e74:	f7f5 fe64 	bl	8008b40 <memp_free_pool>
    return NULL;
 8012e78:	e7f6      	b.n	8012e68 <pppos_create+0x3c>
    return NULL;
 8012e7a:	4605      	mov	r5, r0
 8012e7c:	e7f4      	b.n	8012e68 <pppos_create+0x3c>
 8012e7e:	bf00      	nop
 8012e80:	08019aa0 	.word	0x08019aa0
 8012e84:	08019ab0 	.word	0x08019ab0

08012e88 <pppos_input>:
{
 8012e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
 8012e8c:	6905      	ldr	r5, [r0, #16]
  while (l-- > 0) {
 8012e8e:	2a00      	cmp	r2, #0
 8012e90:	f340 80e1 	ble.w	8013056 <pppos_input+0x1ce>
 8012e94:	4682      	mov	sl, r0
 8012e96:	460e      	mov	r6, r1
 8012e98:	188f      	adds	r7, r1, r2
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 8012e9a:	f04f 0801 	mov.w	r8, #1
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 8012e9e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 801305c <pppos_input+0x1d4>
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 8012ea2:	f44f 7bc1 	mov.w	fp, #386	; 0x182
 8012ea6:	e059      	b.n	8012f5c <pppos_input+0xd4>
        pppos->in_escaped = 1;
 8012ea8:	f885 805d 	strb.w	r8, [r5, #93]	; 0x5d
 8012eac:	e054      	b.n	8012f58 <pppos_input+0xd0>
          pppos_input_drop(pppos);
 8012eae:	4628      	mov	r0, r5
 8012eb0:	f7ff ffb2 	bl	8012e18 <pppos_input_drop>
 8012eb4:	e017      	b.n	8012ee6 <pppos_input+0x5e>
          pppos_input_drop(pppos);
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	f7ff ffae 	bl	8012e18 <pppos_input_drop>
 8012ebc:	e013      	b.n	8012ee6 <pppos_input+0x5e>
            pppos->in_tail->tot_len = pppos->in_tail->len;
 8012ebe:	8113      	strh	r3, [r2, #8]
            if (pppos->in_tail != pppos->in_head) {
 8012ec0:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8012ec2:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8012ec4:	4281      	cmp	r1, r0
 8012ec6:	d001      	beq.n	8012ecc <pppos_input+0x44>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 8012ec8:	f7f6 fa80 	bl	80093cc <pbuf_cat>
            pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
 8012ecc:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8012ece:	8901      	ldrh	r1, [r0, #8]
 8012ed0:	3902      	subs	r1, #2
 8012ed2:	b289      	uxth	r1, r1
 8012ed4:	f7f6 f9f6 	bl	80092c4 <pbuf_realloc>
          inp = pppos->in_head;
 8012ed8:	6d29      	ldr	r1, [r5, #80]	; 0x50
          pppos->in_head = NULL;
 8012eda:	2300      	movs	r3, #0
 8012edc:	652b      	str	r3, [r5, #80]	; 0x50
          pppos->in_tail = NULL;
 8012ede:	656b      	str	r3, [r5, #84]	; 0x54
          ppp_input(ppp, inp);
 8012ee0:	4650      	mov	r0, sl
 8012ee2:	f7ff fb91 	bl	8012608 <ppp_input>
        pppos->in_fcs = PPP_INITFCS;
 8012ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012eea:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
        pppos->in_state = PDADDRESS;
 8012eee:	2302      	movs	r3, #2
 8012ef0:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        pppos->in_escaped = 0;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8012efa:	e02d      	b.n	8012f58 <pppos_input+0xd0>
      if (pppos->in_escaped) {
 8012efc:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8012f00:	b123      	cbz	r3, 8012f0c <pppos_input+0x84>
        pppos->in_escaped = 0;
 8012f02:	2300      	movs	r3, #0
 8012f04:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        cur_char ^= PPP_TRANS;
 8012f08:	f084 0420 	eor.w	r4, r4, #32
      switch(pppos->in_state) {
 8012f0c:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8012f10:	2b06      	cmp	r3, #6
 8012f12:	d817      	bhi.n	8012f44 <pppos_input+0xbc>
 8012f14:	e8df f003 	tbb	[pc, r3]
 8012f18:	0c0a0604 	.word	0x0c0a0604
 8012f1c:	620e      	.short	0x620e
 8012f1e:	6b          	.byte	0x6b
 8012f1f:	00          	.byte	0x00
          if (cur_char != PPP_ALLSTATIONS) {
 8012f20:	2cff      	cmp	r4, #255	; 0xff
 8012f22:	d10f      	bne.n	8012f44 <pppos_input+0xbc>
          pppos->in_fcs = PPP_INITFCS;
 8012f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f28:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
          if (cur_char == PPP_ALLSTATIONS) {
 8012f2c:	2cff      	cmp	r4, #255	; 0xff
 8012f2e:	d046      	beq.n	8012fbe <pppos_input+0x136>
          if (cur_char == PPP_UI) {
 8012f30:	2c03      	cmp	r4, #3
 8012f32:	d048      	beq.n	8012fc6 <pppos_input+0x13e>
          if (cur_char & 1) {
 8012f34:	f014 0f01 	tst.w	r4, #1
 8012f38:	d049      	beq.n	8012fce <pppos_input+0x146>
            pppos->in_protocol = cur_char;
 8012f3a:	f8a5 4058 	strh.w	r4, [r5, #88]	; 0x58
            pppos->in_state = PDDATA;
 8012f3e:	2306      	movs	r3, #6
 8012f40:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 8012f44:	f8b5 205a 	ldrh.w	r2, [r5, #90]	; 0x5a
 8012f48:	4054      	eors	r4, r2
 8012f4a:	b2e4      	uxtb	r4, r4
 8012f4c:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 8012f50:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8012f54:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
  while (l-- > 0) {
 8012f58:	42b7      	cmp	r7, r6
 8012f5a:	d07c      	beq.n	8013056 <pppos_input+0x1ce>
    cur_char = *s++;
 8012f5c:	f816 4b01 	ldrb.w	r4, [r6], #1
    if (!pppos->open) {
 8012f60:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012f64:	f013 0f01 	tst.w	r3, #1
 8012f68:	d075      	beq.n	8013056 <pppos_input+0x1ce>
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 8012f6a:	eb05 02d4 	add.w	r2, r5, r4, lsr #3
 8012f6e:	f004 0307 	and.w	r3, r4, #7
 8012f72:	fa08 f303 	lsl.w	r3, r8, r3
 8012f76:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
    if (escaped) {
 8012f7a:	421a      	tst	r2, r3
 8012f7c:	d0be      	beq.n	8012efc <pppos_input+0x74>
      if (cur_char == PPP_ESCAPE) {
 8012f7e:	2c7d      	cmp	r4, #125	; 0x7d
 8012f80:	d092      	beq.n	8012ea8 <pppos_input+0x20>
      } else if (cur_char == PPP_FLAG) {
 8012f82:	2c7e      	cmp	r4, #126	; 0x7e
 8012f84:	d1e8      	bne.n	8012f58 <pppos_input+0xd0>
        if (pppos->in_state <= PDADDRESS) {
 8012f86:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8012f8a:	2b02      	cmp	r3, #2
 8012f8c:	d9ab      	bls.n	8012ee6 <pppos_input+0x5e>
        } else if (pppos->in_state < PDDATA) {
 8012f8e:	2b05      	cmp	r3, #5
 8012f90:	d98d      	bls.n	8012eae <pppos_input+0x26>
        } else if (pppos->in_fcs != PPP_GOODFCS) {
 8012f92:	f8b5 205a 	ldrh.w	r2, [r5, #90]	; 0x5a
 8012f96:	f24f 03b8 	movw	r3, #61624	; 0xf0b8
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d18b      	bne.n	8012eb6 <pppos_input+0x2e>
          if(pppos->in_tail->len > 2) {
 8012f9e:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8012fa0:	8953      	ldrh	r3, [r2, #10]
 8012fa2:	2b02      	cmp	r3, #2
 8012fa4:	d98b      	bls.n	8012ebe <pppos_input+0x36>
            pppos->in_tail->len -= 2;
 8012fa6:	3b02      	subs	r3, #2
 8012fa8:	8153      	strh	r3, [r2, #10]
            pppos->in_tail->tot_len = pppos->in_tail->len;
 8012faa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8012fac:	895a      	ldrh	r2, [r3, #10]
 8012fae:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 8012fb0:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8012fb2:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8012fb4:	4281      	cmp	r1, r0
 8012fb6:	d08f      	beq.n	8012ed8 <pppos_input+0x50>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 8012fb8:	f7f6 fa08 	bl	80093cc <pbuf_cat>
 8012fbc:	e78c      	b.n	8012ed8 <pppos_input+0x50>
            pppos->in_state = PDCONTROL;
 8012fbe:	2303      	movs	r3, #3
 8012fc0:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
            break;
 8012fc4:	e7be      	b.n	8012f44 <pppos_input+0xbc>
            pppos->in_state = PDPROTOCOL1;
 8012fc6:	2304      	movs	r3, #4
 8012fc8:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
            break;
 8012fcc:	e7ba      	b.n	8012f44 <pppos_input+0xbc>
            pppos->in_protocol = (u16_t)cur_char << 8;
 8012fce:	0223      	lsls	r3, r4, #8
 8012fd0:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
            pppos->in_state = PDPROTOCOL2;
 8012fd4:	2305      	movs	r3, #5
 8012fd6:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
 8012fda:	e7b3      	b.n	8012f44 <pppos_input+0xbc>
          pppos->in_protocol |= cur_char;
 8012fdc:	f8b5 3058 	ldrh.w	r3, [r5, #88]	; 0x58
 8012fe0:	4323      	orrs	r3, r4
 8012fe2:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
          pppos->in_state = PDDATA;
 8012fe6:	2306      	movs	r3, #6
 8012fe8:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
          break;
 8012fec:	e7aa      	b.n	8012f44 <pppos_input+0xbc>
          if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
 8012fee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8012ff0:	b19b      	cbz	r3, 801301a <pppos_input+0x192>
 8012ff2:	895a      	ldrh	r2, [r3, #10]
 8012ff4:	f5b2 7f14 	cmp.w	r2, #592	; 0x250
 8012ff8:	d006      	beq.n	8013008 <pppos_input+0x180>
          ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
 8012ffa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8012ffc:	6859      	ldr	r1, [r3, #4]
 8012ffe:	895a      	ldrh	r2, [r3, #10]
 8013000:	1c50      	adds	r0, r2, #1
 8013002:	8158      	strh	r0, [r3, #10]
 8013004:	548c      	strb	r4, [r1, r2]
          break;
 8013006:	e79d      	b.n	8012f44 <pppos_input+0xbc>
              pppos->in_tail->tot_len = pppos->in_tail->len;
 8013008:	811a      	strh	r2, [r3, #8]
              if (pppos->in_tail != pppos->in_head) {
 801300a:	6d69      	ldr	r1, [r5, #84]	; 0x54
 801300c:	6d28      	ldr	r0, [r5, #80]	; 0x50
 801300e:	4281      	cmp	r1, r0
 8013010:	d003      	beq.n	801301a <pppos_input+0x192>
                pbuf_cat(pppos->in_head, pppos->in_tail);
 8013012:	f7f6 f9db 	bl	80093cc <pbuf_cat>
                pppos->in_tail = NULL;
 8013016:	2300      	movs	r3, #0
 8013018:	656b      	str	r3, [r5, #84]	; 0x54
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 801301a:	465a      	mov	r2, fp
 801301c:	2100      	movs	r1, #0
 801301e:	4608      	mov	r0, r1
 8013020:	f7f6 f8c0 	bl	80091a4 <pbuf_alloc>
            if (next_pbuf == NULL) {
 8013024:	4603      	mov	r3, r0
 8013026:	b118      	cbz	r0, 8013030 <pppos_input+0x1a8>
            if (pppos->in_head == NULL) {
 8013028:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801302a:	b13a      	cbz	r2, 801303c <pppos_input+0x1b4>
            pppos->in_tail = next_pbuf;
 801302c:	656b      	str	r3, [r5, #84]	; 0x54
 801302e:	e7e4      	b.n	8012ffa <pppos_input+0x172>
              pppos_input_drop(pppos);
 8013030:	4628      	mov	r0, r5
 8013032:	f7ff fef1 	bl	8012e18 <pppos_input_drop>
              pppos->in_state = PDSTART;  /* Wait for flag sequence. */
 8013036:	f885 805c 	strb.w	r8, [r5, #92]	; 0x5c
              break;
 801303a:	e783      	b.n	8012f44 <pppos_input+0xbc>
              u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
 801303c:	6841      	ldr	r1, [r0, #4]
              next_pbuf->len += sizeof(pppos->in_protocol);
 801303e:	8942      	ldrh	r2, [r0, #10]
 8013040:	3202      	adds	r2, #2
 8013042:	8142      	strh	r2, [r0, #10]
              *(payload++) = pppos->in_protocol >> 8;
 8013044:	f8b5 2058 	ldrh.w	r2, [r5, #88]	; 0x58
 8013048:	0a12      	lsrs	r2, r2, #8
 801304a:	700a      	strb	r2, [r1, #0]
              *(payload) = pppos->in_protocol & 0xFF;
 801304c:	f8b5 2058 	ldrh.w	r2, [r5, #88]	; 0x58
 8013050:	704a      	strb	r2, [r1, #1]
              pppos->in_head = next_pbuf;
 8013052:	6528      	str	r0, [r5, #80]	; 0x50
 8013054:	e7ea      	b.n	801302c <pppos_input+0x1a4>
}
 8013056:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801305a:	bf00      	nop
 801305c:	080198a0 	.word	0x080198a0

08013060 <ppp_vslprintf>:
/*
 * ppp_vslprintf - like ppp_slprintf, takes a va_list instead of a list of args.
 */
#define OUTCHAR(c)	(buflen > 0? (--buflen, *buf++ = (c)): 0)

int ppp_vslprintf(char *buf, int buflen, const char *fmt, va_list args) {
 8013060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013064:	b091      	sub	sp, #68	; 0x44
 8013066:	9007      	str	r0, [sp, #28]
 8013068:	9304      	str	r3, [sp, #16]
#if PRINTPKT_SUPPORT
    struct buffer_info bufinfo;
#endif /* PRINTPKT_SUPPORT */

    buf0 = buf;
    --buflen;
 801306a:	f101 38ff 	add.w	r8, r1, #4294967295
    while (buflen > 0) {
 801306e:	f1b8 0f00 	cmp.w	r8, #0
 8013072:	bfd8      	it	le
 8013074:	4681      	movle	r9, r0
 8013076:	f340 8384 	ble.w	8013782 <ppp_vslprintf+0x722>
 801307a:	4617      	mov	r7, r2
 801307c:	f8dd 901c 	ldr.w	r9, [sp, #28]
	}
	if (c == '*') {
	    width = va_arg(args, int);
	    c = *++fmt;
	} else {
	    while (lwip_isdigit(c)) {
 8013080:	f8df a724 	ldr.w	sl, [pc, #1828]	; 80137a8 <ppp_vslprintf+0x748>
	}
	if (base != 0) {
	    str = num + sizeof(num);
	    *--str = 0;
	    while (str > num + neg) {
		*--str = hexchars[val % base];
 8013084:	f8df b724 	ldr.w	fp, [pc, #1828]	; 80137ac <ppp_vslprintf+0x74c>
 8013088:	e122      	b.n	80132d0 <ppp_vslprintf+0x270>
	    len = f - fmt;
 801308a:	1be5      	subs	r5, r4, r7
	    if (len > buflen)
 801308c:	4545      	cmp	r5, r8
 801308e:	bfa8      	it	ge
 8013090:	4645      	movge	r5, r8
	    memcpy(buf, fmt, len);
 8013092:	462a      	mov	r2, r5
 8013094:	4639      	mov	r1, r7
 8013096:	4648      	mov	r0, r9
 8013098:	f001 f97a 	bl	8014390 <memcpy>
	    buf += len;
 801309c:	44a9      	add	r9, r5
	    buflen -= len;
 801309e:	eba8 0805 	sub.w	r8, r8, r5
 80130a2:	4627      	mov	r7, r4
 80130a4:	e121      	b.n	80132ea <ppp_vslprintf+0x28a>
	    c = *++fmt;
 80130a6:	1cbb      	adds	r3, r7, #2
	    fillch = '0';
 80130a8:	9405      	str	r4, [sp, #20]
	    c = *++fmt;
 80130aa:	78bc      	ldrb	r4, [r7, #2]
 80130ac:	e128      	b.n	8013300 <ppp_vslprintf+0x2a0>
	    while (lwip_isdigit(c)) {
 80130ae:	f814 200a 	ldrb.w	r2, [r4, sl]
 80130b2:	f012 0f04 	tst.w	r2, #4
	width = 0;
 80130b6:	bf08      	it	eq
 80130b8:	2500      	moveq	r5, #0
	    while (lwip_isdigit(c)) {
 80130ba:	f000 812a 	beq.w	8013312 <ppp_vslprintf+0x2b2>
	width = 0;
 80130be:	2500      	movs	r5, #0
		width = width * 10 + c - '0';
 80130c0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80130c4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80130c8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
		c = *++fmt;
 80130cc:	f813 4f01 	ldrb.w	r4, [r3, #1]!
	    while (lwip_isdigit(c)) {
 80130d0:	f814 200a 	ldrb.w	r2, [r4, sl]
 80130d4:	f012 0f04 	tst.w	r2, #4
 80130d8:	d1f2      	bne.n	80130c0 <ppp_vslprintf+0x60>
 80130da:	e11a      	b.n	8013312 <ppp_vslprintf+0x2b2>
	    c = *++fmt;
 80130dc:	785a      	ldrb	r2, [r3, #1]
 80130de:	4614      	mov	r4, r2
	    if (c == '*') {
 80130e0:	2a2a      	cmp	r2, #42	; 0x2a
 80130e2:	d144      	bne.n	801316e <ppp_vslprintf+0x10e>
		prec = va_arg(args, int);
 80130e4:	9a04      	ldr	r2, [sp, #16]
 80130e6:	f852 6b04 	ldr.w	r6, [r2], #4
		c = *++fmt;
 80130ea:	789c      	ldrb	r4, [r3, #2]
		prec = va_arg(args, int);
 80130ec:	9204      	str	r2, [sp, #16]
		c = *++fmt;
 80130ee:	3302      	adds	r3, #2
	++fmt;
 80130f0:	1c5f      	adds	r7, r3, #1
	switch (c) {
 80130f2:	f1a4 0242 	sub.w	r2, r4, #66	; 0x42
 80130f6:	2a36      	cmp	r2, #54	; 0x36
 80130f8:	f200 82a2 	bhi.w	8013640 <ppp_vslprintf+0x5e0>
 80130fc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013100:	02a0028e 	.word	0x02a0028e
 8013104:	02a002a0 	.word	0x02a002a0
 8013108:	02a002a0 	.word	0x02a002a0
 801310c:	019402a0 	.word	0x019402a0
 8013110:	02a002a0 	.word	0x02a002a0
 8013114:	02a002a0 	.word	0x02a002a0
 8013118:	02a002a0 	.word	0x02a002a0
 801311c:	02a002a0 	.word	0x02a002a0
 8013120:	02a002a0 	.word	0x02a002a0
 8013124:	02a002a0 	.word	0x02a002a0
 8013128:	02a002a0 	.word	0x02a002a0
 801312c:	02a000b3 	.word	0x02a000b3
 8013130:	02a002a0 	.word	0x02a002a0
 8013134:	02a002a0 	.word	0x02a002a0
 8013138:	02a002a0 	.word	0x02a002a0
 801313c:	02a002a0 	.word	0x02a002a0
 8013140:	018602a0 	.word	0x018602a0
 8013144:	02a00088 	.word	0x02a00088
 8013148:	02a002a0 	.word	0x02a002a0
 801314c:	02a002a0 	.word	0x02a002a0
 8013150:	02a002a0 	.word	0x02a002a0
 8013154:	02a0004f 	.word	0x02a0004f
 8013158:	00a902a0 	.word	0x00a902a0
 801315c:	01ad02a0 	.word	0x01ad02a0
 8013160:	00bd02a0 	.word	0x00bd02a0
 8013164:	009f02a0 	.word	0x009f02a0
 8013168:	02a001ad 	.word	0x02a001ad
 801316c:	00b3      	.short	0x00b3
	    c = *++fmt;
 801316e:	3301      	adds	r3, #1
		while (lwip_isdigit(c)) {
 8013170:	f812 200a 	ldrb.w	r2, [r2, sl]
 8013174:	f012 0f04 	tst.w	r2, #4
		prec = 0;
 8013178:	bf08      	it	eq
 801317a:	2600      	moveq	r6, #0
		while (lwip_isdigit(c)) {
 801317c:	f000 80ce 	beq.w	801331c <ppp_vslprintf+0x2bc>
		prec = 0;
 8013180:	2600      	movs	r6, #0
		    prec = prec * 10 + c - '0';
 8013182:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8013186:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801318a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
		    c = *++fmt;
 801318e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
		while (lwip_isdigit(c)) {
 8013192:	f814 200a 	ldrb.w	r2, [r4, sl]
 8013196:	f012 0f04 	tst.w	r2, #4
 801319a:	d1f2      	bne.n	8013182 <ppp_vslprintf+0x122>
 801319c:	e7a8      	b.n	80130f0 <ppp_vslprintf+0x90>
	++fmt;
 801319e:	9a04      	ldr	r2, [sp, #16]
 80131a0:	4639      	mov	r1, r7
 80131a2:	e001      	b.n	80131a8 <ppp_vslprintf+0x148>
 80131a4:	9a04      	ldr	r2, [sp, #16]
 80131a6:	4639      	mov	r1, r7
	    c = *fmt++;
 80131a8:	1c9f      	adds	r7, r3, #2
 80131aa:	785b      	ldrb	r3, [r3, #1]
	    switch (c) {
 80131ac:	2b64      	cmp	r3, #100	; 0x64
 80131ae:	d015      	beq.n	80131dc <ppp_vslprintf+0x17c>
 80131b0:	2b75      	cmp	r3, #117	; 0x75
 80131b2:	d022      	beq.n	80131fa <ppp_vslprintf+0x19a>
		OUTCHAR('%');
 80131b4:	f1b8 0f00 	cmp.w	r8, #0
 80131b8:	f340 82e3 	ble.w	8013782 <ppp_vslprintf+0x722>
 80131bc:	2325      	movs	r3, #37	; 0x25
 80131be:	f889 3000 	strb.w	r3, [r9]
		OUTCHAR('l');
 80131c2:	f1b8 0f01 	cmp.w	r8, #1
 80131c6:	dd20      	ble.n	801320a <ppp_vslprintf+0x1aa>
 80131c8:	f1a8 0802 	sub.w	r8, r8, #2
 80131cc:	236c      	movs	r3, #108	; 0x6c
 80131ce:	f889 3001 	strb.w	r3, [r9, #1]
 80131d2:	9204      	str	r2, [sp, #16]
 80131d4:	460f      	mov	r7, r1
 80131d6:	f109 0902 	add.w	r9, r9, #2
 80131da:	e075      	b.n	80132c8 <ppp_vslprintf+0x268>
		val = va_arg(args, long);
 80131dc:	4613      	mov	r3, r2
 80131de:	f853 2b04 	ldr.w	r2, [r3], #4
 80131e2:	9304      	str	r3, [sp, #16]
		if ((long)val < 0) {
 80131e4:	2a00      	cmp	r2, #0
 80131e6:	db03      	blt.n	80131f0 <ppp_vslprintf+0x190>
	neg = 0;
 80131e8:	2300      	movs	r3, #0
 80131ea:	9306      	str	r3, [sp, #24]
		base = 10;
 80131ec:	200a      	movs	r0, #10
 80131ee:	e01c      	b.n	801322a <ppp_vslprintf+0x1ca>
		    val = (unsigned long)-(long)val;
 80131f0:	4252      	negs	r2, r2
		    neg = 1;
 80131f2:	2301      	movs	r3, #1
 80131f4:	9306      	str	r3, [sp, #24]
		base = 10;
 80131f6:	200a      	movs	r0, #10
 80131f8:	e017      	b.n	801322a <ppp_vslprintf+0x1ca>
		val = va_arg(args, unsigned long);
 80131fa:	4613      	mov	r3, r2
 80131fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013200:	9304      	str	r3, [sp, #16]
	neg = 0;
 8013202:	2300      	movs	r3, #0
 8013204:	9306      	str	r3, [sp, #24]
		base = 10;
 8013206:	200a      	movs	r0, #10
		break;
 8013208:	e00f      	b.n	801322a <ppp_vslprintf+0x1ca>
		OUTCHAR('%');
 801320a:	f109 0901 	add.w	r9, r9, #1
 801320e:	e2b8      	b.n	8013782 <ppp_vslprintf+0x722>
	++fmt;
 8013210:	9b04      	ldr	r3, [sp, #16]
 8013212:	e000      	b.n	8013216 <ppp_vslprintf+0x1b6>
 8013214:	9b04      	ldr	r3, [sp, #16]
	    i = va_arg(args, int);
 8013216:	f853 2b04 	ldr.w	r2, [r3], #4
 801321a:	9304      	str	r3, [sp, #16]
	    if (i < 0) {
 801321c:	2a00      	cmp	r2, #0
		val = -i;
 801321e:	bfba      	itte	lt
 8013220:	4252      	neglt	r2, r2
		neg = 1;
 8013222:	2301      	movlt	r3, #1
	neg = 0;
 8013224:	2300      	movge	r3, #0
 8013226:	9306      	str	r3, [sp, #24]
	    base = 10;
 8013228:	200a      	movs	r0, #10
	    *--str = 0;
 801322a:	2300      	movs	r3, #0
 801322c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	    while (str > num + neg) {
 8013230:	ab08      	add	r3, sp, #32
 8013232:	9906      	ldr	r1, [sp, #24]
 8013234:	185c      	adds	r4, r3, r1
 8013236:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
 801323a:	469e      	mov	lr, r3
 801323c:	e20b      	b.n	8013656 <ppp_vslprintf+0x5f6>
	++fmt;
 801323e:	9b04      	ldr	r3, [sp, #16]
 8013240:	e000      	b.n	8013244 <ppp_vslprintf+0x1e4>
 8013242:	9b04      	ldr	r3, [sp, #16]
	    val = va_arg(args, unsigned int);
 8013244:	f853 2b04 	ldr.w	r2, [r3], #4
 8013248:	9304      	str	r3, [sp, #16]
	neg = 0;
 801324a:	2300      	movs	r3, #0
 801324c:	9306      	str	r3, [sp, #24]
	    base = 10;
 801324e:	200a      	movs	r0, #10
	    break;
 8013250:	e7eb      	b.n	801322a <ppp_vslprintf+0x1ca>
	++fmt;
 8013252:	9b04      	ldr	r3, [sp, #16]
 8013254:	e000      	b.n	8013258 <ppp_vslprintf+0x1f8>
 8013256:	9b04      	ldr	r3, [sp, #16]
	    val = va_arg(args, unsigned int);
 8013258:	f853 2b04 	ldr.w	r2, [r3], #4
 801325c:	9304      	str	r3, [sp, #16]
	neg = 0;
 801325e:	2300      	movs	r3, #0
 8013260:	9306      	str	r3, [sp, #24]
	    base = 8;
 8013262:	2008      	movs	r0, #8
	    break;
 8013264:	e7e1      	b.n	801322a <ppp_vslprintf+0x1ca>
	++fmt;
 8013266:	9b04      	ldr	r3, [sp, #16]
 8013268:	e000      	b.n	801326c <ppp_vslprintf+0x20c>
 801326a:	9b04      	ldr	r3, [sp, #16]
	    val = va_arg(args, unsigned int);
 801326c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013270:	9304      	str	r3, [sp, #16]
	neg = 0;
 8013272:	2300      	movs	r3, #0
 8013274:	9306      	str	r3, [sp, #24]
	    base = 16;
 8013276:	2010      	movs	r0, #16
	    break;
 8013278:	e7d7      	b.n	801322a <ppp_vslprintf+0x1ca>
	++fmt;
 801327a:	9b04      	ldr	r3, [sp, #16]
 801327c:	e000      	b.n	8013280 <ppp_vslprintf+0x220>
 801327e:	9b04      	ldr	r3, [sp, #16]
	    str = va_arg(args, char *);
 8013280:	f853 4b04 	ldr.w	r4, [r3], #4
 8013284:	9304      	str	r3, [sp, #16]
	    default:
		break;
	    }
	    len = num + sizeof(num) - 1 - str;
	} else {
	    len = strlen(str);
 8013286:	4620      	mov	r0, r4
 8013288:	f7ec ffd8 	bl	800023c <strlen>
 801328c:	4603      	mov	r3, r0
	    if (prec >= 0 && len > prec)
 801328e:	2e00      	cmp	r6, #0
 8013290:	db03      	blt.n	801329a <ppp_vslprintf+0x23a>
 8013292:	4603      	mov	r3, r0
 8013294:	42b0      	cmp	r0, r6
 8013296:	bfa8      	it	ge
 8013298:	4633      	movge	r3, r6
		len = prec;
	}
	if (width > 0) {
 801329a:	2d00      	cmp	r5, #0
 801329c:	dd08      	ble.n	80132b0 <ppp_vslprintf+0x250>
	    if (width > buflen)
		width = buflen;
	    if ((n = width - len) > 0) {
 801329e:	4545      	cmp	r5, r8
 80132a0:	bfd4      	ite	le
 80132a2:	ebc3 0505 	rsble	r5, r3, r5
 80132a6:	ebc3 0508 	rsbgt	r5, r3, r8
 80132aa:	2d00      	cmp	r5, #0
 80132ac:	f300 81f1 	bgt.w	8013692 <ppp_vslprintf+0x632>
		buflen -= n;
		for (; n > 0; --n)
		    *buf++ = fillch;
	    }
	}
	if (len > buflen)
 80132b0:	4543      	cmp	r3, r8
 80132b2:	bfa8      	it	ge
 80132b4:	4643      	movge	r3, r8
 80132b6:	461d      	mov	r5, r3
	    len = buflen;
	memcpy(buf, str, len);
 80132b8:	461a      	mov	r2, r3
 80132ba:	4621      	mov	r1, r4
 80132bc:	4648      	mov	r0, r9
 80132be:	f001 f867 	bl	8014390 <memcpy>
	buf += len;
 80132c2:	44a9      	add	r9, r5
	buflen -= len;
 80132c4:	eba8 0805 	sub.w	r8, r8, r5
    while (buflen > 0) {
 80132c8:	f1b8 0f00 	cmp.w	r8, #0
 80132cc:	f340 8259 	ble.w	8013782 <ppp_vslprintf+0x722>
	for (f = fmt; *f != '%' && *f != 0; ++f)
 80132d0:	783b      	ldrb	r3, [r7, #0]
 80132d2:	2b25      	cmp	r3, #37	; 0x25
 80132d4:	bf18      	it	ne
 80132d6:	463c      	movne	r4, r7
 80132d8:	d00b      	beq.n	80132f2 <ppp_vslprintf+0x292>
 80132da:	b11b      	cbz	r3, 80132e4 <ppp_vslprintf+0x284>
 80132dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80132e0:	2b25      	cmp	r3, #37	; 0x25
 80132e2:	d1fa      	bne.n	80132da <ppp_vslprintf+0x27a>
	if (f > fmt) {
 80132e4:	42a7      	cmp	r7, r4
 80132e6:	f4ff aed0 	bcc.w	801308a <ppp_vslprintf+0x2a>
	if (*fmt == 0)
 80132ea:	783b      	ldrb	r3, [r7, #0]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f000 8248 	beq.w	8013782 <ppp_vslprintf+0x722>
	c = *++fmt;
 80132f2:	787c      	ldrb	r4, [r7, #1]
	if (c == '0') {
 80132f4:	2c30      	cmp	r4, #48	; 0x30
 80132f6:	f43f aed6 	beq.w	80130a6 <ppp_vslprintf+0x46>
	c = *++fmt;
 80132fa:	1c7b      	adds	r3, r7, #1
	fillch = ' ';
 80132fc:	2220      	movs	r2, #32
 80132fe:	9205      	str	r2, [sp, #20]
	if (c == '*') {
 8013300:	2c2a      	cmp	r4, #42	; 0x2a
 8013302:	f47f aed4 	bne.w	80130ae <ppp_vslprintf+0x4e>
	    width = va_arg(args, int);
 8013306:	9a04      	ldr	r2, [sp, #16]
 8013308:	f852 5b04 	ldr.w	r5, [r2], #4
	    c = *++fmt;
 801330c:	785c      	ldrb	r4, [r3, #1]
	    width = va_arg(args, int);
 801330e:	9204      	str	r2, [sp, #16]
	    c = *++fmt;
 8013310:	3301      	adds	r3, #1
	if (c == '.') {
 8013312:	2c2e      	cmp	r4, #46	; 0x2e
 8013314:	f43f aee2 	beq.w	80130dc <ppp_vslprintf+0x7c>
	prec = -1;
 8013318:	f04f 36ff 	mov.w	r6, #4294967295
	++fmt;
 801331c:	1c5f      	adds	r7, r3, #1
	switch (c) {
 801331e:	f1a4 0242 	sub.w	r2, r4, #66	; 0x42
 8013322:	2a36      	cmp	r2, #54	; 0x36
 8013324:	f200 818c 	bhi.w	8013640 <ppp_vslprintf+0x5e0>
 8013328:	a101      	add	r1, pc, #4	; (adr r1, 8013330 <ppp_vslprintf+0x2d0>)
 801332a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801332e:	bf00      	nop
 8013330:	08013771 	.word	0x08013771
 8013334:	08013641 	.word	0x08013641
 8013338:	08013641 	.word	0x08013641
 801333c:	08013641 	.word	0x08013641
 8013340:	08013641 	.word	0x08013641
 8013344:	08013641 	.word	0x08013641
 8013348:	08013641 	.word	0x08013641
 801334c:	0801342d 	.word	0x0801342d
 8013350:	08013641 	.word	0x08013641
 8013354:	08013641 	.word	0x08013641
 8013358:	08013641 	.word	0x08013641
 801335c:	08013641 	.word	0x08013641
 8013360:	08013641 	.word	0x08013641
 8013364:	08013641 	.word	0x08013641
 8013368:	08013641 	.word	0x08013641
 801336c:	08013641 	.word	0x08013641
 8013370:	08013641 	.word	0x08013641
 8013374:	08013641 	.word	0x08013641
 8013378:	08013641 	.word	0x08013641
 801337c:	08013641 	.word	0x08013641
 8013380:	08013641 	.word	0x08013641
 8013384:	08013641 	.word	0x08013641
 8013388:	0801326b 	.word	0x0801326b
 801338c:	08013641 	.word	0x08013641
 8013390:	08013641 	.word	0x08013641
 8013394:	08013641 	.word	0x08013641
 8013398:	08013641 	.word	0x08013641
 801339c:	08013641 	.word	0x08013641
 80133a0:	08013641 	.word	0x08013641
 80133a4:	08013641 	.word	0x08013641
 80133a8:	08013641 	.word	0x08013641
 80133ac:	08013641 	.word	0x08013641
 80133b0:	08013641 	.word	0x08013641
 80133b4:	08013411 	.word	0x08013411
 80133b8:	08013215 	.word	0x08013215
 80133bc:	08013641 	.word	0x08013641
 80133c0:	08013641 	.word	0x08013641
 80133c4:	08013641 	.word	0x08013641
 80133c8:	08013641 	.word	0x08013641
 80133cc:	08013641 	.word	0x08013641
 80133d0:	08013641 	.word	0x08013641
 80133d4:	08013641 	.word	0x08013641
 80133d8:	080131a5 	.word	0x080131a5
 80133dc:	08013641 	.word	0x08013641
 80133e0:	08013641 	.word	0x08013641
 80133e4:	08013257 	.word	0x08013257
 80133e8:	08013641 	.word	0x08013641
 80133ec:	0801345f 	.word	0x0801345f
 80133f0:	08013641 	.word	0x08013641
 80133f4:	0801327f 	.word	0x0801327f
 80133f8:	08013641 	.word	0x08013641
 80133fc:	08013243 	.word	0x08013243
 8013400:	0801345f 	.word	0x0801345f
 8013404:	08013641 	.word	0x08013641
 8013408:	0801326b 	.word	0x0801326b
	++fmt;
 801340c:	9b04      	ldr	r3, [sp, #16]
 801340e:	e000      	b.n	8013412 <ppp_vslprintf+0x3b2>
 8013410:	9b04      	ldr	r3, [sp, #16]
	    num[0] = va_arg(args, int);
 8013412:	461a      	mov	r2, r3
 8013414:	f852 3b04 	ldr.w	r3, [r2], #4
 8013418:	9204      	str	r2, [sp, #16]
 801341a:	f88d 3020 	strb.w	r3, [sp, #32]
	    num[1] = 0;
 801341e:	2300      	movs	r3, #0
 8013420:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	    str = num;
 8013424:	ac08      	add	r4, sp, #32
	    break;
 8013426:	e72e      	b.n	8013286 <ppp_vslprintf+0x226>
	++fmt;
 8013428:	9b04      	ldr	r3, [sp, #16]
 801342a:	e000      	b.n	801342e <ppp_vslprintf+0x3ce>
 801342c:	9b04      	ldr	r3, [sp, #16]
	    ip = lwip_ntohl(ip);
 801342e:	f853 0b04 	ldr.w	r0, [r3], #4
 8013432:	9304      	str	r3, [sp, #16]
 8013434:	f7f4 f9f9 	bl	800782a <lwip_htonl>
	    ppp_slprintf(num, sizeof(num), "%d.%d.%d.%d", (ip >> 24) & 0xff,
 8013438:	b2c3      	uxtb	r3, r0
 801343a:	9302      	str	r3, [sp, #8]
 801343c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013440:	9301      	str	r3, [sp, #4]
 8013442:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013446:	9300      	str	r3, [sp, #0]
 8013448:	0e03      	lsrs	r3, r0, #24
 801344a:	4ad5      	ldr	r2, [pc, #852]	; (80137a0 <ppp_vslprintf+0x740>)
 801344c:	2120      	movs	r1, #32
 801344e:	eb0d 0001 	add.w	r0, sp, r1
 8013452:	f000 f9c1 	bl	80137d8 <ppp_slprintf>
	    str = num;
 8013456:	ac08      	add	r4, sp, #32
	    break;
 8013458:	e715      	b.n	8013286 <ppp_vslprintf+0x226>
	++fmt;
 801345a:	9b04      	ldr	r3, [sp, #16]
 801345c:	e000      	b.n	8013460 <ppp_vslprintf+0x400>
 801345e:	9b04      	ldr	r3, [sp, #16]
	    p = va_arg(args, unsigned char *);
 8013460:	f853 5b04 	ldr.w	r5, [r3], #4
 8013464:	9304      	str	r3, [sp, #16]
		p = (const unsigned char *)"<NULL>";
 8013466:	4bcf      	ldr	r3, [pc, #828]	; (80137a4 <ppp_vslprintf+0x744>)
 8013468:	2d00      	cmp	r5, #0
 801346a:	bf08      	it	eq
 801346c:	461d      	moveq	r5, r3
	    if (fillch == '0' && prec >= 0) {
 801346e:	9b05      	ldr	r3, [sp, #20]
 8013470:	2b30      	cmp	r3, #48	; 0x30
 8013472:	d012      	beq.n	801349a <ppp_vslprintf+0x43a>
		n = strlen((const char *)p);
 8013474:	4628      	mov	r0, r5
 8013476:	f7ec fee1 	bl	800023c <strlen>
		if (prec >= 0 && n > prec)
 801347a:	2e00      	cmp	r6, #0
 801347c:	db14      	blt.n	80134a8 <ppp_vslprintf+0x448>
 801347e:	4286      	cmp	r6, r0
 8013480:	bfa8      	it	ge
 8013482:	4606      	movge	r6, r0
	    while (n > 0 && buflen > 0) {
 8013484:	2e00      	cmp	r6, #0
 8013486:	f77f af1f 	ble.w	80132c8 <ppp_vslprintf+0x268>
 801348a:	f1b8 0f00 	cmp.w	r8, #0
 801348e:	f340 8178 	ble.w	8013782 <ppp_vslprintf+0x722>
 8013492:	442e      	add	r6, r5
			OUTCHAR('\\');
 8013494:	f04f 0e5c 	mov.w	lr, #92	; 0x5c
 8013498:	e094      	b.n	80135c4 <ppp_vslprintf+0x564>
	    if (fillch == '0' && prec >= 0) {
 801349a:	2e00      	cmp	r6, #0
 801349c:	daf2      	bge.n	8013484 <ppp_vslprintf+0x424>
		n = strlen((const char *)p);
 801349e:	4628      	mov	r0, r5
 80134a0:	f7ec fecc 	bl	800023c <strlen>
 80134a4:	4606      	mov	r6, r0
		if (prec >= 0 && n > prec)
 80134a6:	e7ed      	b.n	8013484 <ppp_vslprintf+0x424>
		n = strlen((const char *)p);
 80134a8:	4606      	mov	r6, r0
 80134aa:	e7eb      	b.n	8013484 <ppp_vslprintf+0x424>
		    OUTCHAR('M');
 80134ac:	f109 0901 	add.w	r9, r9, #1
 80134b0:	4690      	mov	r8, r2
 80134b2:	e09e      	b.n	80135f2 <ppp_vslprintf+0x592>
		    OUTCHAR('\\');
 80134b4:	f1b8 0f00 	cmp.w	r8, #0
 80134b8:	f340 80a3 	ble.w	8013602 <ppp_vslprintf+0x5a2>
 80134bc:	e12b      	b.n	8013716 <ppp_vslprintf+0x6b6>
			OUTCHAR('\\');
 80134be:	4641      	mov	r1, r8
 80134c0:	464a      	mov	r2, r9
			case '\t':	OUTCHAR('t');	break;
 80134c2:	2900      	cmp	r1, #0
 80134c4:	f340 8158 	ble.w	8013778 <ppp_vslprintf+0x718>
 80134c8:	f101 38ff 	add.w	r8, r1, #4294967295
 80134cc:	4691      	mov	r9, r2
 80134ce:	f04f 0374 	mov.w	r3, #116	; 0x74
 80134d2:	f809 3b01 	strb.w	r3, [r9], #1
 80134d6:	e06e      	b.n	80135b6 <ppp_vslprintf+0x556>
			OUTCHAR('\\');
 80134d8:	4641      	mov	r1, r8
 80134da:	464a      	mov	r2, r9
			case '\n':	OUTCHAR('n');	break;
 80134dc:	2900      	cmp	r1, #0
 80134de:	f340 8159 	ble.w	8013794 <ppp_vslprintf+0x734>
 80134e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80134e6:	4691      	mov	r9, r2
 80134e8:	f04f 036e 	mov.w	r3, #110	; 0x6e
 80134ec:	f809 3b01 	strb.w	r3, [r9], #1
 80134f0:	e061      	b.n	80135b6 <ppp_vslprintf+0x556>
			OUTCHAR('\\');
 80134f2:	4641      	mov	r1, r8
 80134f4:	464a      	mov	r2, r9
			case '\b':	OUTCHAR('b');	break;
 80134f6:	2900      	cmp	r1, #0
 80134f8:	f340 814f 	ble.w	801379a <ppp_vslprintf+0x73a>
 80134fc:	f101 38ff 	add.w	r8, r1, #4294967295
 8013500:	4691      	mov	r9, r2
 8013502:	f04f 0362 	mov.w	r3, #98	; 0x62
 8013506:	f809 3b01 	strb.w	r3, [r9], #1
 801350a:	e054      	b.n	80135b6 <ppp_vslprintf+0x556>
			OUTCHAR('\\');
 801350c:	4641      	mov	r1, r8
 801350e:	464a      	mov	r2, r9
			case '\f':	OUTCHAR('f');	break;
 8013510:	2900      	cmp	r1, #0
 8013512:	f340 814d 	ble.w	80137b0 <ppp_vslprintf+0x750>
 8013516:	f101 38ff 	add.w	r8, r1, #4294967295
 801351a:	4691      	mov	r9, r2
 801351c:	f04f 0366 	mov.w	r3, #102	; 0x66
 8013520:	f809 3b01 	strb.w	r3, [r9], #1
 8013524:	e047      	b.n	80135b6 <ppp_vslprintf+0x556>
			    OUTCHAR('x');
 8013526:	2900      	cmp	r1, #0
 8013528:	f340 80ef 	ble.w	801370a <ppp_vslprintf+0x6aa>
 801352c:	f1a8 0202 	sub.w	r2, r8, #2
 8013530:	f04f 0178 	mov.w	r1, #120	; 0x78
 8013534:	f889 1001 	strb.w	r1, [r9, #1]
			    OUTCHAR(hexchars[c >> 4]);
 8013538:	2a00      	cmp	r2, #0
 801353a:	dd13      	ble.n	8013564 <ppp_vslprintf+0x504>
 801353c:	f1a8 0203 	sub.w	r2, r8, #3
 8013540:	1119      	asrs	r1, r3, #4
 8013542:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8013546:	f889 1002 	strb.w	r1, [r9, #2]
			    OUTCHAR(hexchars[c & 0xf]);
 801354a:	2a00      	cmp	r2, #0
 801354c:	dd0e      	ble.n	801356c <ppp_vslprintf+0x50c>
 801354e:	f1a8 0804 	sub.w	r8, r8, #4
 8013552:	f003 030f 	and.w	r3, r3, #15
 8013556:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801355a:	f889 3003 	strb.w	r3, [r9, #3]
 801355e:	f109 0904 	add.w	r9, r9, #4
 8013562:	e028      	b.n	80135b6 <ppp_vslprintf+0x556>
			    OUTCHAR('x');
 8013564:	f109 0902 	add.w	r9, r9, #2
 8013568:	4690      	mov	r8, r2
 801356a:	e024      	b.n	80135b6 <ppp_vslprintf+0x556>
			    OUTCHAR(hexchars[c >> 4]);
 801356c:	f109 0903 	add.w	r9, r9, #3
 8013570:	4690      	mov	r8, r2
 8013572:	e103      	b.n	801377c <ppp_vslprintf+0x71c>
			if (c == '\t')
 8013574:	2a09      	cmp	r2, #9
 8013576:	d10a      	bne.n	801358e <ppp_vslprintf+0x52e>
			    OUTCHAR(c);
 8013578:	f1b8 0f00 	cmp.w	r8, #0
 801357c:	f340 80fe 	ble.w	801377c <ppp_vslprintf+0x71c>
 8013580:	f108 38ff 	add.w	r8, r8, #4294967295
 8013584:	f04f 0309 	mov.w	r3, #9
 8013588:	f809 3b01 	strb.w	r3, [r9], #1
 801358c:	e013      	b.n	80135b6 <ppp_vslprintf+0x556>
			    OUTCHAR('^');
 801358e:	f1b8 0f00 	cmp.w	r8, #0
 8013592:	f340 80f3 	ble.w	801377c <ppp_vslprintf+0x71c>
 8013596:	f108 33ff 	add.w	r3, r8, #4294967295
 801359a:	f04f 015e 	mov.w	r1, #94	; 0x5e
 801359e:	f889 1000 	strb.w	r1, [r9]
			    OUTCHAR(c ^ 0x40);
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	dd36      	ble.n	8013614 <ppp_vslprintf+0x5b4>
 80135a6:	f1a8 0802 	sub.w	r8, r8, #2
 80135aa:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 80135ae:	f889 2001 	strb.w	r2, [r9, #1]
 80135b2:	f109 0902 	add.w	r9, r9, #2
	    while (n > 0 && buflen > 0) {
 80135b6:	42b5      	cmp	r5, r6
 80135b8:	f43f ae86 	beq.w	80132c8 <ppp_vslprintf+0x268>
 80135bc:	f1b8 0f00 	cmp.w	r8, #0
 80135c0:	f340 80df 	ble.w	8013782 <ppp_vslprintf+0x722>
		c = *p++;
 80135c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80135c8:	461a      	mov	r2, r3
		if (!quoted && c >= 0x80) {
 80135ca:	2c71      	cmp	r4, #113	; 0x71
 80135cc:	f000 80a8 	beq.w	8013720 <ppp_vslprintf+0x6c0>
 80135d0:	2b7f      	cmp	r3, #127	; 0x7f
 80135d2:	dd10      	ble.n	80135f6 <ppp_vslprintf+0x596>
		    OUTCHAR('M');
 80135d4:	f108 32ff 	add.w	r2, r8, #4294967295
 80135d8:	214d      	movs	r1, #77	; 0x4d
 80135da:	f889 1000 	strb.w	r1, [r9]
		    OUTCHAR('-');
 80135de:	2a00      	cmp	r2, #0
 80135e0:	f77f af64 	ble.w	80134ac <ppp_vslprintf+0x44c>
 80135e4:	f1a8 0802 	sub.w	r8, r8, #2
 80135e8:	222d      	movs	r2, #45	; 0x2d
 80135ea:	f889 2001 	strb.w	r2, [r9, #1]
 80135ee:	f109 0902 	add.w	r9, r9, #2
		    c -= 0x80;
 80135f2:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
		if (c < 0x20 || (0x7f <= c && c < 0xa0)) {
 80135f6:	2a1f      	cmp	r2, #31
 80135f8:	ddbc      	ble.n	8013574 <ppp_vslprintf+0x514>
 80135fa:	f1a2 037f 	sub.w	r3, r2, #127	; 0x7f
 80135fe:	2b20      	cmp	r3, #32
 8013600:	d9c5      	bls.n	801358e <ppp_vslprintf+0x52e>
		    OUTCHAR(c);
 8013602:	f1b8 0f00 	cmp.w	r8, #0
 8013606:	f340 80b9 	ble.w	801377c <ppp_vslprintf+0x71c>
 801360a:	f108 38ff 	add.w	r8, r8, #4294967295
 801360e:	f809 2b01 	strb.w	r2, [r9], #1
 8013612:	e7d0      	b.n	80135b6 <ppp_vslprintf+0x556>
			    OUTCHAR('^');
 8013614:	f109 0901 	add.w	r9, r9, #1
 8013618:	4698      	mov	r8, r3
 801361a:	e0af      	b.n	801377c <ppp_vslprintf+0x71c>
	    p = va_arg(args, unsigned char *);
 801361c:	9c04      	ldr	r4, [sp, #16]
 801361e:	f854 1b04 	ldr.w	r1, [r4], #4
	    for (n = prec; n > 0; --n) {
 8013622:	2e00      	cmp	r6, #0
 8013624:	dd40      	ble.n	80136a8 <ppp_vslprintf+0x648>
	    p = va_arg(args, unsigned char *);
 8013626:	460a      	mov	r2, r1
		    OUTCHAR(' ');
 8013628:	2520      	movs	r5, #32
 801362a:	f8dd c014 	ldr.w	ip, [sp, #20]
 801362e:	e049      	b.n	80136c4 <ppp_vslprintf+0x664>
 8013630:	f1b8 0f00 	cmp.w	r8, #0
 8013634:	dd40      	ble.n	80136b8 <ppp_vslprintf+0x658>
 8013636:	f108 38ff 	add.w	r8, r8, #4294967295
 801363a:	f809 5b01 	strb.w	r5, [r9], #1
 801363e:	e046      	b.n	80136ce <ppp_vslprintf+0x66e>
	    *buf++ = '%';
 8013640:	2225      	movs	r2, #37	; 0x25
 8013642:	f809 2b01 	strb.w	r2, [r9], #1
	    if (c != '%')
 8013646:	4294      	cmp	r4, r2
 8013648:	bf18      	it	ne
 801364a:	461f      	movne	r7, r3
	    --buflen;
 801364c:	f108 38ff 	add.w	r8, r8, #4294967295
	    continue;
 8013650:	e63a      	b.n	80132c8 <ppp_vslprintf+0x268>
	    while (str > num + neg) {
 8013652:	428c      	cmp	r4, r1
 8013654:	d012      	beq.n	801367c <ppp_vslprintf+0x61c>
		*--str = hexchars[val % base];
 8013656:	fbb2 f3f0 	udiv	r3, r2, r0
 801365a:	fb00 2c13 	mls	ip, r0, r3, r2
 801365e:	f81b c00c 	ldrb.w	ip, [fp, ip]
 8013662:	f801 cd01 	strb.w	ip, [r1, #-1]!
		val = val / base;
 8013666:	4694      	mov	ip, r2
 8013668:	461a      	mov	r2, r3
		if (--prec <= 0 && val == 0)
 801366a:	eba1 030e 	sub.w	r3, r1, lr
 801366e:	3b1f      	subs	r3, #31
 8013670:	4433      	add	r3, r6
 8013672:	2b00      	cmp	r3, #0
 8013674:	dced      	bgt.n	8013652 <ppp_vslprintf+0x5f2>
 8013676:	4560      	cmp	r0, ip
 8013678:	d9eb      	bls.n	8013652 <ppp_vslprintf+0x5f2>
		*--str = hexchars[val % base];
 801367a:	460c      	mov	r4, r1
	    switch (neg) {
 801367c:	9b06      	ldr	r3, [sp, #24]
 801367e:	b91b      	cbnz	r3, 8013688 <ppp_vslprintf+0x628>
	    len = num + sizeof(num) - 1 - str;
 8013680:	f10d 033f 	add.w	r3, sp, #63	; 0x3f
 8013684:	1b1b      	subs	r3, r3, r4
 8013686:	e608      	b.n	801329a <ppp_vslprintf+0x23a>
		*--str = '-';
 8013688:	232d      	movs	r3, #45	; 0x2d
 801368a:	f804 3c01 	strb.w	r3, [r4, #-1]
 801368e:	3c01      	subs	r4, #1
		break;
 8013690:	e7f6      	b.n	8013680 <ppp_vslprintf+0x620>
		buflen -= n;
 8013692:	eba8 0805 	sub.w	r8, r8, r5
		for (; n > 0; --n)
 8013696:	eb09 0205 	add.w	r2, r9, r5
 801369a:	9905      	ldr	r1, [sp, #20]
		    *buf++ = fillch;
 801369c:	f809 1b01 	strb.w	r1, [r9], #1
		for (; n > 0; --n)
 80136a0:	454a      	cmp	r2, r9
 80136a2:	d1fb      	bne.n	801369c <ppp_vslprintf+0x63c>
		    *buf++ = fillch;
 80136a4:	4691      	mov	r9, r2
 80136a6:	e603      	b.n	80132b0 <ppp_vslprintf+0x250>
	    p = va_arg(args, unsigned char *);
 80136a8:	9404      	str	r4, [sp, #16]
 80136aa:	e60d      	b.n	80132c8 <ppp_vslprintf+0x268>
		OUTCHAR(hexchars[(c >> 4) & 0xf]);
 80136ac:	f109 0001 	add.w	r0, r9, #1
 80136b0:	46f0      	mov	r8, lr
 80136b2:	e002      	b.n	80136ba <ppp_vslprintf+0x65a>
	    for (n = prec; n > 0; --n) {
 80136b4:	4681      	mov	r9, r0
 80136b6:	e064      	b.n	8013782 <ppp_vslprintf+0x722>
 80136b8:	4648      	mov	r0, r9
 80136ba:	1ab3      	subs	r3, r6, r2
 80136bc:	440b      	add	r3, r1
 80136be:	2b00      	cmp	r3, #0
 80136c0:	ddf8      	ble.n	80136b4 <ppp_vslprintf+0x654>
			    OUTCHAR(c);
 80136c2:	4681      	mov	r9, r0
		c = *p++;
 80136c4:	f812 3b01 	ldrb.w	r3, [r2], #1
		if (fillch == ' ')
 80136c8:	f1bc 0f20 	cmp.w	ip, #32
 80136cc:	d0b0      	beq.n	8013630 <ppp_vslprintf+0x5d0>
		OUTCHAR(hexchars[(c >> 4) & 0xf]);
 80136ce:	f1b8 0f00 	cmp.w	r8, #0
 80136d2:	ddf1      	ble.n	80136b8 <ppp_vslprintf+0x658>
 80136d4:	f108 3eff 	add.w	lr, r8, #4294967295
 80136d8:	0918      	lsrs	r0, r3, #4
 80136da:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80136de:	f889 0000 	strb.w	r0, [r9]
		OUTCHAR(hexchars[c & 0xf]);
 80136e2:	f1be 0f00 	cmp.w	lr, #0
 80136e6:	dde1      	ble.n	80136ac <ppp_vslprintf+0x64c>
 80136e8:	f1a8 0802 	sub.w	r8, r8, #2
 80136ec:	f109 0002 	add.w	r0, r9, #2
 80136f0:	f003 030f 	and.w	r3, r3, #15
 80136f4:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80136f8:	f889 3001 	strb.w	r3, [r9, #1]
	    for (n = prec; n > 0; --n) {
 80136fc:	1ab3      	subs	r3, r6, r2
 80136fe:	440b      	add	r3, r1
 8013700:	2b00      	cmp	r3, #0
 8013702:	dcde      	bgt.n	80136c2 <ppp_vslprintf+0x662>
	    p = va_arg(args, unsigned char *);
 8013704:	9404      	str	r4, [sp, #16]
		OUTCHAR(hexchars[c & 0xf]);
 8013706:	4681      	mov	r9, r0
 8013708:	e5de      	b.n	80132c8 <ppp_vslprintf+0x268>
			OUTCHAR('\\');
 801370a:	4688      	mov	r8, r1
 801370c:	4691      	mov	r9, r2
			    OUTCHAR(hexchars[c & 0xf]);
 801370e:	e752      	b.n	80135b6 <ppp_vslprintf+0x556>
		    OUTCHAR('\\');
 8013710:	f1b8 0f00 	cmp.w	r8, #0
 8013714:	dd32      	ble.n	801377c <ppp_vslprintf+0x71c>
 8013716:	f108 38ff 	add.w	r8, r8, #4294967295
 801371a:	f809 eb01 	strb.w	lr, [r9], #1
 801371e:	e004      	b.n	801372a <ppp_vslprintf+0x6ca>
		if (quoted && (c == '"' || c == '\\'))
 8013720:	2b22      	cmp	r3, #34	; 0x22
 8013722:	d0f5      	beq.n	8013710 <ppp_vslprintf+0x6b0>
 8013724:	2b5c      	cmp	r3, #92	; 0x5c
 8013726:	f43f aec5 	beq.w	80134b4 <ppp_vslprintf+0x454>
		if (c < 0x20 || (0x7f <= c && c < 0xa0)) {
 801372a:	2b1f      	cmp	r3, #31
 801372c:	dd04      	ble.n	8013738 <ppp_vslprintf+0x6d8>
 801372e:	f1a3 017f 	sub.w	r1, r3, #127	; 0x7f
 8013732:	2920      	cmp	r1, #32
 8013734:	f63f af65 	bhi.w	8013602 <ppp_vslprintf+0x5a2>
			OUTCHAR('\\');
 8013738:	f1b8 0f00 	cmp.w	r8, #0
 801373c:	dd3b      	ble.n	80137b6 <ppp_vslprintf+0x756>
 801373e:	f108 31ff 	add.w	r1, r8, #4294967295
 8013742:	464a      	mov	r2, r9
 8013744:	f802 eb01 	strb.w	lr, [r2], #1
			switch (c) {
 8013748:	f1a3 0008 	sub.w	r0, r3, #8
 801374c:	2804      	cmp	r0, #4
 801374e:	f63f aeea 	bhi.w	8013526 <ppp_vslprintf+0x4c6>
 8013752:	f20f 0c08 	addw	ip, pc, #8
 8013756:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
 801375a:	bf00      	nop
 801375c:	080134f7 	.word	0x080134f7
 8013760:	080134c3 	.word	0x080134c3
 8013764:	080134dd 	.word	0x080134dd
 8013768:	08013527 	.word	0x08013527
 801376c:	08013511 	.word	0x08013511
	    p = va_arg(args, unsigned char *);
 8013770:	9b04      	ldr	r3, [sp, #16]
 8013772:	3304      	adds	r3, #4
 8013774:	9304      	str	r3, [sp, #16]
	    for (n = prec; n > 0; --n) {
 8013776:	e5a7      	b.n	80132c8 <ppp_vslprintf+0x268>
 8013778:	4688      	mov	r8, r1
 801377a:	4691      	mov	r9, r2
	    while (n > 0 && buflen > 0) {
 801377c:	42b5      	cmp	r5, r6
 801377e:	f43f ada3 	beq.w	80132c8 <ppp_vslprintf+0x268>
    }
    *buf = 0;
 8013782:	2300      	movs	r3, #0
 8013784:	f889 3000 	strb.w	r3, [r9]
    return buf - buf0;
 8013788:	9b07      	ldr	r3, [sp, #28]
 801378a:	eba9 0003 	sub.w	r0, r9, r3
}
 801378e:	b011      	add	sp, #68	; 0x44
 8013790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013794:	4688      	mov	r8, r1
 8013796:	4691      	mov	r9, r2
 8013798:	e7f0      	b.n	801377c <ppp_vslprintf+0x71c>
 801379a:	4688      	mov	r8, r1
 801379c:	4691      	mov	r9, r2
 801379e:	e7ed      	b.n	801377c <ppp_vslprintf+0x71c>
 80137a0:	08019ad4 	.word	0x08019ad4
 80137a4:	08019acc 	.word	0x08019acc
 80137a8:	08019b6c 	.word	0x08019b6c
 80137ac:	08019ae0 	.word	0x08019ae0
 80137b0:	4688      	mov	r8, r1
 80137b2:	4691      	mov	r9, r2
 80137b4:	e7e2      	b.n	801377c <ppp_vslprintf+0x71c>
			switch (c) {
 80137b6:	3b08      	subs	r3, #8
 80137b8:	2b04      	cmp	r3, #4
 80137ba:	f63f aefc 	bhi.w	80135b6 <ppp_vslprintf+0x556>
 80137be:	a201      	add	r2, pc, #4	; (adr r2, 80137c4 <ppp_vslprintf+0x764>)
 80137c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137c4:	080134f3 	.word	0x080134f3
 80137c8:	080134bf 	.word	0x080134bf
 80137cc:	080134d9 	.word	0x080134d9
 80137d0:	080135b7 	.word	0x080135b7
 80137d4:	0801350d 	.word	0x0801350d

080137d8 <ppp_slprintf>:
int ppp_slprintf(char *buf, int buflen, const char *fmt, ...) {
 80137d8:	b40c      	push	{r2, r3}
 80137da:	b500      	push	{lr}
 80137dc:	b083      	sub	sp, #12
 80137de:	ab04      	add	r3, sp, #16
 80137e0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
 80137e4:	9301      	str	r3, [sp, #4]
    n = ppp_vslprintf(buf, buflen, fmt, args);
 80137e6:	f7ff fc3b 	bl	8013060 <ppp_vslprintf>
}
 80137ea:	b003      	add	sp, #12
 80137ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80137f0:	b002      	add	sp, #8
 80137f2:	4770      	bx	lr

080137f4 <ppp_logit>:
}

/*
 * ppp_logit - does the hard work for fatal et al.
 */
static void ppp_logit(int level, const char *fmt, va_list args) {
 80137f4:	b500      	push	{lr}
 80137f6:	b0c1      	sub	sp, #260	; 0x104
 80137f8:	4613      	mov	r3, r2
//    char buf[1024];
    char buf[256];      // huytv

    ppp_vslprintf(buf, sizeof(buf), fmt, args);
 80137fa:	460a      	mov	r2, r1
 80137fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013800:	4668      	mov	r0, sp
 8013802:	f7ff fc2d 	bl	8013060 <ppp_vslprintf>
    ppp_log_write(level, buf);
}
 8013806:	b041      	add	sp, #260	; 0x104
 8013808:	f85d fb04 	ldr.w	pc, [sp], #4

0801380c <ppp_error>:
}

/*
 * ppp_error - log an error message.
 */
void ppp_error(const char *fmt, ...) {
 801380c:	b40f      	push	{r0, r1, r2, r3}
 801380e:	b500      	push	{lr}
 8013810:	b083      	sub	sp, #12
 8013812:	aa04      	add	r2, sp, #16
 8013814:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list pvar;

    va_start(pvar, fmt);
 8013818:	9201      	str	r2, [sp, #4]
    ppp_logit(LOG_ERR, fmt, pvar);
 801381a:	2003      	movs	r0, #3
 801381c:	f7ff ffea 	bl	80137f4 <ppp_logit>
    va_end(pvar);
#if 0 /* UNUSED */
    ++error_count;
#endif /* UNUSED */
}
 8013820:	b003      	add	sp, #12
 8013822:	f85d eb04 	ldr.w	lr, [sp], #4
 8013826:	b004      	add	sp, #16
 8013828:	4770      	bx	lr

0801382a <ppp_warn>:

/*
 * ppp_warn - log a warning message.
 */
void ppp_warn(const char *fmt, ...) {
 801382a:	b40f      	push	{r0, r1, r2, r3}
 801382c:	b500      	push	{lr}
 801382e:	b083      	sub	sp, #12
 8013830:	aa04      	add	r2, sp, #16
 8013832:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list pvar;

    va_start(pvar, fmt);
 8013836:	9201      	str	r2, [sp, #4]
    ppp_logit(LOG_WARNING, fmt, pvar);
 8013838:	2001      	movs	r0, #1
 801383a:	f7ff ffdb 	bl	80137f4 <ppp_logit>
    va_end(pvar);
}
 801383e:	b003      	add	sp, #12
 8013840:	f85d eb04 	ldr.w	lr, [sp], #4
 8013844:	b004      	add	sp, #16
 8013846:	4770      	bx	lr

08013848 <ppp_notice>:

/*
 * ppp_notice - log a notice-level message.
 */
void ppp_notice(const char *fmt, ...) {
 8013848:	b40f      	push	{r0, r1, r2, r3}
 801384a:	b500      	push	{lr}
 801384c:	b083      	sub	sp, #12
 801384e:	aa04      	add	r2, sp, #16
 8013850:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list pvar;

    va_start(pvar, fmt);
 8013854:	9201      	str	r2, [sp, #4]
    ppp_logit(LOG_NOTICE, fmt, pvar);
 8013856:	2001      	movs	r0, #1
 8013858:	f7ff ffcc 	bl	80137f4 <ppp_logit>
    va_end(pvar);
}
 801385c:	b003      	add	sp, #12
 801385e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013862:	b004      	add	sp, #16
 8013864:	4770      	bx	lr

08013866 <ppp_info>:

/*
 * ppp_info - log an informational message.
 */
void ppp_info(const char *fmt, ...) {
 8013866:	b40f      	push	{r0, r1, r2, r3}
 8013868:	b500      	push	{lr}
 801386a:	b083      	sub	sp, #12
 801386c:	aa04      	add	r2, sp, #16
 801386e:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list pvar;

    va_start(pvar, fmt);
 8013872:	9201      	str	r2, [sp, #4]
    ppp_logit(LOG_INFO, fmt, pvar);
 8013874:	2000      	movs	r0, #0
 8013876:	f7ff ffbd 	bl	80137f4 <ppp_logit>
    va_end(pvar);
}
 801387a:	b003      	add	sp, #12
 801387c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013880:	b004      	add	sp, #16
 8013882:	4770      	bx	lr

08013884 <ppp_dbglog>:

/*
 * ppp_dbglog - log a debug message.
 */
void ppp_dbglog(const char *fmt, ...) {
 8013884:	b40f      	push	{r0, r1, r2, r3}
 8013886:	b500      	push	{lr}
 8013888:	b083      	sub	sp, #12
 801388a:	aa04      	add	r2, sp, #16
 801388c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list pvar;

    va_start(pvar, fmt);
 8013890:	9201      	str	r2, [sp, #4]
    ppp_logit(LOG_DEBUG, fmt, pvar);
 8013892:	2000      	movs	r0, #0
 8013894:	f7ff ffae 	bl	80137f4 <ppp_logit>
    va_end(pvar);
}
 8013898:	b003      	add	sp, #12
 801389a:	f85d eb04 	ldr.w	lr, [sp], #4
 801389e:	b004      	add	sp, #16
 80138a0:	4770      	bx	lr

080138a2 <vj_compress_init>:

void
vj_compress_init(struct vjcompress *comp)
{
  u8_t i;
  struct cstate *tstate = comp->tstate;
 80138a2:	f100 010c 	add.w	r1, r0, #12

#if MAX_SLOTS == 0
  memset((char *)comp, 0, sizeof(*comp));
#endif
  comp->maxSlotIndex = MAX_SLOTS - 1;
 80138a6:	230f      	movs	r3, #15
 80138a8:	7203      	strb	r3, [r0, #8]
  comp->compressSlot = 0;    /* Disable slot ID compression by default. */
 80138aa:	2200      	movs	r2, #0
 80138ac:	7242      	strb	r2, [r0, #9]
  for (i = MAX_SLOTS - 1; i > 0; --i) {
 80138ae:	f200 727c 	addw	r2, r0, #1916	; 0x77c
    tstate[i].cs_id = i;
 80138b2:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
    tstate[i].cs_next = &tstate[i - 1];
 80138b6:	f8c2 2088 	str.w	r2, [r2, #136]	; 0x88
  for (i = MAX_SLOTS - 1; i > 0; --i) {
 80138ba:	3b01      	subs	r3, #1
 80138bc:	3a88      	subs	r2, #136	; 0x88
 80138be:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80138c2:	d1f6      	bne.n	80138b2 <vj_compress_init+0x10>
  }
  tstate[0].cs_next = &tstate[MAX_SLOTS - 1];
 80138c4:	f600 0304 	addw	r3, r0, #2052	; 0x804
 80138c8:	60c3      	str	r3, [r0, #12]
  tstate[0].cs_id = 0;
 80138ca:	2300      	movs	r3, #0
 80138cc:	7483      	strb	r3, [r0, #18]
  comp->last_cs = &tstate[0];
 80138ce:	6001      	str	r1, [r0, #0]
  comp->last_recv = 255;
 80138d0:	23ff      	movs	r3, #255	; 0xff
 80138d2:	7103      	strb	r3, [r0, #4]
  comp->last_xmit = 255;
 80138d4:	7143      	strb	r3, [r0, #5]
  comp->flags = VJF_TOSS;
 80138d6:	2301      	movs	r3, #1
 80138d8:	80c3      	strh	r3, [r0, #6]
}
 80138da:	4770      	bx	lr

080138dc <vj_compress_tcp>:
 * Return the VJ type code indicating whether or not the packet was
 * compressed.
 */
u8_t
vj_compress_tcp(struct vjcompress *comp, struct pbuf **pb)
{
 80138dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138e0:	b08b      	sub	sp, #44	; 0x2c
  struct pbuf *np = *pb;
 80138e2:	f8d1 8000 	ldr.w	r8, [r1]
  struct ip_hdr *ip = (struct ip_hdr *)np->payload;
 80138e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
  u8_t *cp = new_seq;

  /*
   * Check that the packet is IP proto TCP.
   */
  if (IPH_PROTO(ip) != IP_PROTO_TCP) {
 80138ea:	7a6b      	ldrb	r3, [r5, #9]
 80138ec:	2b06      	cmp	r3, #6
 80138ee:	f040 821e 	bne.w	8013d2e <vj_compress_tcp+0x452>
 80138f2:	4606      	mov	r6, r0
 80138f4:	460c      	mov	r4, r1
  /*
   * Bail if this is an IP fragment or if the TCP packet isn't
   * `compressible' (i.e., ACK isn't set or some other control bit is
   * set).
   */
  if ((IPH_OFFSET(ip) & PP_HTONS(0x3fff)) || np->tot_len < 40) {
 80138f6:	88ef      	ldrh	r7, [r5, #6]
 80138f8:	f027 07c0 	bic.w	r7, r7, #192	; 0xc0
 80138fc:	b2bf      	uxth	r7, r7
 80138fe:	2f00      	cmp	r7, #0
 8013900:	f040 8219 	bne.w	8013d36 <vj_compress_tcp+0x45a>
 8013904:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8013908:	2b27      	cmp	r3, #39	; 0x27
 801390a:	d801      	bhi.n	8013910 <vj_compress_tcp+0x34>
    return (TYPE_IP);
 801390c:	2040      	movs	r0, #64	; 0x40
 801390e:	e20f      	b.n	8013d30 <vj_compress_tcp+0x454>
  struct cstate *cs = comp->last_cs->cs_next;
 8013910:	6803      	ldr	r3, [r0, #0]
 8013912:	f8d3 9000 	ldr.w	r9, [r3]
 8013916:	f895 a000 	ldrb.w	sl, [r5]
 801391a:	f00a 0a0f 	and.w	sl, sl, #15
  }
  th = (struct tcp_hdr *)&((struct vj_u32_t*)ip)[ilen];
 801391e:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 8013922:	eb05 058a 	add.w	r5, r5, sl, lsl #2
  if ((TCPH_FLAGS(th) & (TCP_SYN|TCP_FIN|TCP_RST|TCP_ACK)) != TCP_ACK) {
 8013926:	89a8      	ldrh	r0, [r5, #12]
 8013928:	f7f3 ff7a 	bl	8007820 <lwip_htons>
 801392c:	f000 0017 	and.w	r0, r0, #23
 8013930:	2810      	cmp	r0, #16
 8013932:	d001      	beq.n	8013938 <vj_compress_tcp+0x5c>
    return (TYPE_IP);
 8013934:	2040      	movs	r0, #64	; 0x40
 8013936:	e1fb      	b.n	8013d30 <vj_compress_tcp+0x454>
  u16_t ilen = IPH_HL(ip);
 8013938:	fa1f f38a 	uxth.w	r3, sl
 801393c:	9301      	str	r3, [sp, #4]
  }

  /* Check that the TCP/IP headers are contained in the first buffer. */
  hlen = ilen + TCPH_HDRLEN(th);
 801393e:	89a8      	ldrh	r0, [r5, #12]
 8013940:	f7f3 ff6e 	bl	8007820 <lwip_htons>
 8013944:	9b01      	ldr	r3, [sp, #4]
 8013946:	eb03 3310 	add.w	r3, r3, r0, lsr #12
 801394a:	b29b      	uxth	r3, r3
  hlen <<= 2;
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	b29a      	uxth	r2, r3
 8013950:	9202      	str	r2, [sp, #8]
  if (np->len < hlen) {
 8013952:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8013956:	4293      	cmp	r3, r2
 8013958:	d201      	bcs.n	801395e <vj_compress_tcp+0x82>
    PPPDEBUG(LOG_INFO, ("vj_compress_tcp: header len %d spans buffers\n", hlen));
    return (TYPE_IP);
 801395a:	2040      	movs	r0, #64	; 0x40
 801395c:	e1e8      	b.n	8013d30 <vj_compress_tcp+0x454>
  }

  /* TCP stack requires that we don't change the packet payload, therefore we copy
   * the whole packet before compression. */
  np = pbuf_clone(PBUF_RAW, PBUF_RAM, *pb);
 801395e:	6822      	ldr	r2, [r4, #0]
 8013960:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013964:	2000      	movs	r0, #0
 8013966:	f7f5 ff59 	bl	800981c <pbuf_clone>
  if (!np) {
 801396a:	4680      	mov	r8, r0
 801396c:	2800      	cmp	r0, #0
 801396e:	f000 81e4 	beq.w	8013d3a <vj_compress_tcp+0x45e>
    return (TYPE_IP);
  }

  *pb = np;
 8013972:	6020      	str	r0, [r4, #0]
  ip = (struct ip_hdr *)np->payload;
 8013974:	6844      	ldr	r4, [r0, #4]
   * to locate (or create) the connection state.  Special case the
   * most recently used connection since it's most likely to be used
   * again & we don't have to do any reordering if it's used.
   */
  INCR(vjs_packets);
  if (!ip4_addr_cmp(&ip->src, &cs->cs_ip.src)
 8013976:	68e2      	ldr	r2, [r4, #12]
 8013978:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801397c:	429a      	cmp	r2, r3
 801397e:	d003      	beq.n	8013988 <vj_compress_tcp+0xac>
     * we want is almost always near the front, we locate
     * states via linear search.  If we don't find a state
     * for the datagram, the oldest state is (re-)used.
     */
    struct cstate *lcs;
    struct cstate *lastcs = comp->last_cs;
 8013980:	6831      	ldr	r1, [r6, #0]
 8013982:	464b      	mov	r3, r9
 8013984:	9703      	str	r7, [sp, #12]
 8013986:	e012      	b.n	80139ae <vj_compress_tcp+0xd2>
      || !ip4_addr_cmp(&ip->dest, &cs->cs_ip.dest)
 8013988:	6921      	ldr	r1, [r4, #16]
 801398a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801398e:	4299      	cmp	r1, r3
 8013990:	d1f6      	bne.n	8013980 <vj_compress_tcp+0xa4>
      || (*(struct vj_u32_t*)th).v != (((struct vj_u32_t*)&cs->cs_ip)[IPH_HL(&cs->cs_ip)]).v) {
 8013992:	6829      	ldr	r1, [r5, #0]
 8013994:	f899 3008 	ldrb.w	r3, [r9, #8]
 8013998:	f003 030f 	and.w	r3, r3, #15
 801399c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80139a0:	689b      	ldr	r3, [r3, #8]
 80139a2:	4299      	cmp	r1, r3
 80139a4:	d1ec      	bne.n	8013980 <vj_compress_tcp+0xa4>
 80139a6:	e024      	b.n	80139f2 <vj_compress_tcp+0x116>
      if (ip4_addr_cmp(&ip->src, &cs->cs_ip.src)
          && ip4_addr_cmp(&ip->dest, &cs->cs_ip.dest)
          && (*(struct vj_u32_t*)th).v == (((struct vj_u32_t*)&cs->cs_ip)[IPH_HL(&cs->cs_ip)]).v) {
        goto found;
      }
    } while (cs != lastcs);
 80139a8:	4299      	cmp	r1, r3
 80139aa:	f000 80e1 	beq.w	8013b70 <vj_compress_tcp+0x294>
      lcs = cs; cs = cs->cs_next;
 80139ae:	4618      	mov	r0, r3
 80139b0:	681b      	ldr	r3, [r3, #0]
      if (ip4_addr_cmp(&ip->src, &cs->cs_ip.src)
 80139b2:	695f      	ldr	r7, [r3, #20]
 80139b4:	42ba      	cmp	r2, r7
 80139b6:	d1f7      	bne.n	80139a8 <vj_compress_tcp+0xcc>
          && ip4_addr_cmp(&ip->dest, &cs->cs_ip.dest)
 80139b8:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80139bc:	699f      	ldr	r7, [r3, #24]
 80139be:	45bc      	cmp	ip, r7
 80139c0:	d1f2      	bne.n	80139a8 <vj_compress_tcp+0xcc>
          && (*(struct vj_u32_t*)th).v == (((struct vj_u32_t*)&cs->cs_ip)[IPH_HL(&cs->cs_ip)]).v) {
 80139c2:	f8d5 e000 	ldr.w	lr, [r5]
 80139c6:	f893 c008 	ldrb.w	ip, [r3, #8]
 80139ca:	f00c 0c0f 	and.w	ip, ip, #15
 80139ce:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80139d2:	f8dc c008 	ldr.w	ip, [ip, #8]
 80139d6:	45e6      	cmp	lr, ip
 80139d8:	d1e6      	bne.n	80139a8 <vj_compress_tcp+0xcc>
 80139da:	4699      	mov	r9, r3
 80139dc:	9f03      	ldr	r7, [sp, #12]

    found:
    /*
     * Found it -- move to the front on the connection list.
     */
    if (cs == lastcs) {
 80139de:	4299      	cmp	r1, r3
 80139e0:	f000 80d6 	beq.w	8013b90 <vj_compress_tcp+0x2b4>
      comp->last_cs = lcs;
    } else {
      lcs->cs_next = cs->cs_next;
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	6003      	str	r3, [r0, #0]
      cs->cs_next = lastcs->cs_next;
 80139e8:	680b      	ldr	r3, [r1, #0]
 80139ea:	f8c9 3000 	str.w	r3, [r9]
      lastcs->cs_next = cs;
 80139ee:	f8c1 9000 	str.w	r9, [r1]
   * header length.  The 5th line checks IP options, if any.  The 6th
   * line checks TCP options, if any.  If any of these things are
   * different between the previous & current datagram, we send the
   * current datagram `uncompressed'.
   */
  if ((((struct vj_u16_t*)ip)[0]).v != (((struct vj_u16_t*)&cs->cs_ip)[0]).v
 80139f2:	8822      	ldrh	r2, [r4, #0]
 80139f4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	f040 80bb 	bne.w	8013b74 <vj_compress_tcp+0x298>
      || (((struct vj_u16_t*)ip)[3]).v != (((struct vj_u16_t*)&cs->cs_ip)[3]).v
 80139fe:	88e2      	ldrh	r2, [r4, #6]
 8013a00:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	f040 80b5 	bne.w	8013b74 <vj_compress_tcp+0x298>
      || (((struct vj_u16_t*)ip)[4]).v != (((struct vj_u16_t*)&cs->cs_ip)[4]).v
 8013a0a:	8922      	ldrh	r2, [r4, #8]
 8013a0c:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	f040 80af 	bne.w	8013b74 <vj_compress_tcp+0x298>
  oth = (struct tcp_hdr *)&((struct vj_u32_t*)&cs->cs_ip)[ilen];
 8013a16:	f109 0308 	add.w	r3, r9, #8
 8013a1a:	9304      	str	r3, [sp, #16]
 8013a1c:	445b      	add	r3, fp
 8013a1e:	9303      	str	r3, [sp, #12]
      || TCPH_HDRLEN(th) != TCPH_HDRLEN(oth)
 8013a20:	89a8      	ldrh	r0, [r5, #12]
 8013a22:	f7f3 fefd 	bl	8007820 <lwip_htons>
 8013a26:	4683      	mov	fp, r0
 8013a28:	9b03      	ldr	r3, [sp, #12]
 8013a2a:	8998      	ldrh	r0, [r3, #12]
 8013a2c:	f7f3 fef8 	bl	8007820 <lwip_htons>
 8013a30:	f3cb 320f 	ubfx	r2, fp, #12, #16
 8013a34:	f3c0 330f 	ubfx	r3, r0, #12, #16
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	f040 809b 	bne.w	8013b74 <vj_compress_tcp+0x298>
      || (deltaS > 5 && BCMP(ip + 1, &cs->cs_ip + 1, (deltaS - 5) << 2))
 8013a3e:	9b01      	ldr	r3, [sp, #4]
 8013a40:	2b05      	cmp	r3, #5
 8013a42:	d90b      	bls.n	8013a5c <vj_compress_tcp+0x180>
 8013a44:	f1aa 0205 	sub.w	r2, sl, #5
 8013a48:	0092      	lsls	r2, r2, #2
 8013a4a:	f109 011c 	add.w	r1, r9, #28
 8013a4e:	f104 0014 	add.w	r0, r4, #20
 8013a52:	f000 fc8f 	bl	8014374 <memcmp>
 8013a56:	2800      	cmp	r0, #0
 8013a58:	f040 808c 	bne.w	8013b74 <vj_compress_tcp+0x298>
      || (TCPH_HDRLEN(th) > 5 && BCMP(th + 1, oth + 1, (TCPH_HDRLEN(th) - 5) << 2))) {
 8013a5c:	89a8      	ldrh	r0, [r5, #12]
 8013a5e:	f7f3 fedf 	bl	8007820 <lwip_htons>
 8013a62:	f3c0 330f 	ubfx	r3, r0, #12, #16
 8013a66:	2b05      	cmp	r3, #5
 8013a68:	d90f      	bls.n	8013a8a <vj_compress_tcp+0x1ae>
 8013a6a:	89a8      	ldrh	r0, [r5, #12]
 8013a6c:	f7f3 fed8 	bl	8007820 <lwip_htons>
 8013a70:	f3c0 320f 	ubfx	r2, r0, #12, #16
 8013a74:	3a05      	subs	r2, #5
 8013a76:	0092      	lsls	r2, r2, #2
 8013a78:	9b03      	ldr	r3, [sp, #12]
 8013a7a:	f103 0114 	add.w	r1, r3, #20
 8013a7e:	f105 0014 	add.w	r0, r5, #20
 8013a82:	f000 fc77 	bl	8014374 <memcmp>
 8013a86:	2800      	cmp	r0, #0
 8013a88:	d174      	bne.n	8013b74 <vj_compress_tcp+0x298>
   * Figure out which of the changing fields changed.  The
   * receiver expects changes in the order: urgent, window,
   * ack, seq (the order minimizes the number of temporaries
   * needed in this section of code).
   */
  if (TCPH_FLAGS(th) & TCP_URG) {
 8013a8a:	89a8      	ldrh	r0, [r5, #12]
 8013a8c:	f7f3 fec8 	bl	8007820 <lwip_htons>
 8013a90:	f010 0f20 	tst.w	r0, #32
 8013a94:	d17e      	bne.n	8013b94 <vj_compress_tcp+0x2b8>
    deltaS = lwip_ntohs(th->urgp);
    ENCODEZ(deltaS);
    changes |= NEW_U;
  } else if (th->urgp != oth->urgp) {
 8013a96:	8a6a      	ldrh	r2, [r5, #18]
 8013a98:	9b03      	ldr	r3, [sp, #12]
 8013a9a:	8a5b      	ldrh	r3, [r3, #18]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d169      	bne.n	8013b74 <vj_compress_tcp+0x298>
  u8_t *cp = new_seq;
 8013aa0:	f10d 0a18 	add.w	sl, sp, #24
  u32_t changes = 0;
 8013aa4:	f04f 0b00 	mov.w	fp, #0
     * doesn't prohibit the change so we have to deal
     * with it. */
    goto uncompressed;
  }

  if ((deltaS = (u16_t)(lwip_ntohs(th->wnd) - lwip_ntohs(oth->wnd))) != 0) {
 8013aa8:	89e8      	ldrh	r0, [r5, #14]
 8013aaa:	f7f3 feb9 	bl	8007820 <lwip_htons>
 8013aae:	9001      	str	r0, [sp, #4]
 8013ab0:	9b03      	ldr	r3, [sp, #12]
 8013ab2:	89d8      	ldrh	r0, [r3, #14]
 8013ab4:	f7f3 feb4 	bl	8007820 <lwip_htons>
 8013ab8:	9b01      	ldr	r3, [sp, #4]
 8013aba:	1a1b      	subs	r3, r3, r0
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	9201      	str	r2, [sp, #4]
 8013ac0:	b172      	cbz	r2, 8013ae0 <vj_compress_tcp+0x204>
    ENCODE(deltaS);
 8013ac2:	2aff      	cmp	r2, #255	; 0xff
 8013ac4:	f240 8081 	bls.w	8013bca <vj_compress_tcp+0x2ee>
 8013ac8:	2300      	movs	r3, #0
 8013aca:	f88a 3000 	strb.w	r3, [sl]
 8013ace:	f88a 2002 	strb.w	r2, [sl, #2]
 8013ad2:	0a13      	lsrs	r3, r2, #8
 8013ad4:	f88a 3001 	strb.w	r3, [sl, #1]
 8013ad8:	f10a 0a03 	add.w	sl, sl, #3
    changes |= NEW_W;
 8013adc:	f04b 0b02 	orr.w	fp, fp, #2
  }

  if ((deltaL = lwip_ntohl(th->ackno) - lwip_ntohl(oth->ackno)) != 0) {
 8013ae0:	68a8      	ldr	r0, [r5, #8]
 8013ae2:	f7f3 fea2 	bl	800782a <lwip_htonl>
 8013ae6:	9005      	str	r0, [sp, #20]
 8013ae8:	9b03      	ldr	r3, [sp, #12]
 8013aea:	6898      	ldr	r0, [r3, #8]
 8013aec:	f7f3 fe9d 	bl	800782a <lwip_htonl>
 8013af0:	9b05      	ldr	r3, [sp, #20]
 8013af2:	1a1a      	subs	r2, r3, r0
 8013af4:	d011      	beq.n	8013b1a <vj_compress_tcp+0x23e>
    if (deltaL > 0xffff) {
 8013af6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8013afa:	d23b      	bcs.n	8013b74 <vj_compress_tcp+0x298>
      goto uncompressed;
    }
    deltaA = (u16_t)deltaL;
 8013afc:	b297      	uxth	r7, r2
    ENCODE(deltaA);
 8013afe:	2fff      	cmp	r7, #255	; 0xff
 8013b00:	d969      	bls.n	8013bd6 <vj_compress_tcp+0x2fa>
 8013b02:	2300      	movs	r3, #0
 8013b04:	f88a 3000 	strb.w	r3, [sl]
 8013b08:	f88a 2002 	strb.w	r2, [sl, #2]
 8013b0c:	0a3b      	lsrs	r3, r7, #8
 8013b0e:	f88a 3001 	strb.w	r3, [sl, #1]
 8013b12:	f10a 0a03 	add.w	sl, sl, #3
    changes |= NEW_A;
 8013b16:	f04b 0b04 	orr.w	fp, fp, #4
  }

  if ((deltaL = lwip_ntohl(th->seqno) - lwip_ntohl(oth->seqno)) != 0) {
 8013b1a:	6868      	ldr	r0, [r5, #4]
 8013b1c:	f7f3 fe85 	bl	800782a <lwip_htonl>
 8013b20:	9005      	str	r0, [sp, #20]
 8013b22:	9b03      	ldr	r3, [sp, #12]
 8013b24:	6858      	ldr	r0, [r3, #4]
 8013b26:	f7f3 fe80 	bl	800782a <lwip_htonl>
 8013b2a:	9b05      	ldr	r3, [sp, #20]
 8013b2c:	1a1a      	subs	r2, r3, r0
 8013b2e:	d012      	beq.n	8013b56 <vj_compress_tcp+0x27a>
    if (deltaL > 0xffff) {
 8013b30:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8013b34:	d21e      	bcs.n	8013b74 <vj_compress_tcp+0x298>
      goto uncompressed;
    }
    deltaS = (u16_t)deltaL;
 8013b36:	b291      	uxth	r1, r2
 8013b38:	9101      	str	r1, [sp, #4]
    ENCODE(deltaS);
 8013b3a:	29ff      	cmp	r1, #255	; 0xff
 8013b3c:	d950      	bls.n	8013be0 <vj_compress_tcp+0x304>
 8013b3e:	2300      	movs	r3, #0
 8013b40:	f88a 3000 	strb.w	r3, [sl]
 8013b44:	f88a 2002 	strb.w	r2, [sl, #2]
 8013b48:	0a0b      	lsrs	r3, r1, #8
 8013b4a:	f88a 3001 	strb.w	r3, [sl, #1]
 8013b4e:	f10a 0a03 	add.w	sl, sl, #3
    changes |= NEW_S;
 8013b52:	f04b 0b08 	orr.w	fp, fp, #8
  }

  switch(changes) {
 8013b56:	f1bb 0f0f 	cmp.w	fp, #15
 8013b5a:	d86f      	bhi.n	8013c3c <vj_compress_tcp+0x360>
 8013b5c:	e8df f00b 	tbb	[pc, fp]
 8013b60:	6e6e6e45 	.word	0x6e6e6e45
 8013b64:	6e6e6e6e 	.word	0x6e6e6e6e
 8013b68:	0a6e6e61 	.word	0x0a6e6e61
 8013b6c:	0a6e6e50 	.word	0x0a6e6e50
 8013b70:	4699      	mov	r9, r3
    comp->last_cs = lcs;
 8013b72:	6030      	str	r0, [r6, #0]
   * Update connection state cs & send uncompressed packet (that is,
   * a regular ip/tcp packet but with the 'conversation id' we hope
   * to use on future compressed packets in the protocol field).
   */
uncompressed:
  MEMCPY(&cs->cs_ip, ip, hlen);
 8013b74:	9a02      	ldr	r2, [sp, #8]
 8013b76:	4621      	mov	r1, r4
 8013b78:	f109 0008 	add.w	r0, r9, #8
 8013b7c:	f000 fc08 	bl	8014390 <memcpy>
  IPH_PROTO_SET(ip, cs->cs_id);
 8013b80:	f899 3006 	ldrb.w	r3, [r9, #6]
 8013b84:	7263      	strb	r3, [r4, #9]
  comp->last_xmit = cs->cs_id;
 8013b86:	f899 3006 	ldrb.w	r3, [r9, #6]
 8013b8a:	7173      	strb	r3, [r6, #5]
  return (TYPE_UNCOMPRESSED_TCP);
 8013b8c:	2070      	movs	r0, #112	; 0x70
 8013b8e:	e0cf      	b.n	8013d30 <vj_compress_tcp+0x454>
      comp->last_cs = lcs;
 8013b90:	6030      	str	r0, [r6, #0]
 8013b92:	e72e      	b.n	80139f2 <vj_compress_tcp+0x116>
    deltaS = lwip_ntohs(th->urgp);
 8013b94:	8a68      	ldrh	r0, [r5, #18]
 8013b96:	f7f3 fe43 	bl	8007820 <lwip_htons>
    ENCODEZ(deltaS);
 8013b9a:	1e42      	subs	r2, r0, #1
 8013b9c:	b292      	uxth	r2, r2
 8013b9e:	2afe      	cmp	r2, #254	; 0xfe
 8013ba0:	d90c      	bls.n	8013bbc <vj_compress_tcp+0x2e0>
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	f88d 2018 	strb.w	r2, [sp, #24]
 8013ba8:	f88d 001a 	strb.w	r0, [sp, #26]
 8013bac:	0a03      	lsrs	r3, r0, #8
 8013bae:	f88d 3019 	strb.w	r3, [sp, #25]
 8013bb2:	f10d 0a1b 	add.w	sl, sp, #27
    changes |= NEW_U;
 8013bb6:	f04f 0b01 	mov.w	fp, #1
 8013bba:	e775      	b.n	8013aa8 <vj_compress_tcp+0x1cc>
    ENCODEZ(deltaS);
 8013bbc:	f88d 0018 	strb.w	r0, [sp, #24]
 8013bc0:	f10d 0a19 	add.w	sl, sp, #25
    changes |= NEW_U;
 8013bc4:	f04f 0b01 	mov.w	fp, #1
 8013bc8:	e76e      	b.n	8013aa8 <vj_compress_tcp+0x1cc>
    ENCODE(deltaS);
 8013bca:	4653      	mov	r3, sl
 8013bcc:	9a01      	ldr	r2, [sp, #4]
 8013bce:	f803 2b01 	strb.w	r2, [r3], #1
 8013bd2:	469a      	mov	sl, r3
 8013bd4:	e782      	b.n	8013adc <vj_compress_tcp+0x200>
    ENCODE(deltaA);
 8013bd6:	4653      	mov	r3, sl
 8013bd8:	f803 2b01 	strb.w	r2, [r3], #1
 8013bdc:	469a      	mov	sl, r3
 8013bde:	e79a      	b.n	8013b16 <vj_compress_tcp+0x23a>
    ENCODE(deltaS);
 8013be0:	4653      	mov	r3, sl
 8013be2:	f803 2b01 	strb.w	r2, [r3], #1
 8013be6:	469a      	mov	sl, r3
 8013be8:	e7b3      	b.n	8013b52 <vj_compress_tcp+0x276>
    if (IPH_LEN(ip) != IPH_LEN(&cs->cs_ip) &&
 8013bea:	f8b9 000a 	ldrh.w	r0, [r9, #10]
 8013bee:	8863      	ldrh	r3, [r4, #2]
 8013bf0:	4283      	cmp	r3, r0
 8013bf2:	d0bf      	beq.n	8013b74 <vj_compress_tcp+0x298>
      lwip_ntohs(IPH_LEN(&cs->cs_ip)) == hlen) {
 8013bf4:	f7f3 fe14 	bl	8007820 <lwip_htons>
    if (IPH_LEN(ip) != IPH_LEN(&cs->cs_ip) &&
 8013bf8:	9b02      	ldr	r3, [sp, #8]
 8013bfa:	4298      	cmp	r0, r3
 8013bfc:	d01e      	beq.n	8013c3c <vj_compress_tcp+0x360>
 8013bfe:	e7b9      	b.n	8013b74 <vj_compress_tcp+0x298>
    if (deltaS == deltaA && deltaS == lwip_ntohs(IPH_LEN(&cs->cs_ip)) - hlen) {
 8013c00:	9b01      	ldr	r3, [sp, #4]
 8013c02:	42bb      	cmp	r3, r7
 8013c04:	d11a      	bne.n	8013c3c <vj_compress_tcp+0x360>
 8013c06:	f8b9 000a 	ldrh.w	r0, [r9, #10]
 8013c0a:	f7f3 fe09 	bl	8007820 <lwip_htons>
 8013c0e:	9b02      	ldr	r3, [sp, #8]
 8013c10:	1ac3      	subs	r3, r0, r3
 8013c12:	9a01      	ldr	r2, [sp, #4]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d111      	bne.n	8013c3c <vj_compress_tcp+0x360>
      cp = new_seq;
 8013c18:	f10d 0a18 	add.w	sl, sp, #24
      changes = SPECIAL_I;
 8013c1c:	f04f 0b0b 	mov.w	fp, #11
 8013c20:	e00c      	b.n	8013c3c <vj_compress_tcp+0x360>
    if (deltaS == lwip_ntohs(IPH_LEN(&cs->cs_ip)) - hlen) {
 8013c22:	f8b9 000a 	ldrh.w	r0, [r9, #10]
 8013c26:	f7f3 fdfb 	bl	8007820 <lwip_htons>
 8013c2a:	9b02      	ldr	r3, [sp, #8]
 8013c2c:	1ac3      	subs	r3, r0, r3
 8013c2e:	9a01      	ldr	r2, [sp, #4]
 8013c30:	429a      	cmp	r2, r3
      cp = new_seq;
 8013c32:	bf04      	itt	eq
 8013c34:	f10d 0a18 	addeq.w	sl, sp, #24
      changes = SPECIAL_D;
 8013c38:	f04f 0b0f 	moveq.w	fp, #15
  deltaS = (u16_t)(lwip_ntohs(IPH_ID(ip)) - lwip_ntohs(IPH_ID(&cs->cs_ip)));
 8013c3c:	88a0      	ldrh	r0, [r4, #4]
 8013c3e:	f7f3 fdef 	bl	8007820 <lwip_htons>
 8013c42:	4607      	mov	r7, r0
 8013c44:	f8b9 000c 	ldrh.w	r0, [r9, #12]
 8013c48:	f7f3 fdea 	bl	8007820 <lwip_htons>
 8013c4c:	1a3b      	subs	r3, r7, r0
 8013c4e:	b29b      	uxth	r3, r3
  if (deltaS != 1) {
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	d00f      	beq.n	8013c74 <vj_compress_tcp+0x398>
    ENCODEZ(deltaS);
 8013c54:	1e5a      	subs	r2, r3, #1
 8013c56:	b292      	uxth	r2, r2
 8013c58:	2afe      	cmp	r2, #254	; 0xfe
 8013c5a:	d946      	bls.n	8013cea <vj_compress_tcp+0x40e>
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	f88a 2000 	strb.w	r2, [sl]
 8013c62:	f88a 3002 	strb.w	r3, [sl, #2]
 8013c66:	0a1b      	lsrs	r3, r3, #8
 8013c68:	f88a 3001 	strb.w	r3, [sl, #1]
 8013c6c:	f10a 0a03 	add.w	sl, sl, #3
    changes |= NEW_I;
 8013c70:	f04b 0b20 	orr.w	fp, fp, #32
  if (TCPH_FLAGS(th) & TCP_PSH) {
 8013c74:	89a8      	ldrh	r0, [r5, #12]
 8013c76:	f7f3 fdd3 	bl	8007820 <lwip_htons>
 8013c7a:	f010 0f08 	tst.w	r0, #8
    changes |= TCP_PUSH_BIT;
 8013c7e:	bf18      	it	ne
 8013c80:	f04b 0b10 	orrne.w	fp, fp, #16
  deltaA = lwip_ntohs(th->chksum);
 8013c84:	8a28      	ldrh	r0, [r5, #16]
 8013c86:	f7f3 fdcb 	bl	8007820 <lwip_htons>
 8013c8a:	4605      	mov	r5, r0
  MEMCPY(&cs->cs_ip, ip, hlen);
 8013c8c:	9a02      	ldr	r2, [sp, #8]
 8013c8e:	4621      	mov	r1, r4
 8013c90:	9804      	ldr	r0, [sp, #16]
 8013c92:	f000 fb7d 	bl	8014390 <memcpy>
  deltaS = (u16_t)(cp - new_seq);
 8013c96:	ab06      	add	r3, sp, #24
 8013c98:	ebaa 0403 	sub.w	r4, sl, r3
 8013c9c:	b2a3      	uxth	r3, r4
  if (!comp->compressSlot || comp->last_xmit != cs->cs_id) {
 8013c9e:	7a72      	ldrb	r2, [r6, #9]
 8013ca0:	b122      	cbz	r2, 8013cac <vj_compress_tcp+0x3d0>
 8013ca2:	7971      	ldrb	r1, [r6, #5]
 8013ca4:	f899 2006 	ldrb.w	r2, [r9, #6]
 8013ca8:	4291      	cmp	r1, r2
 8013caa:	d02b      	beq.n	8013d04 <vj_compress_tcp+0x428>
    comp->last_xmit = cs->cs_id;
 8013cac:	f899 2006 	ldrb.w	r2, [r9, #6]
 8013cb0:	7172      	strb	r2, [r6, #5]
    hlen -= deltaS + 4;
 8013cb2:	9a02      	ldr	r2, [sp, #8]
 8013cb4:	1f11      	subs	r1, r2, #4
 8013cb6:	1ac9      	subs	r1, r1, r3
    if (pbuf_remove_header(np, hlen)){
 8013cb8:	b289      	uxth	r1, r1
 8013cba:	4640      	mov	r0, r8
 8013cbc:	f7f5 f9c8 	bl	8009050 <pbuf_remove_header>
 8013cc0:	b9c0      	cbnz	r0, 8013cf4 <vj_compress_tcp+0x418>
    cp = (u8_t*)np->payload;
 8013cc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    *cp++ = (u8_t)(changes | NEW_C);
 8013cc6:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f800 bb02 	strb.w	fp, [r0], #2
    *cp++ = cs->cs_id;
 8013cd0:	f899 2006 	ldrb.w	r2, [r9, #6]
 8013cd4:	705a      	strb	r2, [r3, #1]
  *cp++ = (u8_t)(deltaA >> 8);
 8013cd6:	0a2b      	lsrs	r3, r5, #8
 8013cd8:	7003      	strb	r3, [r0, #0]
  *cp++ = (u8_t)deltaA;
 8013cda:	7045      	strb	r5, [r0, #1]
  MEMCPY(cp, new_seq, deltaS);
 8013cdc:	b2a2      	uxth	r2, r4
 8013cde:	a906      	add	r1, sp, #24
 8013ce0:	3002      	adds	r0, #2
 8013ce2:	f000 fb55 	bl	8014390 <memcpy>
  return (TYPE_COMPRESSED_TCP);
 8013ce6:	2080      	movs	r0, #128	; 0x80
 8013ce8:	e022      	b.n	8013d30 <vj_compress_tcp+0x454>
    ENCODEZ(deltaS);
 8013cea:	4652      	mov	r2, sl
 8013cec:	f802 3b01 	strb.w	r3, [r2], #1
 8013cf0:	4692      	mov	sl, r2
 8013cf2:	e7bd      	b.n	8013c70 <vj_compress_tcp+0x394>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013cf4:	4b12      	ldr	r3, [pc, #72]	; (8013d40 <vj_compress_tcp+0x464>)
 8013cf6:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013cfa:	4912      	ldr	r1, [pc, #72]	; (8013d44 <vj_compress_tcp+0x468>)
 8013cfc:	4812      	ldr	r0, [pc, #72]	; (8013d48 <vj_compress_tcp+0x46c>)
 8013cfe:	f000 fadb 	bl	80142b8 <app_debug_rtt_raw>
 8013d02:	e7de      	b.n	8013cc2 <vj_compress_tcp+0x3e6>
    hlen -= deltaS + 3;
 8013d04:	9a02      	ldr	r2, [sp, #8]
 8013d06:	1ed1      	subs	r1, r2, #3
 8013d08:	1ac9      	subs	r1, r1, r3
    if (pbuf_remove_header(np, hlen)) {
 8013d0a:	b289      	uxth	r1, r1
 8013d0c:	4640      	mov	r0, r8
 8013d0e:	f7f5 f99f 	bl	8009050 <pbuf_remove_header>
 8013d12:	b920      	cbnz	r0, 8013d1e <vj_compress_tcp+0x442>
    *cp++ = (u8_t)changes;
 8013d14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013d18:	f800 bb01 	strb.w	fp, [r0], #1
 8013d1c:	e7db      	b.n	8013cd6 <vj_compress_tcp+0x3fa>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013d1e:	4b08      	ldr	r3, [pc, #32]	; (8013d40 <vj_compress_tcp+0x464>)
 8013d20:	f240 12a5 	movw	r2, #421	; 0x1a5
 8013d24:	4907      	ldr	r1, [pc, #28]	; (8013d44 <vj_compress_tcp+0x468>)
 8013d26:	4808      	ldr	r0, [pc, #32]	; (8013d48 <vj_compress_tcp+0x46c>)
 8013d28:	f000 fac6 	bl	80142b8 <app_debug_rtt_raw>
 8013d2c:	e7f2      	b.n	8013d14 <vj_compress_tcp+0x438>
    return (TYPE_IP);
 8013d2e:	2040      	movs	r0, #64	; 0x40
}
 8013d30:	b00b      	add	sp, #44	; 0x2c
 8013d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (TYPE_IP);
 8013d36:	2040      	movs	r0, #64	; 0x40
 8013d38:	e7fa      	b.n	8013d30 <vj_compress_tcp+0x454>
    return (TYPE_IP);
 8013d3a:	2040      	movs	r0, #64	; 0x40
 8013d3c:	e7f8      	b.n	8013d30 <vj_compress_tcp+0x454>
 8013d3e:	bf00      	nop
 8013d40:	08019af4 	.word	0x08019af4
 8013d44:	08018eb4 	.word	0x08018eb4
 8013d48:	08016a38 	.word	0x08016a38

08013d4c <vj_uncompress_err>:
 * Called when we may have missed a packet.
 */
void
vj_uncompress_err(struct vjcompress *comp)
{
  comp->flags |= VJF_TOSS;
 8013d4c:	88c3      	ldrh	r3, [r0, #6]
 8013d4e:	f043 0301 	orr.w	r3, r3, #1
 8013d52:	80c3      	strh	r3, [r0, #6]
  INCR(vjs_errorin);
}
 8013d54:	4770      	bx	lr

08013d56 <vj_uncompress_uncomp>:
 * "Uncompress" a packet of type TYPE_UNCOMPRESSED_TCP.
 * Return 0 on success, -1 on failure.
 */
int
vj_uncompress_uncomp(struct pbuf *nb, struct vjcompress *comp)
{
 8013d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d5a:	460c      	mov	r4, r1
  u32_t hlen;
  struct cstate *cs;
  struct ip_hdr *ip;

  ip = (struct ip_hdr *)nb->payload;
 8013d5c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  hlen = IPH_HL(ip) << 2;
 8013d60:	f898 5000 	ldrb.w	r5, [r8]
  if (IPH_PROTO(ip) >= MAX_SLOTS
 8013d64:	f898 3009 	ldrb.w	r3, [r8, #9]
 8013d68:	2b0f      	cmp	r3, #15
 8013d6a:	d832      	bhi.n	8013dd2 <vj_uncompress_uncomp+0x7c>
 8013d6c:	4607      	mov	r7, r0
 8013d6e:	00ad      	lsls	r5, r5, #2
 8013d70:	f005 063c 	and.w	r6, r5, #60	; 0x3c
      || hlen + sizeof(struct tcp_hdr) > nb->len
 8013d74:	f106 0314 	add.w	r3, r6, #20
 8013d78:	8942      	ldrh	r2, [r0, #10]
 8013d7a:	4293      	cmp	r3, r2
 8013d7c:	d829      	bhi.n	8013dd2 <vj_uncompress_uncomp+0x7c>
      || (hlen += TCPH_HDRLEN_BYTES((struct tcp_hdr *)&((char *)ip)[hlen]))
 8013d7e:	eb08 0306 	add.w	r3, r8, r6
 8013d82:	8998      	ldrh	r0, [r3, #12]
 8013d84:	f7f3 fd4c 	bl	8007820 <lwip_htons>
 8013d88:	0a85      	lsrs	r5, r0, #10
 8013d8a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8013d8e:	4435      	add	r5, r6
          > nb->len
 8013d90:	897b      	ldrh	r3, [r7, #10]
      || (hlen += TCPH_HDRLEN_BYTES((struct tcp_hdr *)&((char *)ip)[hlen]))
 8013d92:	42ab      	cmp	r3, r5
 8013d94:	d31d      	bcc.n	8013dd2 <vj_uncompress_uncomp+0x7c>
    PPPDEBUG(LOG_INFO, ("vj_uncompress_uncomp: bad cid=%d, hlen=%d buflen=%d\n",
      IPH_PROTO(ip), hlen, nb->len));
    vj_uncompress_err(comp);
    return -1;
  }
  cs = &comp->rstate[comp->last_recv = IPH_PROTO(ip)];
 8013d96:	f898 6009 	ldrb.w	r6, [r8, #9]
 8013d9a:	7126      	strb	r6, [r4, #4]
  comp->flags &=~ VJF_TOSS;
 8013d9c:	88e3      	ldrh	r3, [r4, #6]
 8013d9e:	f023 0301 	bic.w	r3, r3, #1
 8013da2:	80e3      	strh	r3, [r4, #6]
  IPH_PROTO_SET(ip, IP_PROTO_TCP);
 8013da4:	2306      	movs	r3, #6
 8013da6:	f888 3009 	strb.w	r3, [r8, #9]
  /* copy from/to bigger buffers checked above instead of cs->cs_ip and ip
     just to help static code analysis to see this is correct ;-) */
  MEMCPY(&cs->cs_hdr, nb->payload, hlen);
 8013daa:	ea4f 1806 	mov.w	r8, r6, lsl #4
 8013dae:	eb06 1006 	add.w	r0, r6, r6, lsl #4
 8013db2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8013db6:	462a      	mov	r2, r5
 8013db8:	6879      	ldr	r1, [r7, #4]
 8013dba:	f600 0094 	addw	r0, r0, #2196	; 0x894
 8013dbe:	f000 fae7 	bl	8014390 <memcpy>
  cs->cs_hlen = (u16_t)hlen;
 8013dc2:	4446      	add	r6, r8
 8013dc4:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013dc8:	f8a4 5890 	strh.w	r5, [r4, #2192]	; 0x890
  INCR(vjs_uncompressedin);
  return 0;
 8013dcc:	2000      	movs	r0, #0
}
 8013dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  comp->flags |= VJF_TOSS;
 8013dd2:	88e3      	ldrh	r3, [r4, #6]
 8013dd4:	f043 0301 	orr.w	r3, r3, #1
 8013dd8:	80e3      	strh	r3, [r4, #6]
    return -1;
 8013dda:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013dde:	e7f6      	b.n	8013dce <vj_uncompress_uncomp+0x78>

08013de0 <vj_uncompress_tcp>:
 * This procedure replaces the compressed header with the uncompressed
 * header and returns the length of the VJ header.
 */
int
vj_uncompress_tcp(struct pbuf **nb, struct vjcompress *comp)
{
 8013de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de4:	b085      	sub	sp, #20
 8013de6:	9003      	str	r0, [sp, #12]
 8013de8:	460e      	mov	r6, r1
  u8_t *cp;
  struct tcp_hdr *th;
  struct cstate *cs;
  struct vj_u16_t *bp;
  struct pbuf *n0 = *nb;
 8013dea:	6807      	ldr	r7, [r0, #0]
  u32_t tmp;
  u32_t vjlen, hlen, changes;

  INCR(vjs_compressedin);
  cp = (u8_t*)n0->payload;
 8013dec:	687b      	ldr	r3, [r7, #4]
  changes = *cp++;
 8013dee:	f893 9000 	ldrb.w	r9, [r3]
  if (changes & NEW_C) {
 8013df2:	f019 0f40 	tst.w	r9, #64	; 0x40
 8013df6:	d00c      	beq.n	8013e12 <vj_uncompress_tcp+0x32>
    /*
     * Make sure the state index is in range, then grab the state.
     * If we have a good state index, clear the 'discard' flag.
     */
    if (*cp >= MAX_SLOTS) {
 8013df8:	785a      	ldrb	r2, [r3, #1]
 8013dfa:	2a0f      	cmp	r2, #15
 8013dfc:	f200 8235 	bhi.w	801426a <vj_uncompress_tcp+0x48a>
      PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: bad cid=%d\n", *cp));
      goto bad;
    }

    comp->flags &=~ VJF_TOSS;
 8013e00:	88ca      	ldrh	r2, [r1, #6]
 8013e02:	f022 0201 	bic.w	r2, r2, #1
 8013e06:	80ca      	strh	r2, [r1, #6]
    comp->last_recv = *cp++;
 8013e08:	f103 0a02 	add.w	sl, r3, #2
 8013e0c:	785b      	ldrb	r3, [r3, #1]
 8013e0e:	710b      	strb	r3, [r1, #4]
 8013e10:	e006      	b.n	8013e20 <vj_uncompress_tcp+0x40>
    /*
     * this packet has an implicit state index.  If we've
     * had a line error since the last time we got an
     * explicit state index, we have to toss the packet.
     */
    if (comp->flags & VJF_TOSS) {
 8013e12:	88ca      	ldrh	r2, [r1, #6]
 8013e14:	f012 0f01 	tst.w	r2, #1
 8013e18:	f040 8240 	bne.w	801429c <vj_uncompress_tcp+0x4bc>
  changes = *cp++;
 8013e1c:	f103 0a01 	add.w	sl, r3, #1
      PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: tossing\n"));
      INCR(vjs_tossed);
      return (-1);
    }
  }
  cs = &comp->rstate[comp->last_recv];
 8013e20:	7935      	ldrb	r5, [r6, #4]
  hlen = IPH_HL(&cs->cs_ip) << 2;
 8013e22:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 8013e26:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8013e2a:	f893 4894 	ldrb.w	r4, [r3, #2196]	; 0x894
 8013e2e:	00a4      	lsls	r4, r4, #2
 8013e30:	f004 043c 	and.w	r4, r4, #60	; 0x3c
  th = (struct tcp_hdr *)&((u8_t*)&cs->cs_ip)[hlen];
 8013e34:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 8013e38:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8013e3c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8013e40:	9302      	str	r3, [sp, #8]
 8013e42:	eb03 0804 	add.w	r8, r3, r4
  th->chksum = lwip_htons((*cp << 8) | cp[1]);
 8013e46:	f89a 0000 	ldrb.w	r0, [sl]
 8013e4a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8013e4e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8013e52:	f7f3 fce5 	bl	8007820 <lwip_htons>
 8013e56:	f8a8 0010 	strh.w	r0, [r8, #16]
  cp += 2;
 8013e5a:	f10a 0302 	add.w	r3, sl, #2
 8013e5e:	9301      	str	r3, [sp, #4]
  if (changes & TCP_PUSH_BIT) {
 8013e60:	f019 0f10 	tst.w	r9, #16
 8013e64:	d02f      	beq.n	8013ec6 <vj_uncompress_tcp+0xe6>
    TCPH_SET_FLAG(th, TCP_PSH);
 8013e66:	f8b8 b00c 	ldrh.w	fp, [r8, #12]
 8013e6a:	2008      	movs	r0, #8
 8013e6c:	f7f3 fcd8 	bl	8007820 <lwip_htons>
 8013e70:	ea4b 0b00 	orr.w	fp, fp, r0
 8013e74:	f8a8 b00c 	strh.w	fp, [r8, #12]
  } else {
    TCPH_UNSET_FLAG(th, TCP_PSH);
  }

  switch (changes & SPECIALS_MASK) {
 8013e78:	f009 030f 	and.w	r3, r9, #15
 8013e7c:	2b0b      	cmp	r3, #11
 8013e7e:	d02c      	beq.n	8013eda <vj_uncompress_tcp+0xfa>
 8013e80:	2b0f      	cmp	r3, #15
 8013e82:	f000 811a 	beq.w	80140ba <vj_uncompress_tcp+0x2da>
    tmp = lwip_ntohl(th->seqno) + lwip_ntohs(IPH_LEN(&cs->cs_ip)) - cs->cs_hlen;
    th->seqno = lwip_htonl(tmp);
    break;

  default:
    if (changes & NEW_U) {
 8013e86:	f019 0f01 	tst.w	r9, #1
 8013e8a:	f000 8135 	beq.w	80140f8 <vj_uncompress_tcp+0x318>
      TCPH_SET_FLAG(th, TCP_URG);
 8013e8e:	f8b8 b00c 	ldrh.w	fp, [r8, #12]
 8013e92:	2020      	movs	r0, #32
 8013e94:	f7f3 fcc4 	bl	8007820 <lwip_htons>
 8013e98:	ea4b 0b00 	orr.w	fp, fp, r0
 8013e9c:	f8a8 b00c 	strh.w	fp, [r8, #12]
      DECODEU(th->urgp);
 8013ea0:	f89a 0002 	ldrb.w	r0, [sl, #2]
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	f040 811f 	bne.w	80140e8 <vj_uncompress_tcp+0x308>
 8013eaa:	f89a 0003 	ldrb.w	r0, [sl, #3]
 8013eae:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8013eb2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8013eb6:	f7f3 fcb3 	bl	8007820 <lwip_htons>
 8013eba:	f8a8 0012 	strh.w	r0, [r8, #18]
 8013ebe:	f10a 0305 	add.w	r3, sl, #5
 8013ec2:	9301      	str	r3, [sp, #4]
 8013ec4:	e121      	b.n	801410a <vj_uncompress_tcp+0x32a>
    TCPH_UNSET_FLAG(th, TCP_PSH);
 8013ec6:	f9b8 b00c 	ldrsh.w	fp, [r8, #12]
 8013eca:	2008      	movs	r0, #8
 8013ecc:	f7f3 fca8 	bl	8007820 <lwip_htons>
 8013ed0:	ea2b 0b00 	bic.w	fp, fp, r0
 8013ed4:	f8a8 b00c 	strh.w	fp, [r8, #12]
 8013ed8:	e7ce      	b.n	8013e78 <vj_uncompress_tcp+0x98>
      u32_t i = lwip_ntohs(IPH_LEN(&cs->cs_ip)) - cs->cs_hlen;
 8013eda:	eb05 1a05 	add.w	sl, r5, r5, lsl #4
 8013ede:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013ee2:	f8ba 0896 	ldrh.w	r0, [sl, #2198]	; 0x896
 8013ee6:	f7f3 fc9b 	bl	8007820 <lwip_htons>
 8013eea:	f8ba a890 	ldrh.w	sl, [sl, #2192]	; 0x890
 8013eee:	eba0 0a0a 	sub.w	sl, r0, sl
      tmp = lwip_ntohl(th->ackno) + i;
 8013ef2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013ef6:	f7f3 fc98 	bl	800782a <lwip_htonl>
      th->ackno = lwip_htonl(tmp);
 8013efa:	4450      	add	r0, sl
 8013efc:	f7f3 fc95 	bl	800782a <lwip_htonl>
 8013f00:	f8c8 0008 	str.w	r0, [r8, #8]
      tmp = lwip_ntohl(th->seqno) + i;
 8013f04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013f08:	f7f3 fc8f 	bl	800782a <lwip_htonl>
      th->seqno = lwip_htonl(tmp);
 8013f0c:	4450      	add	r0, sl
 8013f0e:	f7f3 fc8c 	bl	800782a <lwip_htonl>
 8013f12:	f8c8 0004 	str.w	r0, [r8, #4]
    if (changes & NEW_S) {
      DECODEL(th->seqno);
    }
    break;
  }
  if (changes & NEW_I) {
 8013f16:	f019 0f20 	tst.w	r9, #32
 8013f1a:	f000 8184 	beq.w	8014226 <vj_uncompress_tcp+0x446>
    DECODES(cs->cs_ip._id);
 8013f1e:	9b01      	ldr	r3, [sp, #4]
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	f040 816c 	bne.w	8014200 <vj_uncompress_tcp+0x420>
 8013f28:	eb05 1805 	add.w	r8, r5, r5, lsl #4
 8013f2c:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 8013f30:	f8b8 0898 	ldrh.w	r0, [r8, #2200]	; 0x898
 8013f34:	f7f3 fc74 	bl	8007820 <lwip_htons>
 8013f38:	9b01      	ldr	r3, [sp, #4]
 8013f3a:	785a      	ldrb	r2, [r3, #1]
 8013f3c:	789b      	ldrb	r3, [r3, #2]
 8013f3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013f42:	4418      	add	r0, r3
 8013f44:	b280      	uxth	r0, r0
 8013f46:	f7f3 fc6b 	bl	8007820 <lwip_htons>
 8013f4a:	f8a8 0898 	strh.w	r0, [r8, #2200]	; 0x898
 8013f4e:	9b01      	ldr	r3, [sp, #4]
 8013f50:	f103 0803 	add.w	r8, r3, #3
  /*
   * At this point, cp points to the first byte of data in the
   * packet.  Fill in the IP total length and update the IP
   * header checksum.
   */
  vjlen = (u16_t)(cp - (u8_t*)n0->payload);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	eba8 0803 	sub.w	r8, r8, r3
 8013f5a:	fa1f f888 	uxth.w	r8, r8
 8013f5e:	46c2      	mov	sl, r8
  if (n0->len < vjlen) {
 8013f60:	897b      	ldrh	r3, [r7, #10]
 8013f62:	4543      	cmp	r3, r8
 8013f64:	f0c0 8181 	bcc.w	801426a <vj_uncompress_tcp+0x48a>
          n0->len, vjlen));
    goto bad;
  }

#if BYTE_ORDER == LITTLE_ENDIAN
  tmp = n0->tot_len - vjlen + cs->cs_hlen;
 8013f68:	8938      	ldrh	r0, [r7, #8]
 8013f6a:	eb05 1905 	add.w	r9, r5, r5, lsl #4
 8013f6e:	eb06 09c9 	add.w	r9, r6, r9, lsl #3
 8013f72:	f8b9 3890 	ldrh.w	r3, [r9, #2192]	; 0x890
 8013f76:	4418      	add	r0, r3
 8013f78:	eba0 0008 	sub.w	r0, r0, r8
  IPH_LEN_SET(&cs->cs_ip, lwip_htons((u16_t)tmp));
 8013f7c:	b280      	uxth	r0, r0
 8013f7e:	f7f3 fc4f 	bl	8007820 <lwip_htons>
 8013f82:	f8a9 0896 	strh.w	r0, [r9, #2198]	; 0x896
  IPH_LEN_SET(&cs->cs_ip, lwip_htons(n0->tot_len - vjlen + cs->cs_hlen));
#endif

  /* recompute the ip header checksum */
  bp = (struct vj_u16_t*) &cs->cs_ip;
  IPH_CHKSUM_SET(&cs->cs_ip, 0);
 8013f86:	2300      	movs	r3, #0
 8013f88:	f8a9 389e 	strh.w	r3, [r9, #2206]	; 0x89e
  for (tmp = 0; hlen > 0; hlen -= 2) {
 8013f8c:	b164      	cbz	r4, 8013fa8 <vj_uncompress_tcp+0x1c8>
 8013f8e:	1ea1      	subs	r1, r4, #2
 8013f90:	f021 0101 	bic.w	r1, r1, #1
 8013f94:	3102      	adds	r1, #2
 8013f96:	9b02      	ldr	r3, [sp, #8]
 8013f98:	4419      	add	r1, r3
 8013f9a:	2400      	movs	r4, #0
    tmp += (*bp++).v;
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	3302      	adds	r3, #2
 8013fa0:	8812      	ldrh	r2, [r2, #0]
 8013fa2:	4414      	add	r4, r2
  for (tmp = 0; hlen > 0; hlen -= 2) {
 8013fa4:	428b      	cmp	r3, r1
 8013fa6:	d1f9      	bne.n	8013f9c <vj_uncompress_tcp+0x1bc>
  }
  tmp = (tmp & 0xffff) + (tmp >> 16);
 8013fa8:	b2a3      	uxth	r3, r4
 8013faa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  tmp = (tmp & 0xffff) + (tmp >> 16);
 8013fae:	b29c      	uxth	r4, r3
  IPH_CHKSUM_SET(&cs->cs_ip,  (u16_t)(~tmp));
 8013fb0:	eb05 1205 	add.w	r2, r5, r5, lsl #4
 8013fb4:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
  tmp = (tmp & 0xffff) + (tmp >> 16);
 8013fb8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  IPH_CHKSUM_SET(&cs->cs_ip,  (u16_t)(~tmp));
 8013fbc:	43e4      	mvns	r4, r4
 8013fbe:	f8a2 489e 	strh.w	r4, [r2, #2206]	; 0x89e

  /* Remove the compressed header and prepend the uncompressed header. */
  if (pbuf_remove_header(n0, vjlen)) {
 8013fc2:	4651      	mov	r1, sl
 8013fc4:	4638      	mov	r0, r7
 8013fc6:	f7f5 f843 	bl	8009050 <pbuf_remove_header>
 8013fca:	2800      	cmp	r0, #0
 8013fcc:	f040 813e 	bne.w	801424c <vj_uncompress_tcp+0x46c>
    /* Can we cope with this failing?  Just assert for now */
    LWIP_ASSERT("pbuf_remove_header failed\n", 0);
    goto bad;
  }

  if(LWIP_MEM_ALIGN(n0->payload) != n0->payload) {
 8013fd0:	687a      	ldr	r2, [r7, #4]
 8013fd2:	1cd3      	adds	r3, r2, #3
 8013fd4:	f023 0303 	bic.w	r3, r3, #3
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	f000 814d 	beq.w	8014278 <vj_uncompress_tcp+0x498>
     * the packet is being allocated with enough header space to be
     * forwarded (to Ethernet for example).
     */
    np = pbuf_alloc(PBUF_LINK, n0->len + cs->cs_hlen, PBUF_POOL);
#else /* IP_FORWARD */
    np = pbuf_alloc(PBUF_RAW, n0->len + cs->cs_hlen, PBUF_POOL);
 8013fde:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 8013fe2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8013fe6:	8979      	ldrh	r1, [r7, #10]
 8013fe8:	f8b3 3890 	ldrh.w	r3, [r3, #2192]	; 0x890
 8013fec:	4419      	add	r1, r3
 8013fee:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8013ff2:	b289      	uxth	r1, r1
 8013ff4:	2000      	movs	r0, #0
 8013ff6:	f7f5 f8d5 	bl	80091a4 <pbuf_alloc>
#endif /* IP_FORWARD */
    if(!np) {
 8013ffa:	4604      	mov	r4, r0
 8013ffc:	2800      	cmp	r0, #0
 8013ffe:	f000 8134 	beq.w	801426a <vj_uncompress_tcp+0x48a>
      PPPDEBUG(LOG_WARNING, ("vj_uncompress_tcp: realign failed\n"));
      goto bad;
    }

    if (pbuf_remove_header(np, cs->cs_hlen)) {
 8014002:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 8014006:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801400a:	f8b3 1890 	ldrh.w	r1, [r3, #2192]	; 0x890
 801400e:	f7f5 f81f 	bl	8009050 <pbuf_remove_header>
 8014012:	2800      	cmp	r0, #0
 8014014:	f040 8122 	bne.w	801425c <vj_uncompress_tcp+0x47c>
      /* Can we cope with this failing?  Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      goto bad;
    }

    pbuf_take(np, n0->payload, n0->len);
 8014018:	897a      	ldrh	r2, [r7, #10]
 801401a:	6879      	ldr	r1, [r7, #4]
 801401c:	4620      	mov	r0, r4
 801401e:	f7f5 fb47 	bl	80096b0 <pbuf_take>

    if(n0->next) {
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	b129      	cbz	r1, 8014032 <vj_uncompress_tcp+0x252>
      pbuf_chain(np, n0->next);
 8014026:	4620      	mov	r0, r4
 8014028:	f7f5 fa0e 	bl	8009448 <pbuf_chain>
      pbuf_dechain(n0);
 801402c:	4638      	mov	r0, r7
 801402e:	f7f5 fa13 	bl	8009458 <pbuf_dechain>
    }
    pbuf_free(n0);
 8014032:	4638      	mov	r0, r7
 8014034:	f7f5 f84c 	bl	80090d0 <pbuf_free>
    n0 = np;
  }

  if (pbuf_add_header(n0, cs->cs_hlen)) {
 8014038:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 801403c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8014040:	f8b3 1890 	ldrh.w	r1, [r3, #2192]	; 0x890
 8014044:	4620      	mov	r0, r4
 8014046:	f7f4 fffd 	bl	8009044 <pbuf_add_header>
 801404a:	b1e0      	cbz	r0, 8014086 <vj_uncompress_tcp+0x2a6>
    struct pbuf *np;

    LWIP_ASSERT("vj_uncompress_tcp: cs->cs_hlen <= PBUF_POOL_BUFSIZE", cs->cs_hlen <= PBUF_POOL_BUFSIZE);
 801404c:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 8014050:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8014054:	f8b3 3890 	ldrh.w	r3, [r3, #2192]	; 0x890
 8014058:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801405c:	f200 810e 	bhi.w	801427c <vj_uncompress_tcp+0x49c>
    np = pbuf_alloc(PBUF_RAW, cs->cs_hlen, PBUF_POOL);
 8014060:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 8014064:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8014068:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801406c:	f8b3 1890 	ldrh.w	r1, [r3, #2192]	; 0x890
 8014070:	2000      	movs	r0, #0
 8014072:	f7f5 f897 	bl	80091a4 <pbuf_alloc>
    if(!np) {
 8014076:	4607      	mov	r7, r0
 8014078:	2800      	cmp	r0, #0
 801407a:	f000 80f6 	beq.w	801426a <vj_uncompress_tcp+0x48a>
      PPPDEBUG(LOG_WARNING, ("vj_uncompress_tcp: prepend failed\n"));
      goto bad;
    }
    pbuf_cat(np, n0);
 801407e:	4621      	mov	r1, r4
 8014080:	f7f5 f9a4 	bl	80093cc <pbuf_cat>
    n0 = np;
 8014084:	463c      	mov	r4, r7
  }
  LWIP_ASSERT("n0->len >= cs->cs_hlen", n0->len >= cs->cs_hlen);
 8014086:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 801408a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801408e:	8962      	ldrh	r2, [r4, #10]
 8014090:	f8b3 3890 	ldrh.w	r3, [r3, #2192]	; 0x890
 8014094:	429a      	cmp	r2, r3
 8014096:	f0c0 80f9 	bcc.w	801428c <vj_uncompress_tcp+0x4ac>
  MEMCPY(n0->payload, &cs->cs_ip, cs->cs_hlen);
 801409a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801409e:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 80140a2:	f8b6 2890 	ldrh.w	r2, [r6, #2192]	; 0x890
 80140a6:	9902      	ldr	r1, [sp, #8]
 80140a8:	6860      	ldr	r0, [r4, #4]
 80140aa:	f000 f971 	bl	8014390 <memcpy>

  *nb = n0;
 80140ae:	9b03      	ldr	r3, [sp, #12]
 80140b0:	601c      	str	r4, [r3, #0]
  return vjlen;

bad:
  vj_uncompress_err(comp);
  return (-1);
}
 80140b2:	4640      	mov	r0, r8
 80140b4:	b005      	add	sp, #20
 80140b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = lwip_ntohl(th->seqno) + lwip_ntohs(IPH_LEN(&cs->cs_ip)) - cs->cs_hlen;
 80140ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80140be:	f7f3 fbb4 	bl	800782a <lwip_htonl>
 80140c2:	4683      	mov	fp, r0
 80140c4:	eb05 1a05 	add.w	sl, r5, r5, lsl #4
 80140c8:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80140cc:	f8ba 0896 	ldrh.w	r0, [sl, #2198]	; 0x896
 80140d0:	f7f3 fba6 	bl	8007820 <lwip_htons>
 80140d4:	f8ba 3890 	ldrh.w	r3, [sl, #2192]	; 0x890
 80140d8:	ebab 0b03 	sub.w	fp, fp, r3
    th->seqno = lwip_htonl(tmp);
 80140dc:	4458      	add	r0, fp
 80140de:	f7f3 fba4 	bl	800782a <lwip_htonl>
 80140e2:	f8c8 0004 	str.w	r0, [r8, #4]
    break;
 80140e6:	e716      	b.n	8013f16 <vj_uncompress_tcp+0x136>
      DECODEU(th->urgp);
 80140e8:	f10a 0303 	add.w	r3, sl, #3
 80140ec:	9301      	str	r3, [sp, #4]
 80140ee:	f7f3 fb97 	bl	8007820 <lwip_htons>
 80140f2:	f8a8 0012 	strh.w	r0, [r8, #18]
 80140f6:	e008      	b.n	801410a <vj_uncompress_tcp+0x32a>
      TCPH_UNSET_FLAG(th, TCP_URG);
 80140f8:	f9b8 a00c 	ldrsh.w	sl, [r8, #12]
 80140fc:	2020      	movs	r0, #32
 80140fe:	f7f3 fb8f 	bl	8007820 <lwip_htons>
 8014102:	ea2a 0a00 	bic.w	sl, sl, r0
 8014106:	f8a8 a00c 	strh.w	sl, [r8, #12]
    if (changes & NEW_W) {
 801410a:	f019 0f02 	tst.w	r9, #2
 801410e:	d015      	beq.n	801413c <vj_uncompress_tcp+0x35c>
      DECODES(th->wnd);
 8014110:	9b01      	ldr	r3, [sp, #4]
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d142      	bne.n	801419e <vj_uncompress_tcp+0x3be>
 8014118:	f8b8 000e 	ldrh.w	r0, [r8, #14]
 801411c:	f7f3 fb80 	bl	8007820 <lwip_htons>
 8014120:	9b01      	ldr	r3, [sp, #4]
 8014122:	785a      	ldrb	r2, [r3, #1]
 8014124:	789b      	ldrb	r3, [r3, #2]
 8014126:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801412a:	4418      	add	r0, r3
 801412c:	b280      	uxth	r0, r0
 801412e:	f7f3 fb77 	bl	8007820 <lwip_htons>
 8014132:	f8a8 000e 	strh.w	r0, [r8, #14]
 8014136:	9b01      	ldr	r3, [sp, #4]
 8014138:	3303      	adds	r3, #3
 801413a:	9301      	str	r3, [sp, #4]
    if (changes & NEW_A) {
 801413c:	f019 0f04 	tst.w	r9, #4
 8014140:	d014      	beq.n	801416c <vj_uncompress_tcp+0x38c>
      DECODEL(th->ackno);
 8014142:	9b01      	ldr	r3, [sp, #4]
 8014144:	781b      	ldrb	r3, [r3, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d13a      	bne.n	80141c0 <vj_uncompress_tcp+0x3e0>
 801414a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801414e:	f7f3 fb6c 	bl	800782a <lwip_htonl>
 8014152:	9b01      	ldr	r3, [sp, #4]
 8014154:	785a      	ldrb	r2, [r3, #1]
 8014156:	789b      	ldrb	r3, [r3, #2]
 8014158:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801415c:	4418      	add	r0, r3
 801415e:	f7f3 fb64 	bl	800782a <lwip_htonl>
 8014162:	f8c8 0008 	str.w	r0, [r8, #8]
 8014166:	9b01      	ldr	r3, [sp, #4]
 8014168:	3303      	adds	r3, #3
 801416a:	9301      	str	r3, [sp, #4]
    if (changes & NEW_S) {
 801416c:	f019 0f08 	tst.w	r9, #8
 8014170:	f43f aed1 	beq.w	8013f16 <vj_uncompress_tcp+0x136>
      DECODEL(th->seqno);
 8014174:	9b01      	ldr	r3, [sp, #4]
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	bb93      	cbnz	r3, 80141e0 <vj_uncompress_tcp+0x400>
 801417a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801417e:	f7f3 fb54 	bl	800782a <lwip_htonl>
 8014182:	9b01      	ldr	r3, [sp, #4]
 8014184:	785a      	ldrb	r2, [r3, #1]
 8014186:	789b      	ldrb	r3, [r3, #2]
 8014188:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801418c:	4418      	add	r0, r3
 801418e:	f7f3 fb4c 	bl	800782a <lwip_htonl>
 8014192:	f8c8 0004 	str.w	r0, [r8, #4]
 8014196:	9b01      	ldr	r3, [sp, #4]
 8014198:	3303      	adds	r3, #3
 801419a:	9301      	str	r3, [sp, #4]
 801419c:	e6bb      	b.n	8013f16 <vj_uncompress_tcp+0x136>
      DECODES(th->wnd);
 801419e:	f8b8 000e 	ldrh.w	r0, [r8, #14]
 80141a2:	f7f3 fb3d 	bl	8007820 <lwip_htons>
 80141a6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80141aa:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80141ae:	4418      	add	r0, r3
 80141b0:	b280      	uxth	r0, r0
 80141b2:	f7f3 fb35 	bl	8007820 <lwip_htons>
 80141b6:	f8a8 000e 	strh.w	r0, [r8, #14]
 80141ba:	f8cd a004 	str.w	sl, [sp, #4]
 80141be:	e7bd      	b.n	801413c <vj_uncompress_tcp+0x35c>
      DECODEL(th->ackno);
 80141c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80141c4:	f7f3 fb31 	bl	800782a <lwip_htonl>
 80141c8:	f8dd a004 	ldr.w	sl, [sp, #4]
 80141cc:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80141d0:	4418      	add	r0, r3
 80141d2:	f7f3 fb2a 	bl	800782a <lwip_htonl>
 80141d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80141da:	f8cd a004 	str.w	sl, [sp, #4]
 80141de:	e7c5      	b.n	801416c <vj_uncompress_tcp+0x38c>
      DECODEL(th->seqno);
 80141e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80141e4:	f7f3 fb21 	bl	800782a <lwip_htonl>
 80141e8:	f8dd a004 	ldr.w	sl, [sp, #4]
 80141ec:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80141f0:	4418      	add	r0, r3
 80141f2:	f7f3 fb1a 	bl	800782a <lwip_htonl>
 80141f6:	f8c8 0004 	str.w	r0, [r8, #4]
 80141fa:	f8cd a004 	str.w	sl, [sp, #4]
 80141fe:	e68a      	b.n	8013f16 <vj_uncompress_tcp+0x136>
    DECODES(cs->cs_ip._id);
 8014200:	eb05 1905 	add.w	r9, r5, r5, lsl #4
 8014204:	eb06 09c9 	add.w	r9, r6, r9, lsl #3
 8014208:	f8b9 0898 	ldrh.w	r0, [r9, #2200]	; 0x898
 801420c:	f7f3 fb08 	bl	8007820 <lwip_htons>
 8014210:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014214:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014218:	4418      	add	r0, r3
 801421a:	b280      	uxth	r0, r0
 801421c:	f7f3 fb00 	bl	8007820 <lwip_htons>
 8014220:	f8a9 0898 	strh.w	r0, [r9, #2200]	; 0x898
 8014224:	e696      	b.n	8013f54 <vj_uncompress_tcp+0x174>
    IPH_ID_SET(&cs->cs_ip, lwip_ntohs(IPH_ID(&cs->cs_ip)) + 1);
 8014226:	eb05 1805 	add.w	r8, r5, r5, lsl #4
 801422a:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 801422e:	f8b8 0898 	ldrh.w	r0, [r8, #2200]	; 0x898
 8014232:	f7f3 faf5 	bl	8007820 <lwip_htons>
 8014236:	3001      	adds	r0, #1
 8014238:	b280      	uxth	r0, r0
 801423a:	f8a8 0898 	strh.w	r0, [r8, #2200]	; 0x898
    IPH_ID_SET(&cs->cs_ip, lwip_htons(IPH_ID(&cs->cs_ip)));
 801423e:	f7f3 faef 	bl	8007820 <lwip_htons>
 8014242:	f8a8 0898 	strh.w	r0, [r8, #2200]	; 0x898
 8014246:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801424a:	e683      	b.n	8013f54 <vj_uncompress_tcp+0x174>
    LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801424c:	4b15      	ldr	r3, [pc, #84]	; (80142a4 <vj_uncompress_tcp+0x4c4>)
 801424e:	f44f 721c 	mov.w	r2, #624	; 0x270
 8014252:	4915      	ldr	r1, [pc, #84]	; (80142a8 <vj_uncompress_tcp+0x4c8>)
 8014254:	4815      	ldr	r0, [pc, #84]	; (80142ac <vj_uncompress_tcp+0x4cc>)
 8014256:	f000 f82f 	bl	80142b8 <app_debug_rtt_raw>
    goto bad;
 801425a:	e006      	b.n	801426a <vj_uncompress_tcp+0x48a>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801425c:	4b11      	ldr	r3, [pc, #68]	; (80142a4 <vj_uncompress_tcp+0x4c4>)
 801425e:	f240 2287 	movw	r2, #647	; 0x287
 8014262:	4911      	ldr	r1, [pc, #68]	; (80142a8 <vj_uncompress_tcp+0x4c8>)
 8014264:	4811      	ldr	r0, [pc, #68]	; (80142ac <vj_uncompress_tcp+0x4cc>)
 8014266:	f000 f827 	bl	80142b8 <app_debug_rtt_raw>
  comp->flags |= VJF_TOSS;
 801426a:	88f3      	ldrh	r3, [r6, #6]
 801426c:	f043 0301 	orr.w	r3, r3, #1
 8014270:	80f3      	strh	r3, [r6, #6]
  return (-1);
 8014272:	f04f 38ff 	mov.w	r8, #4294967295
}
 8014276:	e71c      	b.n	80140b2 <vj_uncompress_tcp+0x2d2>
  struct pbuf *n0 = *nb;
 8014278:	463c      	mov	r4, r7
 801427a:	e6dd      	b.n	8014038 <vj_uncompress_tcp+0x258>
    LWIP_ASSERT("vj_uncompress_tcp: cs->cs_hlen <= PBUF_POOL_BUFSIZE", cs->cs_hlen <= PBUF_POOL_BUFSIZE);
 801427c:	4b09      	ldr	r3, [pc, #36]	; (80142a4 <vj_uncompress_tcp+0x4c4>)
 801427e:	f44f 7226 	mov.w	r2, #664	; 0x298
 8014282:	490b      	ldr	r1, [pc, #44]	; (80142b0 <vj_uncompress_tcp+0x4d0>)
 8014284:	4809      	ldr	r0, [pc, #36]	; (80142ac <vj_uncompress_tcp+0x4cc>)
 8014286:	f000 f817 	bl	80142b8 <app_debug_rtt_raw>
 801428a:	e6e9      	b.n	8014060 <vj_uncompress_tcp+0x280>
  LWIP_ASSERT("n0->len >= cs->cs_hlen", n0->len >= cs->cs_hlen);
 801428c:	4b05      	ldr	r3, [pc, #20]	; (80142a4 <vj_uncompress_tcp+0x4c4>)
 801428e:	f240 22a1 	movw	r2, #673	; 0x2a1
 8014292:	4908      	ldr	r1, [pc, #32]	; (80142b4 <vj_uncompress_tcp+0x4d4>)
 8014294:	4805      	ldr	r0, [pc, #20]	; (80142ac <vj_uncompress_tcp+0x4cc>)
 8014296:	f000 f80f 	bl	80142b8 <app_debug_rtt_raw>
 801429a:	e6fe      	b.n	801409a <vj_uncompress_tcp+0x2ba>
      return (-1);
 801429c:	f04f 38ff 	mov.w	r8, #4294967295
 80142a0:	e707      	b.n	80140b2 <vj_uncompress_tcp+0x2d2>
 80142a2:	bf00      	nop
 80142a4:	08019af4 	.word	0x08019af4
 80142a8:	08018eb4 	.word	0x08018eb4
 80142ac:	08016a38 	.word	0x08016a38
 80142b0:	08019b20 	.word	0x08019b20
 80142b4:	08019b54 	.word	0x08019b54

080142b8 <app_debug_rtt_raw>:
    
    return n;
}

int32_t app_debug_rtt_raw(const char *fmt,...)
{
 80142b8:	b40f      	push	{r0, r1, r2, r3}
 80142ba:	b510      	push	{r4, lr}
 80142bc:	b082      	sub	sp, #8
 80142be:	ab04      	add	r3, sp, #16
 80142c0:	f853 2b04 	ldr.w	r2, [r3], #4

    char *p = &m_debug_buffer[0];
    int32_t size = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    va_list args;

    va_start (args, fmt);
 80142c4:	9301      	str	r3, [sp, #4]
    n = vsnprintf(p, size, fmt, args);
 80142c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80142ca:	480e      	ldr	r0, [pc, #56]	; (8014304 <app_debug_rtt_raw+0x4c>)
 80142cc:	f000 f93e 	bl	801454c <vsniprintf>
 80142d0:	4604      	mov	r4, r0
    if (n > (int)size) 
 80142d2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80142d6:	dc07      	bgt.n	80142e8 <app_debug_rtt_raw+0x30>
    {
    	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART2, m_debug_buffer, size);
        //SEGGER_RTT_Write(0, m_debug_buffer, size);
    } 
    else if (n > 0) 
 80142d8:	2800      	cmp	r0, #0
 80142da:	dc0c      	bgt.n	80142f6 <app_debug_rtt_raw+0x3e>
        //SEGGER_RTT_Write(0, m_debug_buffer, n);
    }
    va_end(args);
    
    return n;
}
 80142dc:	4620      	mov	r0, r4
 80142de:	b002      	add	sp, #8
 80142e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142e4:	b004      	add	sp, #16
 80142e6:	4770      	bx	lr
    	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART2, m_debug_buffer, size);
 80142e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80142ec:	4905      	ldr	r1, [pc, #20]	; (8014304 <app_debug_rtt_raw+0x4c>)
 80142ee:	2004      	movs	r0, #4
 80142f0:	f7ee faf0 	bl	80028d4 <User_Uart_AsyncTransmit>
 80142f4:	e7f2      	b.n	80142dc <app_debug_rtt_raw+0x24>
    	User_Uart_AsyncTransmit(USER_UART_CHANNEL_USART2, m_debug_buffer, n);
 80142f6:	b282      	uxth	r2, r0
 80142f8:	4902      	ldr	r1, [pc, #8]	; (8014304 <app_debug_rtt_raw+0x4c>)
 80142fa:	2004      	movs	r0, #4
 80142fc:	f7ee faea 	bl	80028d4 <User_Uart_AsyncTransmit>
    return n;
 8014300:	e7ec      	b.n	80142dc <app_debug_rtt_raw+0x24>
 8014302:	bf00      	nop
 8014304:	20000fe8 	.word	0x20000fe8

08014308 <sys_rand>:



extern uint32_t sys_rand()
{
    return SysTick->VAL;
 8014308:	4b01      	ldr	r3, [pc, #4]	; (8014310 <sys_rand+0x8>)
 801430a:	6898      	ldr	r0, [r3, #8]
}
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop
 8014310:	e000e010 	.word	0xe000e010

08014314 <sys_get_tick_ms>:

extern uint32_t sys_get_tick_ms()
{
 8014314:	b508      	push	{r3, lr}
    return HAL_GetTick();
 8014316:	f7ee fd51 	bl	8002dbc <HAL_GetTick>
}
 801431a:	bd08      	pop	{r3, pc}

0801431c <sys_now>:



uint32_t sys_now(void)
{
 801431c:	b508      	push	{r3, lr}
    return HAL_GetTick();
 801431e:	f7ee fd4d 	bl	8002dbc <HAL_GetTick>
    return sys_get_tick_ms();
}
 8014322:	bd08      	pop	{r3, pc}

08014324 <sys_jiffies>:

/**
 * @brief Override LWIP weak function
 */
uint32_t sys_jiffies(void)
{
 8014324:	b508      	push	{r3, lr}
    return HAL_GetTick();
 8014326:	f7ee fd49 	bl	8002dbc <HAL_GetTick>
    return sys_get_tick_ms();
}
 801432a:	bd08      	pop	{r3, pc}

0801432c <__libc_init_array>:
 801432c:	b570      	push	{r4, r5, r6, lr}
 801432e:	2600      	movs	r6, #0
 8014330:	4d0c      	ldr	r5, [pc, #48]	; (8014364 <__libc_init_array+0x38>)
 8014332:	4c0d      	ldr	r4, [pc, #52]	; (8014368 <__libc_init_array+0x3c>)
 8014334:	1b64      	subs	r4, r4, r5
 8014336:	10a4      	asrs	r4, r4, #2
 8014338:	42a6      	cmp	r6, r4
 801433a:	d109      	bne.n	8014350 <__libc_init_array+0x24>
 801433c:	f000 fe26 	bl	8014f8c <_init>
 8014340:	2600      	movs	r6, #0
 8014342:	4d0a      	ldr	r5, [pc, #40]	; (801436c <__libc_init_array+0x40>)
 8014344:	4c0a      	ldr	r4, [pc, #40]	; (8014370 <__libc_init_array+0x44>)
 8014346:	1b64      	subs	r4, r4, r5
 8014348:	10a4      	asrs	r4, r4, #2
 801434a:	42a6      	cmp	r6, r4
 801434c:	d105      	bne.n	801435a <__libc_init_array+0x2e>
 801434e:	bd70      	pop	{r4, r5, r6, pc}
 8014350:	f855 3b04 	ldr.w	r3, [r5], #4
 8014354:	4798      	blx	r3
 8014356:	3601      	adds	r6, #1
 8014358:	e7ee      	b.n	8014338 <__libc_init_array+0xc>
 801435a:	f855 3b04 	ldr.w	r3, [r5], #4
 801435e:	4798      	blx	r3
 8014360:	3601      	adds	r6, #1
 8014362:	e7f2      	b.n	801434a <__libc_init_array+0x1e>
 8014364:	08019cb0 	.word	0x08019cb0
 8014368:	08019cb0 	.word	0x08019cb0
 801436c:	08019cb0 	.word	0x08019cb0
 8014370:	08019cb4 	.word	0x08019cb4

08014374 <memcmp>:
 8014374:	b530      	push	{r4, r5, lr}
 8014376:	2400      	movs	r4, #0
 8014378:	3901      	subs	r1, #1
 801437a:	42a2      	cmp	r2, r4
 801437c:	d101      	bne.n	8014382 <memcmp+0xe>
 801437e:	2000      	movs	r0, #0
 8014380:	e005      	b.n	801438e <memcmp+0x1a>
 8014382:	5d03      	ldrb	r3, [r0, r4]
 8014384:	3401      	adds	r4, #1
 8014386:	5d0d      	ldrb	r5, [r1, r4]
 8014388:	42ab      	cmp	r3, r5
 801438a:	d0f6      	beq.n	801437a <memcmp+0x6>
 801438c:	1b58      	subs	r0, r3, r5
 801438e:	bd30      	pop	{r4, r5, pc}

08014390 <memcpy>:
 8014390:	440a      	add	r2, r1
 8014392:	4291      	cmp	r1, r2
 8014394:	f100 33ff 	add.w	r3, r0, #4294967295
 8014398:	d100      	bne.n	801439c <memcpy+0xc>
 801439a:	4770      	bx	lr
 801439c:	b510      	push	{r4, lr}
 801439e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143a2:	4291      	cmp	r1, r2
 80143a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80143a8:	d1f9      	bne.n	801439e <memcpy+0xe>
 80143aa:	bd10      	pop	{r4, pc}

080143ac <memmove>:
 80143ac:	4288      	cmp	r0, r1
 80143ae:	b510      	push	{r4, lr}
 80143b0:	eb01 0402 	add.w	r4, r1, r2
 80143b4:	d902      	bls.n	80143bc <memmove+0x10>
 80143b6:	4284      	cmp	r4, r0
 80143b8:	4623      	mov	r3, r4
 80143ba:	d807      	bhi.n	80143cc <memmove+0x20>
 80143bc:	1e43      	subs	r3, r0, #1
 80143be:	42a1      	cmp	r1, r4
 80143c0:	d008      	beq.n	80143d4 <memmove+0x28>
 80143c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80143c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80143ca:	e7f8      	b.n	80143be <memmove+0x12>
 80143cc:	4601      	mov	r1, r0
 80143ce:	4402      	add	r2, r0
 80143d0:	428a      	cmp	r2, r1
 80143d2:	d100      	bne.n	80143d6 <memmove+0x2a>
 80143d4:	bd10      	pop	{r4, pc}
 80143d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80143da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80143de:	e7f7      	b.n	80143d0 <memmove+0x24>

080143e0 <memset>:
 80143e0:	4603      	mov	r3, r0
 80143e2:	4402      	add	r2, r0
 80143e4:	4293      	cmp	r3, r2
 80143e6:	d100      	bne.n	80143ea <memset+0xa>
 80143e8:	4770      	bx	lr
 80143ea:	f803 1b01 	strb.w	r1, [r3], #1
 80143ee:	e7f9      	b.n	80143e4 <memset+0x4>

080143f0 <_malloc_r>:
 80143f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143f2:	1ccd      	adds	r5, r1, #3
 80143f4:	f025 0503 	bic.w	r5, r5, #3
 80143f8:	3508      	adds	r5, #8
 80143fa:	2d0c      	cmp	r5, #12
 80143fc:	bf38      	it	cc
 80143fe:	250c      	movcc	r5, #12
 8014400:	2d00      	cmp	r5, #0
 8014402:	4606      	mov	r6, r0
 8014404:	db01      	blt.n	801440a <_malloc_r+0x1a>
 8014406:	42a9      	cmp	r1, r5
 8014408:	d903      	bls.n	8014412 <_malloc_r+0x22>
 801440a:	230c      	movs	r3, #12
 801440c:	6033      	str	r3, [r6, #0]
 801440e:	2000      	movs	r0, #0
 8014410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014412:	f000 f8a9 	bl	8014568 <__malloc_lock>
 8014416:	4921      	ldr	r1, [pc, #132]	; (801449c <_malloc_r+0xac>)
 8014418:	680a      	ldr	r2, [r1, #0]
 801441a:	4614      	mov	r4, r2
 801441c:	b99c      	cbnz	r4, 8014446 <_malloc_r+0x56>
 801441e:	4f20      	ldr	r7, [pc, #128]	; (80144a0 <_malloc_r+0xb0>)
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	b923      	cbnz	r3, 801442e <_malloc_r+0x3e>
 8014424:	4621      	mov	r1, r4
 8014426:	4630      	mov	r0, r6
 8014428:	f000 f83c 	bl	80144a4 <_sbrk_r>
 801442c:	6038      	str	r0, [r7, #0]
 801442e:	4629      	mov	r1, r5
 8014430:	4630      	mov	r0, r6
 8014432:	f000 f837 	bl	80144a4 <_sbrk_r>
 8014436:	1c43      	adds	r3, r0, #1
 8014438:	d123      	bne.n	8014482 <_malloc_r+0x92>
 801443a:	230c      	movs	r3, #12
 801443c:	4630      	mov	r0, r6
 801443e:	6033      	str	r3, [r6, #0]
 8014440:	f000 f898 	bl	8014574 <__malloc_unlock>
 8014444:	e7e3      	b.n	801440e <_malloc_r+0x1e>
 8014446:	6823      	ldr	r3, [r4, #0]
 8014448:	1b5b      	subs	r3, r3, r5
 801444a:	d417      	bmi.n	801447c <_malloc_r+0x8c>
 801444c:	2b0b      	cmp	r3, #11
 801444e:	d903      	bls.n	8014458 <_malloc_r+0x68>
 8014450:	6023      	str	r3, [r4, #0]
 8014452:	441c      	add	r4, r3
 8014454:	6025      	str	r5, [r4, #0]
 8014456:	e004      	b.n	8014462 <_malloc_r+0x72>
 8014458:	6863      	ldr	r3, [r4, #4]
 801445a:	42a2      	cmp	r2, r4
 801445c:	bf0c      	ite	eq
 801445e:	600b      	streq	r3, [r1, #0]
 8014460:	6053      	strne	r3, [r2, #4]
 8014462:	4630      	mov	r0, r6
 8014464:	f000 f886 	bl	8014574 <__malloc_unlock>
 8014468:	f104 000b 	add.w	r0, r4, #11
 801446c:	1d23      	adds	r3, r4, #4
 801446e:	f020 0007 	bic.w	r0, r0, #7
 8014472:	1ac2      	subs	r2, r0, r3
 8014474:	d0cc      	beq.n	8014410 <_malloc_r+0x20>
 8014476:	1a1b      	subs	r3, r3, r0
 8014478:	50a3      	str	r3, [r4, r2]
 801447a:	e7c9      	b.n	8014410 <_malloc_r+0x20>
 801447c:	4622      	mov	r2, r4
 801447e:	6864      	ldr	r4, [r4, #4]
 8014480:	e7cc      	b.n	801441c <_malloc_r+0x2c>
 8014482:	1cc4      	adds	r4, r0, #3
 8014484:	f024 0403 	bic.w	r4, r4, #3
 8014488:	42a0      	cmp	r0, r4
 801448a:	d0e3      	beq.n	8014454 <_malloc_r+0x64>
 801448c:	1a21      	subs	r1, r4, r0
 801448e:	4630      	mov	r0, r6
 8014490:	f000 f808 	bl	80144a4 <_sbrk_r>
 8014494:	3001      	adds	r0, #1
 8014496:	d1dd      	bne.n	8014454 <_malloc_r+0x64>
 8014498:	e7cf      	b.n	801443a <_malloc_r+0x4a>
 801449a:	bf00      	nop
 801449c:	200010e8 	.word	0x200010e8
 80144a0:	200010ec 	.word	0x200010ec

080144a4 <_sbrk_r>:
 80144a4:	b538      	push	{r3, r4, r5, lr}
 80144a6:	2300      	movs	r3, #0
 80144a8:	4d05      	ldr	r5, [pc, #20]	; (80144c0 <_sbrk_r+0x1c>)
 80144aa:	4604      	mov	r4, r0
 80144ac:	4608      	mov	r0, r1
 80144ae:	602b      	str	r3, [r5, #0]
 80144b0:	f7ec fdc6 	bl	8001040 <_sbrk>
 80144b4:	1c43      	adds	r3, r0, #1
 80144b6:	d102      	bne.n	80144be <_sbrk_r+0x1a>
 80144b8:	682b      	ldr	r3, [r5, #0]
 80144ba:	b103      	cbz	r3, 80144be <_sbrk_r+0x1a>
 80144bc:	6023      	str	r3, [r4, #0]
 80144be:	bd38      	pop	{r3, r4, r5, pc}
 80144c0:	2000563c 	.word	0x2000563c

080144c4 <strstr>:
 80144c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144c6:	780c      	ldrb	r4, [r1, #0]
 80144c8:	b164      	cbz	r4, 80144e4 <strstr+0x20>
 80144ca:	4603      	mov	r3, r0
 80144cc:	781a      	ldrb	r2, [r3, #0]
 80144ce:	4618      	mov	r0, r3
 80144d0:	1c5e      	adds	r6, r3, #1
 80144d2:	b90a      	cbnz	r2, 80144d8 <strstr+0x14>
 80144d4:	4610      	mov	r0, r2
 80144d6:	e005      	b.n	80144e4 <strstr+0x20>
 80144d8:	4294      	cmp	r4, r2
 80144da:	d108      	bne.n	80144ee <strstr+0x2a>
 80144dc:	460d      	mov	r5, r1
 80144de:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80144e2:	b902      	cbnz	r2, 80144e6 <strstr+0x22>
 80144e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144e6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80144ea:	4297      	cmp	r7, r2
 80144ec:	d0f7      	beq.n	80144de <strstr+0x1a>
 80144ee:	4633      	mov	r3, r6
 80144f0:	e7ec      	b.n	80144cc <strstr+0x8>

080144f2 <_vsniprintf_r>:
 80144f2:	b530      	push	{r4, r5, lr}
 80144f4:	1e14      	subs	r4, r2, #0
 80144f6:	4605      	mov	r5, r0
 80144f8:	b09b      	sub	sp, #108	; 0x6c
 80144fa:	4618      	mov	r0, r3
 80144fc:	da05      	bge.n	801450a <_vsniprintf_r+0x18>
 80144fe:	238b      	movs	r3, #139	; 0x8b
 8014500:	f04f 30ff 	mov.w	r0, #4294967295
 8014504:	602b      	str	r3, [r5, #0]
 8014506:	b01b      	add	sp, #108	; 0x6c
 8014508:	bd30      	pop	{r4, r5, pc}
 801450a:	f44f 7302 	mov.w	r3, #520	; 0x208
 801450e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014512:	bf0c      	ite	eq
 8014514:	4623      	moveq	r3, r4
 8014516:	f104 33ff 	addne.w	r3, r4, #4294967295
 801451a:	9302      	str	r3, [sp, #8]
 801451c:	9305      	str	r3, [sp, #20]
 801451e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014522:	4602      	mov	r2, r0
 8014524:	9100      	str	r1, [sp, #0]
 8014526:	9104      	str	r1, [sp, #16]
 8014528:	f8ad 300e 	strh.w	r3, [sp, #14]
 801452c:	4669      	mov	r1, sp
 801452e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014530:	4628      	mov	r0, r5
 8014532:	f000 f8f3 	bl	801471c <_svfiprintf_r>
 8014536:	1c43      	adds	r3, r0, #1
 8014538:	bfbc      	itt	lt
 801453a:	238b      	movlt	r3, #139	; 0x8b
 801453c:	602b      	strlt	r3, [r5, #0]
 801453e:	2c00      	cmp	r4, #0
 8014540:	d0e1      	beq.n	8014506 <_vsniprintf_r+0x14>
 8014542:	2200      	movs	r2, #0
 8014544:	9b00      	ldr	r3, [sp, #0]
 8014546:	701a      	strb	r2, [r3, #0]
 8014548:	e7dd      	b.n	8014506 <_vsniprintf_r+0x14>
	...

0801454c <vsniprintf>:
 801454c:	b507      	push	{r0, r1, r2, lr}
 801454e:	9300      	str	r3, [sp, #0]
 8014550:	4613      	mov	r3, r2
 8014552:	460a      	mov	r2, r1
 8014554:	4601      	mov	r1, r0
 8014556:	4803      	ldr	r0, [pc, #12]	; (8014564 <vsniprintf+0x18>)
 8014558:	6800      	ldr	r0, [r0, #0]
 801455a:	f7ff ffca 	bl	80144f2 <_vsniprintf_r>
 801455e:	b003      	add	sp, #12
 8014560:	f85d fb04 	ldr.w	pc, [sp], #4
 8014564:	2000001c 	.word	0x2000001c

08014568 <__malloc_lock>:
 8014568:	4801      	ldr	r0, [pc, #4]	; (8014570 <__malloc_lock+0x8>)
 801456a:	f000 bb6d 	b.w	8014c48 <__retarget_lock_acquire_recursive>
 801456e:	bf00      	nop
 8014570:	20005644 	.word	0x20005644

08014574 <__malloc_unlock>:
 8014574:	4801      	ldr	r0, [pc, #4]	; (801457c <__malloc_unlock+0x8>)
 8014576:	f000 bb68 	b.w	8014c4a <__retarget_lock_release_recursive>
 801457a:	bf00      	nop
 801457c:	20005644 	.word	0x20005644

08014580 <_free_r>:
 8014580:	b538      	push	{r3, r4, r5, lr}
 8014582:	4605      	mov	r5, r0
 8014584:	2900      	cmp	r1, #0
 8014586:	d043      	beq.n	8014610 <_free_r+0x90>
 8014588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801458c:	1f0c      	subs	r4, r1, #4
 801458e:	2b00      	cmp	r3, #0
 8014590:	bfb8      	it	lt
 8014592:	18e4      	addlt	r4, r4, r3
 8014594:	f7ff ffe8 	bl	8014568 <__malloc_lock>
 8014598:	4a1e      	ldr	r2, [pc, #120]	; (8014614 <_free_r+0x94>)
 801459a:	6813      	ldr	r3, [r2, #0]
 801459c:	4610      	mov	r0, r2
 801459e:	b933      	cbnz	r3, 80145ae <_free_r+0x2e>
 80145a0:	6063      	str	r3, [r4, #4]
 80145a2:	6014      	str	r4, [r2, #0]
 80145a4:	4628      	mov	r0, r5
 80145a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145aa:	f7ff bfe3 	b.w	8014574 <__malloc_unlock>
 80145ae:	42a3      	cmp	r3, r4
 80145b0:	d90a      	bls.n	80145c8 <_free_r+0x48>
 80145b2:	6821      	ldr	r1, [r4, #0]
 80145b4:	1862      	adds	r2, r4, r1
 80145b6:	4293      	cmp	r3, r2
 80145b8:	bf01      	itttt	eq
 80145ba:	681a      	ldreq	r2, [r3, #0]
 80145bc:	685b      	ldreq	r3, [r3, #4]
 80145be:	1852      	addeq	r2, r2, r1
 80145c0:	6022      	streq	r2, [r4, #0]
 80145c2:	6063      	str	r3, [r4, #4]
 80145c4:	6004      	str	r4, [r0, #0]
 80145c6:	e7ed      	b.n	80145a4 <_free_r+0x24>
 80145c8:	461a      	mov	r2, r3
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	b10b      	cbz	r3, 80145d2 <_free_r+0x52>
 80145ce:	42a3      	cmp	r3, r4
 80145d0:	d9fa      	bls.n	80145c8 <_free_r+0x48>
 80145d2:	6811      	ldr	r1, [r2, #0]
 80145d4:	1850      	adds	r0, r2, r1
 80145d6:	42a0      	cmp	r0, r4
 80145d8:	d10b      	bne.n	80145f2 <_free_r+0x72>
 80145da:	6820      	ldr	r0, [r4, #0]
 80145dc:	4401      	add	r1, r0
 80145de:	1850      	adds	r0, r2, r1
 80145e0:	4283      	cmp	r3, r0
 80145e2:	6011      	str	r1, [r2, #0]
 80145e4:	d1de      	bne.n	80145a4 <_free_r+0x24>
 80145e6:	6818      	ldr	r0, [r3, #0]
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	4401      	add	r1, r0
 80145ec:	6011      	str	r1, [r2, #0]
 80145ee:	6053      	str	r3, [r2, #4]
 80145f0:	e7d8      	b.n	80145a4 <_free_r+0x24>
 80145f2:	d902      	bls.n	80145fa <_free_r+0x7a>
 80145f4:	230c      	movs	r3, #12
 80145f6:	602b      	str	r3, [r5, #0]
 80145f8:	e7d4      	b.n	80145a4 <_free_r+0x24>
 80145fa:	6820      	ldr	r0, [r4, #0]
 80145fc:	1821      	adds	r1, r4, r0
 80145fe:	428b      	cmp	r3, r1
 8014600:	bf01      	itttt	eq
 8014602:	6819      	ldreq	r1, [r3, #0]
 8014604:	685b      	ldreq	r3, [r3, #4]
 8014606:	1809      	addeq	r1, r1, r0
 8014608:	6021      	streq	r1, [r4, #0]
 801460a:	6063      	str	r3, [r4, #4]
 801460c:	6054      	str	r4, [r2, #4]
 801460e:	e7c9      	b.n	80145a4 <_free_r+0x24>
 8014610:	bd38      	pop	{r3, r4, r5, pc}
 8014612:	bf00      	nop
 8014614:	200010e8 	.word	0x200010e8

08014618 <_realloc_r>:
 8014618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801461a:	4607      	mov	r7, r0
 801461c:	4614      	mov	r4, r2
 801461e:	460e      	mov	r6, r1
 8014620:	b921      	cbnz	r1, 801462c <_realloc_r+0x14>
 8014622:	4611      	mov	r1, r2
 8014624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014628:	f7ff bee2 	b.w	80143f0 <_malloc_r>
 801462c:	b922      	cbnz	r2, 8014638 <_realloc_r+0x20>
 801462e:	f7ff ffa7 	bl	8014580 <_free_r>
 8014632:	4625      	mov	r5, r4
 8014634:	4628      	mov	r0, r5
 8014636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014638:	f000 fb16 	bl	8014c68 <_malloc_usable_size_r>
 801463c:	42a0      	cmp	r0, r4
 801463e:	d20f      	bcs.n	8014660 <_realloc_r+0x48>
 8014640:	4621      	mov	r1, r4
 8014642:	4638      	mov	r0, r7
 8014644:	f7ff fed4 	bl	80143f0 <_malloc_r>
 8014648:	4605      	mov	r5, r0
 801464a:	2800      	cmp	r0, #0
 801464c:	d0f2      	beq.n	8014634 <_realloc_r+0x1c>
 801464e:	4631      	mov	r1, r6
 8014650:	4622      	mov	r2, r4
 8014652:	f7ff fe9d 	bl	8014390 <memcpy>
 8014656:	4631      	mov	r1, r6
 8014658:	4638      	mov	r0, r7
 801465a:	f7ff ff91 	bl	8014580 <_free_r>
 801465e:	e7e9      	b.n	8014634 <_realloc_r+0x1c>
 8014660:	4635      	mov	r5, r6
 8014662:	e7e7      	b.n	8014634 <_realloc_r+0x1c>

08014664 <__ssputs_r>:
 8014664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014668:	688e      	ldr	r6, [r1, #8]
 801466a:	4682      	mov	sl, r0
 801466c:	429e      	cmp	r6, r3
 801466e:	460c      	mov	r4, r1
 8014670:	4690      	mov	r8, r2
 8014672:	461f      	mov	r7, r3
 8014674:	d838      	bhi.n	80146e8 <__ssputs_r+0x84>
 8014676:	898a      	ldrh	r2, [r1, #12]
 8014678:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801467c:	d032      	beq.n	80146e4 <__ssputs_r+0x80>
 801467e:	6825      	ldr	r5, [r4, #0]
 8014680:	6909      	ldr	r1, [r1, #16]
 8014682:	3301      	adds	r3, #1
 8014684:	eba5 0901 	sub.w	r9, r5, r1
 8014688:	6965      	ldr	r5, [r4, #20]
 801468a:	444b      	add	r3, r9
 801468c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014694:	106d      	asrs	r5, r5, #1
 8014696:	429d      	cmp	r5, r3
 8014698:	bf38      	it	cc
 801469a:	461d      	movcc	r5, r3
 801469c:	0553      	lsls	r3, r2, #21
 801469e:	d531      	bpl.n	8014704 <__ssputs_r+0xa0>
 80146a0:	4629      	mov	r1, r5
 80146a2:	f7ff fea5 	bl	80143f0 <_malloc_r>
 80146a6:	4606      	mov	r6, r0
 80146a8:	b950      	cbnz	r0, 80146c0 <__ssputs_r+0x5c>
 80146aa:	230c      	movs	r3, #12
 80146ac:	f04f 30ff 	mov.w	r0, #4294967295
 80146b0:	f8ca 3000 	str.w	r3, [sl]
 80146b4:	89a3      	ldrh	r3, [r4, #12]
 80146b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146ba:	81a3      	strh	r3, [r4, #12]
 80146bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146c0:	464a      	mov	r2, r9
 80146c2:	6921      	ldr	r1, [r4, #16]
 80146c4:	f7ff fe64 	bl	8014390 <memcpy>
 80146c8:	89a3      	ldrh	r3, [r4, #12]
 80146ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80146ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146d2:	81a3      	strh	r3, [r4, #12]
 80146d4:	6126      	str	r6, [r4, #16]
 80146d6:	444e      	add	r6, r9
 80146d8:	6026      	str	r6, [r4, #0]
 80146da:	463e      	mov	r6, r7
 80146dc:	6165      	str	r5, [r4, #20]
 80146de:	eba5 0509 	sub.w	r5, r5, r9
 80146e2:	60a5      	str	r5, [r4, #8]
 80146e4:	42be      	cmp	r6, r7
 80146e6:	d900      	bls.n	80146ea <__ssputs_r+0x86>
 80146e8:	463e      	mov	r6, r7
 80146ea:	4632      	mov	r2, r6
 80146ec:	4641      	mov	r1, r8
 80146ee:	6820      	ldr	r0, [r4, #0]
 80146f0:	f7ff fe5c 	bl	80143ac <memmove>
 80146f4:	68a3      	ldr	r3, [r4, #8]
 80146f6:	6822      	ldr	r2, [r4, #0]
 80146f8:	1b9b      	subs	r3, r3, r6
 80146fa:	4432      	add	r2, r6
 80146fc:	2000      	movs	r0, #0
 80146fe:	60a3      	str	r3, [r4, #8]
 8014700:	6022      	str	r2, [r4, #0]
 8014702:	e7db      	b.n	80146bc <__ssputs_r+0x58>
 8014704:	462a      	mov	r2, r5
 8014706:	f7ff ff87 	bl	8014618 <_realloc_r>
 801470a:	4606      	mov	r6, r0
 801470c:	2800      	cmp	r0, #0
 801470e:	d1e1      	bne.n	80146d4 <__ssputs_r+0x70>
 8014710:	4650      	mov	r0, sl
 8014712:	6921      	ldr	r1, [r4, #16]
 8014714:	f7ff ff34 	bl	8014580 <_free_r>
 8014718:	e7c7      	b.n	80146aa <__ssputs_r+0x46>
	...

0801471c <_svfiprintf_r>:
 801471c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014720:	4698      	mov	r8, r3
 8014722:	898b      	ldrh	r3, [r1, #12]
 8014724:	4607      	mov	r7, r0
 8014726:	061b      	lsls	r3, r3, #24
 8014728:	460d      	mov	r5, r1
 801472a:	4614      	mov	r4, r2
 801472c:	b09d      	sub	sp, #116	; 0x74
 801472e:	d50e      	bpl.n	801474e <_svfiprintf_r+0x32>
 8014730:	690b      	ldr	r3, [r1, #16]
 8014732:	b963      	cbnz	r3, 801474e <_svfiprintf_r+0x32>
 8014734:	2140      	movs	r1, #64	; 0x40
 8014736:	f7ff fe5b 	bl	80143f0 <_malloc_r>
 801473a:	6028      	str	r0, [r5, #0]
 801473c:	6128      	str	r0, [r5, #16]
 801473e:	b920      	cbnz	r0, 801474a <_svfiprintf_r+0x2e>
 8014740:	230c      	movs	r3, #12
 8014742:	603b      	str	r3, [r7, #0]
 8014744:	f04f 30ff 	mov.w	r0, #4294967295
 8014748:	e0d1      	b.n	80148ee <_svfiprintf_r+0x1d2>
 801474a:	2340      	movs	r3, #64	; 0x40
 801474c:	616b      	str	r3, [r5, #20]
 801474e:	2300      	movs	r3, #0
 8014750:	9309      	str	r3, [sp, #36]	; 0x24
 8014752:	2320      	movs	r3, #32
 8014754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014758:	2330      	movs	r3, #48	; 0x30
 801475a:	f04f 0901 	mov.w	r9, #1
 801475e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014762:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014908 <_svfiprintf_r+0x1ec>
 8014766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801476a:	4623      	mov	r3, r4
 801476c:	469a      	mov	sl, r3
 801476e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014772:	b10a      	cbz	r2, 8014778 <_svfiprintf_r+0x5c>
 8014774:	2a25      	cmp	r2, #37	; 0x25
 8014776:	d1f9      	bne.n	801476c <_svfiprintf_r+0x50>
 8014778:	ebba 0b04 	subs.w	fp, sl, r4
 801477c:	d00b      	beq.n	8014796 <_svfiprintf_r+0x7a>
 801477e:	465b      	mov	r3, fp
 8014780:	4622      	mov	r2, r4
 8014782:	4629      	mov	r1, r5
 8014784:	4638      	mov	r0, r7
 8014786:	f7ff ff6d 	bl	8014664 <__ssputs_r>
 801478a:	3001      	adds	r0, #1
 801478c:	f000 80aa 	beq.w	80148e4 <_svfiprintf_r+0x1c8>
 8014790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014792:	445a      	add	r2, fp
 8014794:	9209      	str	r2, [sp, #36]	; 0x24
 8014796:	f89a 3000 	ldrb.w	r3, [sl]
 801479a:	2b00      	cmp	r3, #0
 801479c:	f000 80a2 	beq.w	80148e4 <_svfiprintf_r+0x1c8>
 80147a0:	2300      	movs	r3, #0
 80147a2:	f04f 32ff 	mov.w	r2, #4294967295
 80147a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147aa:	f10a 0a01 	add.w	sl, sl, #1
 80147ae:	9304      	str	r3, [sp, #16]
 80147b0:	9307      	str	r3, [sp, #28]
 80147b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80147b6:	931a      	str	r3, [sp, #104]	; 0x68
 80147b8:	4654      	mov	r4, sl
 80147ba:	2205      	movs	r2, #5
 80147bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147c0:	4851      	ldr	r0, [pc, #324]	; (8014908 <_svfiprintf_r+0x1ec>)
 80147c2:	f000 fa43 	bl	8014c4c <memchr>
 80147c6:	9a04      	ldr	r2, [sp, #16]
 80147c8:	b9d8      	cbnz	r0, 8014802 <_svfiprintf_r+0xe6>
 80147ca:	06d0      	lsls	r0, r2, #27
 80147cc:	bf44      	itt	mi
 80147ce:	2320      	movmi	r3, #32
 80147d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147d4:	0711      	lsls	r1, r2, #28
 80147d6:	bf44      	itt	mi
 80147d8:	232b      	movmi	r3, #43	; 0x2b
 80147da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147de:	f89a 3000 	ldrb.w	r3, [sl]
 80147e2:	2b2a      	cmp	r3, #42	; 0x2a
 80147e4:	d015      	beq.n	8014812 <_svfiprintf_r+0xf6>
 80147e6:	4654      	mov	r4, sl
 80147e8:	2000      	movs	r0, #0
 80147ea:	f04f 0c0a 	mov.w	ip, #10
 80147ee:	9a07      	ldr	r2, [sp, #28]
 80147f0:	4621      	mov	r1, r4
 80147f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80147f6:	3b30      	subs	r3, #48	; 0x30
 80147f8:	2b09      	cmp	r3, #9
 80147fa:	d94e      	bls.n	801489a <_svfiprintf_r+0x17e>
 80147fc:	b1b0      	cbz	r0, 801482c <_svfiprintf_r+0x110>
 80147fe:	9207      	str	r2, [sp, #28]
 8014800:	e014      	b.n	801482c <_svfiprintf_r+0x110>
 8014802:	eba0 0308 	sub.w	r3, r0, r8
 8014806:	fa09 f303 	lsl.w	r3, r9, r3
 801480a:	4313      	orrs	r3, r2
 801480c:	46a2      	mov	sl, r4
 801480e:	9304      	str	r3, [sp, #16]
 8014810:	e7d2      	b.n	80147b8 <_svfiprintf_r+0x9c>
 8014812:	9b03      	ldr	r3, [sp, #12]
 8014814:	1d19      	adds	r1, r3, #4
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	9103      	str	r1, [sp, #12]
 801481a:	2b00      	cmp	r3, #0
 801481c:	bfbb      	ittet	lt
 801481e:	425b      	neglt	r3, r3
 8014820:	f042 0202 	orrlt.w	r2, r2, #2
 8014824:	9307      	strge	r3, [sp, #28]
 8014826:	9307      	strlt	r3, [sp, #28]
 8014828:	bfb8      	it	lt
 801482a:	9204      	strlt	r2, [sp, #16]
 801482c:	7823      	ldrb	r3, [r4, #0]
 801482e:	2b2e      	cmp	r3, #46	; 0x2e
 8014830:	d10c      	bne.n	801484c <_svfiprintf_r+0x130>
 8014832:	7863      	ldrb	r3, [r4, #1]
 8014834:	2b2a      	cmp	r3, #42	; 0x2a
 8014836:	d135      	bne.n	80148a4 <_svfiprintf_r+0x188>
 8014838:	9b03      	ldr	r3, [sp, #12]
 801483a:	3402      	adds	r4, #2
 801483c:	1d1a      	adds	r2, r3, #4
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	9203      	str	r2, [sp, #12]
 8014842:	2b00      	cmp	r3, #0
 8014844:	bfb8      	it	lt
 8014846:	f04f 33ff 	movlt.w	r3, #4294967295
 801484a:	9305      	str	r3, [sp, #20]
 801484c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014918 <_svfiprintf_r+0x1fc>
 8014850:	2203      	movs	r2, #3
 8014852:	4650      	mov	r0, sl
 8014854:	7821      	ldrb	r1, [r4, #0]
 8014856:	f000 f9f9 	bl	8014c4c <memchr>
 801485a:	b140      	cbz	r0, 801486e <_svfiprintf_r+0x152>
 801485c:	2340      	movs	r3, #64	; 0x40
 801485e:	eba0 000a 	sub.w	r0, r0, sl
 8014862:	fa03 f000 	lsl.w	r0, r3, r0
 8014866:	9b04      	ldr	r3, [sp, #16]
 8014868:	3401      	adds	r4, #1
 801486a:	4303      	orrs	r3, r0
 801486c:	9304      	str	r3, [sp, #16]
 801486e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014872:	2206      	movs	r2, #6
 8014874:	4825      	ldr	r0, [pc, #148]	; (801490c <_svfiprintf_r+0x1f0>)
 8014876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801487a:	f000 f9e7 	bl	8014c4c <memchr>
 801487e:	2800      	cmp	r0, #0
 8014880:	d038      	beq.n	80148f4 <_svfiprintf_r+0x1d8>
 8014882:	4b23      	ldr	r3, [pc, #140]	; (8014910 <_svfiprintf_r+0x1f4>)
 8014884:	bb1b      	cbnz	r3, 80148ce <_svfiprintf_r+0x1b2>
 8014886:	9b03      	ldr	r3, [sp, #12]
 8014888:	3307      	adds	r3, #7
 801488a:	f023 0307 	bic.w	r3, r3, #7
 801488e:	3308      	adds	r3, #8
 8014890:	9303      	str	r3, [sp, #12]
 8014892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014894:	4433      	add	r3, r6
 8014896:	9309      	str	r3, [sp, #36]	; 0x24
 8014898:	e767      	b.n	801476a <_svfiprintf_r+0x4e>
 801489a:	460c      	mov	r4, r1
 801489c:	2001      	movs	r0, #1
 801489e:	fb0c 3202 	mla	r2, ip, r2, r3
 80148a2:	e7a5      	b.n	80147f0 <_svfiprintf_r+0xd4>
 80148a4:	2300      	movs	r3, #0
 80148a6:	f04f 0c0a 	mov.w	ip, #10
 80148aa:	4619      	mov	r1, r3
 80148ac:	3401      	adds	r4, #1
 80148ae:	9305      	str	r3, [sp, #20]
 80148b0:	4620      	mov	r0, r4
 80148b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148b6:	3a30      	subs	r2, #48	; 0x30
 80148b8:	2a09      	cmp	r2, #9
 80148ba:	d903      	bls.n	80148c4 <_svfiprintf_r+0x1a8>
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d0c5      	beq.n	801484c <_svfiprintf_r+0x130>
 80148c0:	9105      	str	r1, [sp, #20]
 80148c2:	e7c3      	b.n	801484c <_svfiprintf_r+0x130>
 80148c4:	4604      	mov	r4, r0
 80148c6:	2301      	movs	r3, #1
 80148c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80148cc:	e7f0      	b.n	80148b0 <_svfiprintf_r+0x194>
 80148ce:	ab03      	add	r3, sp, #12
 80148d0:	9300      	str	r3, [sp, #0]
 80148d2:	462a      	mov	r2, r5
 80148d4:	4638      	mov	r0, r7
 80148d6:	4b0f      	ldr	r3, [pc, #60]	; (8014914 <_svfiprintf_r+0x1f8>)
 80148d8:	a904      	add	r1, sp, #16
 80148da:	f3af 8000 	nop.w
 80148de:	1c42      	adds	r2, r0, #1
 80148e0:	4606      	mov	r6, r0
 80148e2:	d1d6      	bne.n	8014892 <_svfiprintf_r+0x176>
 80148e4:	89ab      	ldrh	r3, [r5, #12]
 80148e6:	065b      	lsls	r3, r3, #25
 80148e8:	f53f af2c 	bmi.w	8014744 <_svfiprintf_r+0x28>
 80148ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148ee:	b01d      	add	sp, #116	; 0x74
 80148f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f4:	ab03      	add	r3, sp, #12
 80148f6:	9300      	str	r3, [sp, #0]
 80148f8:	462a      	mov	r2, r5
 80148fa:	4638      	mov	r0, r7
 80148fc:	4b05      	ldr	r3, [pc, #20]	; (8014914 <_svfiprintf_r+0x1f8>)
 80148fe:	a904      	add	r1, sp, #16
 8014900:	f000 f87c 	bl	80149fc <_printf_i>
 8014904:	e7eb      	b.n	80148de <_svfiprintf_r+0x1c2>
 8014906:	bf00      	nop
 8014908:	08019c6c 	.word	0x08019c6c
 801490c:	08019c76 	.word	0x08019c76
 8014910:	00000000 	.word	0x00000000
 8014914:	08014665 	.word	0x08014665
 8014918:	08019c72 	.word	0x08019c72

0801491c <_printf_common>:
 801491c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014920:	4616      	mov	r6, r2
 8014922:	4699      	mov	r9, r3
 8014924:	688a      	ldr	r2, [r1, #8]
 8014926:	690b      	ldr	r3, [r1, #16]
 8014928:	4607      	mov	r7, r0
 801492a:	4293      	cmp	r3, r2
 801492c:	bfb8      	it	lt
 801492e:	4613      	movlt	r3, r2
 8014930:	6033      	str	r3, [r6, #0]
 8014932:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014936:	460c      	mov	r4, r1
 8014938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801493c:	b10a      	cbz	r2, 8014942 <_printf_common+0x26>
 801493e:	3301      	adds	r3, #1
 8014940:	6033      	str	r3, [r6, #0]
 8014942:	6823      	ldr	r3, [r4, #0]
 8014944:	0699      	lsls	r1, r3, #26
 8014946:	bf42      	ittt	mi
 8014948:	6833      	ldrmi	r3, [r6, #0]
 801494a:	3302      	addmi	r3, #2
 801494c:	6033      	strmi	r3, [r6, #0]
 801494e:	6825      	ldr	r5, [r4, #0]
 8014950:	f015 0506 	ands.w	r5, r5, #6
 8014954:	d106      	bne.n	8014964 <_printf_common+0x48>
 8014956:	f104 0a19 	add.w	sl, r4, #25
 801495a:	68e3      	ldr	r3, [r4, #12]
 801495c:	6832      	ldr	r2, [r6, #0]
 801495e:	1a9b      	subs	r3, r3, r2
 8014960:	42ab      	cmp	r3, r5
 8014962:	dc28      	bgt.n	80149b6 <_printf_common+0x9a>
 8014964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014968:	1e13      	subs	r3, r2, #0
 801496a:	6822      	ldr	r2, [r4, #0]
 801496c:	bf18      	it	ne
 801496e:	2301      	movne	r3, #1
 8014970:	0692      	lsls	r2, r2, #26
 8014972:	d42d      	bmi.n	80149d0 <_printf_common+0xb4>
 8014974:	4649      	mov	r1, r9
 8014976:	4638      	mov	r0, r7
 8014978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801497c:	47c0      	blx	r8
 801497e:	3001      	adds	r0, #1
 8014980:	d020      	beq.n	80149c4 <_printf_common+0xa8>
 8014982:	6823      	ldr	r3, [r4, #0]
 8014984:	68e5      	ldr	r5, [r4, #12]
 8014986:	f003 0306 	and.w	r3, r3, #6
 801498a:	2b04      	cmp	r3, #4
 801498c:	bf18      	it	ne
 801498e:	2500      	movne	r5, #0
 8014990:	6832      	ldr	r2, [r6, #0]
 8014992:	f04f 0600 	mov.w	r6, #0
 8014996:	68a3      	ldr	r3, [r4, #8]
 8014998:	bf08      	it	eq
 801499a:	1aad      	subeq	r5, r5, r2
 801499c:	6922      	ldr	r2, [r4, #16]
 801499e:	bf08      	it	eq
 80149a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80149a4:	4293      	cmp	r3, r2
 80149a6:	bfc4      	itt	gt
 80149a8:	1a9b      	subgt	r3, r3, r2
 80149aa:	18ed      	addgt	r5, r5, r3
 80149ac:	341a      	adds	r4, #26
 80149ae:	42b5      	cmp	r5, r6
 80149b0:	d11a      	bne.n	80149e8 <_printf_common+0xcc>
 80149b2:	2000      	movs	r0, #0
 80149b4:	e008      	b.n	80149c8 <_printf_common+0xac>
 80149b6:	2301      	movs	r3, #1
 80149b8:	4652      	mov	r2, sl
 80149ba:	4649      	mov	r1, r9
 80149bc:	4638      	mov	r0, r7
 80149be:	47c0      	blx	r8
 80149c0:	3001      	adds	r0, #1
 80149c2:	d103      	bne.n	80149cc <_printf_common+0xb0>
 80149c4:	f04f 30ff 	mov.w	r0, #4294967295
 80149c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149cc:	3501      	adds	r5, #1
 80149ce:	e7c4      	b.n	801495a <_printf_common+0x3e>
 80149d0:	2030      	movs	r0, #48	; 0x30
 80149d2:	18e1      	adds	r1, r4, r3
 80149d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80149d8:	1c5a      	adds	r2, r3, #1
 80149da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80149de:	4422      	add	r2, r4
 80149e0:	3302      	adds	r3, #2
 80149e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80149e6:	e7c5      	b.n	8014974 <_printf_common+0x58>
 80149e8:	2301      	movs	r3, #1
 80149ea:	4622      	mov	r2, r4
 80149ec:	4649      	mov	r1, r9
 80149ee:	4638      	mov	r0, r7
 80149f0:	47c0      	blx	r8
 80149f2:	3001      	adds	r0, #1
 80149f4:	d0e6      	beq.n	80149c4 <_printf_common+0xa8>
 80149f6:	3601      	adds	r6, #1
 80149f8:	e7d9      	b.n	80149ae <_printf_common+0x92>
	...

080149fc <_printf_i>:
 80149fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014a00:	460c      	mov	r4, r1
 8014a02:	7e27      	ldrb	r7, [r4, #24]
 8014a04:	4691      	mov	r9, r2
 8014a06:	2f78      	cmp	r7, #120	; 0x78
 8014a08:	4680      	mov	r8, r0
 8014a0a:	469a      	mov	sl, r3
 8014a0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014a0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014a12:	d807      	bhi.n	8014a24 <_printf_i+0x28>
 8014a14:	2f62      	cmp	r7, #98	; 0x62
 8014a16:	d80a      	bhi.n	8014a2e <_printf_i+0x32>
 8014a18:	2f00      	cmp	r7, #0
 8014a1a:	f000 80d9 	beq.w	8014bd0 <_printf_i+0x1d4>
 8014a1e:	2f58      	cmp	r7, #88	; 0x58
 8014a20:	f000 80a4 	beq.w	8014b6c <_printf_i+0x170>
 8014a24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014a28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014a2c:	e03a      	b.n	8014aa4 <_printf_i+0xa8>
 8014a2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014a32:	2b15      	cmp	r3, #21
 8014a34:	d8f6      	bhi.n	8014a24 <_printf_i+0x28>
 8014a36:	a001      	add	r0, pc, #4	; (adr r0, 8014a3c <_printf_i+0x40>)
 8014a38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014a3c:	08014a95 	.word	0x08014a95
 8014a40:	08014aa9 	.word	0x08014aa9
 8014a44:	08014a25 	.word	0x08014a25
 8014a48:	08014a25 	.word	0x08014a25
 8014a4c:	08014a25 	.word	0x08014a25
 8014a50:	08014a25 	.word	0x08014a25
 8014a54:	08014aa9 	.word	0x08014aa9
 8014a58:	08014a25 	.word	0x08014a25
 8014a5c:	08014a25 	.word	0x08014a25
 8014a60:	08014a25 	.word	0x08014a25
 8014a64:	08014a25 	.word	0x08014a25
 8014a68:	08014bb7 	.word	0x08014bb7
 8014a6c:	08014ad9 	.word	0x08014ad9
 8014a70:	08014b99 	.word	0x08014b99
 8014a74:	08014a25 	.word	0x08014a25
 8014a78:	08014a25 	.word	0x08014a25
 8014a7c:	08014bd9 	.word	0x08014bd9
 8014a80:	08014a25 	.word	0x08014a25
 8014a84:	08014ad9 	.word	0x08014ad9
 8014a88:	08014a25 	.word	0x08014a25
 8014a8c:	08014a25 	.word	0x08014a25
 8014a90:	08014ba1 	.word	0x08014ba1
 8014a94:	680b      	ldr	r3, [r1, #0]
 8014a96:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014a9a:	1d1a      	adds	r2, r3, #4
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	600a      	str	r2, [r1, #0]
 8014aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	e0a4      	b.n	8014bf2 <_printf_i+0x1f6>
 8014aa8:	6825      	ldr	r5, [r4, #0]
 8014aaa:	6808      	ldr	r0, [r1, #0]
 8014aac:	062e      	lsls	r6, r5, #24
 8014aae:	f100 0304 	add.w	r3, r0, #4
 8014ab2:	d50a      	bpl.n	8014aca <_printf_i+0xce>
 8014ab4:	6805      	ldr	r5, [r0, #0]
 8014ab6:	600b      	str	r3, [r1, #0]
 8014ab8:	2d00      	cmp	r5, #0
 8014aba:	da03      	bge.n	8014ac4 <_printf_i+0xc8>
 8014abc:	232d      	movs	r3, #45	; 0x2d
 8014abe:	426d      	negs	r5, r5
 8014ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ac4:	230a      	movs	r3, #10
 8014ac6:	485e      	ldr	r0, [pc, #376]	; (8014c40 <_printf_i+0x244>)
 8014ac8:	e019      	b.n	8014afe <_printf_i+0x102>
 8014aca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014ace:	6805      	ldr	r5, [r0, #0]
 8014ad0:	600b      	str	r3, [r1, #0]
 8014ad2:	bf18      	it	ne
 8014ad4:	b22d      	sxthne	r5, r5
 8014ad6:	e7ef      	b.n	8014ab8 <_printf_i+0xbc>
 8014ad8:	680b      	ldr	r3, [r1, #0]
 8014ada:	6825      	ldr	r5, [r4, #0]
 8014adc:	1d18      	adds	r0, r3, #4
 8014ade:	6008      	str	r0, [r1, #0]
 8014ae0:	0628      	lsls	r0, r5, #24
 8014ae2:	d501      	bpl.n	8014ae8 <_printf_i+0xec>
 8014ae4:	681d      	ldr	r5, [r3, #0]
 8014ae6:	e002      	b.n	8014aee <_printf_i+0xf2>
 8014ae8:	0669      	lsls	r1, r5, #25
 8014aea:	d5fb      	bpl.n	8014ae4 <_printf_i+0xe8>
 8014aec:	881d      	ldrh	r5, [r3, #0]
 8014aee:	2f6f      	cmp	r7, #111	; 0x6f
 8014af0:	bf0c      	ite	eq
 8014af2:	2308      	moveq	r3, #8
 8014af4:	230a      	movne	r3, #10
 8014af6:	4852      	ldr	r0, [pc, #328]	; (8014c40 <_printf_i+0x244>)
 8014af8:	2100      	movs	r1, #0
 8014afa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014afe:	6866      	ldr	r6, [r4, #4]
 8014b00:	2e00      	cmp	r6, #0
 8014b02:	bfa8      	it	ge
 8014b04:	6821      	ldrge	r1, [r4, #0]
 8014b06:	60a6      	str	r6, [r4, #8]
 8014b08:	bfa4      	itt	ge
 8014b0a:	f021 0104 	bicge.w	r1, r1, #4
 8014b0e:	6021      	strge	r1, [r4, #0]
 8014b10:	b90d      	cbnz	r5, 8014b16 <_printf_i+0x11a>
 8014b12:	2e00      	cmp	r6, #0
 8014b14:	d04d      	beq.n	8014bb2 <_printf_i+0x1b6>
 8014b16:	4616      	mov	r6, r2
 8014b18:	fbb5 f1f3 	udiv	r1, r5, r3
 8014b1c:	fb03 5711 	mls	r7, r3, r1, r5
 8014b20:	5dc7      	ldrb	r7, [r0, r7]
 8014b22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014b26:	462f      	mov	r7, r5
 8014b28:	42bb      	cmp	r3, r7
 8014b2a:	460d      	mov	r5, r1
 8014b2c:	d9f4      	bls.n	8014b18 <_printf_i+0x11c>
 8014b2e:	2b08      	cmp	r3, #8
 8014b30:	d10b      	bne.n	8014b4a <_printf_i+0x14e>
 8014b32:	6823      	ldr	r3, [r4, #0]
 8014b34:	07df      	lsls	r7, r3, #31
 8014b36:	d508      	bpl.n	8014b4a <_printf_i+0x14e>
 8014b38:	6923      	ldr	r3, [r4, #16]
 8014b3a:	6861      	ldr	r1, [r4, #4]
 8014b3c:	4299      	cmp	r1, r3
 8014b3e:	bfde      	ittt	le
 8014b40:	2330      	movle	r3, #48	; 0x30
 8014b42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014b46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014b4a:	1b92      	subs	r2, r2, r6
 8014b4c:	6122      	str	r2, [r4, #16]
 8014b4e:	464b      	mov	r3, r9
 8014b50:	4621      	mov	r1, r4
 8014b52:	4640      	mov	r0, r8
 8014b54:	f8cd a000 	str.w	sl, [sp]
 8014b58:	aa03      	add	r2, sp, #12
 8014b5a:	f7ff fedf 	bl	801491c <_printf_common>
 8014b5e:	3001      	adds	r0, #1
 8014b60:	d14c      	bne.n	8014bfc <_printf_i+0x200>
 8014b62:	f04f 30ff 	mov.w	r0, #4294967295
 8014b66:	b004      	add	sp, #16
 8014b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b6c:	4834      	ldr	r0, [pc, #208]	; (8014c40 <_printf_i+0x244>)
 8014b6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014b72:	680e      	ldr	r6, [r1, #0]
 8014b74:	6823      	ldr	r3, [r4, #0]
 8014b76:	f856 5b04 	ldr.w	r5, [r6], #4
 8014b7a:	061f      	lsls	r7, r3, #24
 8014b7c:	600e      	str	r6, [r1, #0]
 8014b7e:	d514      	bpl.n	8014baa <_printf_i+0x1ae>
 8014b80:	07d9      	lsls	r1, r3, #31
 8014b82:	bf44      	itt	mi
 8014b84:	f043 0320 	orrmi.w	r3, r3, #32
 8014b88:	6023      	strmi	r3, [r4, #0]
 8014b8a:	b91d      	cbnz	r5, 8014b94 <_printf_i+0x198>
 8014b8c:	6823      	ldr	r3, [r4, #0]
 8014b8e:	f023 0320 	bic.w	r3, r3, #32
 8014b92:	6023      	str	r3, [r4, #0]
 8014b94:	2310      	movs	r3, #16
 8014b96:	e7af      	b.n	8014af8 <_printf_i+0xfc>
 8014b98:	6823      	ldr	r3, [r4, #0]
 8014b9a:	f043 0320 	orr.w	r3, r3, #32
 8014b9e:	6023      	str	r3, [r4, #0]
 8014ba0:	2378      	movs	r3, #120	; 0x78
 8014ba2:	4828      	ldr	r0, [pc, #160]	; (8014c44 <_printf_i+0x248>)
 8014ba4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014ba8:	e7e3      	b.n	8014b72 <_printf_i+0x176>
 8014baa:	065e      	lsls	r6, r3, #25
 8014bac:	bf48      	it	mi
 8014bae:	b2ad      	uxthmi	r5, r5
 8014bb0:	e7e6      	b.n	8014b80 <_printf_i+0x184>
 8014bb2:	4616      	mov	r6, r2
 8014bb4:	e7bb      	b.n	8014b2e <_printf_i+0x132>
 8014bb6:	680b      	ldr	r3, [r1, #0]
 8014bb8:	6826      	ldr	r6, [r4, #0]
 8014bba:	1d1d      	adds	r5, r3, #4
 8014bbc:	6960      	ldr	r0, [r4, #20]
 8014bbe:	600d      	str	r5, [r1, #0]
 8014bc0:	0635      	lsls	r5, r6, #24
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	d501      	bpl.n	8014bca <_printf_i+0x1ce>
 8014bc6:	6018      	str	r0, [r3, #0]
 8014bc8:	e002      	b.n	8014bd0 <_printf_i+0x1d4>
 8014bca:	0671      	lsls	r1, r6, #25
 8014bcc:	d5fb      	bpl.n	8014bc6 <_printf_i+0x1ca>
 8014bce:	8018      	strh	r0, [r3, #0]
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	4616      	mov	r6, r2
 8014bd4:	6123      	str	r3, [r4, #16]
 8014bd6:	e7ba      	b.n	8014b4e <_printf_i+0x152>
 8014bd8:	680b      	ldr	r3, [r1, #0]
 8014bda:	1d1a      	adds	r2, r3, #4
 8014bdc:	600a      	str	r2, [r1, #0]
 8014bde:	681e      	ldr	r6, [r3, #0]
 8014be0:	2100      	movs	r1, #0
 8014be2:	4630      	mov	r0, r6
 8014be4:	6862      	ldr	r2, [r4, #4]
 8014be6:	f000 f831 	bl	8014c4c <memchr>
 8014bea:	b108      	cbz	r0, 8014bf0 <_printf_i+0x1f4>
 8014bec:	1b80      	subs	r0, r0, r6
 8014bee:	6060      	str	r0, [r4, #4]
 8014bf0:	6863      	ldr	r3, [r4, #4]
 8014bf2:	6123      	str	r3, [r4, #16]
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bfa:	e7a8      	b.n	8014b4e <_printf_i+0x152>
 8014bfc:	4632      	mov	r2, r6
 8014bfe:	4649      	mov	r1, r9
 8014c00:	4640      	mov	r0, r8
 8014c02:	6923      	ldr	r3, [r4, #16]
 8014c04:	47d0      	blx	sl
 8014c06:	3001      	adds	r0, #1
 8014c08:	d0ab      	beq.n	8014b62 <_printf_i+0x166>
 8014c0a:	6823      	ldr	r3, [r4, #0]
 8014c0c:	079b      	lsls	r3, r3, #30
 8014c0e:	d413      	bmi.n	8014c38 <_printf_i+0x23c>
 8014c10:	68e0      	ldr	r0, [r4, #12]
 8014c12:	9b03      	ldr	r3, [sp, #12]
 8014c14:	4298      	cmp	r0, r3
 8014c16:	bfb8      	it	lt
 8014c18:	4618      	movlt	r0, r3
 8014c1a:	e7a4      	b.n	8014b66 <_printf_i+0x16a>
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	4632      	mov	r2, r6
 8014c20:	4649      	mov	r1, r9
 8014c22:	4640      	mov	r0, r8
 8014c24:	47d0      	blx	sl
 8014c26:	3001      	adds	r0, #1
 8014c28:	d09b      	beq.n	8014b62 <_printf_i+0x166>
 8014c2a:	3501      	adds	r5, #1
 8014c2c:	68e3      	ldr	r3, [r4, #12]
 8014c2e:	9903      	ldr	r1, [sp, #12]
 8014c30:	1a5b      	subs	r3, r3, r1
 8014c32:	42ab      	cmp	r3, r5
 8014c34:	dcf2      	bgt.n	8014c1c <_printf_i+0x220>
 8014c36:	e7eb      	b.n	8014c10 <_printf_i+0x214>
 8014c38:	2500      	movs	r5, #0
 8014c3a:	f104 0619 	add.w	r6, r4, #25
 8014c3e:	e7f5      	b.n	8014c2c <_printf_i+0x230>
 8014c40:	08019c7d 	.word	0x08019c7d
 8014c44:	08019c8e 	.word	0x08019c8e

08014c48 <__retarget_lock_acquire_recursive>:
 8014c48:	4770      	bx	lr

08014c4a <__retarget_lock_release_recursive>:
 8014c4a:	4770      	bx	lr

08014c4c <memchr>:
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	b510      	push	{r4, lr}
 8014c50:	b2c9      	uxtb	r1, r1
 8014c52:	4402      	add	r2, r0
 8014c54:	4293      	cmp	r3, r2
 8014c56:	4618      	mov	r0, r3
 8014c58:	d101      	bne.n	8014c5e <memchr+0x12>
 8014c5a:	2000      	movs	r0, #0
 8014c5c:	e003      	b.n	8014c66 <memchr+0x1a>
 8014c5e:	7804      	ldrb	r4, [r0, #0]
 8014c60:	3301      	adds	r3, #1
 8014c62:	428c      	cmp	r4, r1
 8014c64:	d1f6      	bne.n	8014c54 <memchr+0x8>
 8014c66:	bd10      	pop	{r4, pc}

08014c68 <_malloc_usable_size_r>:
 8014c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c6c:	1f18      	subs	r0, r3, #4
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	bfbc      	itt	lt
 8014c72:	580b      	ldrlt	r3, [r1, r0]
 8014c74:	18c0      	addlt	r0, r0, r3
 8014c76:	4770      	bx	lr

08014c78 <ceil>:
 8014c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c7c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8014c80:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8014c84:	2e13      	cmp	r6, #19
 8014c86:	4602      	mov	r2, r0
 8014c88:	460b      	mov	r3, r1
 8014c8a:	4607      	mov	r7, r0
 8014c8c:	460c      	mov	r4, r1
 8014c8e:	4605      	mov	r5, r0
 8014c90:	dc31      	bgt.n	8014cf6 <ceil+0x7e>
 8014c92:	2e00      	cmp	r6, #0
 8014c94:	da12      	bge.n	8014cbc <ceil+0x44>
 8014c96:	a334      	add	r3, pc, #208	; (adr r3, 8014d68 <ceil+0xf0>)
 8014c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c9c:	f7eb fadc 	bl	8000258 <__adddf3>
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	f7eb ff1e 	bl	8000ae4 <__aeabi_dcmpgt>
 8014ca8:	b128      	cbz	r0, 8014cb6 <ceil+0x3e>
 8014caa:	2c00      	cmp	r4, #0
 8014cac:	db56      	blt.n	8014d5c <ceil+0xe4>
 8014cae:	433c      	orrs	r4, r7
 8014cb0:	d058      	beq.n	8014d64 <ceil+0xec>
 8014cb2:	2500      	movs	r5, #0
 8014cb4:	4c2e      	ldr	r4, [pc, #184]	; (8014d70 <ceil+0xf8>)
 8014cb6:	4623      	mov	r3, r4
 8014cb8:	462f      	mov	r7, r5
 8014cba:	e025      	b.n	8014d08 <ceil+0x90>
 8014cbc:	4a2d      	ldr	r2, [pc, #180]	; (8014d74 <ceil+0xfc>)
 8014cbe:	fa42 f806 	asr.w	r8, r2, r6
 8014cc2:	ea01 0208 	and.w	r2, r1, r8
 8014cc6:	4302      	orrs	r2, r0
 8014cc8:	d01e      	beq.n	8014d08 <ceil+0x90>
 8014cca:	a327      	add	r3, pc, #156	; (adr r3, 8014d68 <ceil+0xf0>)
 8014ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd0:	f7eb fac2 	bl	8000258 <__adddf3>
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	f7eb ff04 	bl	8000ae4 <__aeabi_dcmpgt>
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d0ea      	beq.n	8014cb6 <ceil+0x3e>
 8014ce0:	2c00      	cmp	r4, #0
 8014ce2:	bfc2      	ittt	gt
 8014ce4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8014ce8:	fa43 f606 	asrgt.w	r6, r3, r6
 8014cec:	19a4      	addgt	r4, r4, r6
 8014cee:	2500      	movs	r5, #0
 8014cf0:	ea24 0408 	bic.w	r4, r4, r8
 8014cf4:	e7df      	b.n	8014cb6 <ceil+0x3e>
 8014cf6:	2e33      	cmp	r6, #51	; 0x33
 8014cf8:	dd0a      	ble.n	8014d10 <ceil+0x98>
 8014cfa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014cfe:	d103      	bne.n	8014d08 <ceil+0x90>
 8014d00:	f7eb faaa 	bl	8000258 <__adddf3>
 8014d04:	4607      	mov	r7, r0
 8014d06:	460b      	mov	r3, r1
 8014d08:	4638      	mov	r0, r7
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d10:	f04f 32ff 	mov.w	r2, #4294967295
 8014d14:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8014d18:	fa22 f808 	lsr.w	r8, r2, r8
 8014d1c:	ea18 0f00 	tst.w	r8, r0
 8014d20:	d0f2      	beq.n	8014d08 <ceil+0x90>
 8014d22:	a311      	add	r3, pc, #68	; (adr r3, 8014d68 <ceil+0xf0>)
 8014d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d28:	f7eb fa96 	bl	8000258 <__adddf3>
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	2300      	movs	r3, #0
 8014d30:	f7eb fed8 	bl	8000ae4 <__aeabi_dcmpgt>
 8014d34:	2800      	cmp	r0, #0
 8014d36:	d0be      	beq.n	8014cb6 <ceil+0x3e>
 8014d38:	2c00      	cmp	r4, #0
 8014d3a:	dd02      	ble.n	8014d42 <ceil+0xca>
 8014d3c:	2e14      	cmp	r6, #20
 8014d3e:	d103      	bne.n	8014d48 <ceil+0xd0>
 8014d40:	3401      	adds	r4, #1
 8014d42:	ea25 0508 	bic.w	r5, r5, r8
 8014d46:	e7b6      	b.n	8014cb6 <ceil+0x3e>
 8014d48:	2301      	movs	r3, #1
 8014d4a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014d4e:	fa03 f606 	lsl.w	r6, r3, r6
 8014d52:	4435      	add	r5, r6
 8014d54:	42bd      	cmp	r5, r7
 8014d56:	bf38      	it	cc
 8014d58:	18e4      	addcc	r4, r4, r3
 8014d5a:	e7f2      	b.n	8014d42 <ceil+0xca>
 8014d5c:	2500      	movs	r5, #0
 8014d5e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014d62:	e7a8      	b.n	8014cb6 <ceil+0x3e>
 8014d64:	4625      	mov	r5, r4
 8014d66:	e7a6      	b.n	8014cb6 <ceil+0x3e>
 8014d68:	8800759c 	.word	0x8800759c
 8014d6c:	7e37e43c 	.word	0x7e37e43c
 8014d70:	3ff00000 	.word	0x3ff00000
 8014d74:	000fffff 	.word	0x000fffff

08014d78 <floor>:
 8014d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d7c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8014d80:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8014d84:	2e13      	cmp	r6, #19
 8014d86:	4602      	mov	r2, r0
 8014d88:	460b      	mov	r3, r1
 8014d8a:	4607      	mov	r7, r0
 8014d8c:	460c      	mov	r4, r1
 8014d8e:	4605      	mov	r5, r0
 8014d90:	dc34      	bgt.n	8014dfc <floor+0x84>
 8014d92:	2e00      	cmp	r6, #0
 8014d94:	da15      	bge.n	8014dc2 <floor+0x4a>
 8014d96:	a334      	add	r3, pc, #208	; (adr r3, 8014e68 <floor+0xf0>)
 8014d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9c:	f7eb fa5c 	bl	8000258 <__adddf3>
 8014da0:	2200      	movs	r2, #0
 8014da2:	2300      	movs	r3, #0
 8014da4:	f7eb fe9e 	bl	8000ae4 <__aeabi_dcmpgt>
 8014da8:	b140      	cbz	r0, 8014dbc <floor+0x44>
 8014daa:	2c00      	cmp	r4, #0
 8014dac:	da59      	bge.n	8014e62 <floor+0xea>
 8014dae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014db2:	ea57 0503 	orrs.w	r5, r7, r3
 8014db6:	d001      	beq.n	8014dbc <floor+0x44>
 8014db8:	2500      	movs	r5, #0
 8014dba:	4c2d      	ldr	r4, [pc, #180]	; (8014e70 <floor+0xf8>)
 8014dbc:	4623      	mov	r3, r4
 8014dbe:	462f      	mov	r7, r5
 8014dc0:	e025      	b.n	8014e0e <floor+0x96>
 8014dc2:	4a2c      	ldr	r2, [pc, #176]	; (8014e74 <floor+0xfc>)
 8014dc4:	fa42 f806 	asr.w	r8, r2, r6
 8014dc8:	ea01 0208 	and.w	r2, r1, r8
 8014dcc:	4302      	orrs	r2, r0
 8014dce:	d01e      	beq.n	8014e0e <floor+0x96>
 8014dd0:	a325      	add	r3, pc, #148	; (adr r3, 8014e68 <floor+0xf0>)
 8014dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd6:	f7eb fa3f 	bl	8000258 <__adddf3>
 8014dda:	2200      	movs	r2, #0
 8014ddc:	2300      	movs	r3, #0
 8014dde:	f7eb fe81 	bl	8000ae4 <__aeabi_dcmpgt>
 8014de2:	2800      	cmp	r0, #0
 8014de4:	d0ea      	beq.n	8014dbc <floor+0x44>
 8014de6:	2c00      	cmp	r4, #0
 8014de8:	bfbe      	ittt	lt
 8014dea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014dee:	fa43 f606 	asrlt.w	r6, r3, r6
 8014df2:	19a4      	addlt	r4, r4, r6
 8014df4:	2500      	movs	r5, #0
 8014df6:	ea24 0408 	bic.w	r4, r4, r8
 8014dfa:	e7df      	b.n	8014dbc <floor+0x44>
 8014dfc:	2e33      	cmp	r6, #51	; 0x33
 8014dfe:	dd0a      	ble.n	8014e16 <floor+0x9e>
 8014e00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014e04:	d103      	bne.n	8014e0e <floor+0x96>
 8014e06:	f7eb fa27 	bl	8000258 <__adddf3>
 8014e0a:	4607      	mov	r7, r0
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	4638      	mov	r0, r7
 8014e10:	4619      	mov	r1, r3
 8014e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e16:	f04f 32ff 	mov.w	r2, #4294967295
 8014e1a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8014e1e:	fa22 f808 	lsr.w	r8, r2, r8
 8014e22:	ea18 0f00 	tst.w	r8, r0
 8014e26:	d0f2      	beq.n	8014e0e <floor+0x96>
 8014e28:	a30f      	add	r3, pc, #60	; (adr r3, 8014e68 <floor+0xf0>)
 8014e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2e:	f7eb fa13 	bl	8000258 <__adddf3>
 8014e32:	2200      	movs	r2, #0
 8014e34:	2300      	movs	r3, #0
 8014e36:	f7eb fe55 	bl	8000ae4 <__aeabi_dcmpgt>
 8014e3a:	2800      	cmp	r0, #0
 8014e3c:	d0be      	beq.n	8014dbc <floor+0x44>
 8014e3e:	2c00      	cmp	r4, #0
 8014e40:	da02      	bge.n	8014e48 <floor+0xd0>
 8014e42:	2e14      	cmp	r6, #20
 8014e44:	d103      	bne.n	8014e4e <floor+0xd6>
 8014e46:	3401      	adds	r4, #1
 8014e48:	ea25 0508 	bic.w	r5, r5, r8
 8014e4c:	e7b6      	b.n	8014dbc <floor+0x44>
 8014e4e:	2301      	movs	r3, #1
 8014e50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014e54:	fa03 f606 	lsl.w	r6, r3, r6
 8014e58:	4435      	add	r5, r6
 8014e5a:	42bd      	cmp	r5, r7
 8014e5c:	bf38      	it	cc
 8014e5e:	18e4      	addcc	r4, r4, r3
 8014e60:	e7f2      	b.n	8014e48 <floor+0xd0>
 8014e62:	2500      	movs	r5, #0
 8014e64:	462c      	mov	r4, r5
 8014e66:	e7a9      	b.n	8014dbc <floor+0x44>
 8014e68:	8800759c 	.word	0x8800759c
 8014e6c:	7e37e43c 	.word	0x7e37e43c
 8014e70:	bff00000 	.word	0xbff00000
 8014e74:	000fffff 	.word	0x000fffff

08014e78 <rint>:
 8014e78:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8014e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e7e:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8014e82:	2f13      	cmp	r7, #19
 8014e84:	4602      	mov	r2, r0
 8014e86:	460b      	mov	r3, r1
 8014e88:	460c      	mov	r4, r1
 8014e8a:	4605      	mov	r5, r0
 8014e8c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8014e90:	dc59      	bgt.n	8014f46 <rint+0xce>
 8014e92:	2f00      	cmp	r7, #0
 8014e94:	da2a      	bge.n	8014eec <rint+0x74>
 8014e96:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014e9a:	4301      	orrs	r1, r0
 8014e9c:	d022      	beq.n	8014ee4 <rint+0x6c>
 8014e9e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8014ea2:	4301      	orrs	r1, r0
 8014ea4:	424d      	negs	r5, r1
 8014ea6:	430d      	orrs	r5, r1
 8014ea8:	4936      	ldr	r1, [pc, #216]	; (8014f84 <rint+0x10c>)
 8014eaa:	0c5c      	lsrs	r4, r3, #17
 8014eac:	0b2d      	lsrs	r5, r5, #12
 8014eae:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8014eb2:	0464      	lsls	r4, r4, #17
 8014eb4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8014eb8:	ea45 0304 	orr.w	r3, r5, r4
 8014ebc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	4629      	mov	r1, r5
 8014ec4:	f7eb f9c8 	bl	8000258 <__adddf3>
 8014ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8014ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ed0:	462b      	mov	r3, r5
 8014ed2:	4622      	mov	r2, r4
 8014ed4:	f7eb f9be 	bl	8000254 <__aeabi_dsub>
 8014ed8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014edc:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	460b      	mov	r3, r1
 8014ee4:	4610      	mov	r0, r2
 8014ee6:	4619      	mov	r1, r3
 8014ee8:	b003      	add	sp, #12
 8014eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014eec:	4926      	ldr	r1, [pc, #152]	; (8014f88 <rint+0x110>)
 8014eee:	4139      	asrs	r1, r7
 8014ef0:	ea03 0001 	and.w	r0, r3, r1
 8014ef4:	4310      	orrs	r0, r2
 8014ef6:	d0f5      	beq.n	8014ee4 <rint+0x6c>
 8014ef8:	084b      	lsrs	r3, r1, #1
 8014efa:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8014efe:	ea52 0501 	orrs.w	r5, r2, r1
 8014f02:	d00c      	beq.n	8014f1e <rint+0xa6>
 8014f04:	ea24 0303 	bic.w	r3, r4, r3
 8014f08:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8014f0c:	2f13      	cmp	r7, #19
 8014f0e:	bf0c      	ite	eq
 8014f10:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8014f14:	2500      	movne	r5, #0
 8014f16:	fa44 f707 	asr.w	r7, r4, r7
 8014f1a:	ea43 0407 	orr.w	r4, r3, r7
 8014f1e:	4919      	ldr	r1, [pc, #100]	; (8014f84 <rint+0x10c>)
 8014f20:	4623      	mov	r3, r4
 8014f22:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8014f26:	462a      	mov	r2, r5
 8014f28:	e9d6 4500 	ldrd	r4, r5, [r6]
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	4629      	mov	r1, r5
 8014f30:	f7eb f992 	bl	8000258 <__adddf3>
 8014f34:	e9cd 0100 	strd	r0, r1, [sp]
 8014f38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f3c:	4622      	mov	r2, r4
 8014f3e:	462b      	mov	r3, r5
 8014f40:	f7eb f988 	bl	8000254 <__aeabi_dsub>
 8014f44:	e7cc      	b.n	8014ee0 <rint+0x68>
 8014f46:	2f33      	cmp	r7, #51	; 0x33
 8014f48:	dd05      	ble.n	8014f56 <rint+0xde>
 8014f4a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8014f4e:	d1c9      	bne.n	8014ee4 <rint+0x6c>
 8014f50:	f7eb f982 	bl	8000258 <__adddf3>
 8014f54:	e7c4      	b.n	8014ee0 <rint+0x68>
 8014f56:	f04f 31ff 	mov.w	r1, #4294967295
 8014f5a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8014f5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8014f62:	4208      	tst	r0, r1
 8014f64:	d0be      	beq.n	8014ee4 <rint+0x6c>
 8014f66:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8014f6a:	bf18      	it	ne
 8014f6c:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8014f70:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8014f74:	bf1e      	ittt	ne
 8014f76:	ea20 0303 	bicne.w	r3, r0, r3
 8014f7a:	fa45 fc0c 	asrne.w	ip, r5, ip
 8014f7e:	ea43 050c 	orrne.w	r5, r3, ip
 8014f82:	e7cc      	b.n	8014f1e <rint+0xa6>
 8014f84:	08019ca0 	.word	0x08019ca0
 8014f88:	000fffff 	.word	0x000fffff

08014f8c <_init>:
 8014f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f8e:	bf00      	nop
 8014f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f92:	bc08      	pop	{r3}
 8014f94:	469e      	mov	lr, r3
 8014f96:	4770      	bx	lr

08014f98 <_fini>:
 8014f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f9a:	bf00      	nop
 8014f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f9e:	bc08      	pop	{r3}
 8014fa0:	469e      	mov	lr, r3
 8014fa2:	4770      	bx	lr
